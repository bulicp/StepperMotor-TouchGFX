
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00024454  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000034b8  900246f4  900246f4  000446f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000004b0  90027bac  90027bac  00047bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  9002805c  9002805c  001ab924  2**0
                  CONTENTS
  6 .ARM          00000000  9002805c  9002805c  001ab924  2**0
                  CONTENTS
  7 .preinit_array 00000000  9002805c  9002805c  001ab924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  9002805c  9002805c  0004805c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  90028078  90028078  00048078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000144  24000000  90028080  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000144  900281c4  00050144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00020cf4  24005b48  9002dbc4  00055b48  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  2402683c  9002dbc4  0005683c  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  001ab924  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 0000abc8  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 0000007c  9020abc8  9020abc8  0006abc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 00140ce0  9020ac44  9020ac44  0006ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  001b0000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  001b0000  2**2
                  ALLOC
 20 .comment      000000c2  00000000  00000000  001ab952  2**0
                  CONTENTS, READONLY
 21 .debug_line   0007188c  00000000  00000000  001aba14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0021d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_info   000c2804  00000000  00000000  0021d306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_abbrev 00015b4d  00000000  00000000  002dfb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 000030d0  00000000  00000000  002f5658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0019c4d9  00000000  00000000  002f8728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_rnglists 00006089  00000000  00000000  00494c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_macro  00048829  00000000  00000000  0049ac8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000a218  00000000  00000000  004e34b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_loclists 0003643c  00000000  00000000  004ed6cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b48 	.word	0x24005b48
900002bc:	00000000 	.word	0x00000000
900002c0:	900246dc 	.word	0x900246dc

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b4c 	.word	0x24005b4c
900002dc:	900246dc 	.word	0x900246dc

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000380:	f8df d034 	ldr.w	sp, [pc, #52]	; 900003b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
90000384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
90000386:	e003      	b.n	90000390 <LoopCopyDataInit>

90000388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
90000388:	4b0c      	ldr	r3, [pc, #48]	; (900003bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
9000038a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
9000038c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
9000038e:	3104      	adds	r1, #4

90000390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
90000390:	480b      	ldr	r0, [pc, #44]	; (900003c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
90000392:	4b0c      	ldr	r3, [pc, #48]	; (900003c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
90000394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
90000396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
90000398:	d3f6      	bcc.n	90000388 <CopyDataInit>
  ldr  r2, =_sbss
9000039a:	4a0b      	ldr	r2, [pc, #44]	; (900003c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
9000039c:	e002      	b.n	900003a4 <LoopFillZerobss>

9000039e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
9000039e:	2300      	movs	r3, #0
  str  r3, [r2], #4
900003a0:	f842 3b04 	str.w	r3, [r2], #4

900003a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900003a4:	4b09      	ldr	r3, [pc, #36]	; (900003cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
900003a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
900003a8:	d3f9      	bcc.n	9000039e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900003aa:	f006 fe5f 	bl	9000706c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900003ae:	f023 fcaf 	bl	90023d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900003b2:	f003 feb5 	bl	90004120 <main>
  bx  lr    
900003b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900003b8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900003bc:	90028080 	.word	0x90028080
  ldr  r0, =_sdata
900003c0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900003c4:	24000144 	.word	0x24000144
  ldr  r2, =_sbss
900003c8:	24005b48 	.word	0x24005b48
  ldr  r3, = _ebss
900003cc:	2402683c 	.word	0x2402683c

900003d0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900003d0:	e7fe      	b.n	900003d0 <ADC3_IRQHandler>
	...

900003d4 <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900003d4:	4770      	bx	lr
900003d6:	bf00      	nop

900003d8 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900003d8:	4770      	bx	lr
900003da:	bf00      	nop

900003dc <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900003dc:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900003de:	f001 feeb 	bl	900021b8 <touchgfx_components_init>
  touchgfx_init();
}
900003e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900003e6:	f001 be6f 	b.w	900020c8 <touchgfx_init>
900003ea:	bf00      	nop

900003ec <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
900003ec:	f001 bee6 	b.w	900021bc <touchgfx_taskEntry>

900003f0 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
900003f0:	6840      	ldr	r0, [r0, #4]
    }
900003f2:	4770      	bx	lr

900003f4 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
900003f4:	6041      	str	r1, [r0, #4]
    }
900003f6:	4770      	bx	lr

900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
900003f8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
900003fc:	4b08      	ldr	r3, [pc, #32]	; (90000420 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
900003fe:	4a09      	ldr	r2, [pc, #36]	; (90000424 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000400:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
90000404:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000408:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
9000040c:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000410:	430a      	orrs	r2, r1
90000412:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
90000416:	681a      	ldr	r2, [r3, #0]
90000418:	f042 0201 	orr.w	r2, r2, #1
9000041c:	601a      	str	r2, [r3, #0]
}
9000041e:	4770      	bx	lr
90000420:	e0001000 	.word	0xe0001000
90000424:	c5acce55 	.word	0xc5acce55

90000428 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000428:	1a51      	subs	r1, r2, r1
9000042a:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
9000042e:	fbb1 f0f3 	udiv	r0, r1, r3
90000432:	4770      	bx	lr

90000434 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
90000434:	4b01      	ldr	r3, [pc, #4]	; (9000043c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
90000436:	6858      	ldr	r0, [r3, #4]
}
90000438:	4770      	bx	lr
9000043a:	bf00      	nop
9000043c:	e0001000 	.word	0xe0001000

90000440 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000440:	4770      	bx	lr
90000442:	bf00      	nop

90000444 <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
90000444:	b510      	push	{r4, lr}
90000446:	4604      	mov	r4, r0
90000448:	210c      	movs	r1, #12
9000044a:	f023 f8de 	bl	9002360a <_ZdlPvj>
9000044e:	4620      	mov	r0, r4
90000450:	bd10      	pop	{r4, pc}
90000452:	bf00      	nop

90000454 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000454:	6803      	ldr	r3, [r0, #0]
90000456:	4a0c      	ldr	r2, [pc, #48]	; (90000488 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000458:	691b      	ldr	r3, [r3, #16]
{
9000045a:	b510      	push	{r4, lr}
9000045c:	4604      	mov	r4, r0
    if (active) //idle task sched out
9000045e:	b149      	cbz	r1, 90000474 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000460:	4293      	cmp	r3, r2
90000462:	d10d      	bne.n	90000480 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
90000464:	4b09      	ldr	r3, [pc, #36]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000466:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000468:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
9000046a:	6863      	ldr	r3, [r4, #4]
9000046c:	1a9b      	subs	r3, r3, r2
9000046e:	4403      	add	r3, r0
90000470:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
90000472:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
90000474:	4293      	cmp	r3, r2
90000476:	d105      	bne.n	90000484 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000478:	4b04      	ldr	r3, [pc, #16]	; (9000048c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000047a:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
9000047c:	60a0      	str	r0, [r4, #8]
}
9000047e:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000480:	4798      	blx	r3
90000482:	e7f1      	b.n	90000468 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
90000484:	4798      	blx	r3
90000486:	e7f9      	b.n	9000047c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
90000488:	90000435 	.word	0x90000435
9000048c:	e0001000 	.word	0xe0001000

90000490 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
90000490:	4770      	bx	lr
90000492:	bf00      	nop
90000494:	0000      	movs	r0, r0
	...

90000498 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
90000498:	b500      	push	{lr}
9000049a:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
9000049c:	2208      	movs	r2, #8
9000049e:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900004a0:	2000      	movs	r0, #0
900004a2:	4669      	mov	r1, sp
    hTS.Width = 480;
900004a4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900004c0 <_ZN20STM32TouchController4initEv+0x28>
900004a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
900004ac:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900004b0:	f006 fcea 	bl	90006e88 <BSP_TS_Init>
}
900004b4:	b005      	add	sp, #20
900004b6:	f85d fb04 	ldr.w	pc, [sp], #4
900004ba:	bf00      	nop
900004bc:	f3af 8000 	nop.w
900004c0:	000001e0 	.word	0x000001e0
900004c4:	00000110 	.word	0x00000110

900004c8 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900004c8:	b530      	push	{r4, r5, lr}
900004ca:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900004cc:	2000      	movs	r0, #0
{
900004ce:	460d      	mov	r5, r1
900004d0:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900004d2:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900004d4:	9001      	str	r0, [sp, #4]
900004d6:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900004da:	f006 fd63 	bl	90006fa4 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900004de:	9801      	ldr	r0, [sp, #4]
900004e0:	b120      	cbz	r0, 900004ec <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900004e2:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900004e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
900004e8:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
900004ea:	6023      	str	r3, [r4, #0]
    }

    return false;
}
900004ec:	b005      	add	sp, #20
900004ee:	bd30      	pop	{r4, r5, pc}

900004f0 <_ZN20STM32TouchControllerD0Ev>:
900004f0:	b510      	push	{r4, lr}
900004f2:	4604      	mov	r4, r0
900004f4:	2104      	movs	r1, #4
900004f6:	f023 f888 	bl	9002360a <_ZdlPvj>
900004fa:	4620      	mov	r0, r4
900004fc:	bd10      	pop	{r4, pc}
900004fe:	bf00      	nop

90000500 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000500:	2108      	movs	r1, #8
90000502:	4810      	ldr	r0, [pc, #64]	; (90000544 <_ZN8touchgfx4GPIO4initEv+0x44>)
{
90000504:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000506:	f007 fab3 	bl	90007a70 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000050a:	2801      	cmp	r0, #1
9000050c:	d101      	bne.n	90000512 <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
9000050e:	4b0e      	ldr	r3, [pc, #56]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000510:	6018      	str	r0, [r3, #0]
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000512:	2180      	movs	r1, #128	; 0x80
90000514:	480d      	ldr	r0, [pc, #52]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000516:	f007 faab 	bl	90007a70 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000051a:	2801      	cmp	r0, #1
9000051c:	d101      	bne.n	90000522 <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
9000051e:	4b0a      	ldr	r3, [pc, #40]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000520:	6058      	str	r0, [r3, #4]
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000522:	2140      	movs	r1, #64	; 0x40
90000524:	4809      	ldr	r0, [pc, #36]	; (9000054c <_ZN8touchgfx4GPIO4initEv+0x4c>)
90000526:	f007 faa3 	bl	90007a70 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000052a:	2801      	cmp	r0, #1
9000052c:	d101      	bne.n	90000532 <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
9000052e:	4b06      	ldr	r3, [pc, #24]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000530:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000532:	2140      	movs	r1, #64	; 0x40
90000534:	4806      	ldr	r0, [pc, #24]	; (90000550 <_ZN8touchgfx4GPIO4initEv+0x50>)
90000536:	f007 fa9b 	bl	90007a70 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
9000053a:	2801      	cmp	r0, #1
9000053c:	d101      	bne.n	90000542 <_ZN8touchgfx4GPIO4initEv+0x42>
            GPIO_InvertedLevels[id] = 1;
9000053e:	4b02      	ldr	r3, [pc, #8]	; (90000548 <_ZN8touchgfx4GPIO4initEv+0x48>)
90000540:	60d8      	str	r0, [r3, #12]
}
90000542:	bd08      	pop	{r3, pc}
90000544:	58021800 	.word	0x58021800
90000548:	24005b64 	.word	0x24005b64
9000054c:	58020400 	.word	0x58020400
90000550:	58020000 	.word	0x58020000

90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
90000554:	2803      	cmp	r0, #3
90000556:	d827      	bhi.n	900005a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>
90000558:	e8df f000 	tbb	[pc, r0]
9000055c:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
90000560:	4b12      	ldr	r3, [pc, #72]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000562:	2140      	movs	r1, #64	; 0x40
90000564:	4812      	ldr	r0, [pc, #72]	; (900005b0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
90000566:	68da      	ldr	r2, [r3, #12]
90000568:	fab2 f282 	clz	r2, r2
9000056c:	0952      	lsrs	r2, r2, #5
9000056e:	f007 ba85 	b.w	90007a7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000572:	4b0e      	ldr	r3, [pc, #56]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000574:	2140      	movs	r1, #64	; 0x40
90000576:	480f      	ldr	r0, [pc, #60]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
90000578:	689a      	ldr	r2, [r3, #8]
9000057a:	fab2 f282 	clz	r2, r2
9000057e:	0952      	lsrs	r2, r2, #5
90000580:	f007 ba7c 	b.w	90007a7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
90000584:	4b09      	ldr	r3, [pc, #36]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000586:	2180      	movs	r1, #128	; 0x80
90000588:	480a      	ldr	r0, [pc, #40]	; (900005b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
9000058a:	685a      	ldr	r2, [r3, #4]
9000058c:	fab2 f282 	clz	r2, r2
90000590:	0952      	lsrs	r2, r2, #5
90000592:	f007 ba73 	b.w	90007a7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
90000596:	4b05      	ldr	r3, [pc, #20]	; (900005ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
90000598:	2108      	movs	r1, #8
9000059a:	4807      	ldr	r0, [pc, #28]	; (900005b8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x64>)
9000059c:	681a      	ldr	r2, [r3, #0]
9000059e:	fab2 f282 	clz	r2, r2
900005a2:	0952      	lsrs	r2, r2, #5
900005a4:	f007 ba6a 	b.w	90007a7c <HAL_GPIO_WritePin>
}
900005a8:	4770      	bx	lr
900005aa:	bf00      	nop
900005ac:	24005b64 	.word	0x24005b64
900005b0:	58020000 	.word	0x58020000
900005b4:	58020400 	.word	0x58020400
900005b8:	58021800 	.word	0x58021800

900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900005bc:	2803      	cmp	r0, #3
900005be:	d827      	bhi.n	90000610 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>
900005c0:	e8df f000 	tbb	[pc, r0]
900005c4:	020b141d 	.word	0x020b141d
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900005c8:	4b12      	ldr	r3, [pc, #72]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ca:	2140      	movs	r1, #64	; 0x40
900005cc:	4812      	ldr	r0, [pc, #72]	; (90000618 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
900005ce:	68da      	ldr	r2, [r3, #12]
900005d0:	3a00      	subs	r2, #0
900005d2:	bf18      	it	ne
900005d4:	2201      	movne	r2, #1
900005d6:	f007 ba51 	b.w	90007a7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900005da:	4b0e      	ldr	r3, [pc, #56]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005dc:	2140      	movs	r1, #64	; 0x40
900005de:	480f      	ldr	r0, [pc, #60]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005e0:	689a      	ldr	r2, [r3, #8]
900005e2:	3a00      	subs	r2, #0
900005e4:	bf18      	it	ne
900005e6:	2201      	movne	r2, #1
900005e8:	f007 ba48 	b.w	90007a7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
900005ec:	4b09      	ldr	r3, [pc, #36]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
900005ee:	2180      	movs	r1, #128	; 0x80
900005f0:	480a      	ldr	r0, [pc, #40]	; (9000061c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
900005f2:	685a      	ldr	r2, [r3, #4]
900005f4:	3a00      	subs	r2, #0
900005f6:	bf18      	it	ne
900005f8:	2201      	movne	r2, #1
900005fa:	f007 ba3f 	b.w	90007a7c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
900005fe:	4b05      	ldr	r3, [pc, #20]	; (90000614 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
90000600:	2108      	movs	r1, #8
90000602:	4807      	ldr	r0, [pc, #28]	; (90000620 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x64>)
90000604:	681a      	ldr	r2, [r3, #0]
90000606:	3a00      	subs	r2, #0
90000608:	bf18      	it	ne
9000060a:	2201      	movne	r2, #1
9000060c:	f007 ba36 	b.w	90007a7c <HAL_GPIO_WritePin>
}
90000610:	4770      	bx	lr
90000612:	bf00      	nop
90000614:	24005b64 	.word	0x24005b64
90000618:	58020000 	.word	0x58020000
9000061c:	58020400 	.word	0x58020400
90000620:	58021800 	.word	0x58021800

90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000624:	2803      	cmp	r0, #3
90000626:	d813      	bhi.n	90000650 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>
90000628:	e8df f000 	tbb	[pc, r0]
9000062c:	02060a0e 	.word	0x02060a0e
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000630:	2140      	movs	r1, #64	; 0x40
90000632:	4808      	ldr	r0, [pc, #32]	; (90000654 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
90000634:	f007 ba26 	b.w	90007a84 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000638:	2140      	movs	r1, #64	; 0x40
9000063a:	4807      	ldr	r0, [pc, #28]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
9000063c:	f007 ba22 	b.w	90007a84 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
90000640:	2180      	movs	r1, #128	; 0x80
90000642:	4805      	ldr	r0, [pc, #20]	; (90000658 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
90000644:	f007 ba1e 	b.w	90007a84 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000648:	2108      	movs	r1, #8
9000064a:	4804      	ldr	r0, [pc, #16]	; (9000065c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x38>)
9000064c:	f007 ba1a 	b.w	90007a84 <HAL_GPIO_TogglePin>
}
90000650:	4770      	bx	lr
90000652:	bf00      	nop
90000654:	58020000 	.word	0x58020000
90000658:	58020400 	.word	0x58020400
9000065c:	58021800 	.word	0x58021800

90000660 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000660:	2000      	movs	r0, #0
90000662:	4770      	bx	lr

90000664 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000664:	2301      	movs	r3, #1
        requestedOrientation = orientation;
90000666:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000066a:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
9000066e:	4770      	bx	lr

90000670 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000670:	2000      	movs	r0, #0
90000672:	4770      	bx	lr

90000674 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000674:	1e0a      	subs	r2, r1, #0
90000676:	4b03      	ldr	r3, [pc, #12]	; (90000684 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000678:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000067a:	bf18      	it	ne
9000067c:	2201      	movne	r2, #1
9000067e:	701a      	strb	r2, [r3, #0]
    }
90000680:	4770      	bx	lr
90000682:	bf00      	nop
90000684:	2402645b 	.word	0x2402645b

90000688 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
90000688:	2000      	movs	r0, #0
9000068a:	4770      	bx	lr

9000068c <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
9000068c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
9000068e:	4608      	mov	r0, r1
        if (taskDelayFunc)
90000690:	b103      	cbz	r3, 90000694 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
90000692:	4718      	bx	r3
        }
    }
90000694:	4770      	bx	lr
90000696:	bf00      	nop

90000698 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
90000698:	f64f 70ff 	movw	r0, #65535	; 0xffff
9000069c:	4770      	bx	lr
9000069e:	bf00      	nop

900006a0 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
900006a0:	4770      	bx	lr
900006a2:	bf00      	nop

900006a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
900006a4:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006a6:	4b09      	ldr	r3, [pc, #36]	; (900006cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
900006a8:	881b      	ldrh	r3, [r3, #0]
900006aa:	428b      	cmp	r3, r1
900006ac:	d808      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
900006ae:	4b08      	ldr	r3, [pc, #32]	; (900006d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
900006b0:	881b      	ldrh	r3, [r3, #0]
900006b2:	4293      	cmp	r3, r2
900006b4:	d804      	bhi.n	900006c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
900006b6:	4807      	ldr	r0, [pc, #28]	; (900006d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
900006b8:	4b07      	ldr	r3, [pc, #28]	; (900006d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
900006ba:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
900006bc:	801a      	strh	r2, [r3, #0]
    }
900006be:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
900006c0:	4b06      	ldr	r3, [pc, #24]	; (900006dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
900006c2:	219e      	movs	r1, #158	; 0x9e
900006c4:	4a06      	ldr	r2, [pc, #24]	; (900006e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
900006c6:	4807      	ldr	r0, [pc, #28]	; (900006e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
900006c8:	f022 ffce 	bl	90023668 <__assert_func>
900006cc:	24026450 	.word	0x24026450
900006d0:	24026452 	.word	0x24026452
900006d4:	24026456 	.word	0x24026456
900006d8:	24026458 	.word	0x24026458
900006dc:	90024774 	.word	0x90024774
900006e0:	900247d8 	.word	0x900247d8
900006e4:	9002481c 	.word	0x9002481c

900006e8 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
900006e8:	b510      	push	{r4, lr}
900006ea:	4604      	mov	r4, r0
        swapFrameBuffers();
900006ec:	f011 fa82 	bl	90011bf4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900006f0:	6823      	ldr	r3, [r4, #0]
900006f2:	4620      	mov	r0, r4
900006f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
900006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
900006fc:	4718      	bx	r3
900006fe:	bf00      	nop

90000700 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
90000700:	f001 be36 	b.w	90002370 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

90000704 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
90000704:	f001 be3a 	b.w	9000237c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

90000708 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
90000708:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
9000070a:	f001 fef9 	bl	90002500 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000070e:	4812      	ldr	r0, [pc, #72]	; (90000758 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
90000710:	2300      	movs	r3, #0
90000712:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
90000716:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
9000071a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000071e:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90000722:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000726:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000072a:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000072e:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000732:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000734:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000738:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000073a:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000073e:	1c5a      	adds	r2, r3, #1
90000740:	d1f8      	bne.n	90000734 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000742:	f1ac 0c20 	sub.w	ip, ip, #32
90000746:	f11c 0f20 	cmn.w	ip, #32
9000074a:	d1f0      	bne.n	9000072e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
9000074c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000750:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000754:	bd10      	pop	{r4, pc}
90000756:	bf00      	nop
90000758:	e000ed00 	.word	0xe000ed00

9000075c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
9000075c:	f001 bde4 	b.w	90002328 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000760 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000760:	f001 bff4 	b.w	9000274c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000764 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000764:	f001 bfde 	b.w	90002724 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000768 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000768:	f001 bde8 	b.w	9000233c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

9000076c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
9000076c:	f010 bca7 	b.w	900110be <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000770 <_ZN11TouchGFXHALD0Ev>:
90000770:	b510      	push	{r4, lr}
90000772:	4604      	mov	r4, r0
90000774:	2188      	movs	r1, #136	; 0x88
90000776:	f022 ff48 	bl	9002360a <_ZdlPvj>
9000077a:	4620      	mov	r0, r4
9000077c:	bd10      	pop	{r4, pc}
9000077e:	bf00      	nop

90000780 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90000780:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
90000784:	b11b      	cbz	r3, 9000078e <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
90000786:	6840      	ldr	r0, [r0, #4]
90000788:	6803      	ldr	r3, [r0, #0]
9000078a:	681b      	ldr	r3, [r3, #0]
9000078c:	4718      	bx	r3
    }
9000078e:	4618      	mov	r0, r3
90000790:	4770      	bx	lr
90000792:	bf00      	nop

90000794 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90000794:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
90000798:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
9000079c:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
9000079e:	4b0b      	ldr	r3, [pc, #44]	; (900007cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
900007a0:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
900007a2:	d00b      	beq.n	900007bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
900007a4:	b94a      	cbnz	r2, 900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
900007a6:	4a0a      	ldr	r2, [pc, #40]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
900007a8:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007ac:	4909      	ldr	r1, [pc, #36]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
900007ae:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
900007b0:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b4:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
900007b6:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007b8:	8013      	strh	r3, [r2, #0]
        }
    }
900007ba:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
900007bc:	2a00      	cmp	r2, #0
900007be:	d0fc      	beq.n	900007ba <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
900007c0:	4a03      	ldr	r2, [pc, #12]	; (900007d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
900007c2:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
900007c6:	4903      	ldr	r1, [pc, #12]	; (900007d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
900007c8:	e7f1      	b.n	900007ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
900007ca:	bf00      	nop
900007cc:	24026454 	.word	0x24026454
900007d0:	24026452 	.word	0x24026452
900007d4:	24026450 	.word	0x24026450

900007d8 <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
900007d8:	6840      	ldr	r0, [r0, #4]
900007da:	4a04      	ldr	r2, [pc, #16]	; (900007ec <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
900007dc:	6803      	ldr	r3, [r0, #0]
900007de:	699b      	ldr	r3, [r3, #24]
900007e0:	4293      	cmp	r3, r2
900007e2:	d101      	bne.n	900007e8 <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
900007e4:	2000      	movs	r0, #0
900007e6:	4770      	bx	lr
        return dma.getDMAType();
900007e8:	4718      	bx	r3
900007ea:	bf00      	nop
900007ec:	90000661 	.word	0x90000661

900007f0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900007f0:	b1a9      	cbz	r1, 9000081e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
900007f2:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f4:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
900007f6:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900007f8:	bf18      	it	ne
900007fa:	2201      	movne	r2, #1
900007fc:	490c      	ldr	r1, [pc, #48]	; (90000830 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
900007fe:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000800:	6802      	ldr	r2, [r0, #0]
90000802:	490c      	ldr	r1, [pc, #48]	; (90000834 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000804:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000808:	428a      	cmp	r2, r1
9000080a:	d106      	bne.n	9000081a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000080c:	1e19      	subs	r1, r3, #0
9000080e:	4a0a      	ldr	r2, [pc, #40]	; (90000838 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000810:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000812:	bf18      	it	ne
90000814:	2101      	movne	r1, #1
90000816:	7011      	strb	r1, [r2, #0]
90000818:	4770      	bx	lr
        setAnimationStorage(animationStorage);
9000081a:	4619      	mov	r1, r3
9000081c:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000081e:	4b07      	ldr	r3, [pc, #28]	; (9000083c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000820:	f240 21d2 	movw	r1, #722	; 0x2d2
90000824:	4a06      	ldr	r2, [pc, #24]	; (90000840 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000826:	4807      	ldr	r0, [pc, #28]	; (90000844 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000828:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
9000082a:	f022 ff1d 	bl	90023668 <__assert_func>
9000082e:	bf00      	nop
90000830:	2402645a 	.word	0x2402645a
90000834:	90000675 	.word	0x90000675
90000838:	2402645b 	.word	0x2402645b
9000083c:	90024864 	.word	0x90024864
90000840:	9002489c 	.word	0x9002489c
90000844:	9002481c 	.word	0x9002481c

90000848 <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000848:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
9000084a:	6803      	ldr	r3, [r0, #0]
{
9000084c:	4604      	mov	r4, r0
9000084e:	4d17      	ldr	r5, [pc, #92]	; (900008ac <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000850:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000854:	4798      	blx	r3
    enableInterrupts();
90000856:	6823      	ldr	r3, [r4, #0]
90000858:	4620      	mov	r0, r4
9000085a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
9000085c:	4798      	blx	r3
    OSWrappers::waitForVSync();
9000085e:	f001 f8bb 	bl	900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000862:	6823      	ldr	r3, [r4, #0]
90000864:	4620      	mov	r0, r4
90000866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000868:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
9000086a:	2201      	movs	r2, #1
9000086c:	2104      	movs	r1, #4
9000086e:	4810      	ldr	r0, [pc, #64]	; (900008b0 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000870:	f007 f904 	bl	90007a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000874:	2201      	movs	r2, #1
90000876:	2180      	movs	r1, #128	; 0x80
90000878:	480e      	ldr	r0, [pc, #56]	; (900008b4 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
9000087a:	f007 f8ff 	bl	90007a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000087e:	2201      	movs	r2, #1
90000880:	480d      	ldr	r0, [pc, #52]	; (900008b8 <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
90000882:	4611      	mov	r1, r2
90000884:	f007 f8fa 	bl	90007a7c <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
90000888:	f001 f8a6 	bl	900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
9000088c:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
9000088e:	4620      	mov	r0, r4
90000890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000892:	42ab      	cmp	r3, r5
90000894:	d107      	bne.n	900008a6 <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
90000896:	f011 f9ad 	bl	90011bf4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
9000089a:	6823      	ldr	r3, [r4, #0]
9000089c:	4620      	mov	r0, r4
9000089e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
900008a2:	4798      	blx	r3
    }
900008a4:	e7f0      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008a6:	4798      	blx	r3
900008a8:	e7ee      	b.n	90000888 <_ZN11TouchGFXHAL9taskEntryEv+0x40>
900008aa:	bf00      	nop
900008ac:	900006e9 	.word	0x900006e9
900008b0:	58020000 	.word	0x58020000
900008b4:	58020c00 	.word	0x58020c00
900008b8:	58022800 	.word	0x58022800

900008bc <_ZN11TouchGFXHAL10initializeEv>:
{
900008bc:	b538      	push	{r3, r4, r5, lr}
900008be:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
900008c0:	f001 ff4e 	bl	90002760 <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
900008c4:	4817      	ldr	r0, [pc, #92]	; (90000924 <_ZN11TouchGFXHAL10initializeEv+0x68>)
900008c6:	6823      	ldr	r3, [r4, #0]
900008c8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
900008ca:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
900008ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
900008d0:	4285      	cmp	r5, r0
900008d2:	d119      	bne.n	90000908 <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
900008d4:	b1f9      	cbz	r1, 90000916 <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008d6:	3a00      	subs	r2, #0
900008d8:	4913      	ldr	r1, [pc, #76]	; (90000928 <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
900008da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008de:	bf18      	it	ne
900008e0:	2201      	movne	r2, #1
900008e2:	4812      	ldr	r0, [pc, #72]	; (9000092c <_ZN11TouchGFXHAL10initializeEv+0x70>)
900008e4:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008e6:	4912      	ldr	r1, [pc, #72]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
900008e8:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
900008ea:	d111      	bne.n	90000910 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008ec:	4b11      	ldr	r3, [pc, #68]	; (90000934 <_ZN11TouchGFXHAL10initializeEv+0x78>)
900008ee:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900008f0:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900008f2:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
900008f4:	f104 057c 	add.w	r5, r4, #124	; 0x7c
900008f8:	4628      	mov	r0, r5
900008fa:	f7ff fd7d 	bl	900003f8 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
900008fe:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000900:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000902:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000906:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000908:	4b09      	ldr	r3, [pc, #36]	; (90000930 <_ZN11TouchGFXHAL10initializeEv+0x74>)
9000090a:	4620      	mov	r0, r4
9000090c:	47a8      	blx	r5
9000090e:	e7f1      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000910:	4620      	mov	r0, r4
90000912:	4798      	blx	r3
90000914:	e7ee      	b.n	900008f4 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000916:	4b08      	ldr	r3, [pc, #32]	; (90000938 <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000918:	f240 21d2 	movw	r1, #722	; 0x2d2
9000091c:	4a07      	ldr	r2, [pc, #28]	; (9000093c <_ZN11TouchGFXHAL10initializeEv+0x80>)
9000091e:	4808      	ldr	r0, [pc, #32]	; (90000940 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000920:	f022 fea2 	bl	90023668 <__assert_func>
90000924:	900007f1 	.word	0x900007f1
90000928:	90000675 	.word	0x90000675
9000092c:	2402645a 	.word	0x2402645a
90000930:	d0000000 	.word	0xd0000000
90000934:	2402645b 	.word	0x2402645b
90000938:	90024864 	.word	0x90024864
9000093c:	9002489c 	.word	0x9002489c
90000940:	9002481c 	.word	0x9002481c

90000944 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000944:	b508      	push	{r3, lr}
        return instance;
90000946:	4b07      	ldr	r3, [pc, #28]	; (90000964 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000948:	b128      	cbz	r0, 90000956 <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
9000094a:	6818      	ldr	r0, [r3, #0]
9000094c:	2101      	movs	r1, #1
9000094e:	f011 f96b 	bl	90011c28 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000952:	2001      	movs	r0, #1
90000954:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000956:	4601      	mov	r1, r0
90000958:	6818      	ldr	r0, [r3, #0]
9000095a:	f011 f965 	bl	90011c28 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
9000095e:	2001      	movs	r0, #1
90000960:	bd08      	pop	{r3, pc}
90000962:	bf00      	nop
90000964:	2402645c 	.word	0x2402645c

90000968 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
90000968:	6940      	ldr	r0, [r0, #20]
9000096a:	4770      	bx	lr

9000096c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
9000096c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000970:	4770      	bx	lr
90000972:	bf00      	nop

90000974 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000974:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000976:	b10b      	cbz	r3, 9000097c <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000978:	2001      	movs	r0, #1
}
9000097a:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
9000097c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9000097e:	3800      	subs	r0, #0
90000980:	bf18      	it	ne
90000982:	2001      	movne	r0, #1
90000984:	4770      	bx	lr
90000986:	bf00      	nop

90000988 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
90000988:	6880      	ldr	r0, [r0, #8]
9000098a:	4770      	bx	lr

9000098c <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
9000098c:	4770      	bx	lr
9000098e:	bf00      	nop

90000990 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
90000990:	3004      	adds	r0, #4
{
90000992:	468c      	mov	ip, r1
    *data = videoInfo;
90000994:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90000996:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
9000099a:	4770      	bx	lr

9000099c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
9000099c:	4770      	bx	lr
9000099e:	bf00      	nop

900009a0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
900009a0:	b508      	push	{r3, lr}
    assert(0);
900009a2:	4a03      	ldr	r2, [pc, #12]	; (900009b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
900009a4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
900009a8:	4b02      	ldr	r3, [pc, #8]	; (900009b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
900009aa:	4803      	ldr	r0, [pc, #12]	; (900009b8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
900009ac:	f022 fe5c 	bl	90023668 <__assert_func>
900009b0:	900249c8 	.word	0x900249c8
900009b4:	900249c4 	.word	0x900249c4
900009b8:	90024a24 	.word	0x90024a24

900009bc <_ZN20HardwareMJPEGDecoderD0Ev>:
900009bc:	b510      	push	{r4, lr}
900009be:	4604      	mov	r4, r0
900009c0:	2148      	movs	r1, #72	; 0x48
900009c2:	f022 fe22 	bl	9002360a <_ZdlPvj>
900009c6:	4620      	mov	r0, r4
900009c8:	bd10      	pop	{r4, pc}
900009ca:	bf00      	nop

900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900009d0:	b085      	sub	sp, #20
900009d2:	4605      	mov	r5, r0
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d4:	4c65      	ldr	r4, [pc, #404]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
900009d6:	9003      	str	r0, [sp, #12]
        JPEG_ConvertorParams.bytes_pr_pixel = 2;
900009d8:	2002      	movs	r0, #2
900009da:	6120      	str	r0, [r4, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
900009dc:	68e8      	ldr	r0, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
900009de:	0705      	lsls	r5, r0, #28
900009e0:	d003      	beq.n	900009ea <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e>
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
900009e2:	f020 000f 	bic.w	r0, r0, #15
900009e6:	4c61      	ldr	r4, [pc, #388]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
900009e8:	3010      	adds	r0, #16
900009ea:	6020      	str	r0, [r4, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
900009ec:	0900      	lsrs	r0, r0, #4
900009ee:	4c5f      	ldr	r4, [pc, #380]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
      * @retval None
      */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
        FrameBufferAddress = output;
        Output_Is_Paused = 0;
900009f0:	2700      	movs	r7, #0
900009f2:	4e5f      	ldr	r6, [pc, #380]	; (90000b70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
900009f4:	60e0      	str	r0, [r4, #12]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
        }

        //Do not return from this function until done with decoding all chunks.
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900009f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
900009fa:	4d5e      	ldr	r5, [pc, #376]	; (90000b74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900009fc:	01c0      	lsls	r0, r0, #7
        Output_Is_Paused = 0;
900009fe:	6037      	str	r7, [r6, #0]
        DMA2D_output_Is_Paused = 1;
90000a00:	f8df b19c 	ldr.w	fp, [pc, #412]	; 90000ba0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a04:	9000      	str	r0, [sp, #0]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a06:	9803      	ldr	r0, [sp, #12]
        JPEG_OUT_Read_BufferIndex = 0;
90000a08:	f8df 8198 	ldr.w	r8, [pc, #408]	; 90000ba4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a0c:	6900      	ldr	r0, [r0, #16]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a0e:	702f      	strb	r7, [r5, #0]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a10:	f000 000f 	and.w	r0, r0, #15
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a14:	60af      	str	r7, [r5, #8]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000a16:	732f      	strb	r7, [r5, #12]
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a18:	f1c0 0010 	rsb	r0, r0, #16
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000a1c:	616f      	str	r7, [r5, #20]
90000a1e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 90000ba8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
        JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000a22:	60a0      	str	r0, [r4, #8]
        JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000a24:	f44f 7070 	mov.w	r0, #960	; 0x3c0
90000a28:	f8df a180 	ldr.w	sl, [pc, #384]	; 90000bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000a2c:	6060      	str	r0, [r4, #4]
        FrameBufferAddress = output;
90000a2e:	4852      	ldr	r0, [pc, #328]	; (90000b78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
90000a30:	4c52      	ldr	r4, [pc, #328]	; (90000b7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
90000a32:	6003      	str	r3, [r0, #0]
        JPEG_OUT_Write_BufferIndex = 0;
90000a34:	4b52      	ldr	r3, [pc, #328]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a36:	4853      	ldr	r0, [pc, #332]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
        JPEG_OUT_Write_BufferIndex = 0;
90000a38:	601f      	str	r7, [r3, #0]
        JPEG_InputImageIndex = 0;
90000a3a:	4b53      	ldr	r3, [pc, #332]	; (90000b88 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
        JPEG_OUT_Read_BufferIndex = 0;
90000a3c:	f8c8 7000 	str.w	r7, [r8]
        JPEG_InputImageIndex = 0;
90000a40:	601f      	str	r7, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
90000a42:	4b52      	ldr	r3, [pc, #328]	; (90000b8c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
90000a44:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90000a46:	4b52      	ldr	r3, [pc, #328]	; (90000b90 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
90000a48:	601a      	str	r2, [r3, #0]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
        MCU_BlockIndex = 0;
90000a4e:	4b51      	ldr	r3, [pc, #324]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000a50:	601f      	str	r7, [r3, #0]
        DMA2D_output_Is_Paused = 1;
90000a52:	2301      	movs	r3, #1
90000a54:	f8cb 3000 	str.w	r3, [fp]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000a58:	686b      	ldr	r3, [r5, #4]
90000a5a:	f008 f94d 	bl	90008cf8 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg, touchgfx::DMA_Interface& dma)
{
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000a5e:	f8d9 3000 	ldr.w	r3, [r9]
90000a62:	b11b      	cbz	r3, 90000a6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa0>
90000a64:	4b4c      	ldr	r3, [pc, #304]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000a66:	681b      	ldr	r3, [r3, #0]
90000a68:	2b00      	cmp	r3, #0
90000a6a:	d17d      	bne.n	90000b68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x19c>
    {
        return 1;
    }

    // Add job to DMA2D if ready and JPEG buffer is full
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000a6c:	f8d8 3000 	ldr.w	r3, [r8]
90000a70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000a74:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000a78:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000a7c:	2901      	cmp	r1, #1
90000a7e:	d042      	beq.n	90000b06 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
        // Try to start DMA2D
        dma.start();
    }

    // Start JPEG IP if paused and next buffer is empty
    if ((Output_Is_Paused == 1) && \
90000a80:	6833      	ldr	r3, [r6, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90000a82:	2b01      	cmp	r3, #1
90000a84:	d029      	beq.n	90000ada <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x10e>
    {
        Output_Is_Paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
    }

    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000a86:	6833      	ldr	r3, [r6, #0]
90000a88:	b9c3      	cbnz	r3, 90000abc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf0>
90000a8a:	f8db 3000 	ldr.w	r3, [fp]
90000a8e:	fab3 f383 	clz	r3, r3
90000a92:	095b      	lsrs	r3, r3, #5
90000a94:	005b      	lsls	r3, r3, #1
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000a96:	6023      	str	r3, [r4, #0]
            if (JpegProcessing_End == 2)
90000a98:	6823      	ldr	r3, [r4, #0]
90000a9a:	2b02      	cmp	r3, #2
90000a9c:	d013      	beq.n	90000ac6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfa>
        } while (JpegProcessing_End != 1);
90000a9e:	6823      	ldr	r3, [r4, #0]
90000aa0:	2b01      	cmp	r3, #1
90000aa2:	d1dc      	bne.n	90000a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
    {
        return count_ == max_size_;
    }
    void reset()
    {
        head_ = tail_ = count_ = 0;
90000aa4:	2300      	movs	r3, #0
        DMA2D_CopyBufferEnd = 0;
90000aa6:	4a3c      	ldr	r2, [pc, #240]	; (90000b98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000aa8:	e9ca 3302 	strd	r3, r3, [sl, #8]
90000aac:	f8ca 3004 	str.w	r3, [sl, #4]
        Jpeg_HWDecodingEnd = 0;
90000ab0:	f8c9 3000 	str.w	r3, [r9]
        DMA2D_CopyBufferEnd = 0;
90000ab4:	6013      	str	r3, [r2, #0]
}
90000ab6:	b005      	add	sp, #20
90000ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        return 2;
    }

    return 0;
90000abc:	2300      	movs	r3, #0
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000abe:	6023      	str	r3, [r4, #0]
            if (JpegProcessing_End == 2)
90000ac0:	6823      	ldr	r3, [r4, #0]
90000ac2:	2b02      	cmp	r3, #2
90000ac4:	d1eb      	bne.n	90000a9e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd2>
                SEM_WAIT(semDecodingDone);
90000ac6:	4b35      	ldr	r3, [pc, #212]	; (90000b9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000ac8:	f04f 31ff 	mov.w	r1, #4294967295
90000acc:	6818      	ldr	r0, [r3, #0]
90000ace:	f00c f88b 	bl	9000cbe8 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
90000ad2:	6823      	ldr	r3, [r4, #0]
90000ad4:	2b01      	cmp	r3, #1
90000ad6:	d1c2      	bne.n	90000a5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x92>
90000ad8:	e7e4      	b.n	90000aa4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd8>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90000ada:	4b29      	ldr	r3, [pc, #164]	; (90000b80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000adc:	681b      	ldr	r3, [r3, #0]
90000ade:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if ((Output_Is_Paused == 1) && \
90000ae2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000ae6:	2b00      	cmp	r3, #0
90000ae8:	d1cd      	bne.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000aea:	f8d8 3000 	ldr.w	r3, [r8]
90000aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90000af2:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000af6:	2b00      	cmp	r3, #0
90000af8:	d1c5      	bne.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000afa:	2102      	movs	r1, #2
90000afc:	4821      	ldr	r0, [pc, #132]	; (90000b84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
        Output_Is_Paused = 0;
90000afe:	6033      	str	r3, [r6, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000b00:	f008 fa42 	bl	90008f88 <HAL_JPEG_Resume>
90000b04:	e7bf      	b.n	90000a86 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xba>
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000b06:	f8db 1000 	ldr.w	r1, [fp]
90000b0a:	2901      	cmp	r1, #1
90000b0c:	d1b8      	bne.n	90000a80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
        JPEG_OUT_Read_BufferIndex++;
90000b0e:	3301      	adds	r3, #1
        };
90000b10:	4920      	ldr	r1, [pc, #128]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
        tail_ = (tail_ + 1) % max_size_;
90000b12:	f8da 0000 	ldr.w	r0, [sl]
        JPEG_OUT_Read_BufferIndex++;
90000b16:	2b01      	cmp	r3, #1
        };
90000b18:	f8d1 c000 	ldr.w	ip, [r1]
        JPEG_OUT_Read_BufferIndex++;
90000b1c:	bf88      	it	hi
90000b1e:	463b      	movhi	r3, r7
90000b20:	f8c8 3000 	str.w	r3, [r8]
        buffer_[tail_] = job;
90000b24:	f8da 3008 	ldr.w	r3, [sl, #8]
        tail_ = (tail_ + 1) % max_size_;
90000b28:	1c59      	adds	r1, r3, #1
        buffer_[tail_] = job;
90000b2a:	3302      	adds	r3, #2
90000b2c:	f84a c033 	str.w	ip, [sl, r3, lsl #3]
90000b30:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
90000b34:	605a      	str	r2, [r3, #4]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000b36:	9a03      	ldr	r2, [sp, #12]
        tail_ = (tail_ + 1) % max_size_;
90000b38:	fbb1 f3f0 	udiv	r3, r1, r0
90000b3c:	fb00 1113 	mls	r1, r0, r3, r1
90000b40:	6c50      	ldr	r0, [r2, #68]	; 0x44
        count_++;
90000b42:	f8da 200c 	ldr.w	r2, [sl, #12]
        tail_ = (tail_ + 1) % max_size_;
90000b46:	f8ca 1008 	str.w	r1, [sl, #8]
        count_++;
90000b4a:	3201      	adds	r2, #1
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000b4c:	4911      	ldr	r1, [pc, #68]	; (90000b94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
90000b4e:	f8ca 200c 	str.w	r2, [sl, #12]
90000b52:	4a06      	ldr	r2, [pc, #24]	; (90000b6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>)
90000b54:	680b      	ldr	r3, [r1, #0]
90000b56:	68d2      	ldr	r2, [r2, #12]
90000b58:	4413      	add	r3, r2
90000b5a:	600b      	str	r3, [r1, #0]
        dma.start();
90000b5c:	6803      	ldr	r3, [r0, #0]
        DMA2D_output_Is_Paused = 0;
90000b5e:	f8cb 7000 	str.w	r7, [fp]
        dma.start();
90000b62:	691b      	ldr	r3, [r3, #16]
90000b64:	4798      	blx	r3
90000b66:	e78b      	b.n	90000a80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb4>
        return 1;
90000b68:	2301      	movs	r3, #1
90000b6a:	e794      	b.n	90000a96 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xca>
90000b6c:	24005ba8 	.word	0x24005ba8
90000b70:	24005ba4 	.word	0x24005ba4
90000b74:	24000004 	.word	0x24000004
90000b78:	24005b7c 	.word	0x24005b7c
90000b7c:	24005b94 	.word	0x24005b94
90000b80:	24005b90 	.word	0x24005b90
90000b84:	2400b078 	.word	0x2400b078
90000b88:	24005b84 	.word	0x24005b84
90000b8c:	24005b80 	.word	0x24005b80
90000b90:	24005b88 	.word	0x24005b88
90000b94:	24005b9c 	.word	0x24005b9c
90000b98:	24005b74 	.word	0x24005b74
90000b9c:	24005be0 	.word	0x24005be0
90000ba0:	24005b78 	.word	0x24005b78
90000ba4:	24005b8c 	.word	0x24005b8c
90000ba8:	24005b98 	.word	0x24005b98
90000bac:	24005bbc 	.word	0x24005bbc

90000bb0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000bb2:	6803      	ldr	r3, [r0, #0]
90000bb4:	2901      	cmp	r1, #1
90000bb6:	4e2a      	ldr	r6, [pc, #168]	; (90000c60 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
{
90000bb8:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000bbc:	bf38      	it	cc
90000bbe:	2101      	movcc	r1, #1
90000bc0:	42b3      	cmp	r3, r6
90000bc2:	460d      	mov	r5, r1
90000bc4:	d138      	bne.n	90000c38 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x88>
    return videoInfo.number_of_frames;
90000bc6:	6883      	ldr	r3, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000bc8:	4299      	cmp	r1, r3
90000bca:	d82a      	bhi.n	90000c22 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x72>
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
90000bcc:	1e6b      	subs	r3, r5, #1
90000bce:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000bd0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
90000bd2:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000bd6:	b350      	cbz	r0, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        if (length > aviBufferLength)
90000bd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000bda:	2b0f      	cmp	r3, #15
90000bdc:	d937      	bls.n	90000c4e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x9e>
        reader->seek(offset);
90000bde:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
90000be0:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000be4:	68db      	ldr	r3, [r3, #12]
90000be6:	4631      	mov	r1, r6
90000be8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000bea:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000bec:	2210      	movs	r2, #16
90000bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000bf0:	6803      	ldr	r3, [r0, #0]
90000bf2:	691b      	ldr	r3, [r3, #16]
90000bf4:	4798      	blx	r3
90000bf6:	b1b0      	cbz	r0, 90000c26 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x76>
    if (reader != 0)
90000bf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000bfa:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000bfc:	b1bb      	cbz	r3, 90000c2e <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7e>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000bfe:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000c00:	7a93      	ldrb	r3, [r2, #10]
90000c02:	7a51      	ldrb	r1, [r2, #9]
90000c04:	041b      	lsls	r3, r3, #16
90000c06:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000c0a:	7a11      	ldrb	r1, [r2, #8]
90000c0c:	7ad2      	ldrb	r2, [r2, #11]
90000c0e:	430b      	orrs	r3, r1
90000c10:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c14:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000c16:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c18:	3a04      	subs	r2, #4
90000c1a:	441a      	add	r2, r3
90000c1c:	61a2      	str	r2, [r4, #24]
}
90000c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return videoInfo.number_of_frames;
90000c20:	68a3      	ldr	r3, [r4, #8]
{
90000c22:	461d      	mov	r5, r3
90000c24:	e7d2      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_EOF_REACHED;
90000c26:	230d      	movs	r3, #13
90000c28:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000c2c:	e7e4      	b.n	90000bf8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x48>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000c2e:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000c32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000c34:	58d3      	ldr	r3, [r2, r3]
90000c36:	e7ed      	b.n	90000c14 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x64>
    if (frameNumber > getNumberOfFrames())
90000c38:	4798      	blx	r3
90000c3a:	4285      	cmp	r5, r0
90000c3c:	d9c6      	bls.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
        frameNumber = getNumberOfFrames();
90000c3e:	6823      	ldr	r3, [r4, #0]
90000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000c42:	42b3      	cmp	r3, r6
90000c44:	d0ec      	beq.n	90000c20 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x70>
90000c46:	4620      	mov	r0, r4
90000c48:	4798      	blx	r3
90000c4a:	4605      	mov	r5, r0
90000c4c:	e7be      	b.n	90000bcc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x1c>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c4e:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000c50:	4b04      	ldr	r3, [pc, #16]	; (90000c64 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000c52:	4a05      	ldr	r2, [pc, #20]	; (90000c68 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000c54:	21a7      	movs	r1, #167	; 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000c56:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000c5a:	4804      	ldr	r0, [pc, #16]	; (90000c6c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xbc>)
90000c5c:	f022 fd04 	bl	90023668 <__assert_func>
90000c60:	90000989 	.word	0x90000989
90000c64:	90024a7c 	.word	0x90024a7c
90000c68:	90024a90 	.word	0x90024a90
90000c6c:	90024a24 	.word	0x90024a24

90000c70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000c74:	4604      	mov	r4, r0
    if (reader != 0)
90000c76:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000c78:	b083      	sub	sp, #12
90000c7a:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000c7c:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000c7e:	2800      	cmp	r0, #0
90000c80:	f000 80e4 	beq.w	90000e4c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
        if (length > aviBufferLength)
90000c84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000c86:	2b07      	cmp	r3, #7
90000c88:	f240 80e7 	bls.w	90000e5a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000c8c:	6803      	ldr	r3, [r0, #0]
90000c8e:	4631      	mov	r1, r6
90000c90:	68db      	ldr	r3, [r3, #12]
90000c92:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000c94:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000c96:	2208      	movs	r2, #8
90000c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000c9a:	6803      	ldr	r3, [r0, #0]
90000c9c:	691b      	ldr	r3, [r3, #16]
90000c9e:	4798      	blx	r3
90000ca0:	2800      	cmp	r0, #0
90000ca2:	f000 80cf 	beq.w	90000e44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d4>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000ca6:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000ca8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000caa:	1d3a      	adds	r2, r7, #4
        aviBufferStartOffset = offset;
90000cac:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000cae:	2800      	cmp	r0, #0
90000cb0:	f000 80dc 	beq.w	90000e6c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fc>
        const uint32_t index = offset - aviBufferStartOffset;
90000cb4:	1b92      	subs	r2, r2, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000cb6:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000cb8:	e9d4 630d 	ldrd	r6, r3, [r4, #52]	; 0x34
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000cbc:	18b1      	adds	r1, r6, r2
90000cbe:	5cb2      	ldrb	r2, [r6, r2]
90000cc0:	788e      	ldrb	r6, [r1, #2]
90000cc2:	f891 c001 	ldrb.w	ip, [r1, #1]
90000cc6:	0436      	lsls	r6, r6, #16
90000cc8:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000ccc:	4316      	orrs	r6, r2
90000cce:	78ca      	ldrb	r2, [r1, #3]
90000cd0:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000cd4:	42b3      	cmp	r3, r6
90000cd6:	f0c0 80c0 	bcc.w	90000e5a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ea>
        reader->seek(offset);
90000cda:	6803      	ldr	r3, [r0, #0]
90000cdc:	4639      	mov	r1, r7
90000cde:	68db      	ldr	r3, [r3, #12]
90000ce0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ce2:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000ce4:	4632      	mov	r2, r6
90000ce6:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000ce8:	6803      	ldr	r3, [r0, #0]
90000cea:	691b      	ldr	r3, [r3, #16]
90000cec:	4798      	blx	r3
90000cee:	b910      	cbnz	r0, 90000cf6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000cf0:	230d      	movs	r3, #13
90000cf2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000cf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000cf8:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000cfa:	2d00      	cmp	r5, #0
90000cfc:	d053      	beq.n	90000da6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000cfe:	4a5c      	ldr	r2, [pc, #368]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
        FrameBufferAddress = output;
90000d00:	4b5c      	ldr	r3, [pc, #368]	; (90000e74 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d02:	68d2      	ldr	r2, [r2, #12]
        FrameBufferAddress = output;
90000d04:	601d      	str	r5, [r3, #0]
        Output_Is_Paused = 0;
90000d06:	2300      	movs	r3, #0
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d0c:	4d5a      	ldr	r5, [pc, #360]	; (90000e78 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
        Output_Is_Paused = 0;
90000d0e:	4f5b      	ldr	r7, [pc, #364]	; (90000e7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d10:	01d2      	lsls	r2, r2, #7
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d12:	702b      	strb	r3, [r5, #0]
        Output_Is_Paused = 0;
90000d14:	603b      	str	r3, [r7, #0]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d16:	60ab      	str	r3, [r5, #8]
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d18:	732b      	strb	r3, [r5, #12]
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d1a:	616b      	str	r3, [r5, #20]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1c:	9200      	str	r2, [sp, #0]
        JPEG_OUT_Write_BufferIndex = 0;
90000d1e:	4a58      	ldr	r2, [pc, #352]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
        JPEG_OUT_Read_BufferIndex = 0;
90000d20:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90000eac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
        JPEG_OUT_Write_BufferIndex = 0;
90000d24:	6013      	str	r3, [r2, #0]
        JPEG_InputImageIndex = 0;
90000d26:	4a57      	ldr	r2, [pc, #348]	; (90000e84 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
        DMA2D_output_Is_Paused = 1;
90000d28:	f8df a184 	ldr.w	sl, [pc, #388]	; 90000eb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
        JPEG_InputImageIndex = 0;
90000d2c:	6013      	str	r3, [r2, #0]
        JPEG_InputImageAddress = (uint32_t)input;
90000d2e:	4a56      	ldr	r2, [pc, #344]	; (90000e88 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
        JPEG_OUT_Read_BufferIndex = 0;
90000d30:	f8c8 3000 	str.w	r3, [r8]
        JPEG_InputImageAddress = (uint32_t)input;
90000d34:	6011      	str	r1, [r2, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d36:	4a55      	ldr	r2, [pc, #340]	; (90000e8c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d38:	4855      	ldr	r0, [pc, #340]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
        JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d3a:	6016      	str	r6, [r2, #0]
        MCU_BlockIndex = 0;
90000d3c:	4a55      	ldr	r2, [pc, #340]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000d3e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90000eb4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90000d42:	6013      	str	r3, [r2, #0]
        DMA2D_output_Is_Paused = 1;
90000d44:	2301      	movs	r3, #1
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
90000d4a:	4e53      	ldr	r6, [pc, #332]	; (90000e98 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
        DMA2D_output_Is_Paused = 1;
90000d4c:	f8ca 3000 	str.w	r3, [sl]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d50:	686b      	ldr	r3, [r5, #4]
        buffer_[tail_] = job;
90000d52:	f8df b164 	ldr.w	fp, [pc, #356]	; 90000eb8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
90000d56:	f007 ffcf 	bl	90008cf8 <HAL_JPEG_Decode_DMA>
        return 0;
90000d5a:	e008      	b.n	90000d6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d5c:	f8da 3000 	ldr.w	r3, [sl]
90000d60:	fab3 f383 	clz	r3, r3
90000d64:	095b      	lsrs	r3, r3, #5
90000d66:	005b      	lsls	r3, r3, #1
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d68:	6033      	str	r3, [r6, #0]
        } while (JpegProcessing_End == 0);
90000d6a:	6833      	ldr	r3, [r6, #0]
90000d6c:	b9db      	cbnz	r3, 90000da6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x136>
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d6e:	f8d9 3000 	ldr.w	r3, [r9]
90000d72:	b11b      	cbz	r3, 90000d7c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10c>
90000d74:	4b49      	ldr	r3, [pc, #292]	; (90000e9c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90000d76:	681b      	ldr	r3, [r3, #0]
90000d78:	2b00      	cmp	r3, #0
90000d7a:	d161      	bne.n	90000e40 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d0>
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d7c:	f8d8 3000 	ldr.w	r3, [r8]
90000d80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000d84:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000d88:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000d8c:	2901      	cmp	r1, #1
90000d8e:	d024      	beq.n	90000dda <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x16a>
    if ((Output_Is_Paused == 1) && \
90000d90:	683b      	ldr	r3, [r7, #0]
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90000d92:	2b01      	cmp	r3, #1
90000d94:	d00b      	beq.n	90000dae <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13e>
    if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d96:	683b      	ldr	r3, [r7, #0]
90000d98:	2b00      	cmp	r3, #0
90000d9a:	d0df      	beq.n	90000d5c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
    return 0;
90000d9c:	2300      	movs	r3, #0
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d9e:	6033      	str	r3, [r6, #0]
        } while (JpegProcessing_End == 0);
90000da0:	6833      	ldr	r3, [r6, #0]
90000da2:	2b00      	cmp	r3, #0
90000da4:	d0e3      	beq.n	90000d6e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfe>
}
90000da6:	2001      	movs	r0, #1
90000da8:	b003      	add	sp, #12
90000daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90000dae:	4b34      	ldr	r3, [pc, #208]	; (90000e80 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90000db0:	681b      	ldr	r3, [r3, #0]
90000db2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if ((Output_Is_Paused == 1) && \
90000db6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dba:	2b00      	cmp	r3, #0
90000dbc:	d1eb      	bne.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
            (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dbe:	f8d8 3000 	ldr.w	r3, [r8]
90000dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && \
90000dc6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	d1e3      	bne.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dce:	2102      	movs	r1, #2
90000dd0:	482f      	ldr	r0, [pc, #188]	; (90000e90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
        Output_Is_Paused = 0;
90000dd2:	603b      	str	r3, [r7, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dd4:	f008 f8d8 	bl	90008f88 <HAL_JPEG_Resume>
90000dd8:	e7dd      	b.n	90000d96 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x126>
    if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dda:	f8da 1000 	ldr.w	r1, [sl]
90000dde:	2901      	cmp	r1, #1
90000de0:	d1d6      	bne.n	90000d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
90000de2:	f8db 1008 	ldr.w	r1, [fp, #8]
        JPEG_OUT_Read_BufferIndex++;
90000de6:	3301      	adds	r3, #1
        };
90000de8:	482a      	ldr	r0, [pc, #168]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
        tail_ = (tail_ + 1) % max_size_;
90000dea:	f8db c000 	ldr.w	ip, [fp]
        if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000dee:	2b01      	cmp	r3, #1
        };
90000df0:	f8d0 e000 	ldr.w	lr, [r0]
90000df4:	f101 0001 	add.w	r0, r1, #1
        buffer_[tail_] = job;
90000df8:	f101 0102 	add.w	r1, r1, #2
            JPEG_OUT_Read_BufferIndex = 0;
90000dfc:	bf88      	it	hi
90000dfe:	2300      	movhi	r3, #0
90000e00:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
90000e04:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
90000e08:	f8c8 3000 	str.w	r3, [r8]
        DMA2D_output_Is_Paused = 0;
90000e0c:	2300      	movs	r3, #0
90000e0e:	604a      	str	r2, [r1, #4]
        count_++;
90000e10:	f8db 100c 	ldr.w	r1, [fp, #12]
        tail_ = (tail_ + 1) % max_size_;
90000e14:	fbb0 f2fc 	udiv	r2, r0, ip
        count_++;
90000e18:	3101      	adds	r1, #1
        tail_ = (tail_ + 1) % max_size_;
90000e1a:	fb0c 0012 	mls	r0, ip, r2, r0
        count_++;
90000e1e:	f8cb 100c 	str.w	r1, [fp, #12]
        tail_ = (tail_ + 1) % max_size_;
90000e22:	f8cb 0008 	str.w	r0, [fp, #8]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e26:	4912      	ldr	r1, [pc, #72]	; (90000e70 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
90000e28:	481a      	ldr	r0, [pc, #104]	; (90000e94 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90000e2a:	68c9      	ldr	r1, [r1, #12]
90000e2c:	6802      	ldr	r2, [r0, #0]
90000e2e:	440a      	add	r2, r1
90000e30:	6002      	str	r2, [r0, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e32:	6c60      	ldr	r0, [r4, #68]	; 0x44
        DMA2D_output_Is_Paused = 0;
90000e34:	f8ca 3000 	str.w	r3, [sl]
        dma.start();
90000e38:	6803      	ldr	r3, [r0, #0]
90000e3a:	691b      	ldr	r3, [r3, #16]
90000e3c:	4798      	blx	r3
90000e3e:	e7a7      	b.n	90000d90 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x120>
        return 1;
90000e40:	2301      	movs	r3, #1
90000e42:	e791      	b.n	90000d68 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf8>
            lastError = AVI_ERROR_EOF_REACHED;
90000e44:	230d      	movs	r3, #13
90000e46:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000e4a:	e72c      	b.n	90000ca6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e4c:	1d32      	adds	r2, r6, #4
    if (reader != 0)
90000e4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000e50:	f106 0308 	add.w	r3, r6, #8
90000e54:	588e      	ldr	r6, [r1, r2]
    return movieData + offset;
90000e56:	4419      	add	r1, r3
90000e58:	e74f      	b.n	90000cfa <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e5a:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000e5c:	4b10      	ldr	r3, [pc, #64]	; (90000ea0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90000e5e:	4a11      	ldr	r2, [pc, #68]	; (90000ea4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90000e60:	21a7      	movs	r1, #167	; 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000e62:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000e66:	4810      	ldr	r0, [pc, #64]	; (90000ea8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
90000e68:	f022 fbfe 	bl	90023668 <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000e6c:	463e      	mov	r6, r7
90000e6e:	e7ee      	b.n	90000e4e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1de>
90000e70:	24005ba8 	.word	0x24005ba8
90000e74:	24005b7c 	.word	0x24005b7c
90000e78:	24000004 	.word	0x24000004
90000e7c:	24005ba4 	.word	0x24005ba4
90000e80:	24005b90 	.word	0x24005b90
90000e84:	24005b84 	.word	0x24005b84
90000e88:	24005b80 	.word	0x24005b80
90000e8c:	24005b88 	.word	0x24005b88
90000e90:	2400b078 	.word	0x2400b078
90000e94:	24005b9c 	.word	0x24005b9c
90000e98:	24005b94 	.word	0x24005b94
90000e9c:	24005b74 	.word	0x24005b74
90000ea0:	90024a7c 	.word	0x90024a7c
90000ea4:	90024a90 	.word	0x90024a90
90000ea8:	90024a24 	.word	0x90024a24
90000eac:	24005b8c 	.word	0x24005b8c
90000eb0:	24005b78 	.word	0x24005b78
90000eb4:	24005b98 	.word	0x24005b98
90000eb8:	24005bbc 	.word	0x24005bbc

90000ebc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ebc:	6943      	ldr	r3, [r0, #20]
{
90000ebe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ec2:	2b00      	cmp	r3, #0
90000ec4:	f000 8098 	beq.w	90000ff8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
90000ec8:	4605      	mov	r5, r0
    if (reader != 0)
90000eca:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
90000ecc:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
90000ece:	2800      	cmp	r0, #0
90000ed0:	f000 8082 	beq.w	90000fd8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
90000ed4:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000ed6:	2b07      	cmp	r3, #7
90000ed8:	f240 8083 	bls.w	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000edc:	6803      	ldr	r3, [r0, #0]
90000ede:	4621      	mov	r1, r4
90000ee0:	68db      	ldr	r3, [r3, #12]
90000ee2:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ee4:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000ee6:	2208      	movs	r2, #8
90000ee8:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000eea:	6803      	ldr	r3, [r0, #0]
90000eec:	691b      	ldr	r3, [r3, #16]
90000eee:	4798      	blx	r3
90000ef0:	2800      	cmp	r0, #0
90000ef2:	d06d      	beq.n	90000fd0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef4:	69ab      	ldr	r3, [r5, #24]
    if (reader != 0)
90000ef6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000ef8:	1d1a      	adds	r2, r3, #4
        aviBufferStartOffset = offset;
90000efa:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000efc:	2800      	cmp	r0, #0
90000efe:	d06d      	beq.n	90000fdc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
90000f00:	1b12      	subs	r2, r2, r4
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000f02:	6b6c      	ldr	r4, [r5, #52]	; 0x34
90000f04:	18a1      	adds	r1, r4, r2
90000f06:	5ca2      	ldrb	r2, [r4, r2]
90000f08:	788c      	ldrb	r4, [r1, #2]
90000f0a:	784e      	ldrb	r6, [r1, #1]
90000f0c:	0424      	lsls	r4, r4, #16
90000f0e:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
90000f12:	4314      	orrs	r4, r2
90000f14:	78ca      	ldrb	r2, [r1, #3]
90000f16:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
90000f1a:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f1c:	f243 0630 	movw	r6, #12336	; 0x3030
90000f20:	e039      	b.n	90000f96 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
90000f22:	6bab      	ldr	r3, [r5, #56]	; 0x38
90000f24:	2b07      	cmp	r3, #7
90000f26:	d95c      	bls.n	90000fe2 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
90000f28:	6803      	ldr	r3, [r0, #0]
90000f2a:	4621      	mov	r1, r4
90000f2c:	68db      	ldr	r3, [r3, #12]
90000f2e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f30:	6b28      	ldr	r0, [r5, #48]	; 0x30
90000f32:	2208      	movs	r2, #8
90000f34:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f36:	6803      	ldr	r3, [r0, #0]
90000f38:	691b      	ldr	r3, [r3, #16]
90000f3a:	4798      	blx	r3
90000f3c:	b908      	cbnz	r0, 90000f42 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000f3e:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90000f42:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90000f44:	69aa      	ldr	r2, [r5, #24]
        aviBufferStartOffset = offset;
90000f46:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90000f48:	2800      	cmp	r0, #0
90000f4a:	d053      	beq.n	90000ff4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90000f4c:	1b12      	subs	r2, r2, r4
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90000f4e:	6b69      	ldr	r1, [r5, #52]	; 0x34
90000f50:	188b      	adds	r3, r1, r2
90000f52:	5c89      	ldrb	r1, [r1, r2]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000f54:	799c      	ldrb	r4, [r3, #6]
90000f56:	f893 a005 	ldrb.w	sl, [r3, #5]
90000f5a:	0424      	lsls	r4, r4, #16
90000f5c:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90000f60:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000f64:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
90000f68:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90000f6c:	f893 8003 	ldrb.w	r8, [r3, #3]
90000f70:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90000f74:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000f76:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90000f7a:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90000f7e:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90000f82:	f246 3264 	movw	r2, #25444	; 0x6364
90000f86:	42b1      	cmp	r1, r6
90000f88:	bf08      	it	eq
90000f8a:	4293      	cmpeq	r3, r2
90000f8c:	bf0c      	ite	eq
90000f8e:	2101      	moveq	r1, #1
90000f90:	2100      	movne	r1, #0
90000f92:	d01a      	beq.n	90000fca <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90000f94:	69ab      	ldr	r3, [r5, #24]
90000f96:	441c      	add	r4, r3
90000f98:	6aab      	ldr	r3, [r5, #40]	; 0x28
90000f9a:	f104 0208 	add.w	r2, r4, #8
90000f9e:	429a      	cmp	r2, r3
90000fa0:	d20e      	bcs.n	90000fc0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90000fa2:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa4:	3409      	adds	r4, #9
        frameNumber++;
90000fa6:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90000fa8:	f024 0401 	bic.w	r4, r4, #1
90000fac:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90000fb0:	2800      	cmp	r0, #0
90000fb2:	d1b6      	bne.n	90000f22 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90000fb4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
90000fb6:	191a      	adds	r2, r3, r4
90000fb8:	5b19      	ldrh	r1, [r3, r4]
90000fba:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fbc:	6854      	ldr	r4, [r2, #4]
90000fbe:	e7e0      	b.n	90000f82 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90000fc0:	2201      	movs	r2, #1
    currentMovieOffset = firstFrameOffset; //start over
90000fc2:	6a2b      	ldr	r3, [r5, #32]
    return false;
90000fc4:	2100      	movs	r1, #0
    currentMovieOffset = firstFrameOffset; //start over
90000fc6:	e9c5 2305 	strd	r2, r3, [r5, #20]
}
90000fca:	4608      	mov	r0, r1
90000fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000fd0:	230d      	movs	r3, #13
90000fd2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
90000fd6:	e78d      	b.n	90000ef4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
90000fd8:	1d22      	adds	r2, r4, #4
90000fda:	4623      	mov	r3, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000fdc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
90000fde:	588c      	ldr	r4, [r1, r2]
90000fe0:	e79b      	b.n	90000f1a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fe2:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000fe4:	4b07      	ldr	r3, [pc, #28]	; (90001004 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
90000fe6:	4a08      	ldr	r2, [pc, #32]	; (90001008 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
90000fe8:	21a7      	movs	r1, #167	; 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000fea:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90000fee:	4807      	ldr	r0, [pc, #28]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90000ff0:	f022 fb3a 	bl	90023668 <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
90000ff4:	4614      	mov	r4, r2
90000ff6:	e7dd      	b.n	90000fb4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90000ff8:	4b05      	ldr	r3, [pc, #20]	; (90001010 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
90000ffa:	21ed      	movs	r1, #237	; 0xed
90000ffc:	4a05      	ldr	r2, [pc, #20]	; (90001014 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
90000ffe:	4803      	ldr	r0, [pc, #12]	; (9000100c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
90001000:	f022 fb32 	bl	90023668 <__assert_func>
90001004:	90024a7c 	.word	0x90024a7c
90001008:	90024a90 	.word	0x90024a90
9000100c:	90024a24 	.word	0x90024a24
90001010:	90024ad4 	.word	0x90024ad4
90001014:	90024b20 	.word	0x90024b20

90001018 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001018:	6943      	ldr	r3, [r0, #20]
{
9000101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000101e:	2b00      	cmp	r3, #0
90001020:	f000 809b 	beq.w	9000115a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x142>
    readData(currentMovieOffset, 8);
90001024:	4604      	mov	r4, r0
    if (reader != 0)
90001026:	6b00      	ldr	r0, [r0, #48]	; 0x30
90001028:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
9000102a:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
9000102c:	2800      	cmp	r0, #0
9000102e:	d061      	beq.n	900010f4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xdc>
        if (length > aviBufferLength)
90001030:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001032:	2b07      	cmp	r3, #7
90001034:	f240 8097 	bls.w	90001166 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
90001038:	6803      	ldr	r3, [r0, #0]
9000103a:	4629      	mov	r1, r5
9000103c:	68db      	ldr	r3, [r3, #12]
9000103e:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001040:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001042:	2208      	movs	r2, #8
90001044:	6b61      	ldr	r1, [r4, #52]	; 0x34
90001046:	6803      	ldr	r3, [r0, #0]
90001048:	691b      	ldr	r3, [r3, #16]
9000104a:	4798      	blx	r3
9000104c:	2800      	cmp	r0, #0
9000104e:	d04c      	beq.n	900010ea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    if (reader != 0)
90001050:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001052:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001054:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
90001056:	2800      	cmp	r0, #0
90001058:	d04b      	beq.n	900010f2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xda>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000105a:	f101 0c04 	add.w	ip, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
9000105e:	1c8a      	adds	r2, r1, #2
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001060:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001062:	ebac 0c05 	sub.w	ip, ip, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001066:	1b52      	subs	r2, r2, r5
90001068:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000106a:	eb03 0e0c 	add.w	lr, r3, ip
9000106e:	f813 700c 	ldrb.w	r7, [r3, ip]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001072:	eb03 0805 	add.w	r8, r3, r5
90001076:	f813 c005 	ldrb.w	ip, [r3, r5]
9000107a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000107e:	f89e 8001 	ldrb.w	r8, [lr, #1]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
90001082:	ea4c 2c05 	orr.w	ip, ip, r5, lsl #8
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001086:	f89e 5002 	ldrb.w	r5, [lr, #2]
9000108a:	f89e e003 	ldrb.w	lr, [lr, #3]
9000108e:	042d      	lsls	r5, r5, #16
90001090:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
90001094:	433d      	orrs	r5, r7
90001096:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
9000109a:	eb03 0e02 	add.w	lr, r3, r2
9000109e:	5c9b      	ldrb	r3, [r3, r2]
900010a0:	f89e 2001 	ldrb.w	r2, [lr, #1]
900010a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
900010a8:	194a      	adds	r2, r1, r5
900010aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
900010ac:	f102 0e08 	add.w	lr, r2, #8
900010b0:	45be      	cmp	lr, r7
900010b2:	d213      	bcs.n	900010dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
900010b4:	f243 0730 	movw	r7, #12336	; 0x3030
900010b8:	45bc      	cmp	ip, r7
900010ba:	d124      	bne.n	90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010bc:	f246 3764 	movw	r7, #25444	; 0x6364
900010c0:	42bb      	cmp	r3, r7
900010c2:	d120      	bne.n	90001106 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
900010c4:	bb1d      	cbnz	r5, 9000110e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xf6>
            currentMovieOffset += 8;
900010c6:	4672      	mov	r2, lr
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010c8:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010cc:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
900010d0:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
900010d2:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900010d4:	d002      	beq.n	900010dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc4>
900010d6:	2001      	movs	r0, #1
}
900010d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900010dc:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900010de:	6a23      	ldr	r3, [r4, #32]
900010e0:	2000      	movs	r0, #0
900010e2:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
900010e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900010ea:	230d      	movs	r3, #13
900010ec:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
900010f0:	e7ae      	b.n	90001050 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
900010f2:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
900010f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
900010f6:	4629      	mov	r1, r5
900010f8:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
900010fa:	f832 c005 	ldrh.w	ip, [r2, r5]
900010fe:	442a      	add	r2, r5
90001100:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001102:	6855      	ldr	r5, [r2, #4]
90001104:	e7d0      	b.n	900010a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x90>
        currentMovieOffset += chunkSize;
90001106:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
90001108:	2d00      	cmp	r5, #0
9000110a:	d1dd      	bne.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
9000110c:	e7db      	b.n	900010c6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xae>
            currentMovieOffset += 8;
9000110e:	f101 0708 	add.w	r7, r1, #8
90001112:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
90001114:	b1f0      	cbz	r0, 90001154 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13c>
        if (length > aviBufferLength)
90001116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001118:	429d      	cmp	r5, r3
9000111a:	d824      	bhi.n	90001166 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x14e>
        reader->seek(offset);
9000111c:	6803      	ldr	r3, [r0, #0]
9000111e:	4639      	mov	r1, r7
90001120:	68db      	ldr	r3, [r3, #12]
90001122:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001124:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001126:	462a      	mov	r2, r5
90001128:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000112a:	6803      	ldr	r3, [r0, #0]
9000112c:	691b      	ldr	r3, [r3, #16]
9000112e:	4798      	blx	r3
90001130:	b910      	cbnz	r0, 90001138 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x120>
            lastError = AVI_ERROR_EOF_REACHED;
90001132:	230d      	movs	r3, #13
90001134:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001138:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
9000113a:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
9000113c:	b126      	cbz	r6, 90001148 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x130>
9000113e:	4633      	mov	r3, r6
90001140:	462a      	mov	r2, r5
90001142:	4620      	mov	r0, r4
90001144:	f7ff fc42 	bl	900009cc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001148:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
9000114c:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000114e:	442a      	add	r2, r5
            frameNumber++;
90001150:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
90001152:	e7b9      	b.n	900010c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb0>
    return movieData + offset;
90001154:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001156:	4439      	add	r1, r7
90001158:	e7f0      	b.n	9000113c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x124>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
9000115a:	4b07      	ldr	r3, [pc, #28]	; (90001178 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000115c:	21b9      	movs	r1, #185	; 0xb9
9000115e:	4a07      	ldr	r2, [pc, #28]	; (9000117c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001160:	4807      	ldr	r0, [pc, #28]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001162:	f022 fa81 	bl	90023668 <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001166:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001168:	4b06      	ldr	r3, [pc, #24]	; (90001184 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x16c>)
9000116a:	4a07      	ldr	r2, [pc, #28]	; (90001188 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x170>)
9000116c:	21a7      	movs	r1, #167	; 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000116e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001172:	4803      	ldr	r0, [pc, #12]	; (90001180 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001174:	f022 fa78 	bl	90023668 <__assert_func>
90001178:	90024ad4 	.word	0x90024ad4
9000117c:	90024b54 	.word	0x90024b54
90001180:	90024a24 	.word	0x90024a24
90001184:	90024a7c 	.word	0x90024a7c
90001188:	90024a90 	.word	0x90024a90

9000118c <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
9000118c:	b538      	push	{r3, r4, r5, lr}
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
9000118e:	2500      	movs	r5, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001190:	4b0f      	ldr	r3, [pc, #60]	; (900011d0 <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001192:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001194:	6003      	str	r3, [r0, #0]
90001196:	63c5      	str	r5, [r0, #60]	; 0x3c
90001198:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
9000119c:	e9c0 5505 	strd	r5, r5, [r0, #20]
900011a0:	e9c0 5507 	strd	r5, r5, [r0, #28]
900011a4:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
900011a8:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
900011ac:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
900011b0:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
900011b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
900011b8:	f002 fa42 	bl	90003640 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
900011bc:	462a      	mov	r2, r5
900011be:	4629      	mov	r1, r5
900011c0:	2001      	movs	r0, #1
900011c2:	f00b fcc1 	bl	9000cb48 <osSemaphoreNew>
900011c6:	4b03      	ldr	r3, [pc, #12]	; (900011d4 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
900011c8:	4602      	mov	r2, r0
}
900011ca:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
900011cc:	601a      	str	r2, [r3, #0]
}
900011ce:	bd38      	pop	{r3, r4, r5, pc}
900011d0:	90024cd4 	.word	0x90024cd4
900011d4:	24005be0 	.word	0x24005be0

900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900011d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900011dc:	2100      	movs	r1, #0
    if (reader != 0)
900011de:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
900011e0:	b083      	sub	sp, #12
900011e2:	4605      	mov	r5, r0
    currentMovieOffset = 0;
900011e4:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
900011e6:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
900011ea:	2e00      	cmp	r6, #0
900011ec:	f000 81aa 	beq.w	90001544 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>
        if (length > aviBufferLength)
900011f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
900011f2:	2b47      	cmp	r3, #71	; 0x47
900011f4:	f240 8202 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900011f8:	6833      	ldr	r3, [r6, #0]
900011fa:	4630      	mov	r0, r6
900011fc:	68db      	ldr	r3, [r3, #12]
900011fe:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001200:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001202:	2248      	movs	r2, #72	; 0x48
90001204:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001206:	6803      	ldr	r3, [r0, #0]
90001208:	691b      	ldr	r3, [r3, #16]
9000120a:	4798      	blx	r3
9000120c:	2800      	cmp	r0, #0
9000120e:	f000 80ce 	beq.w	900013ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d6>
        aviBufferStartOffset = offset;
90001212:	2300      	movs	r3, #0
    if (reader != 0)
90001214:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
90001216:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
90001218:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
9000121a:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
9000121c:	2e00      	cmp	r6, #0
9000121e:	f000 8192 	beq.w	90001546 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001222:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001226:	2204      	movs	r2, #4
90001228:	49be      	ldr	r1, [pc, #760]	; (90001524 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x34c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000122a:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
9000122e:	4658      	mov	r0, fp
90001230:	f022 fcbc 	bl	90023bac <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001234:	2800      	cmp	r0, #0
90001236:	f040 81ea 	bne.w	9000160e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000123a:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000123e:	2204      	movs	r2, #4
90001240:	49b9      	ldr	r1, [pc, #740]	; (90001528 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x350>)
    currentMovieOffset += 8;
90001242:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001244:	4440      	add	r0, r8
90001246:	f022 fcb1 	bl	90023bac <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000124a:	2800      	cmp	r0, #0
9000124c:	f040 81fa 	bne.w	90001644 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001250:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001254:	2204      	movs	r2, #4
90001256:	49b5      	ldr	r1, [pc, #724]	; (9000152c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x354>)
90001258:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000125c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001260:	f022 fca4 	bl	90023bac <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001264:	9001      	str	r0, [sp, #4]
90001266:	2800      	cmp	r0, #0
90001268:	f040 81e2 	bne.w	90001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000126c:	f89b 4012 	ldrb.w	r4, [fp, #18]
90001270:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001274:	0424      	lsls	r4, r4, #16
90001276:	f89b 3013 	ldrb.w	r3, [fp, #19]
9000127a:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000127e:	f89b 2010 	ldrb.w	r2, [fp, #16]
90001282:	4314      	orrs	r4, r2
    assert(aviListSize);
90001284:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
90001288:	f000 81cb 	beq.w	90001622 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
9000128c:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001290:	2204      	movs	r2, #4
90001292:	49a7      	ldr	r1, [pc, #668]	; (90001530 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x358>)
90001294:	4440      	add	r0, r8
90001296:	f022 fc89 	bl	90023bac <strncmp>
    if (compare(offset, "hdrl", 4))
9000129a:	2800      	cmp	r0, #0
9000129c:	f000 808b 	beq.w	900013b6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1de>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012a0:	2306      	movs	r3, #6
        foundFrame = false;
900012a2:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
900012a6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900012aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900012ae:	4440      	add	r0, r8
    return strncmp(src, str, num);
900012b0:	2204      	movs	r2, #4
900012b2:	49a0      	ldr	r1, [pc, #640]	; (90001534 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x35c>)
900012b4:	f022 fc7a 	bl	90023bac <strncmp>
    if (compare(offset, "avih", 4))
900012b8:	2800      	cmp	r0, #0
900012ba:	f000 8085 	beq.w	900013c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f0>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
900012be:	2307      	movs	r3, #7
900012c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
900012c4:	4454      	add	r4, sl
900012c6:	3408      	adds	r4, #8
    if (reader != 0)
900012c8:	f1b9 0f00 	cmp.w	r9, #0
900012cc:	d015      	beq.n	900012fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x122>
        if (length > aviBufferLength)
900012ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
900012d0:	2b0b      	cmp	r3, #11
900012d2:	f240 8193 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900012d6:	f8d9 3000 	ldr.w	r3, [r9]
900012da:	4621      	mov	r1, r4
900012dc:	4648      	mov	r0, r9
900012de:	68db      	ldr	r3, [r3, #12]
900012e0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900012e2:	6b28      	ldr	r0, [r5, #48]	; 0x30
900012e4:	220c      	movs	r2, #12
900012e6:	6b69      	ldr	r1, [r5, #52]	; 0x34
900012e8:	6803      	ldr	r3, [r0, #0]
900012ea:	691b      	ldr	r3, [r3, #16]
900012ec:	4798      	blx	r3
900012ee:	b910      	cbnz	r0, 900012f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x11e>
            lastError = AVI_ERROR_EOF_REACHED;
900012f0:	230d      	movs	r3, #13
900012f2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900012f6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
900012f8:	63ec      	str	r4, [r5, #60]	; 0x3c
        return aviBuffer;
900012fa:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
    return strncmp(src, str, num);
900012fe:	4f8e      	ldr	r7, [pc, #568]	; (90001538 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>)
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001300:	f104 0808 	add.w	r8, r4, #8
    if (reader != 0)
90001304:	2e00      	cmp	r6, #0
90001306:	d041      	beq.n	9000138c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001308:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
9000130a:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
9000130c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
9000130e:	4639      	mov	r1, r7
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001310:	eba8 0303 	sub.w	r3, r8, r3
90001314:	4418      	add	r0, r3
    return strncmp(src, str, num);
90001316:	f022 fc49 	bl	90023bac <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000131a:	2800      	cmp	r0, #0
9000131c:	d03e      	beq.n	9000139c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>
9000131e:	f1b9 0f00 	cmp.w	r9, #0
90001322:	d13e      	bne.n	900013a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ca>
90001324:	6aab      	ldr	r3, [r5, #40]	; 0x28
90001326:	42a3      	cmp	r3, r4
90001328:	f240 80a7 	bls.w	9000147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
9000132c:	3404      	adds	r4, #4
    if (reader != 0)
9000132e:	2e00      	cmp	r6, #0
90001330:	d046      	beq.n	900013c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
        const uint32_t index = offset - aviBufferStartOffset;
90001332:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
90001334:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001338:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
9000133a:	2b0b      	cmp	r3, #11
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000133c:	eb01 0204 	add.w	r2, r1, r4
90001340:	5d09      	ldrb	r1, [r1, r4]
90001342:	7894      	ldrb	r4, [r2, #2]
90001344:	7850      	ldrb	r0, [r2, #1]
90001346:	ea4f 4404 	mov.w	r4, r4, lsl #16
9000134a:	78d2      	ldrb	r2, [r2, #3]
9000134c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001350:	ea44 0401 	orr.w	r4, r4, r1
90001354:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
90001358:	4444      	add	r4, r8
        if (length > aviBufferLength)
9000135a:	f240 814f 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
9000135e:	6833      	ldr	r3, [r6, #0]
90001360:	4621      	mov	r1, r4
90001362:	4630      	mov	r0, r6
90001364:	68db      	ldr	r3, [r3, #12]
90001366:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001368:	6b28      	ldr	r0, [r5, #48]	; 0x30
9000136a:	220c      	movs	r2, #12
9000136c:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000136e:	6803      	ldr	r3, [r0, #0]
90001370:	691b      	ldr	r3, [r3, #16]
90001372:	4798      	blx	r3
90001374:	b910      	cbnz	r0, 9000137c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a4>
            lastError = AVI_ERROR_EOF_REACHED;
90001376:	230d      	movs	r3, #13
90001378:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
9000137c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
9000137e:	f104 0808 	add.w	r8, r4, #8
90001382:	f895 9040 	ldrb.w	r9, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
90001386:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
90001388:	2e00      	cmp	r6, #0
9000138a:	d1bd      	bne.n	90001308 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x130>
        src = (const char*)movieData + offset;
9000138c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000138e:	2204      	movs	r2, #4
90001390:	4639      	mov	r1, r7
        src = (const char*)movieData + offset;
90001392:	4440      	add	r0, r8
    return strncmp(src, str, num);
90001394:	f022 fc0a 	bl	90023bac <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001398:	2800      	cmp	r0, #0
9000139a:	d1c0      	bne.n	9000131e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x146>
    if (lastError != AVI_NO_ERROR)
9000139c:	f1b9 0f00 	cmp.w	r9, #0
900013a0:	d06b      	beq.n	9000147a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
900013a2:	230a      	movs	r3, #10
900013a4:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900013a8:	b003      	add	sp, #12
900013aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013ae:	230d      	movs	r3, #13
900013b0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900013b4:	e72d      	b.n	90001212 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
900013b6:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900013ba:	f04f 0b01 	mov.w	fp, #1
900013be:	e776      	b.n	900012ae <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        listOffset += listSize;
900013c0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
900013c2:	591c      	ldr	r4, [r3, r4]
900013c4:	4444      	add	r4, r8
    return movieData + offset;
900013c6:	e79b      	b.n	90001300 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x128>
    if (foundFrame)
900013c8:	f1bb 0f00 	cmp.w	fp, #0
900013cc:	f43f af7a 	beq.w	900012c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900013d0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900013d4:	f1b9 0f00 	cmp.w	r9, #0
900013d8:	f000 80f4 	beq.w	900015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3ec>
        const uint32_t index = offset - aviBufferStartOffset;
900013dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900013de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
900013e0:	1ac9      	subs	r1, r1, r3
900013e2:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
900013e6:	f8df c158 	ldr.w	ip, [pc, #344]	; 90001540 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x368>
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900013ea:	f812 8001 	ldrb.w	r8, [r2, r1]
900013ee:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
900013f2:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
900013f6:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
900013fa:	4438      	add	r0, r7
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900013fc:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
90001400:	4439      	add	r1, r7
90001402:	441f      	add	r7, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001404:	f89e 3002 	ldrb.w	r3, [lr, #2]
90001408:	f89e e003 	ldrb.w	lr, [lr, #3]
9000140c:	041b      	lsls	r3, r3, #16
9000140e:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
90001412:	ea43 0308 	orr.w	r3, r3, r8
90001416:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset) / 1000;
9000141a:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
9000141e:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset) / 1000;
90001422:	099b      	lsrs	r3, r3, #6
90001424:	606b      	str	r3, [r5, #4]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001426:	f89c 3002 	ldrb.w	r3, [ip, #2]
9000142a:	f89c 8001 	ldrb.w	r8, [ip, #1]
9000142e:	041b      	lsls	r3, r3, #16
90001430:	f812 e000 	ldrb.w	lr, [r2, r0]
90001434:	f89c c003 	ldrb.w	ip, [ip, #3]
90001438:	1850      	adds	r0, r2, r1
9000143a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000143e:	ea43 030e 	orr.w	r3, r3, lr
90001442:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001446:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001448:	7883      	ldrb	r3, [r0, #2]
9000144a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000144e:	041b      	lsls	r3, r3, #16
90001450:	5c51      	ldrb	r1, [r2, r1]
90001452:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001456:	430b      	orrs	r3, r1
90001458:	78c1      	ldrb	r1, [r0, #3]
9000145a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000145e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001460:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001462:	788b      	ldrb	r3, [r1, #2]
90001464:	7848      	ldrb	r0, [r1, #1]
90001466:	041b      	lsls	r3, r3, #16
90001468:	5dd2      	ldrb	r2, [r2, r7]
9000146a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000146e:	4313      	orrs	r3, r2
90001470:	78ca      	ldrb	r2, [r1, #3]
90001472:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
        videoInfo.frame_height = getU32(offset + 36);
90001476:	612b      	str	r3, [r5, #16]
90001478:	e724      	b.n	900012c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xec>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000147a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000147e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
90001480:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
90001482:	2e00      	cmp	r6, #0
90001484:	f000 80b2 	beq.w	900015ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x414>
        const uint32_t index = offset - aviBufferStartOffset;
90001488:	6beb      	ldr	r3, [r5, #60]	; 0x3c
9000148a:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
9000148c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
90001490:	f104 0c02 	add.w	ip, r4, #2
90001494:	1c67      	adds	r7, r4, #1
90001496:	f811 e004 	ldrb.w	lr, [r1, r4]
9000149a:	1ce0      	adds	r0, r4, #3
9000149c:	f811 300c 	ldrb.w	r3, [r1, ip]
        if (length > aviBufferLength)
900014a0:	2a03      	cmp	r2, #3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900014a2:	f811 9007 	ldrb.w	r9, [r1, r7]
900014a6:	ea4f 4303 	mov.w	r3, r3, lsl #16
900014aa:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
900014ae:	ea43 030e 	orr.w	r3, r3, lr
900014b2:	f811 e000 	ldrb.w	lr, [r1, r0]
900014b6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900014ba:	4443      	add	r3, r8
900014bc:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
900014be:	f811 300c 	ldrb.w	r3, [r1, ip]
900014c2:	f811 c007 	ldrb.w	ip, [r1, r7]
900014c6:	5d0f      	ldrb	r7, [r1, r4]
900014c8:	ea4f 4403 	mov.w	r4, r3, lsl #16
900014cc:	5c09      	ldrb	r1, [r1, r0]
900014ce:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
900014d2:	ea44 0407 	orr.w	r4, r4, r7
900014d6:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
    listOffset += listSize;
900014da:	4444      	add	r4, r8
        if (length > aviBufferLength)
900014dc:	f240 808e 	bls.w	900015fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x424>
        reader->seek(offset);
900014e0:	6833      	ldr	r3, [r6, #0]
900014e2:	4621      	mov	r1, r4
900014e4:	4630      	mov	r0, r6
900014e6:	68db      	ldr	r3, [r3, #12]
900014e8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900014ea:	6b28      	ldr	r0, [r5, #48]	; 0x30
900014ec:	2204      	movs	r2, #4
900014ee:	6b69      	ldr	r1, [r5, #52]	; 0x34
900014f0:	6803      	ldr	r3, [r0, #0]
900014f2:	691b      	ldr	r3, [r3, #16]
900014f4:	4798      	blx	r3
900014f6:	2800      	cmp	r0, #0
900014f8:	d05a      	beq.n	900015b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d8>
    if (reader != 0)
900014fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
900014fc:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900014fe:	2b00      	cmp	r3, #0
90001500:	f000 80aa 	beq.w	90001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x480>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001504:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
90001506:	2204      	movs	r2, #4
90001508:	490c      	ldr	r1, [pc, #48]	; (9000153c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x364>)
9000150a:	f022 fb4f 	bl	90023bac <strncmp>
    if (!compare(listOffset, "idx1", 4))
9000150e:	2800      	cmp	r0, #0
90001510:	d166      	bne.n	900015e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x408>
    frameNumber = 1; //next frame number is 1
90001512:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
90001514:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
90001516:	61ec      	str	r4, [r5, #28]
    frameNumber = 1; //next frame number is 1
90001518:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
9000151a:	622b      	str	r3, [r5, #32]
}
9000151c:	b003      	add	sp, #12
9000151e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90001522:	bf00      	nop
90001524:	90024bb0 	.word	0x90024bb0
90001528:	90024c68 	.word	0x90024c68
9000152c:	90024c60 	.word	0x90024c60
90001530:	90024c58 	.word	0x90024c58
90001534:	90024c40 	.word	0x90024c40
90001538:	90024c48 	.word	0x90024c48
9000153c:	90024c50 	.word	0x90024c50
90001540:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001544:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001546:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
9000154a:	2204      	movs	r2, #4
9000154c:	4944      	ldr	r1, [pc, #272]	; (90001660 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x488>)
        src = (const char*)movieData + offset;
9000154e:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
90001552:	4620      	mov	r0, r4
90001554:	f022 fb2a 	bl	90023bac <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001558:	2800      	cmp	r0, #0
9000155a:	d158      	bne.n	9000160e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x436>
    currentMovieOffset += 8;
9000155c:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
90001560:	2204      	movs	r2, #4
90001562:	4940      	ldr	r1, [pc, #256]	; (90001664 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>)
    currentMovieOffset += 8;
90001564:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001566:	4440      	add	r0, r8
90001568:	f022 fb20 	bl	90023bac <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
9000156c:	2800      	cmp	r0, #0
9000156e:	d169      	bne.n	90001644 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x46c>
    currentMovieOffset += 4;
90001570:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001574:	2204      	movs	r2, #4
90001576:	493c      	ldr	r1, [pc, #240]	; (90001668 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x490>)
90001578:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
9000157c:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
90001580:	f022 fb14 	bl	90023bac <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001584:	4683      	mov	fp, r0
90001586:	2800      	cmp	r0, #0
90001588:	d152      	bne.n	90001630 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x458>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
9000158a:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
9000158c:	2c00      	cmp	r4, #0
9000158e:	d048      	beq.n	90001622 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x44a>
    uint32_t offset =  currentMovieOffset + 8;
90001590:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001594:	2204      	movs	r2, #4
90001596:	4935      	ldr	r1, [pc, #212]	; (9000166c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x494>)
90001598:	4440      	add	r0, r8
9000159a:	f022 fb07 	bl	90023bac <strncmp>
    if (compare(offset, "hdrl", 4))
9000159e:	b958      	cbnz	r0, 900015b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3e0>
    offset += 4;
900015a0:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
900015a4:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
900015a8:	4440      	add	r0, r8
900015aa:	f04f 0900 	mov.w	r9, #0
900015ae:	e67f      	b.n	900012b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd8>
            lastError = AVI_ERROR_EOF_REACHED;
900015b0:	230d      	movs	r3, #13
900015b2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900015b6:	e7a0      	b.n	900014fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x322>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015b8:	2306      	movs	r3, #6
    offset += 4;
900015ba:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900015be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900015c2:	e7f1      	b.n	900015a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3d0>
900015c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset) / 1000;
900015c6:	585a      	ldr	r2, [r3, r1]
900015c8:	443b      	add	r3, r7
900015ca:	4929      	ldr	r1, [pc, #164]	; (90001670 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x498>)
900015cc:	fba1 1202 	umull	r1, r2, r1, r2
900015d0:	0992      	lsrs	r2, r2, #6
900015d2:	606a      	str	r2, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900015d6:	60aa      	str	r2, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900015da:	60ea      	str	r2, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900015de:	e74a      	b.n	90001476 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x29e>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900015e0:	230b      	movs	r3, #11
900015e2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900015e6:	b003      	add	sp, #12
900015e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900015ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900015ee:	5903      	ldr	r3, [r0, r4]
900015f0:	4443      	add	r3, r8
900015f2:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
900015f4:	5904      	ldr	r4, [r0, r4]
900015f6:	4444      	add	r4, r8
        src = (const char*)movieData + offset;
900015f8:	4420      	add	r0, r4
900015fa:	e784      	b.n	90001506 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900015fc:	2009      	movs	r0, #9
            assert(!"Buffer to small");
900015fe:	4b1d      	ldr	r3, [pc, #116]	; (90001674 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x49c>)
90001600:	4a1d      	ldr	r2, [pc, #116]	; (90001678 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>)
90001602:	21a7      	movs	r1, #167	; 0xa7
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001604:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
90001608:	481c      	ldr	r0, [pc, #112]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000160a:	f022 f82d 	bl	90023668 <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
9000160e:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
90001610:	4b1b      	ldr	r3, [pc, #108]	; (90001680 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
90001612:	4a1c      	ldr	r2, [pc, #112]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001614:	f240 1135 	movw	r1, #309	; 0x135
        lastError = AVI_ERROR_NOT_RIFF;
90001618:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
9000161c:	4817      	ldr	r0, [pc, #92]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000161e:	f022 f823 	bl	90023668 <__assert_func>
    assert(aviListSize);
90001622:	4b19      	ldr	r3, [pc, #100]	; (90001688 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001624:	f44f 71a5 	mov.w	r1, #330	; 0x14a
90001628:	4a16      	ldr	r2, [pc, #88]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000162a:	4814      	ldr	r0, [pc, #80]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
9000162c:	f022 f81c 	bl	90023668 <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001630:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
90001632:	4b16      	ldr	r3, [pc, #88]	; (9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001634:	4a13      	ldr	r2, [pc, #76]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
90001636:	f44f 71a2 	mov.w	r1, #324	; 0x144
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000163a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000163e:	480f      	ldr	r0, [pc, #60]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001640:	f022 f812 	bl	90023668 <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001644:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001646:	4b12      	ldr	r3, [pc, #72]	; (90001690 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
90001648:	4a0e      	ldr	r2, [pc, #56]	; (90001684 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
9000164a:	f240 113d 	movw	r1, #317	; 0x13d
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000164e:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
90001652:	480a      	ldr	r0, [pc, #40]	; (9000167c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a4>)
90001654:	f022 f808 	bl	90023668 <__assert_func>
        src = (const char*)movieData + offset;
90001658:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000165a:	4420      	add	r0, r4
9000165c:	e753      	b.n	90001506 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32e>
9000165e:	bf00      	nop
90001660:	90024bb0 	.word	0x90024bb0
90001664:	90024c68 	.word	0x90024c68
90001668:	90024c60 	.word	0x90024c60
9000166c:	90024c58 	.word	0x90024c58
90001670:	10624dd3 	.word	0x10624dd3
90001674:	90024a7c 	.word	0x90024a7c
90001678:	90024a90 	.word	0x90024a90
9000167c:	90024a24 	.word	0x90024a24
90001680:	90024bb8 	.word	0x90024bb8
90001684:	90024bd4 	.word	0x90024bd4
90001688:	90024c34 	.word	0x90024c34
9000168c:	90024c1c 	.word	0x90024c1c
90001690:	90024c04 	.word	0x90024c04

90001694 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
90001694:	b410      	push	{r4}
    reader = 0; //not using reader
90001696:	2400      	movs	r4, #0
    movieLength = length;
90001698:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
9000169c:	6304      	str	r4, [r0, #48]	; 0x30
}
9000169e:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
900016a2:	f7ff bd99 	b.w	900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
900016a6:	bf00      	nop

900016a8 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
900016a8:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
900016aa:	680b      	ldr	r3, [r1, #0]
{
900016ac:	4604      	mov	r4, r0
    movieData = 0;
900016ae:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
900016b0:	4608      	mov	r0, r1
900016b2:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900016b4:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900016b8:	4798      	blx	r3
900016ba:	4603      	mov	r3, r0
    readVideoHeader();
900016bc:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900016be:	62a3      	str	r3, [r4, #40]	; 0x28
}
900016c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900016c4:	f7ff bd88 	b.w	900011d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900016c8 <HAL_JPEG_InfoReadyCallback>:
    {
900016c8:	b508      	push	{r3, lr}
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ca:	684b      	ldr	r3, [r1, #4]
    {
900016cc:	4608      	mov	r0, r1
        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900016ce:	2b01      	cmp	r3, #1
900016d0:	d01a      	beq.n	90001708 <HAL_JPEG_InfoReadyCallback+0x40>
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900016d2:	2b02      	cmp	r3, #2
900016d4:	d010      	beq.n	900016f8 <HAL_JPEG_InfoReadyCallback+0x30>
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900016d6:	b94b      	cbnz	r3, 900016ec <HAL_JPEG_InfoReadyCallback+0x24>
                if ((pInfo->ImageWidth % 8) != 0)
900016d8:	68cb      	ldr	r3, [r1, #12]
900016da:	0759      	lsls	r1, r3, #29
900016dc:	d12f      	bne.n	9000173e <HAL_JPEG_InfoReadyCallback+0x76>
                if ((pInfo->ImageHeight % 8) != 0)
900016de:	6883      	ldr	r3, [r0, #8]
900016e0:	075a      	lsls	r2, r3, #29
900016e2:	d003      	beq.n	900016ec <HAL_JPEG_InfoReadyCallback+0x24>
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900016e4:	f023 0307 	bic.w	r3, r3, #7
900016e8:	3308      	adds	r3, #8
900016ea:	6083      	str	r3, [r0, #8]
            HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
900016ec:	4a1a      	ldr	r2, [pc, #104]	; (90001758 <HAL_JPEG_InfoReadyCallback+0x90>)
900016ee:	491b      	ldr	r1, [pc, #108]	; (9000175c <HAL_JPEG_InfoReadyCallback+0x94>)
900016f0:	f00e feb8 	bl	90010464 <JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
900016f4:	bb40      	cbnz	r0, 90001748 <HAL_JPEG_InfoReadyCallback+0x80>
    }
900016f6:	bd08      	pop	{r3, pc}
                if ((pInfo->ImageWidth % 16) != 0)
900016f8:	68cb      	ldr	r3, [r1, #12]
900016fa:	071a      	lsls	r2, r3, #28
900016fc:	d0ef      	beq.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
900016fe:	f023 030f 	bic.w	r3, r3, #15
90001702:	3310      	adds	r3, #16
90001704:	60cb      	str	r3, [r1, #12]
90001706:	e7ea      	b.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
            if ((pInfo->ImageWidth % 16) != 0)
90001708:	68cb      	ldr	r3, [r1, #12]
9000170a:	071a      	lsls	r2, r3, #28
9000170c:	d003      	beq.n	90001716 <HAL_JPEG_InfoReadyCallback+0x4e>
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
9000170e:	f023 030f 	bic.w	r3, r3, #15
90001712:	3310      	adds	r3, #16
90001714:	60cb      	str	r3, [r1, #12]
            if ((pInfo->ImageHeight % 16) != 0)
90001716:	6883      	ldr	r3, [r0, #8]
90001718:	0719      	lsls	r1, r3, #28
9000171a:	d003      	beq.n	90001724 <HAL_JPEG_InfoReadyCallback+0x5c>
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
9000171c:	f023 030f 	bic.w	r3, r3, #15
90001720:	3310      	adds	r3, #16
90001722:	6083      	str	r3, [r0, #8]
            HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001724:	4a0c      	ldr	r2, [pc, #48]	; (90001758 <HAL_JPEG_InfoReadyCallback+0x90>)
90001726:	490d      	ldr	r1, [pc, #52]	; (9000175c <HAL_JPEG_InfoReadyCallback+0x94>)
90001728:	f001 fefe 	bl	90003528 <TGFX_JPEG_GetDecodeColorConvertFunc>
            if (status != HAL_OK)
9000172c:	2800      	cmp	r0, #0
9000172e:	d0e2      	beq.n	900016f6 <HAL_JPEG_InfoReadyCallback+0x2e>
                assert(status == HAL_OK);
90001730:	4b0b      	ldr	r3, [pc, #44]	; (90001760 <HAL_JPEG_InfoReadyCallback+0x98>)
90001732:	f240 2131 	movw	r1, #561	; 0x231
90001736:	4a0b      	ldr	r2, [pc, #44]	; (90001764 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001738:	480b      	ldr	r0, [pc, #44]	; (90001768 <HAL_JPEG_InfoReadyCallback+0xa0>)
9000173a:	f021 ff95 	bl	90023668 <__assert_func>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
9000173e:	f023 0307 	bic.w	r3, r3, #7
90001742:	3308      	adds	r3, #8
90001744:	60c3      	str	r3, [r0, #12]
90001746:	e7ca      	b.n	900016de <HAL_JPEG_InfoReadyCallback+0x16>
                assert(status == HAL_OK);
90001748:	4b05      	ldr	r3, [pc, #20]	; (90001760 <HAL_JPEG_InfoReadyCallback+0x98>)
9000174a:	f240 2153 	movw	r1, #595	; 0x253
9000174e:	4a05      	ldr	r2, [pc, #20]	; (90001764 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001750:	4805      	ldr	r0, [pc, #20]	; (90001768 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001752:	f021 ff89 	bl	90023668 <__assert_func>
90001756:	bf00      	nop
90001758:	24005ba0 	.word	0x24005ba0
9000175c:	24005bdc 	.word	0x24005bdc
90001760:	90024c70 	.word	0x90024c70
90001764:	90024c84 	.word	0x90024c84
90001768:	90024a24 	.word	0x90024a24

9000176c <HAL_JPEG_GetDataCallback>:
    {
9000176c:	b410      	push	{r4}
        JPEG_InputImageIndex += NbDecodedData;
9000176e:	4c0c      	ldr	r4, [pc, #48]	; (900017a0 <HAL_JPEG_GetDataCallback+0x34>)
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001770:	4a0c      	ldr	r2, [pc, #48]	; (900017a4 <HAL_JPEG_GetDataCallback+0x38>)
        JPEG_InputImageIndex += NbDecodedData;
90001772:	6823      	ldr	r3, [r4, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001774:	6812      	ldr	r2, [r2, #0]
        JPEG_InputImageIndex += NbDecodedData;
90001776:	440b      	add	r3, r1
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001778:	4293      	cmp	r3, r2
        JPEG_InputImageIndex += NbDecodedData;
9000177a:	6023      	str	r3, [r4, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
9000177c:	d302      	bcc.n	90001784 <HAL_JPEG_GetDataCallback+0x18>
    }
9000177e:	f85d 4b04 	ldr.w	r4, [sp], #4
90001782:	4770      	bx	lr
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
90001784:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001786:	4b08      	ldr	r3, [pc, #32]	; (900017a8 <HAL_JPEG_GetDataCallback+0x3c>)
90001788:	681c      	ldr	r4, [r3, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
9000178a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000178e:	4421      	add	r1, r4
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001790:	bf28      	it	cs
90001792:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
    }
90001796:	f85d 4b04 	ldr.w	r4, [sp], #4
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
9000179a:	6019      	str	r1, [r3, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
9000179c:	f007 bb26 	b.w	90008dec <HAL_JPEG_ConfigInputBuffer>
900017a0:	24005b84 	.word	0x24005b84
900017a4:	24005b88 	.word	0x24005b88
900017a8:	24005b80 	.word	0x24005b80

900017ac <HAL_JPEG_DataReadyCallback>:
    {
900017ac:	b570      	push	{r4, r5, r6, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017ae:	4e1e      	ldr	r6, [pc, #120]	; (90001828 <HAL_JPEG_DataReadyCallback+0x7c>)
    {
900017b0:	4605      	mov	r5, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017b2:	2001      	movs	r0, #1
900017b4:	4c1d      	ldr	r4, [pc, #116]	; (9000182c <HAL_JPEG_DataReadyCallback+0x80>)
900017b6:	6833      	ldr	r3, [r6, #0]
900017b8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
        JPEG_OUT_Write_BufferIndex++;
900017bc:	4403      	add	r3, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017be:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017c2:	4283      	cmp	r3, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
900017c4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
900017c8:	608a      	str	r2, [r1, #8]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900017ca:	d91a      	bls.n	90001802 <HAL_JPEG_DataReadyCallback+0x56>
            JPEG_OUT_Write_BufferIndex = 0;
900017cc:	2200      	movs	r2, #0
900017ce:	4613      	mov	r3, r2
900017d0:	6032      	str	r2, [r6, #0]
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
900017d2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
900017d6:	005a      	lsls	r2, r3, #1
900017d8:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
900017dc:	b9c9      	cbnz	r1, 90001812 <HAL_JPEG_DataReadyCallback+0x66>
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
900017de:	4914      	ldr	r1, [pc, #80]	; (90001830 <HAL_JPEG_DataReadyCallback+0x84>)
900017e0:	4413      	add	r3, r2
900017e2:	4628      	mov	r0, r5
900017e4:	68ca      	ldr	r2, [r1, #12]
900017e6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
900017ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900017ee:	6861      	ldr	r1, [r4, #4]
900017f0:	01d2      	lsls	r2, r2, #7
900017f2:	f007 faff 	bl	90008df4 <HAL_JPEG_ConfigOutputBuffer>
        SEM_POST(semDecodingDone);
900017f6:	4b0f      	ldr	r3, [pc, #60]	; (90001834 <HAL_JPEG_DataReadyCallback+0x88>)
    }
900017f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        SEM_POST(semDecodingDone);
900017fc:	6818      	ldr	r0, [r3, #0]
900017fe:	f00b ba27 	b.w	9000cc50 <osSemaphoreRelease>
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001802:	eb03 0143 	add.w	r1, r3, r3, lsl #1
        JPEG_OUT_Write_BufferIndex++;
90001806:	6033      	str	r3, [r6, #0]
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001808:	005a      	lsls	r2, r3, #1
9000180a:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
9000180e:	2900      	cmp	r1, #0
90001810:	d0e5      	beq.n	900017de <HAL_JPEG_DataReadyCallback+0x32>
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001812:	2102      	movs	r1, #2
90001814:	4628      	mov	r0, r5
90001816:	f007 fab1 	bl	90008d7c <HAL_JPEG_Pause>
            Output_Is_Paused = 1;
9000181a:	4a07      	ldr	r2, [pc, #28]	; (90001838 <HAL_JPEG_DataReadyCallback+0x8c>)
9000181c:	2101      	movs	r1, #1
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000181e:	6833      	ldr	r3, [r6, #0]
            Output_Is_Paused = 1;
90001820:	6011      	str	r1, [r2, #0]
90001822:	fa03 f201 	lsl.w	r2, r3, r1
90001826:	e7da      	b.n	900017de <HAL_JPEG_DataReadyCallback+0x32>
90001828:	24005b90 	.word	0x24005b90
9000182c:	24000004 	.word	0x24000004
90001830:	24005ba8 	.word	0x24005ba8
90001834:	24005be0 	.word	0x24005be0
90001838:	24005ba4 	.word	0x24005ba4

9000183c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
9000183c:	b672      	cpsid	i
        while (1)
9000183e:	e7fe      	b.n	9000183e <HAL_JPEG_ErrorCallback+0x2>

90001840 <HAL_JPEG_DecodeCpltCallback>:
        Jpeg_HWDecodingEnd = 1;
90001840:	4b01      	ldr	r3, [pc, #4]	; (90001848 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001842:	2201      	movs	r2, #1
90001844:	601a      	str	r2, [r3, #0]
    }
90001846:	4770      	bx	lr
90001848:	24005b98 	.word	0x24005b98

9000184c <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
9000184c:	b570      	push	{r4, r5, r6, lr}
    uint32_t xRef, yRef, refline;

    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000184e:	491b      	ldr	r1, [pc, #108]	; (900018bc <DMA2D_CopyBuffer+0x70>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

    /* DMA2D OPFCCR register configuration ---------------------------------------*/
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001850:	2302      	movs	r3, #2
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001852:	6805      	ldr	r5, [r0, #0]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001854:	4c1a      	ldr	r4, [pc, #104]	; (900018c0 <DMA2D_CopyBuffer+0x74>)
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001856:	680a      	ldr	r2, [r1, #0]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001858:	6363      	str	r3, [r4, #52]	; 0x34
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000185a:	012b      	lsls	r3, r5, #4

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
9000185c:	4e19      	ldr	r6, [pc, #100]	; (900018c4 <DMA2D_CopyBuffer+0x78>)
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
9000185e:	fbb3 fcf2 	udiv	ip, r3, r2
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001862:	fb02 321c 	mls	r2, r2, ip, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001866:	684b      	ldr	r3, [r1, #4]
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
90001868:	6836      	ldr	r6, [r6, #0]
    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000186a:	fb03 fc0c 	mul.w	ip, r3, ip
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
9000186e:	68cb      	ldr	r3, [r1, #12]
90001870:	eba6 0e03 	sub.w	lr, r6, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001874:	690e      	ldr	r6, [r1, #16]
90001876:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
9000187a:	4575      	cmp	r5, lr
    refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
9000187c:	fb06 f202 	mul.w	r2, r6, r2
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line)) // Last line of frame
90001880:	d317      	bcc.n	900018b2 <DMA2D_CopyBuffer+0x66>
    {
        WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90001882:	6889      	ldr	r1, [r1, #8]
90001884:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
90001888:	6461      	str	r1, [r4, #68]	; 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
9000188a:	490f      	ldr	r1, [pc, #60]	; (900018c8 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration ------------------------------------------*/
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
9000188c:	f1c3 031e 	rsb	r3, r3, #30

    /* DMA2D FGPFCCR register configuration -------------------------------------*/
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001890:	6840      	ldr	r0, [r0, #4]
    WRITE_REG(DMA2D->FGOR, 0);
90001892:	2400      	movs	r4, #0
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001894:	6809      	ldr	r1, [r1, #0]
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001896:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001898:	6840      	ldr	r0, [r0, #4]
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
9000189a:	4411      	add	r1, r2
9000189c:	4a08      	ldr	r2, [pc, #32]	; (900018c0 <DMA2D_CopyBuffer+0x74>)
9000189e:	4461      	add	r1, ip
900018a0:	63d1      	str	r1, [r2, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
900018a2:	6413      	str	r3, [r2, #64]	; 0x40
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018a4:	4909      	ldr	r1, [pc, #36]	; (900018cc <DMA2D_CopyBuffer+0x80>)

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018a6:	4b0a      	ldr	r3, [pc, #40]	; (900018d0 <DMA2D_CopyBuffer+0x84>)
    WRITE_REG(DMA2D->FGOR, 0);
900018a8:	6114      	str	r4, [r2, #16]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
900018aa:	61d1      	str	r1, [r2, #28]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
900018ac:	60d0      	str	r0, [r2, #12]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900018ae:	6013      	str	r3, [r2, #0]
}
900018b0:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
900018b2:	0519      	lsls	r1, r3, #20
900018b4:	f041 0110 	orr.w	r1, r1, #16
900018b8:	6461      	str	r1, [r4, #68]	; 0x44
900018ba:	e7e6      	b.n	9000188a <DMA2D_CopyBuffer+0x3e>
900018bc:	24005ba8 	.word	0x24005ba8
900018c0:	52001000 	.word	0x52001000
900018c4:	24005ba0 	.word	0x24005ba0
900018c8:	24005b7c 	.word	0x24005b7c
900018cc:	ff09000b 	.word	0xff09000b
900018d0:	00010201 	.word	0x00010201

900018d4 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
    // Mark ycbcr empty
    job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
900018d4:	2200      	movs	r2, #0
900018d6:	6843      	ldr	r3, [r0, #4]
        return count_ == 0;
900018d8:	490b      	ldr	r1, [pc, #44]	; (90001908 <DMA2D_ExternalJobCompleted+0x34>)
900018da:	701a      	strb	r2, [r3, #0]
    job.jpeg_buffer->DataBufferSize = 0;

    // Mark dma paused if queue is empty
    if (external_queue.is_empty())
900018dc:	68c9      	ldr	r1, [r1, #12]
    job.jpeg_buffer->DataBufferSize = 0;
900018de:	609a      	str	r2, [r3, #8]
    if (external_queue.is_empty())
900018e0:	b911      	cbnz	r1, 900018e8 <DMA2D_ExternalJobCompleted+0x14>
    {
        DMA2D_output_Is_Paused = 1;
900018e2:	4b0a      	ldr	r3, [pc, #40]	; (9000190c <DMA2D_ExternalJobCompleted+0x38>)
900018e4:	2201      	movs	r2, #1
900018e6:	601a      	str	r2, [r3, #0]
    }

    // Check if last line
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
900018e8:	4b09      	ldr	r3, [pc, #36]	; (90001910 <DMA2D_ExternalJobCompleted+0x3c>)
900018ea:	490a      	ldr	r1, [pc, #40]	; (90001914 <DMA2D_ExternalJobCompleted+0x40>)
900018ec:	681b      	ldr	r3, [r3, #0]
900018ee:	68c9      	ldr	r1, [r1, #12]
900018f0:	6802      	ldr	r2, [r0, #0]
900018f2:	1a5b      	subs	r3, r3, r1
900018f4:	429a      	cmp	r2, r3
900018f6:	d302      	bcc.n	900018fe <DMA2D_ExternalJobCompleted+0x2a>
    {
        DMA2D_CopyBufferEnd = 1;
900018f8:	4b07      	ldr	r3, [pc, #28]	; (90001918 <DMA2D_ExternalJobCompleted+0x44>)
900018fa:	2201      	movs	r2, #1
900018fc:	601a      	str	r2, [r3, #0]
    }

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
900018fe:	4b07      	ldr	r3, [pc, #28]	; (9000191c <DMA2D_ExternalJobCompleted+0x48>)
90001900:	6818      	ldr	r0, [r3, #0]
90001902:	f00b b9a5 	b.w	9000cc50 <osSemaphoreRelease>
90001906:	bf00      	nop
90001908:	24005bbc 	.word	0x24005bbc
9000190c:	24005b78 	.word	0x24005b78
90001910:	24005ba0 	.word	0x24005ba0
90001914:	24005ba8 	.word	0x24005ba8
90001918:	24005b74 	.word	0x24005b74
9000191c:	24005be0 	.word	0x24005be0

90001920 <_GLOBAL__sub_I_FrameBufferAddress>:
        : max_size_(Size), head_(0), tail_(0), count_(0)
90001920:	4b03      	ldr	r3, [pc, #12]	; (90001930 <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001922:	2200      	movs	r2, #0
90001924:	2102      	movs	r1, #2
90001926:	60da      	str	r2, [r3, #12]
90001928:	6019      	str	r1, [r3, #0]
9000192a:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
9000192e:	4770      	bx	lr
90001930:	24005bbc 	.word	0x24005bbc

90001934 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001934:	2101      	movs	r1, #1
90001936:	2200      	movs	r2, #0
{
90001938:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
9000193a:	4608      	mov	r0, r1
9000193c:	f00b f904 	bl	9000cb48 <osSemaphoreNew>
90001940:	4b0b      	ldr	r3, [pc, #44]	; (90001970 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001942:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001944:	b140      	cbz	r0, 90001958 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001946:	2200      	movs	r2, #0
90001948:	2104      	movs	r1, #4
9000194a:	2001      	movs	r0, #1
9000194c:	f00b f9ac 	bl	9000cca8 <osMessageQueueNew>
90001950:	4b08      	ldr	r3, [pc, #32]	; (90001974 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001952:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001954:	b130      	cbz	r0, 90001964 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001956:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001958:	4b07      	ldr	r3, [pc, #28]	; (90001978 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
9000195a:	2128      	movs	r1, #40	; 0x28
9000195c:	4a07      	ldr	r2, [pc, #28]	; (9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000195e:	4808      	ldr	r0, [pc, #32]	; (90001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001960:	f021 fe82 	bl	90023668 <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001964:	4b07      	ldr	r3, [pc, #28]	; (90001984 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001966:	212c      	movs	r1, #44	; 0x2c
90001968:	4a04      	ldr	r2, [pc, #16]	; (9000197c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
9000196a:	4805      	ldr	r0, [pc, #20]	; (90001980 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
9000196c:	f021 fe7c 	bl	90023668 <__assert_func>
90001970:	24005be8 	.word	0x24005be8
90001974:	24005be4 	.word	0x24005be4
90001978:	90024d10 	.word	0x90024d10
9000197c:	90024d5c 	.word	0x90024d5c
90001980:	90024d8c 	.word	0x90024d8c
90001984:	90024ddc 	.word	0x90024ddc

90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
90001988:	4b02      	ldr	r3, [pc, #8]	; (90001994 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
9000198a:	f04f 31ff 	mov.w	r1, #4294967295
9000198e:	6818      	ldr	r0, [r3, #0]
90001990:	f00b b92a 	b.w	9000cbe8 <osSemaphoreAcquire>
90001994:	24005be8 	.word	0x24005be8

90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
90001998:	4b01      	ldr	r3, [pc, #4]	; (900019a0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
9000199a:	6818      	ldr	r0, [r3, #0]
9000199c:	f00b b958 	b.w	9000cc50 <osSemaphoreRelease>
900019a0:	24005be8 	.word	0x24005be8

900019a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
900019a4:	4b02      	ldr	r3, [pc, #8]	; (900019b0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
900019a6:	2100      	movs	r1, #0
900019a8:	6818      	ldr	r0, [r3, #0]
900019aa:	f00b b91d 	b.w	9000cbe8 <osSemaphoreAcquire>
900019ae:	bf00      	nop
900019b0:	24005be8 	.word	0x24005be8

900019b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
900019b4:	4b01      	ldr	r3, [pc, #4]	; (900019bc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
900019b6:	6818      	ldr	r0, [r3, #0]
900019b8:	f00b b94a 	b.w	9000cc50 <osSemaphoreRelease>
900019bc:	24005be8 	.word	0x24005be8

900019c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
900019c0:	4803      	ldr	r0, [pc, #12]	; (900019d0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
900019c2:	2300      	movs	r3, #0
900019c4:	4903      	ldr	r1, [pc, #12]	; (900019d4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
900019c6:	461a      	mov	r2, r3
900019c8:	6800      	ldr	r0, [r0, #0]
900019ca:	f00b b9ab 	b.w	9000cd24 <osMessageQueuePut>
900019ce:	bf00      	nop
900019d0:	24005be4 	.word	0x24005be4
900019d4:	2400001c 	.word	0x2400001c

900019d8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
900019d8:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019da:	2300      	movs	r3, #0
{
900019dc:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
900019de:	4c07      	ldr	r4, [pc, #28]	; (900019fc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
900019e0:	461a      	mov	r2, r3
900019e2:	a901      	add	r1, sp, #4
900019e4:	6820      	ldr	r0, [r4, #0]
900019e6:	f00b f9df 	bl	9000cda8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
900019ea:	f04f 33ff 	mov.w	r3, #4294967295
900019ee:	2200      	movs	r2, #0
900019f0:	a901      	add	r1, sp, #4
900019f2:	6820      	ldr	r0, [r4, #0]
900019f4:	f00b f9d8 	bl	9000cda8 <osMessageQueueGet>
}
900019f8:	b002      	add	sp, #8
900019fa:	bd10      	pop	{r4, pc}
900019fc:	24005be4 	.word	0x24005be4

90001a00 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001a00:	6803      	ldr	r3, [r0, #0]
90001a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001a04:	4718      	bx	r3
90001a06:	bf00      	nop

90001a08 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001a08:	2001      	movs	r0, #1
90001a0a:	4770      	bx	lr

90001a0c <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001a0c:	4905      	ldr	r1, [pc, #20]	; (90001a24 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a12:	4b05      	ldr	r3, [pc, #20]	; (90001a28 <_ZN8STM32DMAD1Ev+0x1c>)
90001a14:	6001      	str	r1, [r0, #0]
90001a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a1e:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001a22:	4770      	bx	lr
90001a24:	90024f84 	.word	0x90024f84
90001a28:	e000e100 	.word	0xe000e100

90001a2c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a2c:	4b0f      	ldr	r3, [pc, #60]	; (90001a6c <_ZN8STM32DMA10initializeEv+0x40>)
{
90001a2e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a30:	490f      	ldr	r1, [pc, #60]	; (90001a70 <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a32:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a36:	480f      	ldr	r0, [pc, #60]	; (90001a74 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a38:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001a3c:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001a3e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001a42:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001a46:	f002 0210 	and.w	r2, r2, #16
90001a4a:	9201      	str	r2, [sp, #4]
90001a4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001a4e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a50:	f042 0210 	orr.w	r2, r2, #16
90001a54:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001a56:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001a58:	f022 0210 	bic.w	r2, r2, #16
90001a5c:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a5e:	4b06      	ldr	r3, [pc, #24]	; (90001a78 <_ZN8STM32DMA10initializeEv+0x4c>)
90001a60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a64:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001a66:	b002      	add	sp, #8
90001a68:	4770      	bx	lr
90001a6a:	bf00      	nop
90001a6c:	58024400 	.word	0x58024400
90001a70:	2400b010 	.word	0x2400b010
90001a74:	90001e25 	.word	0x90001e25
90001a78:	e000e100 	.word	0xe000e100

90001a7c <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001a7c:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001a80:	4770      	bx	lr
90001a82:	bf00      	nop

90001a84 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001a84:	4909      	ldr	r1, [pc, #36]	; (90001aac <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001a86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001a8a:	4b09      	ldr	r3, [pc, #36]	; (90001ab0 <_ZN8STM32DMAD0Ev+0x2c>)
90001a8c:	b510      	push	{r4, lr}
90001a8e:	6001      	str	r1, [r0, #0]
90001a90:	4604      	mov	r4, r0
90001a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001a96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001a9a:	f3bf 8f6f 	isb	sy
}
90001a9e:	f640 51a8 	movw	r1, #3496	; 0xda8
90001aa2:	f021 fdb2 	bl	9002360a <_ZdlPvj>
90001aa6:	4620      	mov	r0, r4
90001aa8:	bd10      	pop	{r4, pc}
90001aaa:	bf00      	nop
90001aac:	90024f84 	.word	0x90024f84
90001ab0:	e000e100 	.word	0xe000e100

90001ab4 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001ab4:	b510      	push	{r4, lr}
90001ab6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001ab8:	f04f 31ff 	mov.w	r1, #4294967295
90001abc:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001ac0:	f00a fffc 	bl	9000cabc <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001ac4:	6860      	ldr	r0, [r4, #4]
90001ac6:	6803      	ldr	r3, [r0, #0]
90001ac8:	681b      	ldr	r3, [r3, #0]
90001aca:	4798      	blx	r3
90001acc:	b978      	cbnz	r0, 90001aee <_ZN8STM32DMA5startEv+0x3a>
90001ace:	7a63      	ldrb	r3, [r4, #9]
90001ad0:	b16b      	cbz	r3, 90001aee <_ZN8STM32DMA5startEv+0x3a>
90001ad2:	7a23      	ldrb	r3, [r4, #8]
90001ad4:	b92b      	cbnz	r3, 90001ae2 <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001ad6:	6822      	ldr	r2, [r4, #0]
90001ad8:	4620      	mov	r0, r4
            started_by_external_job = false;
90001ada:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001ade:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001ae0:	4798      	blx	r3
        else if (!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001ae2:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001aea:	f00b b80b 	b.w	9000cb04 <osMutexRelease>
        return count_ == 0;
90001aee:	4b0b      	ldr	r3, [pc, #44]	; (90001b1c <_ZN8STM32DMA5startEv+0x68>)
        else if (!external_queue.is_empty() && !isRunning)
90001af0:	68da      	ldr	r2, [r3, #12]
90001af2:	2a00      	cmp	r2, #0
90001af4:	d0f5      	beq.n	90001ae2 <_ZN8STM32DMA5startEv+0x2e>
90001af6:	7a22      	ldrb	r2, [r4, #8]
90001af8:	2a00      	cmp	r2, #0
90001afa:	d1f2      	bne.n	90001ae2 <_ZN8STM32DMA5startEv+0x2e>
        return buffer_[head_];
90001afc:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001afe:	2201      	movs	r2, #1
        return buffer_[head_];
90001b00:	3002      	adds	r0, #2
            started_by_external_job = true;
90001b02:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001b06:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001b08:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001b0c:	f7ff fe9e 	bl	9000184c <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001b10:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001b18:	f00a bff4 	b.w	9000cb04 <osMutexRelease>
90001b1c:	24005bbc 	.word	0x24005bbc

90001b20 <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001b20:	b538      	push	{r3, r4, r5, lr}
        if (started_by_external_job)
90001b22:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001b26:	4604      	mov	r4, r0
        if (started_by_external_job)
90001b28:	b943      	cbnz	r3, 90001b3c <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001b2a:	6803      	ldr	r3, [r0, #0]
90001b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001b2e:	4798      	blx	r3
        return count_ == 0;
90001b30:	4b15      	ldr	r3, [pc, #84]	; (90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if (!external_queue.is_empty() && !isRunning)
90001b32:	68da      	ldr	r2, [r3, #12]
90001b34:	b10a      	cbz	r2, 90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b36:	7a22      	ldrb	r2, [r4, #8]
90001b38:	b1d2      	cbz	r2, 90001b70 <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001b3a:	bd38      	pop	{r3, r4, r5, pc}
        return count_ == 0;
90001b3c:	4b12      	ldr	r3, [pc, #72]	; (90001b88 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001b3e:	68da      	ldr	r2, [r3, #12]
        if (!external_queue.is_empty() && isRunning)
90001b40:	2a00      	cmp	r2, #0
90001b42:	d0fa      	beq.n	90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001b44:	7a01      	ldrb	r1, [r0, #8]
90001b46:	2900      	cmp	r1, #0
90001b48:	d0f7      	beq.n	90001b3a <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001b4a:	2100      	movs	r1, #0
        count_--;
90001b4c:	3a01      	subs	r2, #1
        head_ = (head_ + 1) % max_size_;
90001b4e:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001b52:	7221      	strb	r1, [r4, #8]
        head_ = (head_ + 1) % max_size_;
90001b54:	1c41      	adds	r1, r0, #1
        count_--;
90001b56:	60da      	str	r2, [r3, #12]
        return buffer_[head_];
90001b58:	3002      	adds	r0, #2
        head_ = (head_ + 1) % max_size_;
90001b5a:	fbb1 f2f5 	udiv	r2, r1, r5
90001b5e:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001b62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
        head_ = (head_ + 1) % max_size_;
90001b66:	6059      	str	r1, [r3, #4]
    }
90001b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001b6c:	f7ff beb2 	b.w	900018d4 <DMA2D_ExternalJobCompleted>
        return buffer_[head_];
90001b70:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001b72:	2201      	movs	r2, #1
        return buffer_[head_];
90001b74:	3002      	adds	r0, #2
                started_by_external_job = true;
90001b76:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001b7a:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001b7c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001b84:	f7ff be62 	b.w	9000184c <DMA2D_CopyBuffer>
90001b88:	24005bbc 	.word	0x24005bbc

90001b8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001b8c:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001b8e:	7f8b      	ldrb	r3, [r1, #30]
90001b90:	2b0a      	cmp	r3, #10
90001b92:	d83e      	bhi.n	90001c12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001b94:	e8df f003 	tbb	[pc, r3]
90001b98:	3d2a063b 	.word	0x3d2a063b
90001b9c:	063d3d3d 	.word	0x063d3d3d
90001ba0:	0606      	.short	0x0606
90001ba2:	06          	.byte	0x06
90001ba3:	00          	.byte	0x00
90001ba4:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ba6:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001baa:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bac:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bae:	4b1c      	ldr	r3, [pc, #112]	; (90001c20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bb0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bb4:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001bb8:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001bba:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001bbc:	6908      	ldr	r0, [r1, #16]
90001bbe:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bc0:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001bc2:	680d      	ldr	r5, [r1, #0]
90001bc4:	2d08      	cmp	r5, #8
90001bc6:	d013      	beq.n	90001bf0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001bc8:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001bca:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001bcc:	4c15      	ldr	r4, [pc, #84]	; (90001c24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001bce:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001bd0:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001bd2:	0a0a      	lsrs	r2, r1, #8
90001bd4:	0948      	lsrs	r0, r1, #5
90001bd6:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001bda:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001bde:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001be2:	4302      	orrs	r2, r0
90001be4:	430a      	orrs	r2, r1
90001be6:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001be8:	601c      	str	r4, [r3, #0]
    }
}
90001bea:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001bec:	2400      	movs	r4, #0
90001bee:	e7da      	b.n	90001ba6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bf0:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001bf2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001bf4:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001bf6:	4a0c      	ldr	r2, [pc, #48]	; (90001c28 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001bf8:	7f0c      	ldrb	r4, [r1, #28]
90001bfa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001bfe:	4c0b      	ldr	r4, [pc, #44]	; (90001c2c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001c00:	61da      	str	r2, [r3, #28]
90001c02:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001c04:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c06:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001c08:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001c0a:	601c      	str	r4, [r3, #0]
}
90001c0c:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001c0e:	2402      	movs	r4, #2
90001c10:	e7c9      	b.n	90001ba6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001c12:	4b07      	ldr	r3, [pc, #28]	; (90001c30 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001c14:	2188      	movs	r1, #136	; 0x88
90001c16:	4a07      	ldr	r2, [pc, #28]	; (90001c34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001c18:	4807      	ldr	r0, [pc, #28]	; (90001c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001c1a:	f021 fd25 	bl	90023668 <__assert_func>
90001c1e:	bf00      	nop
90001c20:	52001000 	.word	0x52001000
90001c24:	00030201 	.word	0x00030201
90001c28:	00010009 	.word	0x00010009
90001c2c:	00020201 	.word	0x00020201
90001c30:	90024e20 	.word	0x90024e20
90001c34:	90024e3c 	.word	0x90024e3c
90001c38:	90024e88 	.word	0x90024e88

90001c3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001c3e:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001c42:	f1be 0f0b 	cmp.w	lr, #11
90001c46:	f200 80c1 	bhi.w	90001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c4a:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001c4e:	0063      	.short	0x0063
90001c50:	004c0065 	.word	0x004c0065
90001c54:	00bf00bf 	.word	0x00bf00bf
90001c58:	00bf00bf 	.word	0x00bf00bf
90001c5c:	000c000c 	.word	0x000c000c
90001c60:	000c000c 	.word	0x000c000c
90001c64:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001c66:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001c68:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001c6c:	f1bc 0f0b 	cmp.w	ip, #11
90001c70:	f200 80ac 	bhi.w	90001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001c74:	e8df f00c 	tbb	[pc, ip]
90001c78:	aa0e4b52 	.word	0xaa0e4b52
90001c7c:	06aaaaaa 	.word	0x06aaaaaa
90001c80:	06060606 	.word	0x06060606
    switch (format)
90001c84:	f1ac 0307 	sub.w	r3, ip, #7
90001c88:	2b03      	cmp	r3, #3
90001c8a:	f200 80a5 	bhi.w	90001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001c8e:	2605      	movs	r6, #5
90001c90:	2701      	movs	r7, #1
90001c92:	e001      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001c94:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001c96:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001c98:	8a8b      	ldrh	r3, [r1, #20]
90001c9a:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001c9c:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001c9e:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ca0:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001ca2:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ca4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ca8:	4b52      	ldr	r3, [pc, #328]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001caa:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001cac:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001cae:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cb0:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001cb2:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001cb4:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001cb6:	6908      	ldr	r0, [r1, #16]
90001cb8:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001cba:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001cbc:	680a      	ldr	r2, [r1, #0]
90001cbe:	2a80      	cmp	r2, #128	; 0x80
90001cc0:	d03b      	beq.n	90001d3a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001cc2:	d812      	bhi.n	90001cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001cc4:	2a20      	cmp	r2, #32
90001cc6:	d02c      	beq.n	90001d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001cc8:	2a40      	cmp	r2, #64	; 0x40
90001cca:	d02a      	beq.n	90001d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001ccc:	2a04      	cmp	r2, #4
90001cce:	d169      	bne.n	90001da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cd0:	7f0a      	ldrb	r2, [r1, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001cd2:	4949      	ldr	r1, [pc, #292]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cd4:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
90001cd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
90001cdc:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001cde:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001ce0:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001ce2:	6019      	str	r1, [r3, #0]
}
90001ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001ce6:	2500      	movs	r5, #0
90001ce8:	e7be      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001cea:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001cee:	d067      	beq.n	90001dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001cf0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001cf4:	d156      	bne.n	90001da4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001cf6:	7f0c      	ldrb	r4, [r1, #28]
90001cf8:	4a40      	ldr	r2, [pc, #256]	; (90001dfc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001cfa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001cfe:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d00:	4a3d      	ldr	r2, [pc, #244]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d02:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001d04:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d06:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d08:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d0a:	601a      	str	r2, [r3, #0]
}
90001d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001d0e:	2601      	movs	r6, #1
90001d10:	4637      	mov	r7, r6
90001d12:	e7c1      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90001d14:	2502      	movs	r5, #2
90001d16:	e7a7      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90001d18:	2501      	movs	r5, #1
90001d1a:	e7a5      	b.n	90001c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90001d1c:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001d1e:	4637      	mov	r7, r6
90001d20:	e7ba      	b.n	90001c98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d22:	7f0b      	ldrb	r3, [r1, #28]
90001d24:	4a33      	ldr	r2, [pc, #204]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d26:	ea45 6303 	orr.w	r3, r5, r3, lsl #24
90001d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
90001d2e:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d30:	4b31      	ldr	r3, [pc, #196]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d32:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d34:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d36:	6013      	str	r3, [r2, #0]
}
90001d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90001d3a:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90001d3c:	1d14      	adds	r4, r2, #4
90001d3e:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d40:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
90001d42:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001d44:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90001d48:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001d4c:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001d4e:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001d50:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
90001d52:	b9b1      	cbnz	r1, 90001d82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d54:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90001d56:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d58:	69d8      	ldr	r0, [r3, #28]
90001d5a:	4a29      	ldr	r2, [pc, #164]	; (90001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d5c:	3901      	subs	r1, #1
90001d5e:	4002      	ands	r2, r0
90001d60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d64:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90001d66:	4a23      	ldr	r2, [pc, #140]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001d68:	69d3      	ldr	r3, [r2, #28]
90001d6a:	f043 0320 	orr.w	r3, r3, #32
90001d6e:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
90001d70:	69d3      	ldr	r3, [r2, #28]
90001d72:	069b      	lsls	r3, r3, #26
90001d74:	d4fc      	bmi.n	90001d70 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90001d76:	2310      	movs	r3, #16
90001d78:	6093      	str	r3, [r2, #8]
            if (blend)
90001d7a:	b324      	cbz	r4, 90001dc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001d7c:	4b1e      	ldr	r3, [pc, #120]	; (90001df8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001d7e:	6013      	str	r3, [r2, #0]
}
90001d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90001d82:	2901      	cmp	r1, #1
90001d84:	d12e      	bne.n	90001de4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d86:	8851      	ldrh	r1, [r2, #2]
                if (blitOp.alpha == 255)
90001d88:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d8a:	69d8      	ldr	r0, [r3, #28]
90001d8c:	4a1c      	ldr	r2, [pc, #112]	; (90001e00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90001d8e:	f101 31ff 	add.w	r1, r1, #4294967295
                if (blitOp.alpha == 255)
90001d92:	bf18      	it	ne
90001d94:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90001d96:	4002      	ands	r2, r0
90001d98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90001d9c:	f042 0210 	orr.w	r2, r2, #16
90001da0:	61da      	str	r2, [r3, #28]
                break;
90001da2:	e7e0      	b.n	90001d66 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001da4:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90001da6:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001da8:	4b12      	ldr	r3, [pc, #72]	; (90001df4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001daa:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dae:	bf14      	ite	ne
90001db0:	4a14      	ldrne	r2, [pc, #80]	; (90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001db2:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001db6:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001dba:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
90001dbc:	601a      	str	r2, [r3, #0]
}
90001dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001dc0:	7f0c      	ldrb	r4, [r1, #28]
90001dc2:	4a11      	ldr	r2, [pc, #68]	; (90001e08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
90001dc4:	e799      	b.n	90001cfa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001dc6:	4b0f      	ldr	r3, [pc, #60]	; (90001e04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
90001dc8:	6013      	str	r3, [r2, #0]
}
90001dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
90001dcc:	4b0f      	ldr	r3, [pc, #60]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dce:	2167      	movs	r1, #103	; 0x67
90001dd0:	4a0f      	ldr	r2, [pc, #60]	; (90001e10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
90001dd2:	4810      	ldr	r0, [pc, #64]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dd4:	f021 fc48 	bl	90023668 <__assert_func>
        assert(0 && "Unsupported Format!");
90001dd8:	4b0c      	ldr	r3, [pc, #48]	; (90001e0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
90001dda:	2188      	movs	r1, #136	; 0x88
90001ddc:	4a0e      	ldr	r2, [pc, #56]	; (90001e18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
90001dde:	480d      	ldr	r0, [pc, #52]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001de0:	f021 fc42 	bl	90023668 <__assert_func>
                assert(0 && "Unsupported format");
90001de4:	4b0d      	ldr	r3, [pc, #52]	; (90001e1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
90001de6:	f44f 7189 	mov.w	r1, #274	; 0x112
90001dea:	4a0d      	ldr	r2, [pc, #52]	; (90001e20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
90001dec:	4809      	ldr	r0, [pc, #36]	; (90001e14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
90001dee:	f021 fc3b 	bl	90023668 <__assert_func>
90001df2:	bf00      	nop
90001df4:	52001000 	.word	0x52001000
90001df8:	00020201 	.word	0x00020201
90001dfc:	00020009 	.word	0x00020009
90001e00:	ffff00ef 	.word	0xffff00ef
90001e04:	00010201 	.word	0x00010201
90001e08:	0002000a 	.word	0x0002000a
90001e0c:	90024e20 	.word	0x90024e20
90001e10:	90024ed4 	.word	0x90024ed4
90001e14:	90024e88 	.word	0x90024e88
90001e18:	90024e3c 	.word	0x90024e3c
90001e1c:	90024f20 	.word	0x90024f20
90001e20:	90024f3c 	.word	0x90024f3c

90001e24 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90001e24:	4b1f      	ldr	r3, [pc, #124]	; (90001ea4 <DMA2D_XferCpltCallback+0x80>)
90001e26:	4920      	ldr	r1, [pc, #128]	; (90001ea8 <DMA2D_XferCpltCallback+0x84>)
90001e28:	681b      	ldr	r3, [r3, #0]
    {
90001e2a:	b570      	push	{r4, r5, r6, lr}
90001e2c:	685c      	ldr	r4, [r3, #4]
90001e2e:	6823      	ldr	r3, [r4, #0]
90001e30:	695a      	ldr	r2, [r3, #20]
90001e32:	428a      	cmp	r2, r1
90001e34:	d125      	bne.n	90001e82 <DMA2D_XferCpltCallback+0x5e>
        if (started_by_external_job)
90001e36:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90001e3a:	b942      	cbnz	r2, 90001e4e <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e3e:	4620      	mov	r0, r4
90001e40:	4798      	blx	r3
        return count_ == 0;
90001e42:	4b1a      	ldr	r3, [pc, #104]	; (90001eac <DMA2D_XferCpltCallback+0x88>)
            if (!external_queue.is_empty() && !isRunning)
90001e44:	68da      	ldr	r2, [r3, #12]
90001e46:	b10a      	cbz	r2, 90001e4c <DMA2D_XferCpltCallback+0x28>
90001e48:	7a22      	ldrb	r2, [r4, #8]
90001e4a:	b1f2      	cbz	r2, 90001e8a <DMA2D_XferCpltCallback+0x66>
    }
90001e4c:	bd70      	pop	{r4, r5, r6, pc}
        return count_ == 0;
90001e4e:	4b17      	ldr	r3, [pc, #92]	; (90001eac <DMA2D_XferCpltCallback+0x88>)
90001e50:	68da      	ldr	r2, [r3, #12]
        if (!external_queue.is_empty() && isRunning)
90001e52:	2a00      	cmp	r2, #0
90001e54:	d0fa      	beq.n	90001e4c <DMA2D_XferCpltCallback+0x28>
90001e56:	7a21      	ldrb	r1, [r4, #8]
90001e58:	2900      	cmp	r1, #0
90001e5a:	d0f7      	beq.n	90001e4c <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90001e5c:	2100      	movs	r1, #0
        count_--;
90001e5e:	3a01      	subs	r2, #1
        head_ = (head_ + 1) % max_size_;
90001e60:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e64:	7221      	strb	r1, [r4, #8]
        head_ = (head_ + 1) % max_size_;
90001e66:	1c41      	adds	r1, r0, #1
        count_--;
90001e68:	60da      	str	r2, [r3, #12]
        return buffer_[head_];
90001e6a:	3002      	adds	r0, #2
        head_ = (head_ + 1) % max_size_;
90001e6c:	fbb1 f2f5 	udiv	r2, r1, r5
90001e70:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        head_ = (head_ + 1) % max_size_;
90001e7c:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
90001e7e:	f7ff bd29 	b.w	900018d4 <DMA2D_ExternalJobCompleted>
90001e82:	4620      	mov	r0, r4
90001e84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001e88:	4710      	bx	r2
        return buffer_[head_];
90001e8a:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001e8c:	2201      	movs	r2, #1
        return buffer_[head_];
90001e8e:	3002      	adds	r0, #2
                started_by_external_job = true;
90001e90:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001e94:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001e96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90001e9e:	f7ff bcd5 	b.w	9000184c <DMA2D_CopyBuffer>
90001ea2:	bf00      	nop
90001ea4:	2402645c 	.word	0x2402645c
90001ea8:	90001b21 	.word	0x90001b21
90001eac:	24005bbc 	.word	0x24005bbc

90001eb0 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
90001eb0:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eb2:	4b10      	ldr	r3, [pc, #64]	; (90001ef4 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
90001eb4:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001eb6:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
90001eb8:	2500      	movs	r5, #0
90001eba:	300c      	adds	r0, #12
90001ebc:	2260      	movs	r2, #96	; 0x60
90001ebe:	7235      	strb	r5, [r6, #8]
90001ec0:	7275      	strb	r5, [r6, #9]
90001ec2:	6070      	str	r0, [r6, #4]
90001ec4:	f844 3b20 	str.w	r3, [r4], #32
90001ec8:	4621      	mov	r1, r4
90001eca:	f00f ffd7 	bl	90011e7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
90001ece:	4621      	mov	r1, r4
90001ed0:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
90001ed4:	60cd      	str	r5, [r1, #12]
90001ed6:	3124      	adds	r1, #36	; 0x24
90001ed8:	428b      	cmp	r3, r1
90001eda:	d1fb      	bne.n	90001ed4 <_ZN8STM32DMAC1Ev+0x24>
90001edc:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
90001ee0:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
90001ee2:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
90001ee6:	f00a fda9 	bl	9000ca3c <osMutexNew>
90001eea:	4603      	mov	r3, r0
}
90001eec:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
90001eee:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
90001ef2:	bd70      	pop	{r4, r5, r6, pc}
90001ef4:	90024f84 	.word	0x90024f84

90001ef8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
90001ef8:	2001      	movs	r0, #1
90001efa:	4770      	bx	lr

90001efc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
90001efc:	200c      	movs	r0, #12
90001efe:	4770      	bx	lr

90001f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
90001f00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f04:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f08:	3008      	adds	r0, #8
90001f0a:	4770      	bx	lr

90001f0c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
90001f0c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
90001f10:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90001f14:	3008      	adds	r0, #8
90001f16:	4770      	bx	lr

90001f18 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f18:	2001      	movs	r0, #1
90001f1a:	4770      	bx	lr

90001f1c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f1c:	f44f 7031 	mov.w	r0, #708	; 0x2c4
90001f20:	4770      	bx	lr
90001f22:	bf00      	nop

90001f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f24:	f44f 7331 	mov.w	r3, #708	; 0x2c4
90001f28:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f2c:	3008      	adds	r0, #8
90001f2e:	4770      	bx	lr

90001f30 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f30:	f44f 7331 	mov.w	r3, #708	; 0x2c4
90001f34:	fb03 0001 	mla	r0, r3, r1, r0
    }
90001f38:	3008      	adds	r0, #8
90001f3a:	4770      	bx	lr

90001f3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90001f3c:	2001      	movs	r0, #1
90001f3e:	4770      	bx	lr

90001f40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90001f40:	2010      	movs	r0, #16
90001f42:	4770      	bx	lr

90001f44 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f44:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f48:	3008      	adds	r0, #8
90001f4a:	4770      	bx	lr

90001f4c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90001f4c:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90001f50:	3008      	adds	r0, #8
90001f52:	4770      	bx	lr

90001f54 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90001f54:	4608      	mov	r0, r1
90001f56:	f003 b91f 	b.w	90005198 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90001f5a:	bf00      	nop

90001f5c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90001f5c:	4b03      	ldr	r3, [pc, #12]	; (90001f6c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f5e:	b510      	push	{r4, lr}
90001f60:	4604      	mov	r4, r0
90001f62:	6003      	str	r3, [r0, #0]
90001f64:	f00e fb2d 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f68:	4620      	mov	r0, r4
90001f6a:	bd10      	pop	{r4, pc}
90001f6c:	9002503c 	.word	0x9002503c

90001f70 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001f70:	4b05      	ldr	r3, [pc, #20]	; (90001f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001f72:	b510      	push	{r4, lr}
90001f74:	4604      	mov	r4, r0
90001f76:	6003      	str	r3, [r0, #0]
90001f78:	f00e fb23 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f7c:	2114      	movs	r1, #20
90001f7e:	4620      	mov	r0, r4
90001f80:	f021 fb43 	bl	9002360a <_ZdlPvj>
90001f84:	4620      	mov	r0, r4
90001f86:	bd10      	pop	{r4, pc}
90001f88:	9002503c 	.word	0x9002503c

90001f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001f8c:	4b03      	ldr	r3, [pc, #12]	; (90001f9c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001f8e:	b510      	push	{r4, lr}
90001f90:	4604      	mov	r4, r0
90001f92:	6003      	str	r3, [r0, #0]
90001f94:	f00e fb15 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001f98:	4620      	mov	r0, r4
90001f9a:	bd10      	pop	{r4, pc}
90001f9c:	90025008 	.word	0x90025008

90001fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fa0:	4b06      	ldr	r3, [pc, #24]	; (90001fbc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
90001fa2:	b510      	push	{r4, lr}
90001fa4:	4604      	mov	r4, r0
90001fa6:	6003      	str	r3, [r0, #0]
90001fa8:	f00e fb0b 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fac:	f44f 7133 	mov.w	r1, #716	; 0x2cc
90001fb0:	4620      	mov	r0, r4
90001fb2:	f021 fb2a 	bl	9002360a <_ZdlPvj>
90001fb6:	4620      	mov	r0, r4
90001fb8:	bd10      	pop	{r4, pc}
90001fba:	bf00      	nop
90001fbc:	90025008 	.word	0x90025008

90001fc0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90001fc0:	4b03      	ldr	r3, [pc, #12]	; (90001fd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
90001fc2:	b510      	push	{r4, lr}
90001fc4:	4604      	mov	r4, r0
90001fc6:	6003      	str	r3, [r0, #0]
90001fc8:	f00e fafb 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fcc:	4620      	mov	r0, r4
90001fce:	bd10      	pop	{r4, pc}
90001fd0:	90024fd4 	.word	0x90024fd4

90001fd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
90001fd4:	4b05      	ldr	r3, [pc, #20]	; (90001fec <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
90001fd6:	b510      	push	{r4, lr}
90001fd8:	4604      	mov	r4, r0
90001fda:	6003      	str	r3, [r0, #0]
90001fdc:	f00e faf1 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90001fe0:	2118      	movs	r1, #24
90001fe2:	4620      	mov	r0, r4
90001fe4:	f021 fb11 	bl	9002360a <_ZdlPvj>
90001fe8:	4620      	mov	r0, r4
90001fea:	bd10      	pop	{r4, pc}
90001fec:	90024fd4 	.word	0x90024fd4

90001ff0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
90001ff0:	b510      	push	{r4, lr}
90001ff2:	4a0c      	ldr	r2, [pc, #48]	; (90002024 <_ZN12FrontendHeapD1Ev+0x34>)
90001ff4:	4604      	mov	r4, r0
90001ff6:	4b0c      	ldr	r3, [pc, #48]	; (90002028 <_ZN12FrontendHeapD1Ev+0x38>)
90001ff8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
90001ffc:	6022      	str	r2, [r4, #0]
90001ffe:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
90002002:	f00e fade 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002006:	4620      	mov	r0, r4
90002008:	4b08      	ldr	r3, [pc, #32]	; (9000202c <_ZN12FrontendHeapD1Ev+0x3c>)
9000200a:	f840 3f2c 	str.w	r3, [r0, #44]!
9000200e:	f00e fad8 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002012:	4620      	mov	r0, r4
90002014:	4b06      	ldr	r3, [pc, #24]	; (90002030 <_ZN12FrontendHeapD1Ev+0x40>)
90002016:	f840 3f14 	str.w	r3, [r0, #20]!
9000201a:	f00e fad2 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000201e:	4620      	mov	r0, r4
90002020:	bd10      	pop	{r4, pc}
90002022:	bf00      	nop
90002024:	90025070 	.word	0x90025070
90002028:	9002503c 	.word	0x9002503c
9000202c:	90025008 	.word	0x90025008
90002030:	90024fd4 	.word	0x90024fd4

90002034 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
90002034:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
90002036:	4c0c      	ldr	r4, [pc, #48]	; (90002068 <__tcf_0+0x34>)
90002038:	4a0c      	ldr	r2, [pc, #48]	; (9000206c <__tcf_0+0x38>)
9000203a:	4b0d      	ldr	r3, [pc, #52]	; (90002070 <__tcf_0+0x3c>)
9000203c:	f504 703e 	add.w	r0, r4, #760	; 0x2f8
90002040:	6022      	str	r2, [r4, #0]
90002042:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
90002046:	f00e fabc 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000204a:	4620      	mov	r0, r4
9000204c:	4b09      	ldr	r3, [pc, #36]	; (90002074 <__tcf_0+0x40>)
9000204e:	f840 3f2c 	str.w	r3, [r0, #44]!
90002052:	f00e fab6 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002056:	4620      	mov	r0, r4
90002058:	4b07      	ldr	r3, [pc, #28]	; (90002078 <__tcf_0+0x44>)
        static FrontendHeap instance;
9000205a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000205e:	f840 3f14 	str.w	r3, [r0, #20]!
90002062:	f00e baae 	b.w	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002066:	bf00      	nop
90002068:	24005bf0 	.word	0x24005bf0
9000206c:	90025070 	.word	0x90025070
90002070:	9002503c 	.word	0x9002503c
90002074:	90025008 	.word	0x90025008
90002078:	90024fd4 	.word	0x90024fd4

9000207c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
9000207c:	b510      	push	{r4, lr}
9000207e:	4a0e      	ldr	r2, [pc, #56]	; (900020b8 <_ZN12FrontendHeapD0Ev+0x3c>)
90002080:	4604      	mov	r4, r0
90002082:	4b0e      	ldr	r3, [pc, #56]	; (900020bc <_ZN12FrontendHeapD0Ev+0x40>)
90002084:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
90002088:	6022      	str	r2, [r4, #0]
9000208a:	f8c4 32f8 	str.w	r3, [r4, #760]	; 0x2f8
9000208e:	f00e fa98 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002092:	4620      	mov	r0, r4
90002094:	4b0a      	ldr	r3, [pc, #40]	; (900020c0 <_ZN12FrontendHeapD0Ev+0x44>)
90002096:	f840 3f2c 	str.w	r3, [r0, #44]!
9000209a:	f00e fa92 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000209e:	4b09      	ldr	r3, [pc, #36]	; (900020c4 <_ZN12FrontendHeapD0Ev+0x48>)
900020a0:	4620      	mov	r0, r4
900020a2:	f840 3f14 	str.w	r3, [r0, #20]!
900020a6:	f00e fa8c 	bl	900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
900020aa:	4620      	mov	r0, r4
900020ac:	f240 416c 	movw	r1, #1132	; 0x46c
900020b0:	f021 faab 	bl	9002360a <_ZdlPvj>
900020b4:	4620      	mov	r0, r4
900020b6:	bd10      	pop	{r4, pc}
900020b8:	90025070 	.word	0x90025070
900020bc:	9002503c 	.word	0x9002503c
900020c0:	90025008 	.word	0x90025008
900020c4:	90024fd4 	.word	0x90024fd4

900020c8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
900020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900020cc:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
900020ce:	2400      	movs	r4, #0
900020d0:	f002 fe78 	bl	90004dc4 <_ZN14BitmapDatabase11getInstanceEv>
900020d4:	4605      	mov	r5, r0
900020d6:	f002 fe79 	bl	90004dcc <_ZN14BitmapDatabase15getInstanceSizeEv>
900020da:	4623      	mov	r3, r4
900020dc:	4601      	mov	r1, r0
900020de:	4622      	mov	r2, r4
900020e0:	4628      	mov	r0, r5
900020e2:	9400      	str	r4, [sp, #0]
900020e4:	f015 fc9c 	bl	90017a20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
900020e8:	4b28      	ldr	r3, [pc, #160]	; (9000218c <touchgfx_init+0xc4>)
900020ea:	4a29      	ldr	r2, [pc, #164]	; (90002190 <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
900020ec:	4620      	mov	r0, r4
        static FrontendHeap instance;
900020ee:	4c29      	ldr	r4, [pc, #164]	; (90002194 <touchgfx_init+0xcc>)
900020f0:	601a      	str	r2, [r3, #0]
900020f2:	f003 fdbb 	bl	90005c6c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
900020f6:	4828      	ldr	r0, [pc, #160]	; (90002198 <touchgfx_init+0xd0>)
900020f8:	f015 fbfa 	bl	900178f0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
900020fc:	6823      	ldr	r3, [r4, #0]
900020fe:	f3bf 8f5b 	dmb	ish
90002102:	07db      	lsls	r3, r3, #31
90002104:	d505      	bpl.n	90002112 <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
90002106:	4825      	ldr	r0, [pc, #148]	; (9000219c <touchgfx_init+0xd4>)
}
90002108:	b002      	add	sp, #8
9000210a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
9000210e:	f7fe bbd5 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
90002112:	4620      	mov	r0, r4
90002114:	f021 fa7b 	bl	9002360e <__cxa_guard_acquire>
90002118:	2800      	cmp	r0, #0
9000211a:	d0f4      	beq.n	90002106 <touchgfx_init+0x3e>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
9000211c:	4d20      	ldr	r5, [pc, #128]	; (900021a0 <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
9000211e:	4b21      	ldr	r3, [pc, #132]	; (900021a4 <touchgfx_init+0xdc>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90002120:	f505 7644 	add.w	r6, r5, #784	; 0x310
        : presenterStorage(pres),
90002124:	f105 0014 	add.w	r0, r5, #20
          screenStorage(scr),
90002128:	f105 082c 	add.w	r8, r5, #44	; 0x2c
          transitionStorage(tra),
9000212c:	f505 773e 	add.w	r7, r5, #760	; 0x2f8
90002130:	602b      	str	r3, [r5, #0]
90002132:	60ef      	str	r7, [r5, #12]
          frontendApplication(app)
90002134:	612e      	str	r6, [r5, #16]
          screenStorage(scr),
90002136:	e9c5 0801 	strd	r0, r8, [r5, #4]
9000213a:	f00e fa43 	bl	900105c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
9000213e:	4b1a      	ldr	r3, [pc, #104]	; (900021a8 <touchgfx_init+0xe0>)
90002140:	4640      	mov	r0, r8
90002142:	616b      	str	r3, [r5, #20]
90002144:	f00e fa3e 	bl	900105c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002148:	4b18      	ldr	r3, [pc, #96]	; (900021ac <touchgfx_init+0xe4>)
9000214a:	4638      	mov	r0, r7
9000214c:	62eb      	str	r3, [r5, #44]	; 0x2c
9000214e:	f00e fa39 	bl	900105c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002152:	4b17      	ldr	r3, [pc, #92]	; (900021b0 <touchgfx_init+0xe8>)
90002154:	f505 7043 	add.w	r0, r5, #780	; 0x30c
90002158:	f8c5 32f8 	str.w	r3, [r5, #760]	; 0x2f8
9000215c:	f003 fe0a 	bl	90005d74 <_ZN5ModelC1Ev>
90002160:	462a      	mov	r2, r5
90002162:	f505 7143 	add.w	r1, r5, #780	; 0x30c
90002166:	4630      	mov	r0, r6
90002168:	f003 fdfa 	bl	90005d60 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
9000216c:	4630      	mov	r0, r6
9000216e:	f003 f813 	bl	90005198 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
90002172:	4810      	ldr	r0, [pc, #64]	; (900021b4 <touchgfx_init+0xec>)
90002174:	f021 fa96 	bl	900236a4 <atexit>
90002178:	4620      	mov	r0, r4
9000217a:	f021 fa54 	bl	90023626 <__cxa_guard_release>
9000217e:	4807      	ldr	r0, [pc, #28]	; (9000219c <touchgfx_init+0xd4>)
}
90002180:	b002      	add	sp, #8
90002182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002186:	f7fe bb99 	b.w	900008bc <_ZN11TouchGFXHAL10initializeEv>
9000218a:	bf00      	nop
9000218c:	240264b8 	.word	0x240264b8
90002190:	24006e90 	.word	0x24006e90
90002194:	24005bec 	.word	0x24005bec
90002198:	24000020 	.word	0x24000020
9000219c:	24006e08 	.word	0x24006e08
900021a0:	24005bf0 	.word	0x24005bf0
900021a4:	90025070 	.word	0x90025070
900021a8:	90024fd4 	.word	0x90024fd4
900021ac:	90025008 	.word	0x90025008
900021b0:	9002503c 	.word	0x9002503c
900021b4:	90002035 	.word	0x90002035

900021b8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
900021b8:	4770      	bx	lr
900021ba:	bf00      	nop

900021bc <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
900021bc:	4801      	ldr	r0, [pc, #4]	; (900021c4 <touchgfx_taskEntry+0x8>)
900021be:	f7fe bb43 	b.w	90000848 <_ZN11TouchGFXHAL9taskEntryEv>
900021c2:	bf00      	nop
900021c4:	24006e08 	.word	0x24006e08

900021c8 <_GLOBAL__sub_I_touchgfx_init>:
}
900021c8:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
900021ca:	4b26      	ldr	r3, [pc, #152]	; (90002264 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
900021cc:	4c26      	ldr	r4, [pc, #152]	; (90002268 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
900021ce:	4e27      	ldr	r6, [pc, #156]	; (9000226c <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
900021d0:	4d27      	ldr	r5, [pc, #156]	; (90002270 <_GLOBAL__sub_I_touchgfx_init+0xa8>)
900021d2:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
900021d4:	4630      	mov	r0, r6
900021d6:	f7ff fe6b 	bl	90001eb0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
900021da:	4628      	mov	r0, r5
900021dc:	f018 fd2a 	bl	9001ac34 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
900021e0:	4b24      	ldr	r3, [pc, #144]	; (90002274 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          mcuInstrumentation(0),
900021e2:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900021e4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900021e8:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
900021ec:	62da      	str	r2, [r3, #44]	; 0x2c
900021ee:	861a      	strh	r2, [r3, #48]	; 0x30
          vSyncCompensationEnabled(false),
900021f0:	669a      	str	r2, [r3, #104]	; 0x68
          updateMCULoad(0),
900021f2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          cc_begin(0),
900021f6:	671a      	str	r2, [r3, #112]	; 0x70
          mcuInstrumentation(0),
900021f8:	e9c3 4203 	strd	r4, r2, [r3, #12]
          touchSampleRate(1),
900021fc:	4c1e      	ldr	r4, [pc, #120]	; (90002278 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
900021fe:	665c      	str	r4, [r3, #100]	; 0x64
          requestedOrientation(ORIENTATION_LANDSCAPE),
90002200:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
90002204:	675c      	str	r4, [r3, #116]	; 0x74
          lastRenderMethod(HARDWARE)
90002206:	2401      	movs	r4, #1
90002208:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
9000220c:	4c1b      	ldr	r4, [pc, #108]	; (9000227c <_GLOBAL__sub_I_touchgfx_init+0xb4>)
9000220e:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002210:	4c1b      	ldr	r4, [pc, #108]	; (90002280 <_GLOBAL__sub_I_touchgfx_init+0xb8>)
90002212:	8020      	strh	r0, [r4, #0]
90002214:	4c1b      	ldr	r4, [pc, #108]	; (90002284 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lcdRef(display),
90002216:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
9000221a:	8020      	strh	r0, [r4, #0]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
9000221c:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002220:	4c19      	ldr	r4, [pc, #100]	; (90002288 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
90002222:	481a      	ldr	r0, [pc, #104]	; (9000228c <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
90002224:	649d      	str	r5, [r3, #72]	; 0x48
          frameBufferAllocator(0),
90002226:	e9c3 2205 	strd	r2, r2, [r3, #20]
            : startX(0),
9000222a:	e9c3 2207 	strd	r2, r2, [r3, #28]
        : drag(), listener(0), dragThresholdValue(0)
9000222e:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
          frameBuffer0(0),
90002232:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
          frameBuffer2(0),
90002236:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
9000223a:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
          listener(0),
9000223e:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
          lastY(0),
90002242:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002246:	8021      	strh	r1, [r4, #0]
90002248:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
9000224a:	4c11      	ldr	r4, [pc, #68]	; (90002290 <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
9000224c:	4811      	ldr	r0, [pc, #68]	; (90002294 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
9000224e:	4912      	ldr	r1, [pc, #72]	; (90002298 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
        : cc_consumed(0),
90002250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
90002254:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
90002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
9000225a:	6018      	str	r0, [r3, #0]
          cc_in(0)
9000225c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
90002260:	67d9      	str	r1, [r3, #124]	; 0x7c
}
90002262:	bd70      	pop	{r4, r5, r6, pc}
90002264:	90024764 	.word	0x90024764
90002268:	2400605c 	.word	0x2400605c
9000226c:	24006060 	.word	0x24006060
90002270:	24006e94 	.word	0x24006e94
90002274:	24006e08 	.word	0x24006e08
90002278:	01000001 	.word	0x01000001
9000227c:	2402645c 	.word	0x2402645c
90002280:	24026450 	.word	0x24026450
90002284:	24026456 	.word	0x24026456
90002288:	24026452 	.word	0x24026452
9000228c:	24026458 	.word	0x24026458
90002290:	24026454 	.word	0x24026454
90002294:	900248f4 	.word	0x900248f4
90002298:	9002473c 	.word	0x9002473c

9000229c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
9000229c:	4801      	ldr	r0, [pc, #4]	; (900022a4 <_GLOBAL__sub_D_touchgfx_init+0x8>)
9000229e:	f7ff bbb5 	b.w	90001a0c <_ZN8STM32DMAD1Ev>
900022a2:	bf00      	nop
900022a4:	24006060 	.word	0x24006060

900022a8 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
900022a8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900022ac:	b112      	cbz	r2, 900022b4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
900022ae:	6803      	ldr	r3, [r0, #0]
900022b0:	695b      	ldr	r3, [r3, #20]
900022b2:	4718      	bx	r3
        }
    }
900022b4:	4770      	bx	lr
900022b6:	bf00      	nop

900022b8 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900022b8:	2000      	movs	r0, #0
900022ba:	4770      	bx	lr

900022bc <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900022bc:	8081      	strh	r1, [r0, #4]
    }
900022be:	4770      	bx	lr

900022c0 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900022c0:	80c1      	strh	r1, [r0, #6]
    }
900022c2:	4770      	bx	lr

900022c4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900022c4:	8101      	strh	r1, [r0, #8]
    }
900022c6:	4770      	bx	lr

900022c8 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900022c8:	8141      	strh	r1, [r0, #10]
    }
900022ca:	4770      	bx	lr

900022cc <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900022cc:	4770      	bx	lr
900022ce:	bf00      	nop

900022d0 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900022d0:	4770      	bx	lr
900022d2:	bf00      	nop

900022d4 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900022d4:	4770      	bx	lr
900022d6:	bf00      	nop

900022d8 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900022d8:	4770      	bx	lr
900022da:	bf00      	nop

900022dc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900022dc:	4770      	bx	lr
900022de:	bf00      	nop

900022e0 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900022e0:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900022e4:	6803      	ldr	r3, [r0, #0]
900022e6:	eba2 020c 	sub.w	r2, r2, ip
900022ea:	f8b0 c004 	ldrh.w	ip, [r0, #4]
900022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900022f0:	eba1 010c 	sub.w	r1, r1, ip
900022f4:	b212      	sxth	r2, r2
900022f6:	b209      	sxth	r1, r1
900022f8:	4718      	bx	r3
900022fa:	bf00      	nop

900022fc <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
900022fc:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900022fe:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
90002302:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
90002306:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
9000230a:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
9000230e:	6010      	str	r0, [r2, #0]
    }
90002310:	4770      	bx	lr
90002312:	bf00      	nop

90002314 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
90002314:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002318:	b11a      	cbz	r2, 90002322 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
9000231a:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
9000231e:	b102      	cbz	r2, 90002322 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
90002320:	6018      	str	r0, [r3, #0]
        }
    }
90002322:	4770      	bx	lr

90002324 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
90002324:	2000      	movs	r0, #0
90002326:	4770      	bx	lr

90002328 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002328:	4b03      	ldr	r3, [pc, #12]	; (90002338 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
9000232a:	2290      	movs	r2, #144	; 0x90
9000232c:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
90002330:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90002334:	4770      	bx	lr
90002336:	bf00      	nop
90002338:	e000e100 	.word	0xe000e100

9000233c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
9000233c:	4a09      	ldr	r2, [pc, #36]	; (90002364 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
9000233e:	490a      	ldr	r1, [pc, #40]	; (90002368 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
90002340:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
90002342:	480a      	ldr	r0, [pc, #40]	; (9000236c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002344:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002348:	3b01      	subs	r3, #1
9000234a:	b29b      	uxth	r3, r3
9000234c:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000234e:	6911      	ldr	r1, [r2, #16]
90002350:	f3c1 010a 	ubfx	r1, r1, #0, #11
90002354:	3901      	subs	r1, #1
90002356:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002358:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
9000235a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000235c:	f043 0301 	orr.w	r3, r3, #1
90002360:	6353      	str	r3, [r2, #52]	; 0x34
}
90002362:	4770      	bx	lr
90002364:	50001000 	.word	0x50001000
90002368:	24006f10 	.word	0x24006f10
9000236c:	24006f0e 	.word	0x24006f0e

90002370 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
90002370:	4b01      	ldr	r3, [pc, #4]	; (90002378 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
90002372:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
90002376:	4770      	bx	lr
90002378:	50001000 	.word	0x50001000

9000237c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
9000237c:	4b02      	ldr	r3, [pc, #8]	; (90002388 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000237e:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002380:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002384:	625a      	str	r2, [r3, #36]	; 0x24
}
90002386:	4770      	bx	lr
90002388:	50001000 	.word	0x50001000

9000238c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
9000238c:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
90002390:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
90002392:	4770      	bx	lr

90002394 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002394:	4770      	bx	lr
90002396:	bf00      	nop

90002398 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002398:	eb00 0081 	add.w	r0, r0, r1, lsl #2
9000239c:	4611      	mov	r1, r2
9000239e:	6840      	ldr	r0, [r0, #4]
900023a0:	6803      	ldr	r3, [r0, #0]
900023a2:	68db      	ldr	r3, [r3, #12]
900023a4:	4718      	bx	r3
900023a6:	bf00      	nop

900023a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
900023a8:	b510      	push	{r4, lr}
900023aa:	4604      	mov	r4, r0
900023ac:	2148      	movs	r1, #72	; 0x48
900023ae:	f021 f92c 	bl	9002360a <_ZdlPvj>
900023b2:	4620      	mov	r0, r4
900023b4:	bd10      	pop	{r4, pc}
900023b6:	bf00      	nop

900023b8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900023b8:	b911      	cbnz	r1, 900023c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900023ba:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900023be:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900023c0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900023c2:	4a03      	ldr	r2, [pc, #12]	; (900023d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900023c4:	f44f 71b8 	mov.w	r1, #368	; 0x170
900023c8:	4b02      	ldr	r3, [pc, #8]	; (900023d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900023ca:	4803      	ldr	r0, [pc, #12]	; (900023d8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900023cc:	f021 f94c 	bl	90023668 <__assert_func>
900023d0:	90025090 	.word	0x90025090
900023d4:	9002507c 	.word	0x9002507c
900023d8:	9002521c 	.word	0x9002521c

900023dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900023dc:	b921      	cbnz	r1, 900023e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900023de:	6840      	ldr	r0, [r0, #4]
900023e0:	4611      	mov	r1, r2
900023e2:	6803      	ldr	r3, [r0, #0]
900023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900023e6:	4718      	bx	r3
        assert(handle < no_streams);
900023e8:	4b03      	ldr	r3, [pc, #12]	; (900023f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900023ea:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900023ee:	4a03      	ldr	r2, [pc, #12]	; (900023fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900023f0:	4803      	ldr	r0, [pc, #12]	; (90002400 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900023f2:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900023f4:	f021 f938 	bl	90023668 <__assert_func>
900023f8:	9002507c 	.word	0x9002507c
900023fc:	90025260 	.word	0x90025260
90002400:	9002521c 	.word	0x9002521c

90002404 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
90002404:	b909      	cbnz	r1, 9000240a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
90002406:	68c0      	ldr	r0, [r0, #12]
90002408:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
9000240a:	b508      	push	{r3, lr}
        assert(handle < no_streams);
9000240c:	4a02      	ldr	r2, [pc, #8]	; (90002418 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
9000240e:	2179      	movs	r1, #121	; 0x79
90002410:	4b02      	ldr	r3, [pc, #8]	; (9000241c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
90002412:	4803      	ldr	r0, [pc, #12]	; (90002420 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
90002414:	f021 f928 	bl	90023668 <__assert_func>
90002418:	90025410 	.word	0x90025410
9000241c:	9002507c 	.word	0x9002507c
90002420:	9002521c 	.word	0x9002521c

90002424 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
90002424:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002426:	460c      	mov	r4, r1
90002428:	b949      	cbnz	r1, 9000243e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
9000242a:	4611      	mov	r1, r2
9000242c:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
9000242e:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
90002430:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
90002432:	681c      	ldr	r4, [r3, #0]
90002434:	4618      	mov	r0, r3
90002436:	68a3      	ldr	r3, [r4, #8]
    }
90002438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
9000243c:	4718      	bx	r3
        assert(handle < no_streams);
9000243e:	4b03      	ldr	r3, [pc, #12]	; (9000244c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
90002440:	2190      	movs	r1, #144	; 0x90
90002442:	4a03      	ldr	r2, [pc, #12]	; (90002450 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90002444:	4803      	ldr	r0, [pc, #12]	; (90002454 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
90002446:	f021 f90f 	bl	90023668 <__assert_func>
9000244a:	bf00      	nop
9000244c:	9002507c 	.word	0x9002507c
90002450:	900255c4 	.word	0x900255c4
90002454:	9002521c 	.word	0x9002521c

90002458 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002458:	b921      	cbnz	r1, 90002464 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
9000245a:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
9000245e:	e9c0 3206 	strd	r3, r2, [r0, #24]
90002462:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90002464:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002466:	4a03      	ldr	r2, [pc, #12]	; (90002474 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002468:	2182      	movs	r1, #130	; 0x82
9000246a:	4b03      	ldr	r3, [pc, #12]	; (90002478 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
9000246c:	4803      	ldr	r0, [pc, #12]	; (9000247c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
9000246e:	f021 f8fb 	bl	90023668 <__assert_func>
90002472:	bf00      	nop
90002474:	900257a0 	.word	0x900257a0
90002478:	9002507c 	.word	0x9002507c
9000247c:	9002521c 	.word	0x9002521c

90002480 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
90002480:	f00e be5a 	b.w	90011138 <_ZN8touchgfx3HAL10beginFrameEv>

90002484 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
90002484:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002488:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
9000248a:	b113      	cbz	r3, 90002492 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
9000248c:	4b1a      	ldr	r3, [pc, #104]	; (900024f8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
9000248e:	2201      	movs	r2, #1
90002490:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
90002492:	4c1a      	ldr	r4, [pc, #104]	; (900024fc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
90002494:	f00e fe5c 	bl	90011150 <_ZN8touchgfx3HAL8endFrameEv>
90002498:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
9000249c:	b963      	cbnz	r3, 900024b8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
9000249e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
900024a2:	b94b      	cbnz	r3, 900024b8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
900024a4:	2301      	movs	r3, #1
        SEM_POST(semDecode);
900024a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
900024a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
900024ac:	f00a fbd0 	bl	9000cc50 <osSemaphoreRelease>
        if (uiHasMutex)
900024b0:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
900024b4:	b9cb      	cbnz	r3, 900024ea <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
900024b6:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
900024b8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
900024bc:	69e1      	ldr	r1, [r4, #28]
900024be:	6922      	ldr	r2, [r4, #16]
900024c0:	fb00 f303 	mul.w	r3, r0, r3
900024c4:	fb01 f202 	mul.w	r2, r1, r2
900024c8:	4293      	cmp	r3, r2
900024ca:	d3eb      	bcc.n	900024a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
900024cc:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900024d0:	b138      	cbz	r0, 900024e2 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900024d2:	1a9b      	subs	r3, r3, r2
900024d4:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900024d8:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900024da:	bf98      	it	ls
900024dc:	f102 32ff 	addls.w	r2, r2, #4294967295
900024e0:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900024e2:	2301      	movs	r3, #1
900024e4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900024e8:	e7dc      	b.n	900024a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900024ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
900024ec:	f00a fb0a 	bl	9000cb04 <osMutexRelease>
            uiHasMutex = false;
900024f0:	2300      	movs	r3, #0
900024f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900024f6:	bd10      	pop	{r4, pc}
900024f8:	24006f0c 	.word	0x24006f0c
900024fc:	24006f5c 	.word	0x24006f5c

90002500 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
90002500:	f00e bde3 	b.w	900110ca <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

90002504 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
90002504:	f00e bf3f 	b.w	90011386 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

90002508 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
90002508:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000250c:	b903      	cbnz	r3, 90002510 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
9000250e:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
90002510:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
90002512:	f04f 31ff 	mov.w	r1, #4294967295
90002516:	4604      	mov	r4, r0
90002518:	6c40      	ldr	r0, [r0, #68]	; 0x44
9000251a:	f00a facf 	bl	9000cabc <osMutexAcquire>
            firstDrawThisFrame = false;
9000251e:	f44f 7380 	mov.w	r3, #256	; 0x100
90002522:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
90002526:	bd10      	pop	{r4, pc}

90002528 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
90002528:	b538      	push	{r3, r4, r5, lr}
9000252a:	460c      	mov	r4, r1
9000252c:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
9000252e:	f04f 31ff 	mov.w	r1, #4294967295
90002532:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
90002534:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002538:	f00a fac0 	bl	9000cabc <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
9000253c:	6c68      	ldr	r0, [r5, #68]	; 0x44
9000253e:	f00a fae1 	bl	9000cb04 <osMutexRelease>
        streams[handle].isActive = false;
90002542:	2300      	movs	r3, #0
90002544:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002548:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
9000254c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
90002550:	b90b      	cbnz	r3, 90002556 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
90002552:	6b2b      	ldr	r3, [r5, #48]	; 0x30
90002554:	63ab      	str	r3, [r5, #56]	; 0x38
    }
90002556:	bd38      	pop	{r3, r4, r5, pc}

90002558 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002558:	4814      	ldr	r0, [pc, #80]	; (900025ac <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
9000255a:	6943      	ldr	r3, [r0, #20]
9000255c:	03d9      	lsls	r1, r3, #15
9000255e:	d523      	bpl.n	900025a8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90002560:	2300      	movs	r3, #0
{
90002562:	b510      	push	{r4, lr}
90002564:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002568:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000256c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002570:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90002574:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002578:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
9000257c:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002580:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002584:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002586:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000258a:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000258c:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90002590:	1c5a      	adds	r2, r3, #1
90002592:	d1f8      	bne.n	90002586 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
90002594:	f1ac 0c20 	sub.w	ip, ip, #32
90002598:	f11c 0f20 	cmn.w	ip, #32
9000259c:	d1f0      	bne.n	90002580 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
9000259e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900025a2:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
900025a6:	bd10      	pop	{r4, pc}
900025a8:	4770      	bx	lr
900025aa:	bf00      	nop
900025ac:	e000ed00 	.word	0xe000ed00

900025b0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
900025b0:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900025b2:	2900      	cmp	r1, #0
900025b4:	d133      	bne.n	9000261e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900025b6:	4604      	mov	r4, r0
        switch (cmd)
900025b8:	2a05      	cmp	r2, #5
900025ba:	d809      	bhi.n	900025d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900025bc:	e8df f002 	tbb	[pc, r2]
900025c0:	27221e0f 	.word	0x27221e0f
900025c4:	0903      	.short	0x0903
            stream.isPlaying = false;
900025c6:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
900025c8:	2301      	movs	r3, #1
            stream.isPlaying = false;
900025ca:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
900025ce:	6203      	str	r3, [r0, #32]
    }
900025d0:	bd10      	pop	{r4, pc}
            stream.repeat = (param > 0);
900025d2:	3b00      	subs	r3, #0
900025d4:	bf18      	it	ne
900025d6:	2301      	movne	r3, #1
900025d8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900025dc:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900025de:	6840      	ldr	r0, [r0, #4]
900025e0:	6803      	ldr	r3, [r0, #0]
900025e2:	691b      	ldr	r3, [r3, #16]
900025e4:	4798      	blx	r3
900025e6:	2800      	cmp	r0, #0
900025e8:	d0f2      	beq.n	900025d0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900025ea:	2201      	movs	r2, #1
                stream.frameCount = 0;
900025ec:	2300      	movs	r3, #0
                stream.isPlaying = true;
900025ee:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900025f2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900025f6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900025fa:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900025fc:	2300      	movs	r3, #0
900025fe:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
90002602:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
90002604:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
90002606:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
90002608:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
9000260c:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
9000260e:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
90002610:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
90002612:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
90002614:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
90002618:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
9000261c:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000261e:	4b03      	ldr	r3, [pc, #12]	; (9000262c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
90002620:	21a2      	movs	r1, #162	; 0xa2
90002622:	4a03      	ldr	r2, [pc, #12]	; (90002630 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
90002624:	4803      	ldr	r0, [pc, #12]	; (90002634 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
90002626:	f021 f81f 	bl	90023668 <__assert_func>
9000262a:	bf00      	nop
9000262c:	9002507c 	.word	0x9002507c
90002630:	9002595c 	.word	0x9002595c
90002634:	9002521c 	.word	0x9002521c

90002638 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002638:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000263a:	bb39      	cbnz	r1, 9000268c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
9000263c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
90002640:	4604      	mov	r4, r0
90002642:	b923      	cbnz	r3, 9000264e <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90002644:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002648:	b963      	cbnz	r3, 90002664 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
9000264a:	2001      	movs	r0, #1
    }
9000264c:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000264e:	4912      	ldr	r1, [pc, #72]	; (90002698 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
90002650:	6943      	ldr	r3, [r0, #20]
90002652:	6809      	ldr	r1, [r1, #0]
90002654:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002658:	440b      	add	r3, r1
9000265a:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
9000265c:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002660:	2b00      	cmp	r3, #0
90002662:	d0f2      	beq.n	9000264a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90002664:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90002666:	4610      	mov	r0, r2
90002668:	6813      	ldr	r3, [r2, #0]
9000266a:	695b      	ldr	r3, [r3, #20]
9000266c:	6311      	str	r1, [r2, #48]	; 0x30
9000266e:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
90002670:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
90002672:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
90002676:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
9000267a:	2800      	cmp	r0, #0
9000267c:	d1e5      	bne.n	9000264a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000267e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
90002682:	2b00      	cmp	r3, #0
90002684:	d1e2      	bne.n	9000264c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90002686:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
9000268a:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000268c:	4b03      	ldr	r3, [pc, #12]	; (9000269c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000268e:	21d0      	movs	r1, #208	; 0xd0
90002690:	4a03      	ldr	r2, [pc, #12]	; (900026a0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
90002692:	4804      	ldr	r0, [pc, #16]	; (900026a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
90002694:	f020 ffe8 	bl	90023668 <__assert_func>
90002698:	2402645c 	.word	0x2402645c
9000269c:	9002507c 	.word	0x9002507c
900026a0:	90025b30 	.word	0x90025b30
900026a4:	9002521c 	.word	0x9002521c

900026a8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
900026a8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
900026ac:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
900026ae:	b9fb      	cbnz	r3, 900026f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            {
                // Reset stream parameters
                streams[i] = Stream();
900026b0:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026b2:	6b85      	ldr	r5, [r0, #56]	; 0x38
                streams[i] = Stream();
900026b4:	60c3      	str	r3, [r0, #12]
900026b6:	f8a0 202d 	strh.w	r2, [r0, #45]	; 0x2d
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026ba:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
        streams[handle].isActive = true;
900026be:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
900026c2:	6103      	str	r3, [r0, #16]
900026c4:	6143      	str	r3, [r0, #20]
900026c6:	6183      	str	r3, [r0, #24]
900026c8:	61c3      	str	r3, [r0, #28]
900026ca:	6203      	str	r3, [r0, #32]
900026cc:	6243      	str	r3, [r0, #36]	; 0x24
900026ce:	f8c0 3029 	str.w	r3, [r0, #41]	; 0x29
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900026d2:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900026d6:	4432      	add	r2, r6
900026d8:	4294      	cmp	r4, r2
900026da:	d810      	bhi.n	900026fe <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900026dc:	4a0b      	ldr	r2, [pc, #44]	; (9000270c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900026de:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900026e0:	6384      	str	r4, [r0, #56]	; 0x38
    }
900026e2:	4618      	mov	r0, r3
        format = bufferFormat;
900026e4:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900026e8:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900026ec:	630b      	str	r3, [r1, #48]	; 0x30
900026ee:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900026f0:	4b07      	ldr	r3, [pc, #28]	; (90002710 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900026f2:	f240 11c5 	movw	r1, #453	; 0x1c5
900026f6:	4a07      	ldr	r2, [pc, #28]	; (90002714 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900026f8:	4807      	ldr	r0, [pc, #28]	; (90002718 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900026fa:	f020 ffb5 	bl	90023668 <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900026fe:	4b07      	ldr	r3, [pc, #28]	; (9000271c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
90002700:	2152      	movs	r1, #82	; 0x52
90002702:	4a07      	ldr	r2, [pc, #28]	; (90002720 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
90002704:	4804      	ldr	r0, [pc, #16]	; (90002718 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
90002706:	f020 ffaf 	bl	90023668 <__assert_func>
9000270a:	bf00      	nop
9000270c:	012001e0 	.word	0x012001e0
90002710:	90025cd0 	.word	0x90025cd0
90002714:	90025d00 	.word	0x90025d00
90002718:	9002521c 	.word	0x9002521c
9000271c:	90025e88 	.word	0x90025e88
90002720:	90025ec4 	.word	0x90025ec4

90002724 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002724:	4b08      	ldr	r3, [pc, #32]	; (90002748 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
90002726:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
9000272a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000272e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002732:	f3bf 8f6f 	isb	sy
90002736:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
9000273a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
9000273e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002742:	f3bf 8f6f 	isb	sy
}
90002746:	4770      	bx	lr
90002748:	e000e100 	.word	0xe000e100

9000274c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
9000274c:	4b03      	ldr	r3, [pc, #12]	; (9000275c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
9000274e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002752:	609a      	str	r2, [r3, #8]
90002754:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002758:	609a      	str	r2, [r3, #8]
}
9000275a:	4770      	bx	lr
9000275c:	e000e100 	.word	0xe000e100

90002760 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002760:	b538      	push	{r3, r4, r5, lr}
90002762:	4604      	mov	r4, r0
    HAL::initialize();
90002764:	f00e fd01 	bl	9001116a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002768:	6823      	ldr	r3, [r4, #0]
9000276a:	6e5d      	ldr	r5, [r3, #100]	; 0x64
9000276c:	f012 f918 	bl	900149a0 <_ZN8touchgfx11Application11getInstanceEv>
90002770:	4601      	mov	r1, r0
90002772:	4620      	mov	r0, r4
90002774:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002776:	6823      	ldr	r3, [r4, #0]
90002778:	4a16      	ldr	r2, [pc, #88]	; (900027d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
9000277a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
9000277e:	4295      	cmp	r5, r2
90002780:	d11c      	bne.n	900027bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002782:	4a15      	ldr	r2, [pc, #84]	; (900027d8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002784:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90002786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
9000278a:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
9000278e:	4813      	ldr	r0, [pc, #76]	; (900027dc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002790:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
90002794:	4a12      	ldr	r2, [pc, #72]	; (900027e0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002796:	7005      	strb	r5, [r0, #0]
90002798:	4293      	cmp	r3, r2
9000279a:	d116      	bne.n	900027ca <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
9000279c:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000279e:	4a11      	ldr	r2, [pc, #68]	; (900027e4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
900027a0:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
900027a2:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        pDma = &dma;
900027a4:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
900027a6:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
900027aa:	4b0f      	ldr	r3, [pc, #60]	; (900027e8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
900027ac:	490f      	ldr	r1, [pc, #60]	; (900027ec <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
900027ae:	4a10      	ldr	r2, [pc, #64]	; (900027f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
900027b0:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
900027b2:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
900027b4:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
900027b6:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
900027ba:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
900027bc:	4a0d      	ldr	r2, [pc, #52]	; (900027f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
900027be:	2300      	movs	r3, #0
900027c0:	4620      	mov	r0, r4
900027c2:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
900027c6:	47a8      	blx	r5
900027c8:	e7ec      	b.n	900027a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
900027ca:	2100      	movs	r1, #0
900027cc:	4620      	mov	r0, r4
900027ce:	4798      	blx	r3
900027d0:	e7e8      	b.n	900027a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
900027d2:	bf00      	nop
900027d4:	900007f1 	.word	0x900007f1
900027d8:	d003fc00 	.word	0xd003fc00
900027dc:	2402645a 	.word	0x2402645a
900027e0:	90000675 	.word	0x90000675
900027e4:	2402645b 	.word	0x2402645b
900027e8:	24006f5c 	.word	0x24006f5c
900027ec:	24006f14 	.word	0x24006f14
900027f0:	d00bf400 	.word	0xd00bf400
900027f4:	d007f800 	.word	0xd007f800

900027f8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
900027f8:	b510      	push	{r4, lr}
        return instance;
900027fa:	4c14      	ldr	r4, [pc, #80]	; (9000284c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
900027fc:	6823      	ldr	r3, [r4, #0]
900027fe:	b323      	cbz	r3, 9000284a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
90002800:	4b13      	ldr	r3, [pc, #76]	; (90002850 <HAL_LTDC_LineEventCallback+0x58>)
90002802:	4a14      	ldr	r2, [pc, #80]	; (90002854 <HAL_LTDC_LineEventCallback+0x5c>)
90002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002806:	8811      	ldrh	r1, [r2, #0]
90002808:	428b      	cmp	r3, r1
9000280a:	d00a      	beq.n	90002822 <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
9000280c:	f007 fb10 	bl	90009e30 <HAL_LTDC_ProgramLineEvent>
90002810:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
90002812:	6803      	ldr	r3, [r0, #0]
90002814:	6a1b      	ldr	r3, [r3, #32]
90002816:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90002818:	2000      	movs	r0, #0
        }
    }
9000281a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
9000281e:	f7fd becd 	b.w	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
90002822:	4b0d      	ldr	r3, [pc, #52]	; (90002858 <HAL_LTDC_LineEventCallback+0x60>)
90002824:	8819      	ldrh	r1, [r3, #0]
90002826:	f007 fb03 	bl	90009e30 <HAL_LTDC_ProgramLineEvent>
        return instance;
9000282a:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
9000282c:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002830:	3301      	adds	r3, #1
90002832:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
90002836:	f7ff f8c3 	bl	900019c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
9000283a:	6820      	ldr	r0, [r4, #0]
9000283c:	f00f f9da 	bl	90011bf4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002840:	2000      	movs	r0, #0
    }
90002842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90002846:	f7fd be85 	b.w	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
9000284a:	bd10      	pop	{r4, pc}
9000284c:	2402645c 	.word	0x2402645c
90002850:	50001000 	.word	0x50001000
90002854:	24006f10 	.word	0x24006f10
90002858:	24006f0e 	.word	0x24006f0e

9000285c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
9000285c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002860:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9000291c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90002864:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90002866:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002868:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
9000286c:	4604      	mov	r4, r0
9000286e:	e024      	b.n	900028ba <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002870:	682b      	ldr	r3, [r5, #0]
90002872:	4628      	mov	r0, r5
90002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002876:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002878:	2300      	movs	r3, #0
9000287a:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
9000287c:	6829      	ldr	r1, [r5, #0]
9000287e:	f44f 7390 	mov.w	r3, #288	; 0x120
90002882:	9700      	str	r7, [sp, #0]
90002884:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002888:	f8d1 9014 	ldr.w	r9, [r1, #20]
9000288c:	4628      	mov	r0, r5
9000288e:	68a1      	ldr	r1, [r4, #8]
90002890:	47c8      	blx	r9
                    stream.frameCount++;
90002892:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002894:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002898:	3301      	adds	r3, #1
9000289a:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
9000289c:	2800      	cmp	r0, #0
9000289e:	d033      	beq.n	90002908 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900028a0:	682b      	ldr	r3, [r5, #0]
900028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900028a4:	4543      	cmp	r3, r8
900028a6:	d131      	bne.n	9000290c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
        return frameNumber;
900028a8:	6968      	ldr	r0, [r5, #20]
900028aa:	3801      	subs	r0, #1
                    stream.doDecode = false;
900028ac:	2200      	movs	r2, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
900028ae:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
900028b0:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
900028b4:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028b6:	f00a f925 	bl	9000cb04 <osMutexRelease>
            SEM_WAIT(semDecode);
900028ba:	f04f 31ff 	mov.w	r1, #4294967295
900028be:	6c20      	ldr	r0, [r4, #64]	; 0x40
900028c0:	f00a f992 	bl	9000cbe8 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
900028c4:	f04f 31ff 	mov.w	r1, #4294967295
900028c8:	6c60      	ldr	r0, [r4, #68]	; 0x44
900028ca:	f00a f8f7 	bl	9000cabc <osMutexAcquire>
                if (stream.doDecode)
900028ce:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
900028d2:	2b00      	cmp	r3, #0
900028d4:	d0ee      	beq.n	900028b4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
900028d6:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
900028d8:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
900028da:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
900028de:	2900      	cmp	r1, #0
900028e0:	d1c6      	bne.n	90002870 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
900028e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
900028e4:	2b00      	cmp	r3, #0
900028e6:	d0c9      	beq.n	9000287c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
900028e8:	682a      	ldr	r2, [r5, #0]
900028ea:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
900028ee:	4541      	cmp	r1, r8
900028f0:	d10f      	bne.n	90002912 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
900028f2:	6968      	ldr	r0, [r5, #20]
900028f4:	18c1      	adds	r1, r0, r3
900028f6:	4628      	mov	r0, r5
900028f8:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
900028fa:	6923      	ldr	r3, [r4, #16]
900028fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
900028fe:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
90002900:	440b      	add	r3, r1
                            stream.skip_frames = 0;
90002902:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
90002904:	6123      	str	r3, [r4, #16]
90002906:	e7b9      	b.n	9000287c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
90002908:	2001      	movs	r0, #1
9000290a:	e7cf      	b.n	900028ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x50>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
9000290c:	4628      	mov	r0, r5
9000290e:	4798      	blx	r3
90002910:	e7cb      	b.n	900028aa <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
90002912:	4628      	mov	r0, r5
90002914:	4788      	blx	r1
90002916:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002918:	e7ec      	b.n	900028f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
9000291a:	bf00      	nop
9000291c:	90000969 	.word	0x90000969

90002920 <videoTaskFunc>:
    videoController.decoderTaskEntry();
90002920:	4801      	ldr	r0, [pc, #4]	; (90002928 <videoTaskFunc+0x8>)
{
90002922:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
90002924:	f7ff ff9a 	bl	9000285c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90002928:	24006f5c 	.word	0x24006f5c

9000292c <_GLOBAL__sub_I_mjpegdecoder1>:
}
9000292c:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
9000292e:	4815      	ldr	r0, [pc, #84]	; (90002984 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002930:	2500      	movs	r5, #0
90002932:	f7fe fc2b 	bl	9000118c <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002936:	4c14      	ldr	r4, [pc, #80]	; (90002988 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002938:	4914      	ldr	r1, [pc, #80]	; (9000298c <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
9000293a:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
9000293e:	462a      	mov	r2, r5
90002940:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002942:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90002944:	4629      	mov	r1, r5
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002946:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002948:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
9000294a:	60e5      	str	r5, [r4, #12]
            isActive(false), isPlaying(false), isShowingOneFrame(false),
9000294c:	62a5      	str	r5, [r4, #40]	; 0x28
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
9000294e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002952:	63a5      	str	r5, [r4, #56]	; 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002954:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002958:	e9c4 5504 	strd	r5, r5, [r4, #16]
9000295c:	e9c4 5506 	strd	r5, r5, [r4, #24]
            seek_to_frame(0), skip_frames(0),
90002960:	e9c4 5508 	strd	r5, r5, [r4, #32]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
90002964:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002968:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
9000296c:	e9c4 5501 	strd	r5, r5, [r4, #4]
        semDecode = SEM_CREATE(); // Binary semaphore
90002970:	f00a f8ea 	bl	9000cb48 <osSemaphoreNew>
90002974:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90002976:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002978:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
9000297a:	f00a f85f 	bl	9000ca3c <osMutexNew>
9000297e:	6460      	str	r0, [r4, #68]	; 0x44
}
90002980:	bd38      	pop	{r3, r4, r5, pc}
90002982:	bf00      	nop
90002984:	24006f14 	.word	0x24006f14
90002988:	24006f5c 	.word	0x24006f5c
9000298c:	90026070 	.word	0x90026070

90002990 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002994:	4c7e      	ldr	r4, [pc, #504]	; (90002b90 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
90002996:	b08d      	sub	sp, #52	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002998:	fba4 4303 	umull	r4, r3, r4, r3
{
9000299c:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000299e:	0a19      	lsrs	r1, r3, #8
{
900029a0:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900029a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{
900029a6:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900029a8:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900029ac:	4293      	cmp	r3, r2
900029ae:	930b      	str	r3, [sp, #44]	; 0x2c
900029b0:	f240 80e9 	bls.w	90002b86 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029b4:	4b77      	ldr	r3, [pc, #476]	; (90002b94 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
900029b6:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002ba4 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
900029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900029bc:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002ba8 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
900029c0:	930a      	str	r3, [sp, #40]	; 0x28
900029c2:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
900029c4:	f04f 0e02 	mov.w	lr, #2
900029c8:	9908      	ldr	r1, [sp, #32]
900029ca:	f502 7080 	add.w	r0, r2, #256	; 0x100
900029ce:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029d0:	3101      	adds	r1, #1
    currentMCU++;
900029d2:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900029d6:	980a      	ldr	r0, [sp, #40]	; 0x28
900029d8:	9108      	str	r1, [sp, #32]
900029da:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
900029de:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900029e2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
900029e6:	005b      	lsls	r3, r3, #1
900029e8:	eb03 2382 	add.w	r3, r3, r2, lsl #10
900029ec:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
900029ee:	e009      	b.n	90002a04 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
900029f0:	9b01      	ldr	r3, [sp, #4]
900029f2:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
900029f6:	d30f      	bcc.n	90002a18 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
900029f8:	f1be 0f10 	cmp.w	lr, #16
900029fc:	f000 80b6 	beq.w	90002b6c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
90002a00:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90002a04:	f1be 0f0a 	cmp.w	lr, #10
90002a08:	d1f2      	bne.n	900029f0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002a0a:	9b06      	ldr	r3, [sp, #24]
90002a0c:	3380      	adds	r3, #128	; 0x80
90002a0e:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002a10:	9b01      	ldr	r3, [sp, #4]
90002a12:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002a16:	d2f3      	bcs.n	90002a00 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002a18:	9a01      	ldr	r2, [sp, #4]
90002a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002a1c:	f8cd e01c 	str.w	lr, [sp, #28]
90002a20:	4413      	add	r3, r2
90002a22:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002a26:	f103 0c10 	add.w	ip, r3, #16
90002a2a:	3330      	adds	r3, #48	; 0x30
90002a2c:	4696      	mov	lr, r2
90002a2e:	9102      	str	r1, [sp, #8]
90002a30:	9305      	str	r3, [sp, #20]
90002a32:	9b02      	ldr	r3, [sp, #8]
90002a34:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002a38:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002a3c:	4674      	mov	r4, lr
90002a3e:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a40:	f817 3f01 	ldrb.w	r3, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002a44:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a46:	4954      	ldr	r1, [pc, #336]	; (90002b98 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002a48:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a4a:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002a4e:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a50:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
90002a54:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a56:	4951      	ldr	r1, [pc, #324]	; (90002b9c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002a58:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002a5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a60:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a64:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002a66:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002a68:	4b4d      	ldr	r3, [pc, #308]	; (90002ba0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
90002a6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a6e:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002a72:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a76:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a78:	eb03 0b02 	add.w	fp, r3, r2
90002a7c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a80:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a82:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a86:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a8a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002a8e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002a92:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
90002a96:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
90002a9a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002a9e:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002aa2:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aa6:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002aaa:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002aae:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ab0:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ab4:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ab8:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002abc:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ac0:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ac4:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002ac8:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002acc:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002ad0:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002ad4:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ad8:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002adc:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ae0:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ae2:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ae6:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002aea:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002aee:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002af2:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002af6:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002afa:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002afe:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002b02:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002b06:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b08:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b0a:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002b0c:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b0e:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b12:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b16:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002b1a:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002b1e:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002b22:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002b26:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002b2a:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002b2e:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002b32:	d185      	bne.n	90002a40 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002b34:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b36:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002b3a:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002b3e:	3304      	adds	r3, #4
90002b40:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002b42:	9b05      	ldr	r3, [sp, #20]
90002b44:	4563      	cmp	r3, ip
90002b46:	f47f af74 	bne.w	90002a32 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002b4a:	9b04      	ldr	r3, [sp, #16]
90002b4c:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002b50:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002b52:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002b56:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002b58:	9b03      	ldr	r3, [sp, #12]
90002b5a:	f103 0310 	add.w	r3, r3, #16
90002b5e:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002b60:	9b01      	ldr	r3, [sp, #4]
90002b62:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002b66:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002b68:	f47f af4a 	bne.w	90002a00 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b6c:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b6e:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002b70:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002b74:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002b78:	4293      	cmp	r3, r2
90002b7a:	f47f af22 	bne.w	900029c2 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002b7e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002b82:	4a04      	ldr	r2, [pc, #16]	; (90002b94 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002b84:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002b86:	ee17 0a90 	vmov	r0, s15
90002b8a:	b00d      	add	sp, #52	; 0x34
90002b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002b90:	aaaaaaab 	.word	0xaaaaaaab
90002b94:	24009c24 	.word	0x24009c24
90002b98:	24007fa4 	.word	0x24007fa4
90002b9c:	24007ba4 	.word	0x24007ba4
90002ba0:	240087a4 	.word	0x240087a4
90002ba4:	240083a4 	.word	0x240083a4
90002ba8:	900260a8 	.word	0x900260a8

90002bac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bb0:	0a1c      	lsrs	r4, r3, #8
{
90002bb2:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002bb4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002bb8:	ee07 4a90 	vmov	s15, r4
{
90002bbc:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002bbe:	429a      	cmp	r2, r3
{
90002bc0:	9007      	str	r0, [sp, #28]
90002bc2:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002bc4:	930b      	str	r3, [sp, #44]	; 0x2c
90002bc6:	f080 814a 	bcs.w	90002e5e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bca:	4ba7      	ldr	r3, [pc, #668]	; (90002e68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002bcc:	4da7      	ldr	r5, [pc, #668]	; (90002e6c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002bd0:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90002e70 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002bd4:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002bd8:	691b      	ldr	r3, [r3, #16]
90002bda:	f8df a298 	ldr.w	sl, [pc, #664]	; 90002e74 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002bde:	f8df b298 	ldr.w	fp, [pc, #664]	; 90002e78 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002be2:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90002e7c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002be6:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002be8:	9301      	str	r3, [sp, #4]
90002bea:	e008      	b.n	90002bfe <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002bec:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002bf0:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002bf4:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002bf6:	9b08      	ldr	r3, [sp, #32]
90002bf8:	4293      	cmp	r3, r2
90002bfa:	f000 8130 	beq.w	90002e5e <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002bfe:	9a07      	ldr	r2, [sp, #28]
90002c00:	9908      	ldr	r1, [sp, #32]
90002c02:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002c06:	010b      	lsls	r3, r1, #4
90002c08:	3101      	adds	r1, #1
    currentMCU++;
90002c0a:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c0e:	980a      	ldr	r0, [sp, #40]	; 0x28
90002c10:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c12:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002c14:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002c18:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002c1c:	fb01 f202 	mul.w	r2, r1, r2
90002c20:	005b      	lsls	r3, r3, #1
90002c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002c26:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002c28:	2308      	movs	r3, #8
90002c2a:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002c2c:	e9dd 2300 	ldrd	r2, r3, [sp]
90002c30:	4293      	cmp	r3, r2
90002c32:	d9db      	bls.n	90002bec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002c36:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002c38:	9a03      	ldr	r2, [sp, #12]
90002c3a:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002c3e:	9a02      	ldr	r2, [sp, #8]
90002c40:	f103 0020 	add.w	r0, r3, #32
90002c44:	3204      	adds	r2, #4
90002c46:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c48:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002c4c:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c4e:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002c52:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002c54:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002c58:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002c5a:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002c5e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c62:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c64:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002c68:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c6c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002c6e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c70:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c74:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c78:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002c7c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c80:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002c82:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002c86:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002c8a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002c8e:	08e4      	lsrs	r4, r4, #3
90002c90:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002c94:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002c98:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002c9c:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002ca0:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ca4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ca6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002ca8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002caa:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cae:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002cb2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cb6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cb8:	08c0      	lsrs	r0, r0, #3
90002cba:	08a4      	lsrs	r4, r4, #2
90002cbc:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002cc0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002cc4:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cc8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002ccc:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002cd0:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002cd4:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002cd8:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cdc:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002cde:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002ce2:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ce6:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ce8:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cea:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cee:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cf2:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002cf6:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002cfa:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002cfc:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d00:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d04:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d08:	08e4      	lsrs	r4, r4, #3
90002d0a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d0e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d12:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d16:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90002d1a:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d1e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d20:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d22:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d24:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d28:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002d2c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d30:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d32:	08c0      	lsrs	r0, r0, #3
90002d34:	08a4      	lsrs	r4, r4, #2
90002d36:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002d3a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002d3e:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d42:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d46:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002d4a:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d4e:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d52:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d56:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d5a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d5c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d60:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d62:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d64:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d68:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d6c:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d70:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d74:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d76:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d7a:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002d7e:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002d82:	08e4      	lsrs	r4, r4, #3
90002d84:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002d88:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002d8c:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002d90:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90002d94:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d98:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d9a:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d9c:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d9e:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002da2:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002da6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002daa:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dac:	08c0      	lsrs	r0, r0, #3
90002dae:	08a4      	lsrs	r4, r4, #2
90002db0:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002db4:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002db8:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002dbc:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002dc0:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002dc4:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002dc8:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002dcc:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dd0:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002dd2:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002dd6:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dda:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ddc:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dde:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002de2:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002de6:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dea:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dee:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df4:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002df8:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002dfc:	08e4      	lsrs	r4, r4, #3
90002dfe:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002e02:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002e06:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002e0a:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002e0e:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002e12:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e14:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e16:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e18:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e1c:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002e20:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e24:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e26:	08c0      	lsrs	r0, r0, #3
90002e28:	08a4      	lsrs	r4, r4, #2
90002e2a:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002e2e:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002e32:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90002e36:	9804      	ldr	r0, [sp, #16]
90002e38:	4283      	cmp	r3, r0
90002e3a:	f47f af05 	bne.w	90002c48 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90002e3e:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e40:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90002e42:	3308      	adds	r3, #8
90002e44:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90002e46:	9b03      	ldr	r3, [sp, #12]
90002e48:	3308      	adds	r3, #8
90002e4a:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002e4c:	9b00      	ldr	r3, [sp, #0]
90002e4e:	4413      	add	r3, r2
90002e50:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90002e52:	9b05      	ldr	r3, [sp, #20]
90002e54:	3b01      	subs	r3, #1
90002e56:	9305      	str	r3, [sp, #20]
90002e58:	f47f aee8 	bne.w	90002c2c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90002e5c:	e6c6      	b.n	90002bec <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90002e5e:	ee17 0a90 	vmov	r0, s15
90002e62:	b00d      	add	sp, #52	; 0x34
90002e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002e68:	24009c24 	.word	0x24009c24
90002e6c:	24007ba4 	.word	0x24007ba4
90002e70:	240087a4 	.word	0x240087a4
90002e74:	240083a4 	.word	0x240083a4
90002e78:	24007fa4 	.word	0x24007fa4
90002e7c:	900260a8 	.word	0x900260a8

90002e80 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e84:	4cb6      	ldr	r4, [pc, #728]	; (90003160 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90002e86:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e88:	fba4 4303 	umull	r4, r3, r4, r3
{
90002e8c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e8e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002e90:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90002e94:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002e98:	429a      	cmp	r2, r3
90002e9a:	9306      	str	r3, [sp, #24]
{
90002e9c:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002ea0:	f080 8158 	bcs.w	90003154 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ea4:	4baf      	ldr	r3, [pc, #700]	; (90003164 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ea6:	4cb0      	ldr	r4, [pc, #704]	; (90003168 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002eaa:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 90003170 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002eae:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002eb2:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002eb4:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90003174 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002eb8:	48ac      	ldr	r0, [pc, #688]	; (9000316c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90002eba:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003178 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ebe:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ec0:	9300      	str	r3, [sp, #0]
90002ec2:	e007      	b.n	90002ed4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90002ec4:	9b04      	ldr	r3, [sp, #16]
90002ec6:	33c0      	adds	r3, #192	; 0xc0
90002ec8:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90002eca:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90002ece:	4293      	cmp	r3, r2
90002ed0:	f000 8140 	beq.w	90003154 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ed4:	9e05      	ldr	r6, [sp, #20]
90002ed6:	9f07      	ldr	r7, [sp, #28]
90002ed8:	00f2      	lsls	r2, r6, #3
90002eda:	3601      	adds	r6, #1
90002edc:	9904      	ldr	r1, [sp, #16]
90002ede:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ee0:	9e03      	ldr	r6, [sp, #12]
90002ee2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90002ee6:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90002eea:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002eee:	fb06 f505 	mul.w	r5, r6, r5
90002ef2:	0052      	lsls	r2, r2, #1
90002ef4:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;
90002ef8:	2508      	movs	r5, #8
90002efa:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002efc:	9d00      	ldr	r5, [sp, #0]
90002efe:	4295      	cmp	r5, r2
90002f00:	d9e0      	bls.n	90002ec4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f02:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90002f06:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f08:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90002f0c:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90002f0e:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f12:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f16:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90002f1a:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f1c:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f20:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f24:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f26:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f28:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f2a:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f2e:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f32:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f36:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f38:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f3c:	08ed      	lsrs	r5, r5, #3
90002f3e:	08bf      	lsrs	r7, r7, #2
90002f40:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90002f44:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f46:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002f4a:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f4c:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f50:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90002f54:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f58:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f5c:	4425      	add	r5, r4
90002f5e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f62:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f66:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f6a:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f6c:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f6e:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f70:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f74:	eb05 4929 	add.w	r9, r5, r9, asr #16
90002f78:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f7c:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f7e:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90002f82:	08ed      	lsrs	r5, r5, #3
90002f84:	08bf      	lsrs	r7, r7, #2
90002f86:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90002f8a:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f8c:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90002f90:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
90002f92:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f94:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90002f98:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002f9c:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f9e:	4427      	add	r7, r4
90002fa0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90002fa4:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fa6:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002faa:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fac:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fb0:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fb4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fb8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fbc:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fbe:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fc2:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fc4:	eb07 4626 	add.w	r6, r7, r6, asr #16
90002fc8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90002fcc:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90002fd0:	08fe      	lsrs	r6, r7, #3
90002fd2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90002fd6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90002fda:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002fde:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fe0:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fe4:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90002fe8:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fec:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ff0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90002ff4:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002ff6:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002ffa:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002ffe:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003000:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003002:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003004:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003008:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000300c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003010:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003014:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003018:	08fe      	lsrs	r6, r7, #3
9000301a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000301e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003022:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003026:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003028:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000302c:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90003030:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003034:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003038:	4427      	add	r7, r4
9000303a:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000303e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003042:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003046:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003048:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000304a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000304c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003050:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003054:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003058:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000305c:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003060:	08fe      	lsrs	r6, r7, #3
90003062:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90003066:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000306a:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000306e:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003070:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90003074:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003078:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000307c:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000307e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003082:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003086:	44b9      	add	r9, r7
90003088:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000308c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003090:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003094:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003098:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000309a:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000309c:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030a0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900030a4:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030a8:	08fe      	lsrs	r6, r7, #3
900030aa:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030ae:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030b2:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030b6:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b8:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030bc:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900030c0:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030c4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c8:	4427      	add	r7, r4
900030ca:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030ce:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030d2:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d6:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d8:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030da:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030dc:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900030e4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e8:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030ec:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
900030f0:	08fe      	lsrs	r6, r7, #3
900030f2:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
900030f6:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
900030fa:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030fe:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003100:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003104:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90003108:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000310c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003110:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003112:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003116:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000311a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000311e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003120:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003122:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003124:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003128:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000312c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003130:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003134:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90003138:	08fe      	lsrs	r6, r7, #3
9000313a:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000313e:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90003142:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003146:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90003148:	9d01      	ldr	r5, [sp, #4]
9000314a:	3d01      	subs	r5, #1
9000314c:	9501      	str	r5, [sp, #4]
9000314e:	f47f aed5 	bne.w	90002efc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
90003152:	e6b7      	b.n	90002ec4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90003154:	ee17 0a90 	vmov	r0, s15
90003158:	b009      	add	sp, #36	; 0x24
9000315a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000315e:	bf00      	nop
90003160:	aaaaaaab 	.word	0xaaaaaaab
90003164:	24009c24 	.word	0x24009c24
90003168:	900260a8 	.word	0x900260a8
9000316c:	240083a4 	.word	0x240083a4
90003170:	240087a4 	.word	0x240087a4
90003174:	24007ba4 	.word	0x24007ba4
90003178:	24007fa4 	.word	0x24007fa4

9000317c <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000317c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003180:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003184:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90003186:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003188:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
9000318c:	f080 8088 	bcs.w	900032a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003190:	4b45      	ldr	r3, [pc, #276]	; (900032a8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90003192:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003196:	691e      	ldr	r6, [r3, #16]
90003198:	e003      	b.n	900031a2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
9000319a:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
9000319c:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
900031a0:	d07e      	beq.n	900032a0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031a2:	00d3      	lsls	r3, r2, #3
    currentMCU++;
900031a4:	4604      	mov	r4, r0
900031a6:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031aa:	3201      	adds	r2, #1
900031ac:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900031b0:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031b4:	fb08 f505 	mul.w	r5, r8, r5
900031b8:	005b      	lsls	r3, r3, #1
900031ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031be:	429e      	cmp	r6, r3
900031c0:	d9eb      	bls.n	9000319a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900031c2:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900031c6:	18cd      	adds	r5, r1, r3
          pLum++;
900031c8:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900031ca:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031ce:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031d2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031d6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031da:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031de:	ea47 070c 	orr.w	r7, r7, ip
900031e2:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900031e4:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900031e6:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900031ea:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900031ee:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900031f2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900031f6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900031fa:	ea47 070c 	orr.w	r7, r7, ip
900031fe:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90003200:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003204:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003208:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000320c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003210:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003214:	ea47 070c 	orr.w	r7, r7, ip
90003218:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
9000321a:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000321e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003222:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003226:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000322a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000322e:	ea47 070c 	orr.w	r7, r7, ip
90003232:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90003234:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003238:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000323c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003240:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003244:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003248:	ea47 070c 	orr.w	r7, r7, ip
9000324c:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000324e:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003252:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003256:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000325a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000325e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003262:	ea47 070c 	orr.w	r7, r7, ip
90003266:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003268:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000326c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003270:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003274:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003278:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000327c:	ea47 070c 	orr.w	r7, r7, ip
90003280:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
90003282:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003286:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000328a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000328e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003292:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003296:	ea47 070c 	orr.w	r7, r7, ip
9000329a:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
9000329c:	d18f      	bne.n	900031be <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9000329e:	e77c      	b.n	9000319a <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
900032a0:	ee17 0a90 	vmov	r0, s15
900032a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900032a8:	24009c24 	.word	0x24009c24

900032ac <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900032ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032b0:	0a1c      	lsrs	r4, r3, #8
{
900032b2:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900032b4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900032b8:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900032bc:	429a      	cmp	r2, r3
900032be:	9300      	str	r3, [sp, #0]
900032c0:	f080 8129 	bcs.w	90003516 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032c4:	4b96      	ldr	r3, [pc, #600]	; (90003520 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900032c6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90003524 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032ca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032cc:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900032d0:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032d2:	9401      	str	r4, [sp, #4]
900032d4:	e005      	b.n	900032e2 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
900032d6:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900032d8:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900032dc:	429a      	cmp	r2, r3
900032de:	f000 811a 	beq.w	90003516 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032e2:	00d3      	lsls	r3, r2, #3
900032e4:	9c01      	ldr	r4, [sp, #4]
900032e6:	3201      	adds	r2, #1
    currentMCU++;
900032e8:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900032ec:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900032f0:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
900032f4:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900032f6:	fb08 f505 	mul.w	r5, r8, r5
900032fa:	0064      	lsls	r4, r4, #1
900032fc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003300:	42a6      	cmp	r6, r4
90003302:	d9e8      	bls.n	900032d6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
90003304:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
90003308:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000330a:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
9000330e:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
90003312:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003316:	fb19 f90a 	smulbb	r9, r9, sl
9000331a:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000331e:	f813 5c08 	ldrb.w	r5, [r3, #-8]
90003322:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003326:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000332a:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000332e:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003332:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003336:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000333a:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9000333e:	fb19 f90a 	smulbb	r9, r9, sl
90003342:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003346:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000334a:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000334c:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000334e:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
90003350:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003354:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90003358:	fb19 f90a 	smulbb	r9, r9, sl
9000335c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003360:	f813 5c07 	ldrb.w	r5, [r3, #-7]
90003364:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003368:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000336c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003370:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003374:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003378:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000337c:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
90003380:	fb19 f90a 	smulbb	r9, r9, sl
90003384:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003388:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000338c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000338e:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
90003390:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003394:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
90003398:	fb19 f90a 	smulbb	r9, r9, sl
9000339c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033a0:	f813 5c06 	ldrb.w	r5, [r3, #-6]
900033a4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033a8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ac:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033b0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033b4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900033b8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033bc:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
900033c0:	fb19 f90a 	smulbb	r9, r9, sl
900033c4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033c8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900033cc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900033ce:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
900033d0:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900033d4:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
900033d8:	fb19 f90a 	smulbb	r9, r9, sl
900033dc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033e0:	f813 5c05 	ldrb.w	r5, [r3, #-5]
900033e4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033e8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900033ec:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900033f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900033f4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900033f8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900033fc:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
90003400:	fb19 f90a 	smulbb	r9, r9, sl
90003404:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003408:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000340c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000340e:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
90003410:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003414:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90003418:	fb19 f90a 	smulbb	r9, r9, sl
9000341c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003420:	f813 5c04 	ldrb.w	r5, [r3, #-4]
90003424:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003428:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000342c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003430:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003434:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003438:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000343c:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
90003440:	fb19 f90a 	smulbb	r9, r9, sl
90003444:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003448:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000344c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000344e:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
90003450:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003454:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90003458:	fb19 f90a 	smulbb	r9, r9, sl
9000345c:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003460:	f813 5c03 	ldrb.w	r5, [r3, #-3]
90003464:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003468:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000346c:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003470:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003474:	ea4f 2595 	mov.w	r5, r5, lsr #10
90003478:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
9000347c:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
90003480:	fb19 f90a 	smulbb	r9, r9, sl
90003484:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003488:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000348c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000348e:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
90003490:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003494:	f813 9c02 	ldrb.w	r9, [r3, #-2]
90003498:	fb19 f90a 	smulbb	r9, r9, sl
9000349c:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034a0:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
900034a4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034a8:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034ac:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034b0:	ea4f 2555 	mov.w	r5, r5, lsr #9
900034b4:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034b8:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034bc:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
900034c0:	fb19 f90a 	smulbb	r9, r9, sl
900034c4:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034c8:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900034cc:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
900034ce:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
900034d0:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900034d4:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
900034d8:	fb19 f90a 	smulbb	r9, r9, sl
900034dc:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034e0:	f813 5c01 	ldrb.w	r5, [r3, #-1]
900034e4:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034e8:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900034ec:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900034f0:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900034f4:	ea4f 2595 	mov.w	r5, r5, lsr #10
900034f8:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900034fc:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
90003500:	fb19 f90a 	smulbb	r9, r9, sl
90003504:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003508:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
9000350c:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr =
9000350e:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
90003510:	f47f aef6 	bne.w	90003300 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
90003514:	e6df      	b.n	900032d6 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
90003516:	ee17 0a90 	vmov	r0, s15
9000351a:	b003      	add	sp, #12
9000351c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003520:	24009c24 	.word	0x24009c24
90003524:	80808081 	.word	0x80808081

90003528 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90003528:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000352a:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000352c:	6805      	ldr	r5, [r0, #0]
9000352e:	4c3e      	ldr	r4, [pc, #248]	; (90003628 <TGFX_JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003530:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90003532:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003534:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003536:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000353a:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000353e:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003540:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003544:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003546:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003548:	d027      	beq.n	9000359a <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
9000354a:	b9ed      	cbnz	r5, 90003588 <TGFX_JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
9000354c:	4837      	ldr	r0, [pc, #220]	; (9000362c <TGFX_JPEG_GetDecodeColorConvertFunc+0x104>)
9000354e:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
90003550:	f013 0107 	ands.w	r1, r3, #7
90003554:	d02b      	beq.n	900035ae <TGFX_JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003556:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
9000355a:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
9000355c:	6161      	str	r1, [r4, #20]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000355e:	4419      	add	r1, r3
90003560:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003562:	0059      	lsls	r1, r3, #1

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003564:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003566:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003568:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
9000356c:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000356e:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90003572:	fb05 6611 	mls	r6, r5, r1, r6
90003576:	b106      	cbz	r6, 9000357a <TGFX_JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003578:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000357a:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000357e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003580:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90003582:	6013      	str	r3, [r2, #0]
}
90003584:	bcf0      	pop	{r4, r5, r6, r7}
90003586:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003588:	2d30      	cmp	r5, #48	; 0x30
9000358a:	d119      	bne.n	900035c0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9000358c:	4828      	ldr	r0, [pc, #160]	; (90003630 <TGFX_JPEG_GetDecodeColorConvertFunc+0x108>)
9000358e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003590:	f013 0107 	ands.w	r1, r3, #7
90003594:	d1df      	bne.n	90003556 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90003596:	6161      	str	r1, [r4, #20]
90003598:	e00a      	b.n	900035b0 <TGFX_JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9000359a:	2f01      	cmp	r7, #1
9000359c:	d024      	beq.n	900035e8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
9000359e:	2f02      	cmp	r7, #2
900035a0:	d011      	beq.n	900035c6 <TGFX_JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900035a2:	4824      	ldr	r0, [pc, #144]	; (90003634 <TGFX_JPEG_GetDecodeColorConvertFunc+0x10c>)
900035a4:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035a6:	f013 0107 	ands.w	r1, r3, #7
900035aa:	d1d4      	bne.n	90003556 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
900035ac:	e7f3      	b.n	90003596 <TGFX_JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
900035ae:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035b0:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
900035b2:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035b4:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035b6:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035b8:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900035ba:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900035be:	e7d6      	b.n	9000356e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
900035c0:	2001      	movs	r0, #1
}
900035c2:	bcf0      	pop	{r4, r5, r6, r7}
900035c4:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035c6:	481c      	ldr	r0, [pc, #112]	; (90003638 <TGFX_JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
900035c8:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900035ca:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035cc:	f013 010f 	ands.w	r1, r3, #15
900035d0:	d022      	beq.n	90003618 <TGFX_JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035d2:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
900035d6:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900035d8:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035da:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
900035dc:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035de:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035e0:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035e2:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035e4:	62a1      	str	r1, [r4, #40]	; 0x28
900035e6:	e7c1      	b.n	9000356c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900035e8:	4814      	ldr	r0, [pc, #80]	; (9000363c <TGFX_JPEG_GetDecodeColorConvertFunc+0x114>)
900035ea:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900035ec:	f013 010f 	ands.w	r1, r3, #15
900035f0:	d107      	bne.n	90003602 <TGFX_JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900035f2:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035f4:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900035f6:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900035f8:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
900035fa:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900035fc:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90003600:	e7b5      	b.n	9000356e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
90003602:	f1c1 0110 	rsb	r1, r1, #16
90003606:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003608:	4419      	add	r1, r3
9000360a:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000360c:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9000360e:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003610:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90003612:	e9c4 5507 	strd	r5, r5, [r4, #28]
90003616:	e7a9      	b.n	9000356c <TGFX_JPEG_GetDecodeColorConvertFunc+0x44>
90003618:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9000361a:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
9000361c:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
9000361e:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003622:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003624:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90003626:	e7a2      	b.n	9000356e <TGFX_JPEG_GetDecodeColorConvertFunc+0x46>
90003628:	24009c24 	.word	0x24009c24
9000362c:	9000317d 	.word	0x9000317d
90003630:	900032ad 	.word	0x900032ad
90003634:	90002e81 	.word	0x90002e81
90003638:	90002bad 	.word	0x90002bad
9000363c:	90002991 	.word	0x90002991

90003640 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003644:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90003774 <TGFX_JPEG_InitColorTables+0x134>
90003648:	b0a5      	sub	sp, #148	; 0x94
9000364a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003778 <TGFX_JPEG_InitColorTables+0x138>
9000364e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003652:	f8df e128 	ldr.w	lr, [pc, #296]	; 9000377c <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
90003656:	2300      	movs	r3, #0
90003658:	4f3d      	ldr	r7, [pc, #244]	; (90003750 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000365a:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
9000365e:	4e3d      	ldr	r6, [pc, #244]	; (90003754 <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003660:	f249 4ad0 	movw	sl, #38096	; 0x94d0
90003664:	4d3c      	ldr	r5, [pc, #240]	; (90003758 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
90003666:	f644 498b 	movw	r9, #19595	; 0x4c8b
9000366a:	4c3c      	ldr	r4, [pc, #240]	; (9000375c <TGFX_JPEG_InitColorTables+0x11c>)
9000366c:	483c      	ldr	r0, [pc, #240]	; (90003760 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000366e:	f249 6245 	movw	r2, #38469	; 0x9645
90003672:	fb02 f203 	mul.w	r2, r2, r3
90003676:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000367a:	1412      	asrs	r2, r2, #16
9000367c:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003680:	f641 522f 	movw	r2, #7471	; 0x1d2f
90003684:	fb02 f203 	mul.w	r2, r2, r3
90003688:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000368c:	1412      	asrs	r2, r2, #16
9000368e:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003692:	4a34      	ldr	r2, [pc, #208]	; (90003764 <TGFX_JPEG_InitColorTables+0x124>)
90003694:	fb02 f203 	mul.w	r2, r2, r3
90003698:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000369c:	1412      	asrs	r2, r2, #16
9000369e:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a2:	4a31      	ldr	r2, [pc, #196]	; (90003768 <TGFX_JPEG_InitColorTables+0x128>)
900036a4:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036a8:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036aa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
900036ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036b2:	ea4f 4222 	mov.w	r2, r2, asr #16
900036b6:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036ba:	4a2c      	ldr	r2, [pc, #176]	; (9000376c <TGFX_JPEG_InitColorTables+0x12c>)
900036bc:	fb02 b203 	mla	r2, r2, r3, fp
900036c0:	ea4f 4222 	mov.w	r2, r2, asr #16
900036c4:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036c8:	4a29      	ldr	r2, [pc, #164]	; (90003770 <TGFX_JPEG_InitColorTables+0x130>)
900036ca:	fb02 a203 	mla	r2, r2, r3, sl
900036ce:	ea4f 4222 	mov.w	r2, r2, asr #16
900036d2:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036d6:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
900036da:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036dc:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900036e0:	f343 024f 	sbfx	r2, r3, #1, #16
900036e4:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900036e8:	d1c1      	bne.n	9000366e <TGFX_JPEG_InitColorTables+0x2e>
900036ea:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003780 <TGFX_JPEG_InitColorTables+0x140>
900036ee:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900036f0:	f04f 0c00 	mov.w	ip, #0
900036f4:	e007      	b.n	90003706 <TGFX_JPEG_InitColorTables+0xc6>
900036f6:	f10c 0c01 	add.w	ip, ip, #1
900036fa:	4641      	mov	r1, r8
900036fc:	f10e 0e20 	add.w	lr, lr, #32
90003700:	f1bc 0f10 	cmp.w	ip, #16
90003704:	d03e      	beq.n	90003784 <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
90003706:	f1bc 0f07 	cmp.w	ip, #7
9000370a:	f101 0808 	add.w	r8, r1, #8
9000370e:	4672      	mov	r2, lr
90003710:	f04f 0001 	mov.w	r0, #1
90003714:	bf94      	ite	ls
90003716:	2600      	movls	r6, #0
90003718:	2601      	movhi	r6, #1
9000371a:	fa1f f388 	uxth.w	r3, r8
9000371e:	2400      	movs	r4, #0
90003720:	2c07      	cmp	r4, #7
90003722:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
90003726:	bf94      	ite	ls
90003728:	2700      	movls	r7, #0
9000372a:	2701      	movhi	r7, #1
9000372c:	2f00      	cmp	r7, #0
9000372e:	f000 8407 	beq.w	90003f40 <TGFX_JPEG_InitColorTables+0x900>
90003732:	2e00      	cmp	r6, #0
90003734:	f000 8404 	beq.w	90003f40 <TGFX_JPEG_InitColorTables+0x900>
90003738:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
9000373c:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
9000373e:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003740:	d0d9      	beq.n	900036f6 <TGFX_JPEG_InitColorTables+0xb6>
90003742:	3301      	adds	r3, #1
90003744:	3401      	adds	r4, #1
90003746:	3001      	adds	r0, #1
90003748:	3101      	adds	r1, #1
9000374a:	3202      	adds	r2, #2
9000374c:	b29b      	uxth	r3, r3
9000374e:	e7e7      	b.n	90003720 <TGFX_JPEG_InitColorTables+0xe0>
90003750:	2400a7e0 	.word	0x2400a7e0
90003754:	24008ba0 	.word	0x24008ba0
90003758:	24006fa0 	.word	0x24006fa0
9000375c:	24008fa0 	.word	0x24008fa0
90003760:	240073a0 	.word	0x240073a0
90003764:	ffffd4d1 	.word	0xffffd4d1
90003768:	ffffab30 	.word	0xffffab30
9000376c:	ffff94d1 	.word	0xffff94d1
90003770:	ffffeb30 	.word	0xffffeb30
90003774:	240077a0 	.word	0x240077a0
90003778:	2400abe0 	.word	0x2400abe0
9000377c:	240093a0 	.word	0x240093a0
90003780:	2400a5e4 	.word	0x2400a5e4
90003784:	4b07      	ldr	r3, [pc, #28]	; (900037a4 <TGFX_JPEG_InitColorTables+0x164>)
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90003786:	2000      	movs	r0, #0
90003788:	4907      	ldr	r1, [pc, #28]	; (900037a8 <TGFX_JPEG_InitColorTables+0x168>)
  for(i = 0; i < 16; i++)
9000378a:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000378e:	9304      	str	r3, [sp, #16]
90003790:	4b06      	ldr	r3, [pc, #24]	; (900037ac <TGFX_JPEG_InitColorTables+0x16c>)
90003792:	4a07      	ldr	r2, [pc, #28]	; (900037b0 <TGFX_JPEG_InitColorTables+0x170>)
90003794:	9303      	str	r3, [sp, #12]
90003796:	4b07      	ldr	r3, [pc, #28]	; (900037b4 <TGFX_JPEG_InitColorTables+0x174>)
90003798:	f8df e01c 	ldr.w	lr, [pc, #28]	; 900037b8 <TGFX_JPEG_InitColorTables+0x178>
  for(i = 0; i < 16; i++)
9000379c:	469b      	mov	fp, r3
9000379e:	9002      	str	r0, [sp, #8]
900037a0:	e00c      	b.n	900037bc <TGFX_JPEG_InitColorTables+0x17c>
900037a2:	bf00      	nop
900037a4:	240097a4 	.word	0x240097a4
900037a8:	24009e64 	.word	0x24009e64
900037ac:	240099a4 	.word	0x240099a4
900037b0:	2400a0e4 	.word	0x2400a0e4
900037b4:	24009c64 	.word	0x24009c64
900037b8:	2400a2e4 	.word	0x2400a2e4
  {
    for(j = 0; j < 16; j++)
    {
      offset = i*16 + j;

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037bc:	9802      	ldr	r0, [sp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037be:	f10c 0501 	add.w	r5, ip, #1

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037c2:	f10c 0640 	add.w	r6, ip, #64	; 0x40
900037c6:	2400      	movs	r4, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037c8:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
900037ca:	1c47      	adds	r7, r0, #1
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037cc:	b2ad      	uxth	r5, r5
900037ce:	2000      	movs	r0, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d0:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
900037d2:	9702      	str	r7, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037d4:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900037d6:	9508      	str	r5, [sp, #32]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037d8:	b29b      	uxth	r3, r3
  for(i = 0; i < 16; i++)
900037da:	3220      	adds	r2, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900037dc:	9606      	str	r6, [sp, #24]
900037de:	4626      	mov	r6, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037e0:	f503 7580 	add.w	r5, r3, #256	; 0x100
900037e4:	f503 7a81 	add.w	sl, r3, #258	; 0x102
900037e8:	f203 1903 	addw	r9, r3, #259	; 0x103
  for(i = 0; i < 16; i++)
900037ec:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037f0:	b2ad      	uxth	r5, r5
  for(i = 0; i < 16; i++)
900037f2:	3120      	adds	r1, #32
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900037f4:	fa1f fa8a 	uxth.w	sl, sl
900037f8:	f365 060f 	bfi	r6, r5, #0, #16
900037fc:	fa1f f989 	uxth.w	r9, r9
90003800:	f365 461f 	bfi	r6, r5, #16, #16
90003804:	4635      	mov	r5, r6
90003806:	9e04      	ldr	r6, [sp, #16]
90003808:	9500      	str	r5, [sp, #0]
9000380a:	4634      	mov	r4, r6
9000380c:	6035      	str	r5, [r6, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000380e:	f10c 0541 	add.w	r5, ip, #65	; 0x41
90003812:	b2ad      	uxth	r5, r5
90003814:	950a      	str	r5, [sp, #40]	; 0x28
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003816:	f10c 0502 	add.w	r5, ip, #2
9000381a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000381e:	f10c 0542 	add.w	r5, ip, #66	; 0x42
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003822:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003826:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000382a:	f10c 0503 	add.w	r5, ip, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000382e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003832:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003836:	f10c 0543 	add.w	r5, ip, #67	; 0x43
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000383a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000383e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003842:	f10c 0504 	add.w	r5, ip, #4
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003846:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000384a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000384e:	f10c 0544 	add.w	r5, ip, #68	; 0x44
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003852:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003856:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000385a:	f10c 0505 	add.w	r5, ip, #5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000385e:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003862:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003866:	f10c 0545 	add.w	r5, ip, #69	; 0x45
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000386a:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000386e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003872:	f10c 0506 	add.w	r5, ip, #6
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003876:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000387a:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000387e:	f10c 0546 	add.w	r5, ip, #70	; 0x46
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003882:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003886:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000388a:	f10c 0507 	add.w	r5, ip, #7
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000388e:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003892:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003896:	f10c 0547 	add.w	r5, ip, #71	; 0x47
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
9000389a:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
9000389e:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038a2:	f503 75a0 	add.w	r5, r3, #320	; 0x140
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
900038a6:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038aa:	fa1f f885 	uxth.w	r8, r5

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038ae:	f503 75c0 	add.w	r5, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038b2:	f8cd 8014 	str.w	r8, [sp, #20]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038b6:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038ba:	f203 1501 	addw	r5, r3, #257	; 0x101
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038be:	f8cd 801c 	str.w	r8, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038c2:	b2ad      	uxth	r5, r5
900038c4:	f365 000f 	bfi	r0, r5, #0, #16
900038c8:	f365 401f 	bfi	r0, r5, #16, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038cc:	f203 1541 	addw	r5, r3, #321	; 0x141
900038d0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038d4:	f203 1581 	addw	r5, r3, #385	; 0x181
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038d8:	6070      	str	r0, [r6, #4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038da:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038de:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038e2:	f503 75a1 	add.w	r5, r3, #322	; 0x142
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900038e6:	9001      	str	r0, [sp, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038e8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038ec:	f203 1047 	addw	r0, r3, #327	; 0x147
900038f0:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038f4:	f503 75c1 	add.w	r5, r3, #386	; 0x182
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
900038f8:	b280      	uxth	r0, r0
900038fa:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
900038fe:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003902:	f203 1543 	addw	r5, r3, #323	; 0x143
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003906:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000390a:	fa1f f885 	uxth.w	r8, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000390e:	f203 1583 	addw	r5, r3, #387	; 0x183
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003912:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003916:	fa1f f885 	uxth.w	r8, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000391a:	f503 75a2 	add.w	r5, r3, #324	; 0x144
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000391e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003922:	f503 7882 	add.w	r8, r3, #260	; 0x104
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003926:	b2af      	uxth	r7, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003928:	f503 75c2 	add.w	r5, r3, #388	; 0x184
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000392c:	fa1f f888 	uxth.w	r8, r8
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003930:	9715      	str	r7, [sp, #84]	; 0x54
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003932:	b2af      	uxth	r7, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003934:	f203 1545 	addw	r5, r3, #325	; 0x145
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003938:	9717      	str	r7, [sp, #92]	; 0x5c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000393a:	f203 1705 	addw	r7, r3, #261	; 0x105
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000393e:	b2ae      	uxth	r6, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003940:	f203 1585 	addw	r5, r3, #389	; 0x185
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003944:	b2bf      	uxth	r7, r7
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003946:	b2ad      	uxth	r5, r5
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003948:	9619      	str	r6, [sp, #100]	; 0x64
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000394a:	f503 7683 	add.w	r6, r3, #262	; 0x106
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000394e:	9021      	str	r0, [sp, #132]	; 0x84
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003950:	951b      	str	r5, [sp, #108]	; 0x6c
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003952:	f503 75a3 	add.w	r5, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003956:	b2b6      	uxth	r6, r6
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003958:	9803      	ldr	r0, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
9000395a:	b2ad      	uxth	r5, r5
9000395c:	951d      	str	r5, [sp, #116]	; 0x74
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000395e:	f503 75c3 	add.w	r5, r3, #390	; 0x186
90003962:	b2ad      	uxth	r5, r5
90003964:	951f      	str	r5, [sp, #124]	; 0x7c
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003966:	f203 1507 	addw	r5, r3, #263	; 0x107
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
9000396a:	f203 1387 	addw	r3, r3, #391	; 0x187
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000396e:	b2ad      	uxth	r5, r5
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003970:	b29b      	uxth	r3, r3
90003972:	9323      	str	r3, [sp, #140]	; 0x8c
90003974:	2300      	movs	r3, #0
90003976:	f36a 030f 	bfi	r3, sl, #0, #16
9000397a:	f36a 431f 	bfi	r3, sl, #16, #16
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
9000397e:	f04f 0a00 	mov.w	sl, #0
90003982:	f369 0a0f 	bfi	sl, r9, #0, #16
90003986:	60a3      	str	r3, [r4, #8]
90003988:	f369 4a1f 	bfi	sl, r9, #16, #16
9000398c:	f04f 0900 	mov.w	r9, #0
90003990:	f368 090f 	bfi	r9, r8, #0, #16
90003994:	f8c4 a00c 	str.w	sl, [r4, #12]
90003998:	f368 491f 	bfi	r9, r8, #16, #16
9000399c:	f04f 0800 	mov.w	r8, #0
900039a0:	f367 080f 	bfi	r8, r7, #0, #16
900039a4:	f8c4 9010 	str.w	r9, [r4, #16]
900039a8:	f367 481f 	bfi	r8, r7, #16, #16
900039ac:	2700      	movs	r7, #0
900039ae:	f366 070f 	bfi	r7, r6, #0, #16
900039b2:	f8c4 8014 	str.w	r8, [r4, #20]
900039b6:	f366 471f 	bfi	r7, r6, #16, #16
900039ba:	2600      	movs	r6, #0
900039bc:	f365 060f 	bfi	r6, r5, #0, #16
900039c0:	61a7      	str	r7, [r4, #24]
900039c2:	f365 461f 	bfi	r6, r5, #16, #16
  for(i = 0; i < 16; i++)
900039c6:	f104 0520 	add.w	r5, r4, #32
900039ca:	9504      	str	r5, [sp, #16]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039cc:	2500      	movs	r5, #0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
900039ce:	61e6      	str	r6, [r4, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039d0:	f36c 050f 	bfi	r5, ip, #0, #16
900039d4:	9c08      	ldr	r4, [sp, #32]
900039d6:	f36c 451f 	bfi	r5, ip, #16, #16
  for(i = 0; i < 16; i++)
900039da:	f10c 0c08 	add.w	ip, ip, #8
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039de:	6005      	str	r5, [r0, #0]
900039e0:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
900039e2:	fa1f fc8c 	uxth.w	ip, ip
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
900039e6:	f364 050f 	bfi	r5, r4, #0, #16
900039ea:	f364 451f 	bfi	r5, r4, #16, #16
900039ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900039f0:	6045      	str	r5, [r0, #4]
900039f2:	2500      	movs	r5, #0
900039f4:	f364 050f 	bfi	r5, r4, #0, #16
900039f8:	f364 451f 	bfi	r5, r4, #16, #16
900039fc:	9c10      	ldr	r4, [sp, #64]	; 0x40
900039fe:	6085      	str	r5, [r0, #8]
90003a00:	2500      	movs	r5, #0
90003a02:	f364 050f 	bfi	r5, r4, #0, #16
90003a06:	f364 451f 	bfi	r5, r4, #16, #16
90003a0a:	9c14      	ldr	r4, [sp, #80]	; 0x50
90003a0c:	60c5      	str	r5, [r0, #12]
90003a0e:	2500      	movs	r5, #0
90003a10:	f364 050f 	bfi	r5, r4, #0, #16
90003a14:	f364 451f 	bfi	r5, r4, #16, #16
90003a18:	9c18      	ldr	r4, [sp, #96]	; 0x60
90003a1a:	6105      	str	r5, [r0, #16]
90003a1c:	2500      	movs	r5, #0
90003a1e:	f364 050f 	bfi	r5, r4, #0, #16
90003a22:	f364 451f 	bfi	r5, r4, #16, #16
90003a26:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90003a28:	6145      	str	r5, [r0, #20]
90003a2a:	2500      	movs	r5, #0
90003a2c:	f364 050f 	bfi	r5, r4, #0, #16
90003a30:	f364 451f 	bfi	r5, r4, #16, #16
90003a34:	9c20      	ldr	r4, [sp, #128]	; 0x80
90003a36:	6185      	str	r5, [r0, #24]
90003a38:	2500      	movs	r5, #0
90003a3a:	f364 050f 	bfi	r5, r4, #0, #16
90003a3e:	f364 451f 	bfi	r5, r4, #16, #16
  for(i = 0; i < 16; i++)
90003a42:	f100 0420 	add.w	r4, r0, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a46:	61c5      	str	r5, [r0, #28]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a48:	2500      	movs	r5, #0
  for(i = 0; i < 16; i++)
90003a4a:	9403      	str	r4, [sp, #12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a4c:	9c05      	ldr	r4, [sp, #20]
90003a4e:	f364 050f 	bfi	r5, r4, #0, #16
90003a52:	f364 451f 	bfi	r5, r4, #16, #16
90003a56:	9c09      	ldr	r4, [sp, #36]	; 0x24
90003a58:	f84b 5c20 	str.w	r5, [fp, #-32]
90003a5c:	2500      	movs	r5, #0
90003a5e:	f364 050f 	bfi	r5, r4, #0, #16
90003a62:	f364 451f 	bfi	r5, r4, #16, #16
90003a66:	f84b 5c1c 	str.w	r5, [fp, #-28]
90003a6a:	2500      	movs	r5, #0
90003a6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a6e:	9806      	ldr	r0, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003a70:	f364 050f 	bfi	r5, r4, #0, #16
90003a74:	f364 451f 	bfi	r5, r4, #16, #16
90003a78:	9c11      	ldr	r4, [sp, #68]	; 0x44
90003a7a:	f84b 5c18 	str.w	r5, [fp, #-24]
90003a7e:	2500      	movs	r5, #0
90003a80:	f364 050f 	bfi	r5, r4, #0, #16
90003a84:	f364 451f 	bfi	r5, r4, #16, #16
90003a88:	9c15      	ldr	r4, [sp, #84]	; 0x54
90003a8a:	f84b 5c14 	str.w	r5, [fp, #-20]
90003a8e:	2500      	movs	r5, #0
90003a90:	f364 050f 	bfi	r5, r4, #0, #16
90003a94:	f364 451f 	bfi	r5, r4, #16, #16
90003a98:	9c19      	ldr	r4, [sp, #100]	; 0x64
90003a9a:	f84b 5c10 	str.w	r5, [fp, #-16]
90003a9e:	2500      	movs	r5, #0
90003aa0:	f364 050f 	bfi	r5, r4, #0, #16
90003aa4:	f364 451f 	bfi	r5, r4, #16, #16
90003aa8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
90003aaa:	f84b 5c0c 	str.w	r5, [fp, #-12]
90003aae:	2500      	movs	r5, #0
90003ab0:	f364 050f 	bfi	r5, r4, #0, #16
90003ab4:	f364 451f 	bfi	r5, r4, #16, #16
90003ab8:	9c21      	ldr	r4, [sp, #132]	; 0x84
90003aba:	f84b 5c08 	str.w	r5, [fp, #-8]
90003abe:	2500      	movs	r5, #0
90003ac0:	f364 050f 	bfi	r5, r4, #0, #16
90003ac4:	f364 451f 	bfi	r5, r4, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003ac8:	2400      	movs	r4, #0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003aca:	f84b 5c04 	str.w	r5, [fp, #-4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ace:	2500      	movs	r5, #0
90003ad0:	f360 050f 	bfi	r5, r0, #0, #16
90003ad4:	f360 451f 	bfi	r5, r0, #16, #16
90003ad8:	980a      	ldr	r0, [sp, #40]	; 0x28
90003ada:	f841 5c20 	str.w	r5, [r1, #-32]
90003ade:	2500      	movs	r5, #0
90003ae0:	f360 050f 	bfi	r5, r0, #0, #16
90003ae4:	f360 451f 	bfi	r5, r0, #16, #16
90003ae8:	980e      	ldr	r0, [sp, #56]	; 0x38
90003aea:	f841 5c1c 	str.w	r5, [r1, #-28]
90003aee:	2500      	movs	r5, #0
90003af0:	f360 050f 	bfi	r5, r0, #0, #16
90003af4:	f360 451f 	bfi	r5, r0, #16, #16
90003af8:	9812      	ldr	r0, [sp, #72]	; 0x48
90003afa:	f841 5c18 	str.w	r5, [r1, #-24]
90003afe:	2500      	movs	r5, #0
90003b00:	f360 050f 	bfi	r5, r0, #0, #16
90003b04:	f360 451f 	bfi	r5, r0, #16, #16
90003b08:	9816      	ldr	r0, [sp, #88]	; 0x58
90003b0a:	f841 5c14 	str.w	r5, [r1, #-20]
90003b0e:	2500      	movs	r5, #0
90003b10:	f360 050f 	bfi	r5, r0, #0, #16
90003b14:	f360 451f 	bfi	r5, r0, #16, #16
90003b18:	981a      	ldr	r0, [sp, #104]	; 0x68
90003b1a:	f841 5c10 	str.w	r5, [r1, #-16]
90003b1e:	2500      	movs	r5, #0
90003b20:	f360 050f 	bfi	r5, r0, #0, #16
90003b24:	f360 451f 	bfi	r5, r0, #16, #16
90003b28:	981e      	ldr	r0, [sp, #120]	; 0x78
90003b2a:	f841 5c0c 	str.w	r5, [r1, #-12]
90003b2e:	2500      	movs	r5, #0
90003b30:	f360 050f 	bfi	r5, r0, #0, #16
90003b34:	f360 451f 	bfi	r5, r0, #16, #16
90003b38:	9822      	ldr	r0, [sp, #136]	; 0x88
90003b3a:	f841 5c08 	str.w	r5, [r1, #-8]
90003b3e:	2500      	movs	r5, #0
90003b40:	f360 050f 	bfi	r5, r0, #0, #16
90003b44:	f360 451f 	bfi	r5, r0, #16, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b48:	9807      	ldr	r0, [sp, #28]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b4a:	f841 5c04 	str.w	r5, [r1, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b4e:	2500      	movs	r5, #0
90003b50:	f360 050f 	bfi	r5, r0, #0, #16
90003b54:	f360 451f 	bfi	r5, r0, #16, #16
90003b58:	f842 5c20 	str.w	r5, [r2, #-32]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b5c:	9d00      	ldr	r5, [sp, #0]
90003b5e:	f8ce 5000 	str.w	r5, [lr]
90003b62:	9801      	ldr	r0, [sp, #4]
90003b64:	f8ce 601c 	str.w	r6, [lr, #28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b68:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
90003b6a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b6c:	e9ce 0301 	strd	r0, r3, [lr, #4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b70:	2300      	movs	r3, #0
90003b72:	9817      	ldr	r0, [sp, #92]	; 0x5c
90003b74:	f366 030f 	bfi	r3, r6, #0, #16
90003b78:	f366 431f 	bfi	r3, r6, #16, #16
90003b7c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b7e:	e9ce 8705 	strd	r8, r7, [lr, #20]
90003b82:	e9ce a903 	strd	sl, r9, [lr, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b86:	f842 3c1c 	str.w	r3, [r2, #-28]
90003b8a:	2300      	movs	r3, #0
  for(i = 0; i < 16; i++)
90003b8c:	9f02      	ldr	r7, [sp, #8]
90003b8e:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b92:	f366 030f 	bfi	r3, r6, #0, #16
  for(i = 0; i < 16; i++)
90003b96:	2f10      	cmp	r7, #16
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b98:	f366 431f 	bfi	r3, r6, #16, #16
90003b9c:	f842 3c18 	str.w	r3, [r2, #-24]
90003ba0:	f04f 0300 	mov.w	r3, #0
90003ba4:	f365 030f 	bfi	r3, r5, #0, #16
90003ba8:	f365 431f 	bfi	r3, r5, #16, #16
90003bac:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
90003bae:	f842 3c14 	str.w	r3, [r2, #-20]
90003bb2:	f04f 0300 	mov.w	r3, #0
90003bb6:	f365 040f 	bfi	r4, r5, #0, #16
90003bba:	f360 030f 	bfi	r3, r0, #0, #16
90003bbe:	f365 441f 	bfi	r4, r5, #16, #16
90003bc2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90003bc4:	f360 431f 	bfi	r3, r0, #16, #16
90003bc8:	f04f 0000 	mov.w	r0, #0
90003bcc:	f842 4c0c 	str.w	r4, [r2, #-12]
90003bd0:	f842 3c10 	str.w	r3, [r2, #-16]
90003bd4:	4603      	mov	r3, r0
90003bd6:	9c23      	ldr	r4, [sp, #140]	; 0x8c
90003bd8:	f365 000f 	bfi	r0, r5, #0, #16
90003bdc:	f364 030f 	bfi	r3, r4, #0, #16
90003be0:	f365 401f 	bfi	r0, r5, #16, #16
90003be4:	f364 431f 	bfi	r3, r4, #16, #16
90003be8:	e942 0302 	strd	r0, r3, [r2, #-8]
  for(i = 0; i < 16; i++)
90003bec:	f47f ade6 	bne.w	900037bc <TGFX_JPEG_InitColorTables+0x17c>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003bf0:	48db      	ldr	r0, [pc, #876]	; (90003f60 <TGFX_JPEG_InitColorTables+0x920>)
90003bf2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003bf6:	49db      	ldr	r1, [pc, #876]	; (90003f64 <TGFX_JPEG_InitColorTables+0x924>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003bf8:	6004      	str	r4, [r0, #0]
90003bfa:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003bfe:	4ada      	ldr	r2, [pc, #872]	; (90003f68 <TGFX_JPEG_InitColorTables+0x928>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c00:	6044      	str	r4, [r0, #4]
90003c02:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003c06:	4bd9      	ldr	r3, [pc, #868]	; (90003f6c <TGFX_JPEG_InitColorTables+0x92c>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c08:	6084      	str	r4, [r0, #8]
90003c0a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c0e:	4fd8      	ldr	r7, [pc, #864]	; (90003f70 <TGFX_JPEG_InitColorTables+0x930>)
90003c10:	60c4      	str	r4, [r0, #12]
90003c12:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c16:	4ed7      	ldr	r6, [pc, #860]	; (90003f74 <TGFX_JPEG_InitColorTables+0x934>)
90003c18:	6104      	str	r4, [r0, #16]
90003c1a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c1e:	4dd6      	ldr	r5, [pc, #856]	; (90003f78 <TGFX_JPEG_InitColorTables+0x938>)
90003c20:	6144      	str	r4, [r0, #20]
90003c22:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c26:	f8df b374 	ldr.w	fp, [pc, #884]	; 90003f9c <TGFX_JPEG_InitColorTables+0x95c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c2a:	6184      	str	r4, [r0, #24]
90003c2c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c30:	f8df a36c 	ldr.w	sl, [pc, #876]	; 90003fa0 <TGFX_JPEG_InitColorTables+0x960>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c34:	61c4      	str	r4, [r0, #28]
90003c36:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c3a:	f8df 9368 	ldr.w	r9, [pc, #872]	; 90003fa4 <TGFX_JPEG_InitColorTables+0x964>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c3e:	6204      	str	r4, [r0, #32]
90003c40:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c44:	f8df 8360 	ldr.w	r8, [pc, #864]	; 90003fa8 <TGFX_JPEG_InitColorTables+0x968>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c48:	6244      	str	r4, [r0, #36]	; 0x24
90003c4a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003c4e:	f8df e35c 	ldr.w	lr, [pc, #860]	; 90003fac <TGFX_JPEG_InitColorTables+0x96c>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003c52:	6284      	str	r4, [r0, #40]	; 0x28
90003c54:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c58:	62c4      	str	r4, [r0, #44]	; 0x2c
90003c5a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c5e:	6304      	str	r4, [r0, #48]	; 0x30
90003c60:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c64:	6344      	str	r4, [r0, #52]	; 0x34
90003c66:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c6a:	6384      	str	r4, [r0, #56]	; 0x38
90003c6c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c70:	63c4      	str	r4, [r0, #60]	; 0x3c
90003c72:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c76:	6404      	str	r4, [r0, #64]	; 0x40
90003c78:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c7c:	6444      	str	r4, [r0, #68]	; 0x44
90003c7e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c82:	6484      	str	r4, [r0, #72]	; 0x48
90003c84:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c88:	64c4      	str	r4, [r0, #76]	; 0x4c
90003c8a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c8e:	6504      	str	r4, [r0, #80]	; 0x50
90003c90:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c94:	6544      	str	r4, [r0, #84]	; 0x54
90003c96:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003c9a:	6584      	str	r4, [r0, #88]	; 0x58
90003c9c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ca0:	65c4      	str	r4, [r0, #92]	; 0x5c
90003ca2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003ca6:	6604      	str	r4, [r0, #96]	; 0x60
90003ca8:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cac:	6644      	str	r4, [r0, #100]	; 0x64
90003cae:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cb2:	6684      	str	r4, [r0, #104]	; 0x68
90003cb4:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cb8:	66c4      	str	r4, [r0, #108]	; 0x6c
90003cba:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cbe:	6704      	str	r4, [r0, #112]	; 0x70
90003cc0:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cc4:	6744      	str	r4, [r0, #116]	; 0x74
90003cc6:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cca:	6784      	str	r4, [r0, #120]	; 0x78
90003ccc:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cd0:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003cd2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003cd6:	48a9      	ldr	r0, [pc, #676]	; (90003f7c <TGFX_JPEG_InitColorTables+0x93c>)
90003cd8:	e9c1 4000 	strd	r4, r0, [r1]
90003cdc:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ce0:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ce4:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003ce8:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cec:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003cf0:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003cf4:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003cf8:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003cfc:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003d00:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d04:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d08:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003d0c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d10:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d14:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003d18:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d1c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d20:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003d24:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d28:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d2c:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003d30:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d34:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d38:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003d3c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d40:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d44:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003d48:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d4c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d50:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003d54:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d58:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d5c:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003d60:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d64:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d68:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003d6c:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d70:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d74:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003d78:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d7c:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d80:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003d84:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d88:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003d8c:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003d90:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003d94:	497a      	ldr	r1, [pc, #488]	; (90003f80 <TGFX_JPEG_InitColorTables+0x940>)
90003d96:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003d9a:	e9c2 4100 	strd	r4, r1, [r2]
90003d9e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003da2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003da6:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003daa:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dae:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003db2:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003db6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dba:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dbe:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003dc2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dc6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003dca:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003dce:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dd2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dd6:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003dda:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dde:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003de2:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003de6:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003dea:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003dee:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003df2:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003df6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003dfa:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003dfe:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e02:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e06:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003e0a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e0e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e12:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003e16:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e1a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e1e:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003e22:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e26:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e2a:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003e2e:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e32:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e36:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003e3a:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003e3e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e42:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003e46:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003e4a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003e4e:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003e52:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003e56:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003e5a:	4a4a      	ldr	r2, [pc, #296]	; (90003f84 <TGFX_JPEG_InitColorTables+0x944>)
90003e5c:	e9c3 4000 	strd	r4, r0, [r3]
90003e60:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003e64:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e68:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e6c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e70:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e74:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003e78:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003e7c:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e80:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e84:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003e88:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003e8c:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003e90:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003e94:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003e98:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003e9c:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ea0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ea4:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90003ea8:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
90003eac:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003eb0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003eb4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003eb8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ebc:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
90003ec0:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90003ec4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ec8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ecc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ed0:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003ed4:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90003ed8:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
90003edc:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ee0:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ee4:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ee8:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003eec:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
90003ef0:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90003ef4:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ef8:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003efc:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003f00:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003f04:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90003f08:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
90003f0c:	4c1e      	ldr	r4, [pc, #120]	; (90003f88 <TGFX_JPEG_InitColorTables+0x948>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003f0e:	481f      	ldr	r0, [pc, #124]	; (90003f8c <TGFX_JPEG_InitColorTables+0x94c>)
90003f10:	491f      	ldr	r1, [pc, #124]	; (90003f90 <TGFX_JPEG_InitColorTables+0x950>)
90003f12:	4a20      	ldr	r2, [pc, #128]	; (90003f94 <TGFX_JPEG_InitColorTables+0x954>)
90003f14:	4b20      	ldr	r3, [pc, #128]	; (90003f98 <TGFX_JPEG_InitColorTables+0x958>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f16:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90003f1a:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
90003f1c:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
90003f20:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f22:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90003f26:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f28:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
90003f2c:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
90003f30:	4452      	add	r2, sl
90003f32:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90003f34:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90003f38:	d1ed      	bne.n	90003f16 <TGFX_JPEG_InitColorTables+0x8d6>
}
90003f3a:	b025      	add	sp, #148	; 0x94
90003f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
90003f40:	f1bc 0f07 	cmp.w	ip, #7
90003f44:	d803      	bhi.n	90003f4e <TGFX_JPEG_InitColorTables+0x90e>
90003f46:	b117      	cbz	r7, 90003f4e <TGFX_JPEG_InitColorTables+0x90e>
90003f48:	460d      	mov	r5, r1
90003f4a:	f7ff bbf7 	b.w	9000373c <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
90003f4e:	2c07      	cmp	r4, #7
90003f50:	f63f abf4 	bhi.w	9000373c <TGFX_JPEG_InitColorTables+0xfc>
90003f54:	2e00      	cmp	r6, #0
90003f56:	f43f abf1 	beq.w	9000373c <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
90003f5a:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
90003f5c:	f7ff bbf1 	b.w	90003742 <TGFX_JPEG_InitColorTables+0x102>
90003f60:	2400a564 	.word	0x2400a564
90003f64:	24009ba4 	.word	0x24009ba4
90003f68:	2400a064 	.word	0x2400a064
90003f6c:	2400a4e4 	.word	0x2400a4e4
90003f70:	240087a0 	.word	0x240087a0
90003f74:	24007ba0 	.word	0x24007ba0
90003f78:	240083a0 	.word	0x240083a0
90003f7c:	00430042 	.word	0x00430042
90003f80:	00830082 	.word	0x00830082
90003f84:	00c700c6 	.word	0x00c700c6
90003f88:	24007fa0 	.word	0x24007fa0
90003f8c:	002c0c00 	.word	0x002c0c00
90003f90:	005b6800 	.word	0x005b6800
90003f94:	ff1db000 	.word	0xff1db000
90003f98:	ff4d0c00 	.word	0xff4d0c00
90003f9c:	000166e8 	.word	0x000166e8
90003fa0:	0001c5a0 	.word	0x0001c5a0
90003fa4:	ffff4930 	.word	0xffff4930
90003fa8:	ffffa7e8 	.word	0xffffa7e8
90003fac:	00b3f400 	.word	0x00b3f400

90003fb0 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
90003fb0:	4901      	ldr	r1, [pc, #4]	; (90003fb8 <vApplicationIdleHook+0x8>)
90003fb2:	2000      	movs	r0, #0
90003fb4:	f00a bfe8 	b.w	9000ef88 <vTaskSetApplicationTaskTag>
90003fb8:	90000945 	.word	0x90000945

90003fbc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
90003fbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
90003fbe:	2064      	movs	r0, #100	; 0x64
90003fc0:	f008 fd2e 	bl	9000ca20 <osDelay>
  for(;;)
90003fc4:	e7fb      	b.n	90003fbe <StartDefaultTask+0x2>
90003fc6:	bf00      	nop

90003fc8 <SystemClock_Config>:
{
90003fc8:	b570      	push	{r4, r5, r6, lr}
90003fca:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90003fcc:	224c      	movs	r2, #76	; 0x4c
90003fce:	2100      	movs	r1, #0
90003fd0:	a80a      	add	r0, sp, #40	; 0x28
90003fd2:	f01f fde3 	bl	90023b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90003fd6:	2220      	movs	r2, #32
90003fd8:	2100      	movs	r1, #0
90003fda:	a802      	add	r0, sp, #8
90003fdc:	f01f fdde 	bl	90023b9c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
90003fe0:	2002      	movs	r0, #2
90003fe2:	f006 f963 	bl	9000a2ac <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90003fe6:	4b22      	ldr	r3, [pc, #136]	; (90004070 <SystemClock_Config+0xa8>)
90003fe8:	2100      	movs	r1, #0
90003fea:	4a22      	ldr	r2, [pc, #136]	; (90004074 <SystemClock_Config+0xac>)
90003fec:	9101      	str	r1, [sp, #4]
90003fee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
90003ff0:	f021 0101 	bic.w	r1, r1, #1
90003ff4:	62d9      	str	r1, [r3, #44]	; 0x2c
90003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90003ff8:	f003 0301 	and.w	r3, r3, #1
90003ffc:	9301      	str	r3, [sp, #4]
90003ffe:	6993      	ldr	r3, [r2, #24]
90004000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
90004004:	6193      	str	r3, [r2, #24]
90004006:	6993      	ldr	r3, [r2, #24]
90004008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
9000400c:	9301      	str	r3, [sp, #4]
9000400e:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
90004010:	6993      	ldr	r3, [r2, #24]
90004012:	0499      	lsls	r1, r3, #18
90004014:	d5fc      	bpl.n	90004010 <SystemClock_Config+0x48>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90004016:	2201      	movs	r2, #1
90004018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
9000401c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000401e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
90004020:	2500      	movs	r5, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90004022:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = 2;
90004024:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
90004026:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 160;
9000402a:	2205      	movs	r2, #5
9000402c:	23a0      	movs	r3, #160	; 0xa0
9000402e:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
90004032:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
90004034:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
90004038:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
9000403a:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
9000403e:	e9cd 551b 	strd	r5, r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
90004042:	f006 f9db 	bl	9000a3fc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
90004046:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90004048:	223f      	movs	r2, #63	; 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000404a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
9000404c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
9000404e:	eb0d 0006 	add.w	r0, sp, r6
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
90004052:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
90004054:	2203      	movs	r2, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
90004056:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
90004058:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
9000405a:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
9000405c:	e9cd 6305 	strd	r6, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
90004060:	f44f 6380 	mov.w	r3, #1024	; 0x400
90004064:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004066:	f006 fd5d 	bl	9000ab24 <HAL_RCC_ClockConfig>
}
9000406a:	b01e      	add	sp, #120	; 0x78
9000406c:	bd70      	pop	{r4, r5, r6, pc}
9000406e:	bf00      	nop
90004070:	58000400 	.word	0x58000400
90004074:	58024800 	.word	0x58024800

90004078 <InitTIM15_OC>:
void InitTIM15_OC(){
90004078:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000407a:	4e25      	ldr	r6, [pc, #148]	; (90004110 <InitTIM15_OC+0x98>)
void InitTIM15_OC(){
9000407c:	b091      	sub	sp, #68	; 0x44
	GPIO_InitTypeDef GPIO_InitStruct = {0};
9000407e:	2500      	movs	r5, #0
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
90004080:	2704      	movs	r7, #4
	__HAL_RCC_GPIOE_CLK_ENABLE();
90004082:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
	GPIO_InitStruct.Pin = GPIO_PIN_6;
90004086:	2240      	movs	r2, #64	; 0x40
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004088:	a902      	add	r1, sp, #8
9000408a:	4822      	ldr	r0, [pc, #136]	; (90004114 <InitTIM15_OC+0x9c>)
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000408c:	f043 0310 	orr.w	r3, r3, #16
	htim15.Instance = TIM15;
90004090:	4c21      	ldr	r4, [pc, #132]	; (90004118 <InitTIM15_OC+0xa0>)
	__HAL_RCC_GPIOE_CLK_ENABLE();
90004092:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
90004096:	f8d6 30e0 	ldr.w	r3, [r6, #224]	; 0xe0
	GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
9000409a:	9706      	str	r7, [sp, #24]
	__HAL_RCC_GPIOE_CLK_ENABLE();
9000409c:	f003 0310 	and.w	r3, r3, #16
900040a0:	9300      	str	r3, [sp, #0]
900040a2:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_6;
900040a4:	2302      	movs	r3, #2
	GPIO_InitTypeDef GPIO_InitStruct = {0};
900040a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_6;
900040aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
900040ae:	f003 fae5 	bl	9000767c <HAL_GPIO_Init>
	__HAL_RCC_TIM15_CLK_ENABLE();
900040b2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
900040b6:	60a5      	str	r5, [r4, #8]
	HAL_TIM_OC_Init(&htim15);
900040b8:	4620      	mov	r0, r4
	__HAL_RCC_TIM15_CLK_ENABLE();
900040ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
	htim15.Init.RepetitionCounter = 0;
900040be:	6165      	str	r5, [r4, #20]
	htim15.Instance = TIM15;
900040c0:	4a16      	ldr	r2, [pc, #88]	; (9000411c <InitTIM15_OC+0xa4>)
	__HAL_RCC_TIM15_CLK_ENABLE();
900040c2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
900040c6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
900040ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900040ce:	9301      	str	r3, [sp, #4]
	htim15.Init.Prescaler = 64-1;
900040d0:	233f      	movs	r3, #63	; 0x3f
	__HAL_RCC_TIM15_CLK_ENABLE();
900040d2:	9901      	ldr	r1, [sp, #4]
	htim15.Init.Prescaler = 64-1;
900040d4:	e9c4 2300 	strd	r2, r3, [r4]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
900040d8:	2380      	movs	r3, #128	; 0x80
	htim15.Init.Period = 5000-1;
900040da:	f241 3287 	movw	r2, #4999	; 0x1387
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
900040de:	61a3      	str	r3, [r4, #24]
	htim15.Init.Period = 5000-1;
900040e0:	60e2      	str	r2, [r4, #12]
	HAL_TIM_OC_Init(&htim15);
900040e2:	f007 fffb 	bl	9000c0dc <HAL_TIM_OC_Init>
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
900040e6:	2030      	movs	r0, #48	; 0x30
900040e8:	2132      	movs	r1, #50	; 0x32
	HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2);
900040ea:	463a      	mov	r2, r7
	TIM_OC_InitTypeDef sConfigOC = {0};
900040ec:	950e      	str	r5, [sp, #56]	; 0x38
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
900040ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
	HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2);
900040f2:	a908      	add	r1, sp, #32
900040f4:	4620      	mov	r0, r4
	TIM_OC_InitTypeDef sConfigOC = {0};
900040f6:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
900040fa:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
	HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2);
900040fe:	f008 fa79 	bl	9000c5f4 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(&htim15, TIM_CHANNEL_2);
90004102:	4639      	mov	r1, r7
90004104:	4620      	mov	r0, r4
90004106:	f008 f89f 	bl	9000c248 <HAL_TIM_OC_Start_IT>
}
9000410a:	b011      	add	sp, #68	; 0x44
9000410c:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000410e:	bf00      	nop
90004110:	58024400 	.word	0x58024400
90004114:	58021000 	.word	0x58021000
90004118:	2400b284 	.word	0x2400b284
9000411c:	40014000 	.word	0x40014000

90004120 <main>:
{
90004120:	b580      	push	{r7, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90004122:	2400      	movs	r4, #0
{
90004124:	b09a      	sub	sp, #104	; 0x68
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90004126:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004128:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
9000412a:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
9000412c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
90004130:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_MPU_Disable();
90004134:	f003 f894 	bl	90007260 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
90004138:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
9000413c:	49d4      	ldr	r1, [pc, #848]	; (90004490 <main+0x370>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000413e:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.BaseAddress = 0x24000000;
90004140:	930e      	str	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004142:	4bd4      	ldr	r3, [pc, #848]	; (90004494 <main+0x374>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
90004144:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004148:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000414c:	f003 f8a6 	bl	9000729c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
90004150:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004154:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90004156:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
  MPU_InitStruct.BaseAddress = 0x90000000;
9000415a:	930e      	str	r3, [sp, #56]	; 0x38
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
9000415c:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90004160:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004164:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004168:	f003 f898 	bl	9000729c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
9000416c:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000416e:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004170:	f8ad 603f 	strh.w	r6, [sp, #63]	; 0x3f
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90004174:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
90004178:	231a      	movs	r3, #26
9000417a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
9000417e:	f240 1301 	movw	r3, #257	; 0x101
90004182:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004186:	f003 f889 	bl	9000729c <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000418a:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000418e:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004190:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
90004194:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90004196:	f8ad 303f 	strh.w	r3, [sp, #63]	; 0x3f
  MPU_InitStruct.BaseAddress = 0xD0000000;
9000419a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
9000419e:	f88d 703c 	strb.w	r7, [sp, #60]	; 0x3c
  MPU_InitStruct.BaseAddress = 0xD0000000;
900041a2:	930e      	str	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
900041a4:	f88d 6035 	strb.w	r6, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900041a8:	f003 f878 	bl	9000729c <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900041ac:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900041ae:	a80d      	add	r0, sp, #52	; 0x34
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900041b0:	f88d 603f 	strb.w	r6, [sp, #63]	; 0x3f
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900041b4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
900041b8:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900041bc:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900041c0:	f003 f86c 	bl	9000729c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900041c4:	4620      	mov	r0, r4
900041c6:	f003 f859 	bl	9000727c <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900041ca:	4ab3      	ldr	r2, [pc, #716]	; (90004498 <main+0x378>)
900041cc:	6953      	ldr	r3, [r2, #20]
900041ce:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
900041d2:	d111      	bne.n	900041f8 <main+0xd8>
  __ASM volatile ("dsb 0xF":::"memory");
900041d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900041d8:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900041dc:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900041e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900041e4:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900041e8:	6953      	ldr	r3, [r2, #20]
900041ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900041ee:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900041f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900041f4:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900041f8:	48a7      	ldr	r0, [pc, #668]	; (90004498 <main+0x378>)
900041fa:	6943      	ldr	r3, [r0, #20]
900041fc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
90004200:	d124      	bne.n	9000424c <main+0x12c>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
90004202:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90004206:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
9000420a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000420e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90004212:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004216:	f3c5 05c9 	ubfx	r5, r5, #3, #10
9000421a:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000421c:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004220:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004222:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90004226:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004228:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
9000422c:	1c5a      	adds	r2, r3, #1
9000422e:	d1f8      	bne.n	90004222 <main+0x102>
    } while(sets-- != 0U);
90004230:	3c20      	subs	r4, #32
90004232:	f114 0f20 	cmn.w	r4, #32
90004236:	d1f1      	bne.n	9000421c <main+0xfc>
90004238:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
9000423c:	6943      	ldr	r3, [r0, #20]
9000423e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
90004242:	6143      	str	r3, [r0, #20]
90004244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004248:	f3bf 8f6f 	isb	sy
  HAL_Init();
9000424c:	f002 ff50 	bl	900070f0 <HAL_Init>
  SystemClock_Config();
90004250:	f7ff feba 	bl	90003fc8 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
90004254:	b662      	cpsie	i
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004256:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
90004258:	4d90      	ldr	r5, [pc, #576]	; (9000449c <main+0x37c>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
9000425a:	21c0      	movs	r1, #192	; 0xc0
9000425c:	4890      	ldr	r0, [pc, #576]	; (900044a0 <main+0x380>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000425e:	9411      	str	r4, [sp, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004260:	4622      	mov	r2, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004262:	2601      	movs	r6, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004264:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
90004268:	2708      	movs	r7, #8
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
9000426a:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
9000426e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004272:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
90004276:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOC_CLK_ENABLE();
9000427a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000427e:	f043 0304 	orr.w	r3, r3, #4
90004282:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004286:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000428a:	f003 0304 	and.w	r3, r3, #4
9000428e:	9302      	str	r3, [sp, #8]
90004290:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004292:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
9000429a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000429e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
900042a6:	9303      	str	r3, [sp, #12]
900042a8:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
900042aa:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
900042b2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042b6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
900042be:	9304      	str	r3, [sp, #16]
900042c0:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
900042c2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900042ca:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042ce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
900042d6:	9305      	str	r3, [sp, #20]
900042d8:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900042da:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042de:	f043 0310 	orr.w	r3, r3, #16
900042e2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042e6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042ea:	f003 0310 	and.w	r3, r3, #16
900042ee:	9306      	str	r3, [sp, #24]
900042f0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
900042f2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900042f6:	f043 0302 	orr.w	r3, r3, #2
900042fa:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900042fe:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004302:	f003 0302 	and.w	r3, r3, #2
90004306:	9307      	str	r3, [sp, #28]
90004308:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
9000430a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000430e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
90004312:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004316:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000431a:	f403 7300 	and.w	r3, r3, #512	; 0x200
9000431e:	9308      	str	r3, [sp, #32]
90004320:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90004322:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004326:	f043 0308 	orr.w	r3, r3, #8
9000432a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000432e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004332:	f003 0308 	and.w	r3, r3, #8
90004336:	9309      	str	r3, [sp, #36]	; 0x24
90004338:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOF_CLK_ENABLE();
9000433a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000433e:	f043 0320 	orr.w	r3, r3, #32
90004342:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004346:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000434a:	f003 0320 	and.w	r3, r3, #32
9000434e:	930a      	str	r3, [sp, #40]	; 0x28
90004350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOH_CLK_ENABLE();
90004352:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000435a:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
9000435e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004362:	f003 0380 	and.w	r3, r3, #128	; 0x80
90004366:	930b      	str	r3, [sp, #44]	; 0x2c
90004368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
9000436a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000436e:	f043 0301 	orr.w	r3, r3, #1
90004372:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004376:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000437a:	f003 0301 	and.w	r3, r3, #1
9000437e:	930c      	str	r3, [sp, #48]	; 0x30
90004380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
90004382:	f003 fb7b 	bl	90007a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_RESET);
90004386:	4622      	mov	r2, r4
90004388:	2180      	movs	r1, #128	; 0x80
9000438a:	4846      	ldr	r0, [pc, #280]	; (900044a4 <main+0x384>)
9000438c:	f003 fb76 	bl	90007a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
90004390:	4622      	mov	r2, r4
90004392:	2108      	movs	r1, #8
90004394:	4844      	ldr	r0, [pc, #272]	; (900044a8 <main+0x388>)
90004396:	f003 fb71 	bl	90007a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
9000439a:	2201      	movs	r2, #1
9000439c:	4843      	ldr	r0, [pc, #268]	; (900044ac <main+0x38c>)
9000439e:	4611      	mov	r1, r2
900043a0:	f003 fb6c 	bl	90007a7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
900043a4:	4622      	mov	r2, r4
900043a6:	2144      	movs	r1, #68	; 0x44
900043a8:	4841      	ldr	r0, [pc, #260]	; (900044b0 <main+0x390>)
900043aa:	f003 fb67 	bl	90007a7c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin|RENDER_TIME_Pin;
900043ae:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900043b0:	a90d      	add	r1, sp, #52	; 0x34
900043b2:	483b      	ldr	r0, [pc, #236]	; (900044a0 <main+0x380>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900043b4:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900043b8:	e9cd 490f 	strd	r4, r9, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900043bc:	f003 f95e 	bl	9000767c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin;
900043c0:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
900043c2:	a90d      	add	r1, sp, #52	; 0x34
900043c4:	4837      	ldr	r0, [pc, #220]	; (900044a4 <main+0x384>)
  GPIO_InitStruct.Pin = LCD_DE_Pin;
900043c6:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900043c8:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900043ca:	e9cd 640e 	strd	r6, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_DE_GPIO_Port, &GPIO_InitStruct);
900043ce:	f003 f955 	bl	9000767c <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
900043d2:	a90d      	add	r1, sp, #52	; 0x34
900043d4:	4834      	ldr	r0, [pc, #208]	; (900044a8 <main+0x388>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
900043d6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
900043da:	970d      	str	r7, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900043dc:	e9cd 640e 	strd	r6, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
900043e0:	f003 f94c 	bl	9000767c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900043e4:	a90d      	add	r1, sp, #52	; 0x34
900043e6:	4831      	ldr	r0, [pc, #196]	; (900044ac <main+0x38c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900043e8:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900043ec:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
900043f0:	f003 f944 	bl	9000767c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
900043f4:	a90d      	add	r1, sp, #52	; 0x34
900043f6:	482e      	ldr	r0, [pc, #184]	; (900044b0 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
900043f8:	e9cd 860d 	strd	r8, r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
900043fc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004400:	f003 f93c 	bl	9000767c <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
90004404:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90004408:	f04f 0940 	mov.w	r9, #64	; 0x40
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000440c:	a90d      	add	r1, sp, #52	; 0x34
9000440e:	4828      	ldr	r0, [pc, #160]	; (900044b0 <main+0x390>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90004410:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
90004414:	e9cd 640e 	strd	r6, r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
90004418:	f003 f930 	bl	9000767c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
9000441c:	4622      	mov	r2, r4
9000441e:	4825      	ldr	r0, [pc, #148]	; (900044b4 <main+0x394>)
90004420:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90004424:	f003 fb2a 	bl	90007a7c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
90004428:	4632      	mov	r2, r6
9000442a:	4641      	mov	r1, r8
9000442c:	4822      	ldr	r0, [pc, #136]	; (900044b8 <main+0x398>)
9000442e:	f003 fb25 	bl	90007a7c <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
90004432:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
    HAL_GPIO_Init(PUSHBTN_GPIO_Port, &GPIO_InitStruct);
90004436:	a90d      	add	r1, sp, #52	; 0x34
90004438:	4820      	ldr	r0, [pc, #128]	; (900044bc <main+0x39c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
9000443a:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
9000443c:	e9cd a30d 	strd	sl, r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(PUSHBTN_GPIO_Port, &GPIO_InitStruct);
90004440:	f003 f91c 	bl	9000767c <HAL_GPIO_Init>
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
90004444:	a90d      	add	r1, sp, #52	; 0x34
90004446:	481b      	ldr	r0, [pc, #108]	; (900044b4 <main+0x394>)
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
90004448:	e9cd a60d 	strd	sl, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
9000444c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
90004450:	f003 f914 	bl	9000767c <HAL_GPIO_Init>
    HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
90004454:	a90d      	add	r1, sp, #52	; 0x34
90004456:	4818      	ldr	r0, [pc, #96]	; (900044b8 <main+0x398>)
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90004458:	f04f 0a05 	mov.w	sl, #5
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
9000445c:	e9cd 860d 	strd	r8, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
90004460:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
90004464:	f003 f90a 	bl	9000767c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
90004468:	4622      	mov	r2, r4
9000446a:	2105      	movs	r1, #5
9000446c:	2028      	movs	r0, #40	; 0x28
9000446e:	f002 fe99 	bl	900071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
90004472:	2028      	movs	r0, #40	; 0x28
90004474:	f002 fed4 	bl	90007220 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_MDMA_CLK_ENABLE();
90004478:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
9000447c:	4622      	mov	r2, r4
9000447e:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
90004480:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
90004482:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
90004484:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
90004488:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
9000448c:	e018      	b.n	900044c0 <main+0x3a0>
9000448e:	bf00      	nop
90004490:	03000012 	.word	0x03000012
90004494:	01010001 	.word	0x01010001
90004498:	e000ed00 	.word	0xe000ed00
9000449c:	58024400 	.word	0x58024400
900044a0:	58020400 	.word	0x58020400
900044a4:	58020c00 	.word	0x58020c00
900044a8:	58021800 	.word	0x58021800
900044ac:	58022800 	.word	0x58022800
900044b0:	58020000 	.word	0x58020000
900044b4:	58022000 	.word	0x58022000
900044b8:	58022400 	.word	0x58022400
900044bc:	58020800 	.word	0x58020800
  hltdc.Instance = LTDC;
900044c0:	4d5c      	ldr	r5, [pc, #368]	; (90004634 <main+0x514>)
  __HAL_RCC_MDMA_CLK_ENABLE();
900044c2:	4033      	ands	r3, r6
900044c4:	9301      	str	r3, [sp, #4]
900044c6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900044c8:	f002 fe6c 	bl	900071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
900044cc:	207a      	movs	r0, #122	; 0x7a
900044ce:	f002 fea7 	bl	90007220 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
900044d2:	2234      	movs	r2, #52	; 0x34
900044d4:	4621      	mov	r1, r4
900044d6:	eb0d 0002 	add.w	r0, sp, r2
900044da:	f01f fb5f 	bl	90023b9c <memset>
  hltdc.Instance = LTDC;
900044de:	4b56      	ldr	r3, [pc, #344]	; (90004638 <main+0x518>)
  hltdc.Init.AccumulatedVBP = 11;
900044e0:	202a      	movs	r0, #42	; 0x2a
  hltdc.Init.VerticalSync = 8;
900044e2:	61af      	str	r7, [r5, #24]
  hltdc.Instance = LTDC;
900044e4:	602b      	str	r3, [r5, #0]
  hltdc.Init.HorizontalSync = 39;
900044e6:	2327      	movs	r3, #39	; 0x27
  hltdc.Init.AccumulatedActiveH = 283;
900044e8:	f240 270a 	movw	r7, #522	; 0x20a
  hltdc.Init.TotalHeigh = 285;
900044ec:	f44f 7c04 	mov.w	ip, #528	; 0x210
  hltdc.Init.HorizontalSync = 39;
900044f0:	616b      	str	r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
900044f2:	230b      	movs	r3, #11
  hltdc.Init.Backcolor.Blue = 0;
900044f4:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Red = 0;
900044f6:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.AccumulatedVBP = 11;
900044fa:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
900044fe:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004502:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
90004504:	e9c5 7309 	strd	r7, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
90004508:	f240 131d 	movw	r3, #285	; 0x11d
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
9000450c:	2702      	movs	r7, #2
  hltdc.Init.TotalHeigh = 285;
9000450e:	e9c5 c30b 	strd	ip, r3, [r5, #44]	; 0x2c
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
90004512:	e9c5 4401 	strd	r4, r4, [r5, #4]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90004516:	e9c5 4403 	strd	r4, r4, [r5, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
9000451a:	f005 fae3 	bl	90009ae4 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
9000451e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004522:	4622      	mov	r2, r4
90004524:	a90d      	add	r1, sp, #52	; 0x34
  pLayerCfg.WindowX1 = 480;
90004526:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004528:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 480;
9000452a:	9317      	str	r3, [sp, #92]	; 0x5c
  pLayerCfg.WindowY1 = 272;
9000452c:	f44f 7388 	mov.w	r3, #272	; 0x110
  hdma2d.Instance = DMA2D;
90004530:	4d42      	ldr	r5, [pc, #264]	; (9000463c <main+0x51c>)
  pLayerCfg.WindowY1 = 272;
90004532:	9310      	str	r3, [sp, #64]	; 0x40
  pLayerCfg.ImageHeight = 272;
90004534:	9318      	str	r3, [sp, #96]	; 0x60
  pLayerCfg.Alpha = 255;
90004536:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowX0 = 0;
90004538:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.Alpha = 255;
9000453a:	9312      	str	r3, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
9000453c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  pLayerCfg.WindowY0 = 0;
90004540:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
90004542:	9314      	str	r3, [sp, #80]	; 0x50
  pLayerCfg.Alpha0 = 0;
90004544:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.FBStartAdress = 0;
90004546:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.Backcolor.Blue = 0;
90004548:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Red = 0;
9000454c:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004550:	9711      	str	r7, [sp, #68]	; 0x44
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90004552:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004556:	f005 fb99 	bl	90009c8c <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
9000455a:	4b39      	ldr	r3, [pc, #228]	; (90004640 <main+0x520>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
9000455c:	4628      	mov	r0, r5
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
9000455e:	65ec      	str	r4, [r5, #92]	; 0x5c
  hdma2d.Instance = DMA2D;
90004560:	602b      	str	r3, [r5, #0]
  hdma2d.Init.OutputOffset = 0;
90004562:	60ec      	str	r4, [r5, #12]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
90004564:	e9c5 4711 	strd	r4, r7, [r5, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
90004568:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
9000456c:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
90004570:	e9c5 4701 	strd	r4, r7, [r5, #4]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
90004574:	f002 ff3a 	bl	900073ec <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
90004578:	4631      	mov	r1, r6
9000457a:	4628      	mov	r0, r5
9000457c:	f003 f80e 	bl	9000759c <HAL_DMA2D_ConfigLayer>
  hsdram2.Instance = FMC_SDRAM_DEVICE;
90004580:	4830      	ldr	r0, [pc, #192]	; (90004644 <main+0x524>)
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
90004582:	f44f 73c0 	mov.w	r3, #384	; 0x180
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
90004586:	a90d      	add	r1, sp, #52	; 0x34
  SdramTiming.WriteRecoveryTime = 5;
90004588:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  SdramTiming.LoadToActiveDelay = 2;
9000458c:	970d      	str	r7, [sp, #52]	; 0x34
  SdramTiming.SelfRefreshTime = 4;
9000458e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
90004592:	f8c0 800c 	str.w	r8, [r0, #12]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90004596:	f8c0 9014 	str.w	r9, [r0, #20]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
9000459a:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
9000459c:	e9c0 3406 	strd	r3, r4, [r0, #24]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
900045a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
900045a4:	6203      	str	r3, [r0, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900045a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900045aa:	6243      	str	r3, [r0, #36]	; 0x24
  SdramTiming.ExitSelfRefreshDelay = 7;
900045ac:	2307      	movs	r3, #7
900045ae:	930e      	str	r3, [sp, #56]	; 0x38
  SdramTiming.RowCycleDelay = 7;
900045b0:	9310      	str	r3, [sp, #64]	; 0x40
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900045b2:	4b25      	ldr	r3, [pc, #148]	; (90004648 <main+0x528>)
900045b4:	6003      	str	r3, [r0, #0]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900045b6:	2310      	movs	r3, #16
  SdramTiming.RCDDelay = 2;
900045b8:	e9cd 7712 	strd	r7, r7, [sp, #72]	; 0x48
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900045bc:	6103      	str	r3, [r0, #16]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
900045be:	e9c0 6401 	strd	r6, r4, [r0, #4]
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900045c2:	f007 fb87 	bl	9000bcd4 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
900045c6:	4620      	mov	r0, r4
900045c8:	f002 fb24 	bl	90006c14 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900045cc:	4620      	mov	r0, r4
900045ce:	f002 fb6b 	bl	90006ca8 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
900045d2:	f7fb feff 	bl	900003d4 <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
900045d6:	4b1d      	ldr	r3, [pc, #116]	; (9000464c <main+0x52c>)
900045d8:	481d      	ldr	r0, [pc, #116]	; (90004650 <main+0x530>)
900045da:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
900045dc:	f004 fa56 	bl	90008a8c <HAL_JPEG_Init>
  hcrc.Instance = CRC;
900045e0:	481c      	ldr	r0, [pc, #112]	; (90004654 <main+0x534>)
900045e2:	4b1d      	ldr	r3, [pc, #116]	; (90004658 <main+0x538>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
900045e4:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
900045e6:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
900045e8:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
900045ea:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
900045ee:	f002 fe87 	bl	90007300 <HAL_CRC_Init>
  MX_TouchGFX_Init();
900045f2:	f7fb fef3 	bl	900003dc <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
900045f6:	f7fb feef 	bl	900003d8 <MX_TouchGFX_PreOSInit>
  InitTIM15_OC();
900045fa:	f7ff fd3d 	bl	90004078 <InitTIM15_OC>
  osKernelInitialize();
900045fe:	f008 f999 	bl	9000c934 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004602:	4a16      	ldr	r2, [pc, #88]	; (9000465c <main+0x53c>)
90004604:	4621      	mov	r1, r4
90004606:	4816      	ldr	r0, [pc, #88]	; (90004660 <main+0x540>)
90004608:	f008 f9c0 	bl	9000c98c <osThreadNew>
9000460c:	4b15      	ldr	r3, [pc, #84]	; (90004664 <main+0x544>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000460e:	4a16      	ldr	r2, [pc, #88]	; (90004668 <main+0x548>)
90004610:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004612:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004614:	4815      	ldr	r0, [pc, #84]	; (9000466c <main+0x54c>)
90004616:	f008 f9b9 	bl	9000c98c <osThreadNew>
9000461a:	4b15      	ldr	r3, [pc, #84]	; (90004670 <main+0x550>)
9000461c:	4605      	mov	r5, r0
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000461e:	4a15      	ldr	r2, [pc, #84]	; (90004674 <main+0x554>)
90004620:	4621      	mov	r1, r4
90004622:	4815      	ldr	r0, [pc, #84]	; (90004678 <main+0x558>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004624:	601d      	str	r5, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004626:	f008 f9b1 	bl	9000c98c <osThreadNew>
9000462a:	4b14      	ldr	r3, [pc, #80]	; (9000467c <main+0x55c>)
9000462c:	6018      	str	r0, [r3, #0]
  osKernelStart();
9000462e:	f008 f993 	bl	9000c958 <osKernelStart>
  while (1)
90004632:	e7fe      	b.n	90004632 <main+0x512>
90004634:	2400b0d0 	.word	0x2400b0d0
90004638:	50001000 	.word	0x50001000
9000463c:	2400b010 	.word	0x2400b010
90004640:	52001000 	.word	0x52001000
90004644:	2400b250 	.word	0x2400b250
90004648:	52004140 	.word	0x52004140
9000464c:	52003000 	.word	0x52003000
90004650:	2400b078 	.word	0x2400b078
90004654:	2400afec 	.word	0x2400afec
90004658:	58024c00 	.word	0x58024c00
9000465c:	900263ec 	.word	0x900263ec
90004660:	90003fbd 	.word	0x90003fbd
90004664:	2400afe8 	.word	0x2400afe8
90004668:	900263c8 	.word	0x900263c8
9000466c:	900003ed 	.word	0x900003ed
90004670:	2400afe4 	.word	0x2400afe4
90004674:	90026410 	.word	0x90026410
90004678:	90002921 	.word	0x90002921
9000467c:	2400b2d0 	.word	0x2400b2d0

90004680 <HAL_TIM_OC_MspInit>:
  if(htim->Instance==TIM15)
90004680:	4b0f      	ldr	r3, [pc, #60]	; (900046c0 <HAL_TIM_OC_MspInit+0x40>)
90004682:	6802      	ldr	r2, [r0, #0]
90004684:	429a      	cmp	r2, r3
90004686:	d000      	beq.n	9000468a <HAL_TIM_OC_MspInit+0xa>
90004688:	4770      	bx	lr
    __HAL_RCC_TIM15_CLK_ENABLE();
9000468a:	4b0e      	ldr	r3, [pc, #56]	; (900046c4 <HAL_TIM_OC_MspInit+0x44>)
    HAL_NVIC_SetPriority(TIM15_IRQn, 15, 0);
9000468c:	2074      	movs	r0, #116	; 0x74
9000468e:	2200      	movs	r2, #0
90004690:	210f      	movs	r1, #15
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim){
90004692:	b510      	push	{r4, lr}
    __HAL_RCC_TIM15_CLK_ENABLE();
90004694:	f8d3 40f0 	ldr.w	r4, [r3, #240]	; 0xf0
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim){
90004698:	b082      	sub	sp, #8
    __HAL_RCC_TIM15_CLK_ENABLE();
9000469a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
9000469e:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
900046a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
900046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
900046aa:	9301      	str	r3, [sp, #4]
900046ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM15_IRQn, 15, 0);
900046ae:	f002 fd79 	bl	900071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
900046b2:	2074      	movs	r0, #116	; 0x74
}
900046b4:	b002      	add	sp, #8
900046b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
900046ba:	f002 bdb1 	b.w	90007220 <HAL_NVIC_EnableIRQ>
900046be:	bf00      	nop
900046c0:	40014000 	.word	0x40014000
900046c4:	58024400 	.word	0x58024400

900046c8 <HAL_GPIO_EXTI_Callback>:
	if (GPIO_Pin == PUSHBTN_Pin) {
900046c8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
		ocPeriod = ocPeriod - 50;
900046cc:	4a06      	ldr	r2, [pc, #24]	; (900046e8 <HAL_GPIO_EXTI_Callback+0x20>)
	if (GPIO_Pin == PUSHBTN_Pin) {
900046ce:	d103      	bne.n	900046d8 <HAL_GPIO_EXTI_Callback+0x10>
		ocPeriod = ocPeriod - 50;
900046d0:	8813      	ldrh	r3, [r2, #0]
900046d2:	3b32      	subs	r3, #50	; 0x32
900046d4:	b29b      	uxth	r3, r3
900046d6:	8013      	strh	r3, [r2, #0]
	if (ocPeriod < 100) ocPeriod = 2000;
900046d8:	8813      	ldrh	r3, [r2, #0]
900046da:	b29b      	uxth	r3, r3
900046dc:	2b63      	cmp	r3, #99	; 0x63
900046de:	d802      	bhi.n	900046e6 <HAL_GPIO_EXTI_Callback+0x1e>
900046e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
900046e4:	8013      	strh	r3, [r2, #0]
}
900046e6:	4770      	bx	lr
900046e8:	24000024 	.word	0x24000024

900046ec <HAL_TIM_OC_DelayElapsedCallback>:
  if (htim->Instance == TIM15) {
900046ec:	4a0a      	ldr	r2, [pc, #40]	; (90004718 <HAL_TIM_OC_DelayElapsedCallback+0x2c>)
900046ee:	6803      	ldr	r3, [r0, #0]
900046f0:	4293      	cmp	r3, r2
900046f2:	d000      	beq.n	900046f6 <HAL_TIM_OC_DelayElapsedCallback+0xa>
}
900046f4:	4770      	bx	lr
	  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
900046f6:	7f02      	ldrb	r2, [r0, #28]
900046f8:	2a02      	cmp	r2, #2
900046fa:	d1fb      	bne.n	900046f4 <HAL_TIM_OC_DelayElapsedCallback+0x8>
	    ccr = ccr + ocPeriod;
900046fc:	4907      	ldr	r1, [pc, #28]	; (9000471c <HAL_TIM_OC_DelayElapsedCallback+0x30>)
	    ccr = htim->Instance->CCR2;
900046fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	    ccr = ccr + ocPeriod;
90004700:	8808      	ldrh	r0, [r1, #0]
	    if (ccr >= htim->Instance->ARR) {
90004702:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	    ccr = ccr + ocPeriod;
90004704:	4402      	add	r2, r0
	    if (ccr >= htim->Instance->ARR) {
90004706:	b292      	uxth	r2, r2
90004708:	428a      	cmp	r2, r1
9000470a:	d303      	bcc.n	90004714 <HAL_TIM_OC_DelayElapsedCallback+0x28>
	    	htim->Instance->CCR2 = ccr - htim->Instance->ARR;
9000470c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000470e:	1a52      	subs	r2, r2, r1
90004710:	639a      	str	r2, [r3, #56]	; 0x38
90004712:	4770      	bx	lr
	    else htim->Instance->CCR2 = ccr;
90004714:	639a      	str	r2, [r3, #56]	; 0x38
}
90004716:	e7ed      	b.n	900046f4 <HAL_TIM_OC_DelayElapsedCallback+0x8>
90004718:	40014000 	.word	0x40014000
9000471c:	24000024 	.word	0x24000024

90004720 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
90004720:	4b03      	ldr	r3, [pc, #12]	; (90004730 <HAL_TIM_PeriodElapsedCallback+0x10>)
90004722:	6802      	ldr	r2, [r0, #0]
90004724:	429a      	cmp	r2, r3
90004726:	d000      	beq.n	9000472a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90004728:	4770      	bx	lr
    HAL_IncTick();
9000472a:	f002 bd11 	b.w	90007150 <HAL_IncTick>
9000472e:	bf00      	nop
90004730:	40001000 	.word	0x40001000

90004734 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90004734:	4770      	bx	lr
90004736:	bf00      	nop

90004738 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004738:	4b0b      	ldr	r3, [pc, #44]	; (90004768 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
9000473a:	2200      	movs	r2, #0
9000473c:	210f      	movs	r1, #15
9000473e:	f06f 0001 	mvn.w	r0, #1
{
90004742:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004744:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
90004748:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
9000474a:	f044 0402 	orr.w	r4, r4, #2
9000474e:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
90004752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90004756:	f003 0302 	and.w	r3, r3, #2
9000475a:	9301      	str	r3, [sp, #4]
9000475c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
9000475e:	b003      	add	sp, #12
90004760:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004764:	f002 bd1e 	b.w	900071a4 <HAL_NVIC_SetPriority>
90004768:	58024400 	.word	0x58024400

9000476c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
9000476c:	4b0a      	ldr	r3, [pc, #40]	; (90004798 <HAL_CRC_MspInit+0x2c>)
9000476e:	6802      	ldr	r2, [r0, #0]
90004770:	429a      	cmp	r2, r3
90004772:	d000      	beq.n	90004776 <HAL_CRC_MspInit+0xa>
90004774:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
90004776:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
9000477a:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
9000477c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004780:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90004784:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
9000478c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
90004790:	9301      	str	r3, [sp, #4]
90004792:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
90004794:	b002      	add	sp, #8
90004796:	4770      	bx	lr
90004798:	58024c00 	.word	0x58024c00

9000479c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
9000479c:	4b0f      	ldr	r3, [pc, #60]	; (900047dc <HAL_DMA2D_MspInit+0x40>)
9000479e:	6802      	ldr	r2, [r0, #0]
900047a0:	429a      	cmp	r2, r3
900047a2:	d000      	beq.n	900047a6 <HAL_DMA2D_MspInit+0xa>
900047a4:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
900047a6:	4b0e      	ldr	r3, [pc, #56]	; (900047e0 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900047a8:	205a      	movs	r0, #90	; 0x5a
900047aa:	2200      	movs	r2, #0
900047ac:	2105      	movs	r1, #5
{
900047ae:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
900047b0:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
900047b4:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
900047b6:	f044 0410 	orr.w	r4, r4, #16
900047ba:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
900047be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
900047c2:	f003 0310 	and.w	r3, r3, #16
900047c6:	9301      	str	r3, [sp, #4]
900047c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900047ca:	f002 fceb 	bl	900071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900047ce:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
900047d0:	b002      	add	sp, #8
900047d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900047d6:	f002 bd23 	b.w	90007220 <HAL_NVIC_EnableIRQ>
900047da:	bf00      	nop
900047dc:	52001000 	.word	0x52001000
900047e0:	58024400 	.word	0x58024400

900047e4 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
900047e4:	4b3f      	ldr	r3, [pc, #252]	; (900048e4 <HAL_JPEG_MspInit+0x100>)
900047e6:	6802      	ldr	r2, [r0, #0]
900047e8:	429a      	cmp	r2, r3
900047ea:	d000      	beq.n	900047ee <HAL_JPEG_MspInit+0xa>
900047ec:	4770      	bx	lr
{
900047ee:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
900047f0:	4b3d      	ldr	r3, [pc, #244]	; (900048e8 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900047f2:	2211      	movs	r2, #17
900047f4:	4e3d      	ldr	r6, [pc, #244]	; (900048ec <HAL_JPEG_MspInit+0x108>)
{
900047f6:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900047f8:	4d3d      	ldr	r5, [pc, #244]	; (900048f0 <HAL_JPEG_MspInit+0x10c>)
900047fa:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900047fc:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900047fe:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
90004800:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
90004804:	493b      	ldr	r1, [pc, #236]	; (900048f4 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
90004806:	f042 0220 	orr.w	r2, r2, #32
9000480a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
9000480e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
90004810:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90004814:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
90004816:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
9000481a:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
9000481c:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
9000481e:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
90004820:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
90004822:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90004824:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
9000482c:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
9000482e:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
90004830:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
90004834:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004838:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
9000483a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
9000483e:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
90004842:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004846:	2313      	movs	r3, #19
90004848:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
9000484a:	2302      	movs	r3, #2
9000484c:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
9000484e:	f005 fb11 	bl	90009e74 <HAL_MDMA_Init>
90004852:	2800      	cmp	r0, #0
90004854:	d13a      	bne.n	900048cc <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
90004856:	2200      	movs	r2, #0
90004858:	4824      	ldr	r0, [pc, #144]	; (900048ec <HAL_JPEG_MspInit+0x108>)
9000485a:	4611      	mov	r1, r2
9000485c:	f005 fba8 	bl	90009fb0 <HAL_MDMA_ConfigPostRequestMask>
90004860:	2800      	cmp	r0, #0
90004862:	d13c      	bne.n	900048de <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004864:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004866:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004868:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
9000486a:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000486c:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
9000486e:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
90004870:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004874:	4920      	ldr	r1, [pc, #128]	; (900048f8 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004876:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
90004878:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
9000487a:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
9000487c:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
9000487e:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
90004882:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004886:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004888:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
9000488a:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
9000488e:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004890:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004898:	4815      	ldr	r0, [pc, #84]	; (900048f0 <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
9000489a:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
9000489c:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000489e:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
900048a0:	f005 fae8 	bl	90009e74 <HAL_MDMA_Init>
900048a4:	b9c0      	cbnz	r0, 900048d8 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
900048a6:	2200      	movs	r2, #0
900048a8:	4811      	ldr	r0, [pc, #68]	; (900048f0 <HAL_JPEG_MspInit+0x10c>)
900048aa:	4611      	mov	r1, r2
900048ac:	f005 fb80 	bl	90009fb0 <HAL_MDMA_ConfigPostRequestMask>
900048b0:	b978      	cbnz	r0, 900048d2 <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
900048b2:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900048b4:	2079      	movs	r0, #121	; 0x79
900048b6:	2200      	movs	r2, #0
900048b8:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
900048ba:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
900048bc:	f002 fc72 	bl	900071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900048c0:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
900048c2:	b002      	add	sp, #8
900048c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900048c8:	f002 bcaa 	b.w	90007220 <HAL_NVIC_EnableIRQ>
      Error_Handler();
900048cc:	f7ff ff32 	bl	90004734 <Error_Handler>
900048d0:	e7c1      	b.n	90004856 <HAL_JPEG_MspInit+0x72>
      Error_Handler();
900048d2:	f7ff ff2f 	bl	90004734 <Error_Handler>
900048d6:	e7ec      	b.n	900048b2 <HAL_JPEG_MspInit+0xce>
      Error_Handler();
900048d8:	f7ff ff2c 	bl	90004734 <Error_Handler>
900048dc:	e7e3      	b.n	900048a6 <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
900048de:	f7ff ff29 	bl	90004734 <Error_Handler>
900048e2:	e7bf      	b.n	90004864 <HAL_JPEG_MspInit+0x80>
900048e4:	52003000 	.word	0x52003000
900048e8:	58024400 	.word	0x58024400
900048ec:	2400b178 	.word	0x2400b178
900048f0:	2400b1e4 	.word	0x2400b1e4
900048f4:	52000200 	.word	0x52000200
900048f8:	520001c0 	.word	0x520001c0

900048fc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
900048fc:	b570      	push	{r4, r5, r6, lr}
900048fe:	b0ba      	sub	sp, #232	; 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004900:	2100      	movs	r1, #0
{
90004902:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004904:	22c0      	movs	r2, #192	; 0xc0
90004906:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004908:	9109      	str	r1, [sp, #36]	; 0x24
9000490a:	e9cd 1105 	strd	r1, r1, [sp, #20]
9000490e:	e9cd 1107 	strd	r1, r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004912:	f01f f943 	bl	90023b9c <memset>
  if(hltdc->Instance==LTDC)
90004916:	4b4a      	ldr	r3, [pc, #296]	; (90004a40 <HAL_LTDC_MspInit+0x144>)
90004918:	6822      	ldr	r2, [r4, #0]
9000491a:	429a      	cmp	r2, r3
9000491c:	d001      	beq.n	90004922 <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
9000491e:	b03a      	add	sp, #232	; 0xe8
90004920:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PLL3.PLL3P = 2;
90004922:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004924:	2205      	movs	r2, #5
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004926:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
9000492a:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLL3.PLL3N = 160;
9000492c:	21a0      	movs	r1, #160	; 0xa0
    PeriphClkInitStruct.PLL3.PLL3P = 2;
9000492e:	9316      	str	r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004930:	9214      	str	r2, [sp, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004932:	2253      	movs	r2, #83	; 0x53
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
90004934:	9317      	str	r3, [sp, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004936:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
9000493a:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PLL3.PLL3N = 160;
9000493c:	9115      	str	r1, [sp, #84]	; 0x54
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
9000493e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3R = 83;
90004942:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004946:	f006 fbc5 	bl	9000b0d4 <HAL_RCCEx_PeriphCLKConfig>
9000494a:	2800      	cmp	r0, #0
9000494c:	d174      	bne.n	90004a38 <HAL_LTDC_MspInit+0x13c>
    __HAL_RCC_LTDC_CLK_ENABLE();
9000494e:	4b3d      	ldr	r3, [pc, #244]	; (90004a44 <HAL_LTDC_MspInit+0x148>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
90004950:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004952:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004954:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90004956:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
9000495a:	a905      	add	r1, sp, #20
9000495c:	483a      	ldr	r0, [pc, #232]	; (90004a48 <HAL_LTDC_MspInit+0x14c>)
    __HAL_RCC_LTDC_CLK_ENABLE();
9000495e:	f042 0208 	orr.w	r2, r2, #8
90004962:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
90004966:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
9000496a:	f002 0208 	and.w	r2, r2, #8
9000496e:	9200      	str	r2, [sp, #0]
90004970:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90004972:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
9000497a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
9000497e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004982:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90004986:	9201      	str	r2, [sp, #4]
90004988:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOI_CLK_ENABLE();
9000498a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000498e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004992:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004996:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000499a:	f402 7280 	and.w	r2, r2, #256	; 0x100
9000499e:	9202      	str	r2, [sp, #8]
900049a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
900049a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900049a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
900049aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900049ae:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900049b2:	f402 7200 	and.w	r2, r2, #512	; 0x200
900049b6:	9203      	str	r2, [sp, #12]
900049b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900049ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
900049be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
900049c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
900049c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
900049ca:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
900049cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049d0:	9609      	str	r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
900049d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900049d4:	23fc      	movs	r3, #252	; 0xfc
    __HAL_RCC_GPIOH_CLK_ENABLE();
900049d6:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
900049d8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900049da:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
900049de:	f002 fe4d 	bl	9000767c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900049e2:	f24d 2303 	movw	r3, #53763	; 0xd203
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900049e6:	a905      	add	r1, sp, #20
900049e8:	4818      	ldr	r0, [pc, #96]	; (90004a4c <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
900049ea:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
900049ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
900049f0:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
900049f4:	f002 fe42 	bl	9000767c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
900049f8:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
900049fc:	a905      	add	r1, sp, #20
900049fe:	4814      	ldr	r0, [pc, #80]	; (90004a50 <HAL_LTDC_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004a00:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
90004a02:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004a06:	e9cd 4608 	strd	r4, r6, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004a0a:	f002 fe37 	bl	9000767c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004a0e:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004a12:	a905      	add	r1, sp, #20
90004a14:	480f      	ldr	r0, [pc, #60]	; (90004a54 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004a16:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004a18:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
90004a1c:	e9cd 5407 	strd	r5, r4, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004a20:	f002 fe2c 	bl	9000767c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90004a24:	462a      	mov	r2, r5
90004a26:	2105      	movs	r1, #5
90004a28:	2058      	movs	r0, #88	; 0x58
90004a2a:	f002 fbbb 	bl	900071a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004a2e:	2058      	movs	r0, #88	; 0x58
90004a30:	f002 fbf6 	bl	90007220 <HAL_NVIC_EnableIRQ>
}
90004a34:	b03a      	add	sp, #232	; 0xe8
90004a36:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
90004a38:	f7ff fe7c 	bl	90004734 <Error_Handler>
90004a3c:	e787      	b.n	9000494e <HAL_LTDC_MspInit+0x52>
90004a3e:	bf00      	nop
90004a40:	50001000 	.word	0x50001000
90004a44:	58024400 	.word	0x58024400
90004a48:	58022800 	.word	0x58022800
90004a4c:	58022000 	.word	0x58022000
90004a50:	58022400 	.word	0x58022400
90004a54:	58021c00 	.word	0x58021c00

90004a58 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004a58:	4836      	ldr	r0, [pc, #216]	; (90004b34 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004a5a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004a5c:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004a5e:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004a60:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004a62:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004a66:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004a6a:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004a6c:	b109      	cbz	r1, 90004a72 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004a6e:	b038      	add	sp, #224	; 0xe0
90004a70:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004a72:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a74:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004a76:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004a78:	a80a      	add	r0, sp, #40	; 0x28
90004a7a:	f01f f88f 	bl	90023b9c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004a7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004a82:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a84:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004a86:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a8a:	f006 fb23 	bl	9000b0d4 <HAL_RCCEx_PeriphCLKConfig>
90004a8e:	2800      	cmp	r0, #0
90004a90:	d14c      	bne.n	90004b2c <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004a92:	4b29      	ldr	r3, [pc, #164]	; (90004b38 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004a94:	f64f 7083 	movw	r0, #65411	; 0xff83
90004a98:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004a9a:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004a9c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004aa0:	2600      	movs	r6, #0
90004aa2:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004aa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004aa8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004aac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004ab0:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004ab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004aba:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004abc:	a902      	add	r1, sp, #8
90004abe:	481f      	ldr	r0, [pc, #124]	; (90004b3c <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004ac0:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004ac2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004ac6:	f002 fdd9 	bl	9000767c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004aca:	f248 1233 	movw	r2, #33075	; 0x8133
90004ace:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004ad0:	a902      	add	r1, sp, #8
90004ad2:	481b      	ldr	r0, [pc, #108]	; (90004b40 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004ad4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004ada:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004ade:	f002 fdcd 	bl	9000767c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004ae2:	f24c 7203 	movw	r2, #50947	; 0xc703
90004ae6:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004ae8:	a902      	add	r1, sp, #8
90004aea:	4816      	ldr	r0, [pc, #88]	; (90004b44 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004aec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004af2:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004af6:	f002 fdc1 	bl	9000767c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004afa:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004afe:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004b00:	a902      	add	r1, sp, #8
90004b02:	4811      	ldr	r0, [pc, #68]	; (90004b48 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004b04:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004b06:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004b0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004b0e:	f002 fdb5 	bl	9000767c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004b12:	22e0      	movs	r2, #224	; 0xe0
90004b14:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b16:	a902      	add	r1, sp, #8
90004b18:	480c      	ldr	r0, [pc, #48]	; (90004b4c <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004b1a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004b1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b24:	f002 fdaa 	bl	9000767c <HAL_GPIO_Init>
}
90004b28:	b038      	add	sp, #224	; 0xe0
90004b2a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004b2c:	f7ff fe02 	bl	90004734 <Error_Handler>
90004b30:	e7af      	b.n	90004a92 <HAL_SDRAM_MspInit+0x3a>
90004b32:	bf00      	nop
90004b34:	2400b2d8 	.word	0x2400b2d8
90004b38:	58024400 	.word	0x58024400
90004b3c:	58021000 	.word	0x58021000
90004b40:	58021800 	.word	0x58021800
90004b44:	58020c00 	.word	0x58020c00
90004b48:	58021400 	.word	0x58021400
90004b4c:	58021c00 	.word	0x58021c00

90004b50 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004b50:	4b13      	ldr	r3, [pc, #76]	; (90004ba0 <HAL_SDRAM_MspDeInit+0x50>)
90004b52:	681a      	ldr	r2, [r3, #0]
90004b54:	b102      	cbz	r2, 90004b58 <HAL_SDRAM_MspDeInit+0x8>
90004b56:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004b58:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004b5a:	4a12      	ldr	r2, [pc, #72]	; (90004ba4 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004b5c:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b5e:	f64f 7183 	movw	r1, #65411	; 0xff83
90004b62:	4811      	ldr	r0, [pc, #68]	; (90004ba8 <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004b64:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004b66:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004b6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004b6e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004b72:	f002 feb5 	bl	900078e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004b76:	f248 1133 	movw	r1, #33075	; 0x8133
90004b7a:	480c      	ldr	r0, [pc, #48]	; (90004bac <HAL_SDRAM_MspDeInit+0x5c>)
90004b7c:	f002 feb0 	bl	900078e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004b80:	f24c 7103 	movw	r1, #50947	; 0xc703
90004b84:	480a      	ldr	r0, [pc, #40]	; (90004bb0 <HAL_SDRAM_MspDeInit+0x60>)
90004b86:	f002 feab 	bl	900078e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004b8a:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004b8e:	4809      	ldr	r0, [pc, #36]	; (90004bb4 <HAL_SDRAM_MspDeInit+0x64>)
90004b90:	f002 fea6 	bl	900078e0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004b94:	21e0      	movs	r1, #224	; 0xe0
90004b96:	4808      	ldr	r0, [pc, #32]	; (90004bb8 <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004b9c:	f002 bea0 	b.w	900078e0 <HAL_GPIO_DeInit>
90004ba0:	2400b2d4 	.word	0x2400b2d4
90004ba4:	58024400 	.word	0x58024400
90004ba8:	58021000 	.word	0x58021000
90004bac:	58021800 	.word	0x58021800
90004bb0:	58020c00 	.word	0x58020c00
90004bb4:	58021400 	.word	0x58021400
90004bb8:	58021c00 	.word	0x58021c00

90004bbc <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004bbc:	280f      	cmp	r0, #15
90004bbe:	d901      	bls.n	90004bc4 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004bc0:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004bc2:	4770      	bx	lr
{
90004bc4:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004bc6:	4601      	mov	r1, r0
{
90004bc8:	b08b      	sub	sp, #44	; 0x2c
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004bca:	2200      	movs	r2, #0
90004bcc:	4604      	mov	r4, r0
90004bce:	2036      	movs	r0, #54	; 0x36
90004bd0:	f002 fae8 	bl	900071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004bd4:	2036      	movs	r0, #54	; 0x36
90004bd6:	f002 fb23 	bl	90007220 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004bda:	4b1a      	ldr	r3, [pc, #104]	; (90004c44 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004bdc:	4a1a      	ldr	r2, [pc, #104]	; (90004c48 <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004bde:	4669      	mov	r1, sp
90004be0:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004be2:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004be4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004be8:	f042 0210 	orr.w	r2, r2, #16
90004bec:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004bf4:	f003 0310 	and.w	r3, r3, #16
90004bf8:	9301      	str	r3, [sp, #4]
90004bfa:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004bfc:	f006 f94a 	bl	9000ae94 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004c00:	9b07      	ldr	r3, [sp, #28]
90004c02:	b9bb      	cbnz	r3, 90004c34 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004c04:	f006 f8b6 	bl	9000ad74 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004c08:	4b10      	ldr	r3, [pc, #64]	; (90004c4c <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004c0a:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004c0c:	4c10      	ldr	r4, [pc, #64]	; (90004c50 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004c0e:	fba3 1300 	umull	r1, r3, r3, r0
  htim6.Instance = TIM6;
90004c12:	4d10      	ldr	r5, [pc, #64]	; (90004c54 <HAL_InitTick+0x98>)
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004c14:	f240 31e7 	movw	r1, #999	; 0x3e7
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004c18:	4620      	mov	r0, r4
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004c1a:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004c1c:	6025      	str	r5, [r4, #0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004c1e:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004c20:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004c22:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004c26:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004c28:	f007 f946 	bl	9000beb8 <HAL_TIM_Base_Init>
90004c2c:	b130      	cbz	r0, 90004c3c <HAL_InitTick+0x80>
    return HAL_ERROR;
90004c2e:	2001      	movs	r0, #1
}
90004c30:	b00b      	add	sp, #44	; 0x2c
90004c32:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004c34:	f006 f89e 	bl	9000ad74 <HAL_RCC_GetPCLK1Freq>
90004c38:	0040      	lsls	r0, r0, #1
90004c3a:	e7e5      	b.n	90004c08 <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004c3c:	4620      	mov	r0, r4
90004c3e:	f007 f9f1 	bl	9000c024 <HAL_TIM_Base_Start_IT>
90004c42:	e7f5      	b.n	90004c30 <HAL_InitTick+0x74>
90004c44:	58024400 	.word	0x58024400
90004c48:	24000064 	.word	0x24000064
90004c4c:	431bde83 	.word	0x431bde83
90004c50:	2400b2dc 	.word	0x2400b2dc
90004c54:	40001000 	.word	0x40001000

90004c58 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004c58:	4770      	bx	lr
90004c5a:	bf00      	nop

90004c5c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004c5c:	e7fe      	b.n	90004c5c <HardFault_Handler>
90004c5e:	bf00      	nop

90004c60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004c60:	e7fe      	b.n	90004c60 <MemManage_Handler>
90004c62:	bf00      	nop

90004c64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004c64:	e7fe      	b.n	90004c64 <BusFault_Handler>
90004c66:	bf00      	nop

90004c68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004c68:	e7fe      	b.n	90004c68 <UsageFault_Handler>
90004c6a:	bf00      	nop

90004c6c <DebugMon_Handler>:
90004c6c:	4770      	bx	lr
90004c6e:	bf00      	nop

90004c70 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004c70:	4801      	ldr	r0, [pc, #4]	; (90004c78 <TIM6_DAC_IRQHandler+0x8>)
90004c72:	f007 bbc5 	b.w	9000c400 <HAL_TIM_IRQHandler>
90004c76:	bf00      	nop
90004c78:	2400b2dc 	.word	0x2400b2dc

90004c7c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004c7c:	4801      	ldr	r0, [pc, #4]	; (90004c84 <LTDC_IRQHandler+0x8>)
90004c7e:	f004 bfa3 	b.w	90009bc8 <HAL_LTDC_IRQHandler>
90004c82:	bf00      	nop
90004c84:	2400b0d0 	.word	0x2400b0d0

90004c88 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004c88:	4801      	ldr	r0, [pc, #4]	; (90004c90 <DMA2D_IRQHandler+0x8>)
90004c8a:	f002 bbf3 	b.w	90007474 <HAL_DMA2D_IRQHandler>
90004c8e:	bf00      	nop
90004c90:	2400b010 	.word	0x2400b010

90004c94 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004c94:	4801      	ldr	r0, [pc, #4]	; (90004c9c <JPEG_IRQHandler+0x8>)
90004c96:	f004 be83 	b.w	900099a0 <HAL_JPEG_IRQHandler>
90004c9a:	bf00      	nop
90004c9c:	2400b078 	.word	0x2400b078

90004ca0 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004ca0:	4804      	ldr	r0, [pc, #16]	; (90004cb4 <MDMA_IRQHandler+0x14>)
{
90004ca2:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004ca4:	f005 fa44 	bl	9000a130 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004ca8:	4803      	ldr	r0, [pc, #12]	; (90004cb8 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004cae:	f005 ba3f 	b.w	9000a130 <HAL_MDMA_IRQHandler>
90004cb2:	bf00      	nop
90004cb4:	2400b1e4 	.word	0x2400b1e4
90004cb8:	2400b178 	.word	0x2400b178

90004cbc <EXTI15_10_IRQHandler>:
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSHBTN_Pin);
90004cbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
90004cc0:	f002 beea 	b.w	90007a98 <HAL_GPIO_EXTI_IRQHandler>

90004cc4 <TIM15_IRQHandler>:
void TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
90004cc4:	4801      	ldr	r0, [pc, #4]	; (90004ccc <TIM15_IRQHandler+0x8>)
90004cc6:	f007 bb9b 	b.w	9000c400 <HAL_TIM_IRQHandler>
90004cca:	bf00      	nop
90004ccc:	2400b284 	.word	0x2400b284

90004cd0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004cd0:	2001      	movs	r0, #1
90004cd2:	4770      	bx	lr

90004cd4 <_kill>:

int _kill(int pid, int sig)
{
90004cd4:	b508      	push	{r3, lr}
	errno = EINVAL;
90004cd6:	f01f f815 	bl	90023d04 <__errno>
90004cda:	2216      	movs	r2, #22
90004cdc:	4603      	mov	r3, r0
	return -1;
}
90004cde:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004ce2:	601a      	str	r2, [r3, #0]
}
90004ce4:	bd08      	pop	{r3, pc}
90004ce6:	bf00      	nop

90004ce8 <_exit>:

void _exit (int status)
{
90004ce8:	b508      	push	{r3, lr}
	errno = EINVAL;
90004cea:	f01f f80b 	bl	90023d04 <__errno>
90004cee:	2316      	movs	r3, #22
90004cf0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004cf2:	e7fe      	b.n	90004cf2 <_exit+0xa>

90004cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004cf4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004cf6:	1e16      	subs	r6, r2, #0
90004cf8:	dd07      	ble.n	90004d0a <_read+0x16>
90004cfa:	460c      	mov	r4, r1
90004cfc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004cfe:	f3af 8000 	nop.w
90004d02:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004d06:	42a5      	cmp	r5, r4
90004d08:	d1f9      	bne.n	90004cfe <_read+0xa>
	}

return len;
}
90004d0a:	4630      	mov	r0, r6
90004d0c:	bd70      	pop	{r4, r5, r6, pc}
90004d0e:	bf00      	nop

90004d10 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004d10:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004d12:	1e16      	subs	r6, r2, #0
90004d14:	dd07      	ble.n	90004d26 <_write+0x16>
90004d16:	460c      	mov	r4, r1
90004d18:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004d1a:	f814 0b01 	ldrb.w	r0, [r4], #1
90004d1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004d22:	42ac      	cmp	r4, r5
90004d24:	d1f9      	bne.n	90004d1a <_write+0xa>
	}
	return len;
}
90004d26:	4630      	mov	r0, r6
90004d28:	bd70      	pop	{r4, r5, r6, pc}
90004d2a:	bf00      	nop

90004d2c <_close>:

int _close(int file)
{
	return -1;
}
90004d2c:	f04f 30ff 	mov.w	r0, #4294967295
90004d30:	4770      	bx	lr
90004d32:	bf00      	nop

90004d34 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004d38:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004d3a:	604b      	str	r3, [r1, #4]
}
90004d3c:	4770      	bx	lr
90004d3e:	bf00      	nop

90004d40 <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004d40:	2001      	movs	r0, #1
90004d42:	4770      	bx	lr

90004d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004d44:	2000      	movs	r0, #0
90004d46:	4770      	bx	lr

90004d48 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004d48:	4a0a      	ldr	r2, [pc, #40]	; (90004d74 <_sbrk+0x2c>)
{
90004d4a:	b508      	push	{r3, lr}
	if (heap_end == 0)
90004d4c:	6813      	ldr	r3, [r2, #0]
90004d4e:	b12b      	cbz	r3, 90004d5c <_sbrk+0x14>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004d50:	4418      	add	r0, r3
90004d52:	466b      	mov	r3, sp
90004d54:	4298      	cmp	r0, r3
90004d56:	d808      	bhi.n	90004d6a <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
90004d58:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
90004d5a:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004d5c:	4906      	ldr	r1, [pc, #24]	; (90004d78 <_sbrk+0x30>)
90004d5e:	460b      	mov	r3, r1
90004d60:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
90004d62:	4418      	add	r0, r3
90004d64:	466b      	mov	r3, sp
90004d66:	4298      	cmp	r0, r3
90004d68:	d9f6      	bls.n	90004d58 <_sbrk+0x10>
		errno = ENOMEM;
90004d6a:	f01e ffcb 	bl	90023d04 <__errno>
90004d6e:	230c      	movs	r3, #12
90004d70:	6003      	str	r3, [r0, #0]
}
90004d72:	bd08      	pop	{r3, pc}
90004d74:	2400b328 	.word	0x2400b328
90004d78:	24026840 	.word	0x24026840

90004d7c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MOJ30PX = 3; // verdana_30_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004d7c:	4770      	bx	lr
90004d7e:	bf00      	nop

90004d80 <_ZN23ApplicationFontProviderD0Ev>:
90004d80:	b510      	push	{r4, lr}
90004d82:	4604      	mov	r4, r0
90004d84:	2104      	movs	r1, #4
90004d86:	f01e fc40 	bl	9002360a <_ZdlPvj>
90004d8a:	4620      	mov	r0, r4
90004d8c:	bd10      	pop	{r4, pc}
90004d8e:	bf00      	nop

90004d90 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
90004d90:	b508      	push	{r3, lr}
    switch (typography)
90004d92:	2903      	cmp	r1, #3
90004d94:	d813      	bhi.n	90004dbe <_ZN23ApplicationFontProvider7getFontEt+0x2e>
90004d96:	e8df f001 	tbb	[pc, r1]
90004d9a:	0e0a      	.short	0x0e0a
90004d9c:	0206      	.short	0x0206
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    case Typography::MOJ30PX:
        // verdana_30_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
90004d9e:	f000 ffb3 	bl	90005d08 <_ZN17TypedTextDatabase8getFontsEv>
90004da2:	68c0      	ldr	r0, [r0, #12]
    default:
        return 0;
    }
}
90004da4:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004da6:	f000 ffaf 	bl	90005d08 <_ZN17TypedTextDatabase8getFontsEv>
90004daa:	6880      	ldr	r0, [r0, #8]
}
90004dac:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004dae:	f000 ffab 	bl	90005d08 <_ZN17TypedTextDatabase8getFontsEv>
90004db2:	6800      	ldr	r0, [r0, #0]
}
90004db4:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004db6:	f000 ffa7 	bl	90005d08 <_ZN17TypedTextDatabase8getFontsEv>
90004dba:	6840      	ldr	r0, [r0, #4]
}
90004dbc:	bd08      	pop	{r3, pc}
    switch (typography)
90004dbe:	2000      	movs	r0, #0
}
90004dc0:	bd08      	pop	{r3, pc}
90004dc2:	bf00      	nop

90004dc4 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004dc4:	4800      	ldr	r0, [pc, #0]	; (90004dc8 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004dc6:	4770      	bx	lr
90004dc8:	90026448 	.word	0x90026448

90004dcc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004dcc:	2004      	movs	r0, #4
90004dce:	4770      	bx	lr

90004dd0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004dd0:	b169      	cbz	r1, 90004dee <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004dd2:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004dd4:	b530      	push	{r4, r5, lr}
90004dd6:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004dd8:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004dda:	6895      	ldr	r5, [r2, #8]
90004ddc:	f10d 0303 	add.w	r3, sp, #3
90004de0:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004de2:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004de4:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004de8:	47a8      	blx	r5
        return glyph;
    }
90004dea:	b003      	add	sp, #12
90004dec:	bd30      	pop	{r4, r5, pc}
            return 0;
90004dee:	4608      	mov	r0, r1
    }
90004df0:	4770      	bx	lr
90004df2:	bf00      	nop

90004df4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004df4:	89c0      	ldrh	r0, [r0, #14]
90004df6:	4770      	bx	lr

90004df8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004df8:	8a00      	ldrh	r0, [r0, #16]
90004dfa:	4770      	bx	lr

90004dfc <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004dfc:	88c0      	ldrh	r0, [r0, #6]
90004dfe:	4770      	bx	lr

90004e00 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004e00:	8880      	ldrh	r0, [r0, #4]
90004e02:	4770      	bx	lr

90004e04 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004e04:	7a80      	ldrb	r0, [r0, #10]
    }
90004e06:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004e0a:	4770      	bx	lr

90004e0c <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004e0c:	7a80      	ldrb	r0, [r0, #10]
    }
90004e0e:	09c0      	lsrs	r0, r0, #7
90004e10:	4770      	bx	lr
90004e12:	bf00      	nop

90004e14 <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004e14:	4770      	bx	lr
90004e16:	bf00      	nop

90004e18 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004e18:	b510      	push	{r4, lr}
90004e1a:	4604      	mov	r4, r0
    }
90004e1c:	2108      	movs	r1, #8
90004e1e:	f01e fbf4 	bl	9002360a <_ZdlPvj>
90004e22:	4620      	mov	r0, r4
90004e24:	bd10      	pop	{r4, pc}
90004e26:	bf00      	nop

90004e28 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004e28:	4770      	bx	lr
90004e2a:	bf00      	nop

90004e2c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004e2c:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004e30:	6808      	ldr	r0, [r1, #0]
90004e32:	6849      	ldr	r1, [r1, #4]
90004e34:	c303      	stmia	r3!, {r0, r1}
    }
90004e36:	4770      	bx	lr

90004e38 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004e38:	4770      	bx	lr
90004e3a:	bf00      	nop

90004e3c <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004e3c:	4770      	bx	lr
90004e3e:	bf00      	nop

90004e40 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004e40:	6041      	str	r1, [r0, #4]
    }
90004e42:	4770      	bx	lr

90004e44 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004e44:	4770      	bx	lr
90004e46:	bf00      	nop

90004e48 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004e48:	4905      	ldr	r1, [pc, #20]	; (90004e60 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90004e4a:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90004e4c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90004e50:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90004e54:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90004e58:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90004e5c:	4770      	bx	lr
90004e5e:	bf00      	nop
90004e60:	90004eed 	.word	0x90004eed

90004e64 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
90004e64:	2301      	movs	r3, #1
90004e66:	7203      	strb	r3, [r0, #8]
    }
90004e68:	4770      	bx	lr
90004e6a:	bf00      	nop

90004e6c <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90004e6c:	4770      	bx	lr
90004e6e:	bf00      	nop

90004e70 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90004e70:	4770      	bx	lr
90004e72:	bf00      	nop

90004e74 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
90004e74:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
90004e76:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90004e78:	6841      	ldr	r1, [r0, #4]
90004e7a:	ea4f 0c62 	mov.w	ip, r2, asr #1
90004e7e:	eb01 0062 	add.w	r0, r1, r2, asr #1
90004e82:	07d2      	lsls	r2, r2, #31
90004e84:	d401      	bmi.n	90004e8a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
90004e86:	689b      	ldr	r3, [r3, #8]
90004e88:	4718      	bx	r3
90004e8a:	f851 200c 	ldr.w	r2, [r1, ip]
90004e8e:	689b      	ldr	r3, [r3, #8]
90004e90:	58d3      	ldr	r3, [r2, r3]
90004e92:	4718      	bx	r3

90004e94 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
90004e94:	6843      	ldr	r3, [r0, #4]
90004e96:	b13b      	cbz	r3, 90004ea8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90004e98:	6883      	ldr	r3, [r0, #8]
90004e9a:	b10b      	cbz	r3, 90004ea0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90004e9c:	2001      	movs	r0, #1
    }
90004e9e:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90004ea0:	68c0      	ldr	r0, [r0, #12]
90004ea2:	f000 0001 	and.w	r0, r0, #1
90004ea6:	4770      	bx	lr
90004ea8:	4618      	mov	r0, r3
90004eaa:	4770      	bx	lr

90004eac <_ZN8touchgfx12NoTransitionD0Ev>:
90004eac:	b510      	push	{r4, lr}
90004eae:	4604      	mov	r4, r0
90004eb0:	210c      	movs	r1, #12
90004eb2:	f01e fbaa 	bl	9002360a <_ZdlPvj>
90004eb6:	4620      	mov	r0, r4
90004eb8:	bd10      	pop	{r4, pc}
90004eba:	bf00      	nop

90004ebc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90004ebc:	b510      	push	{r4, lr}
90004ebe:	4604      	mov	r4, r0
90004ec0:	2110      	movs	r1, #16
90004ec2:	f01e fba2 	bl	9002360a <_ZdlPvj>
90004ec6:	4620      	mov	r0, r4
90004ec8:	bd10      	pop	{r4, pc}
90004eca:	bf00      	nop

90004ecc <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90004ecc:	b510      	push	{r4, lr}
90004ece:	4604      	mov	r4, r0
90004ed0:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90004ed4:	f01e fb99 	bl	9002360a <_ZdlPvj>
90004ed8:	4620      	mov	r0, r4
90004eda:	bd10      	pop	{r4, pc}

90004edc <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90004edc:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90004ede:	f00f fd5f 	bl	900149a0 <_ZN8touchgfx11Application11getInstanceEv>
    }
90004ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
90004ee6:	f010 b9a5 	b.w	90015234 <_ZN8touchgfx11Application10invalidateEv>
90004eea:	bf00      	nop

90004eec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
90004eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
90004ef0:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
90004ef4:	4607      	mov	r7, r0
90004ef6:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90004ef8:	68a0      	ldr	r0, [r4, #8]
90004efa:	6803      	ldr	r3, [r0, #0]
90004efc:	6a1b      	ldr	r3, [r3, #32]
90004efe:	4798      	blx	r3
90004f00:	f5b0 7f31 	cmp.w	r0, #708	; 0x2c4
90004f04:	f0c0 80a8 	bcc.w	90005058 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16c>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90004f08:	6860      	ldr	r0, [r4, #4]
90004f0a:	6803      	ldr	r3, [r0, #0]
90004f0c:	6a1b      	ldr	r3, [r3, #32]
90004f0e:	4798      	blx	r3
90004f10:	280f      	cmp	r0, #15
90004f12:	f240 809b 	bls.w	9000504c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x160>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90004f16:	68e0      	ldr	r0, [r4, #12]
90004f18:	6803      	ldr	r3, [r0, #0]
90004f1a:	6a1b      	ldr	r3, [r3, #32]
90004f1c:	4798      	blx	r3
90004f1e:	280b      	cmp	r0, #11
90004f20:	f240 80a0 	bls.w	90005064 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x178>
    if (*currentTrans)
90004f24:	f8df 916c 	ldr.w	r9, [pc, #364]	; 90005094 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a8>
    Application::getInstance()->clearAllTimerWidgets();
90004f28:	f00f fd3a 	bl	900149a0 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
90004f2c:	3004      	adds	r0, #4
90004f2e:	f00f fd5c 	bl	900149ea <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
90004f32:	f8d9 0000 	ldr.w	r0, [r9]
90004f36:	b130      	cbz	r0, 90004f46 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5a>
        (*currentTrans)->tearDown();
90004f38:	6803      	ldr	r3, [r0, #0]
90004f3a:	494d      	ldr	r1, [pc, #308]	; (90005070 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x184>)
90004f3c:	68da      	ldr	r2, [r3, #12]
90004f3e:	428a      	cmp	r2, r1
90004f40:	d17c      	bne.n	9000503c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x150>
        (*currentTrans)->~Transition();
90004f42:	681b      	ldr	r3, [r3, #0]
90004f44:	4798      	blx	r3
    if (*currentScreen)
90004f46:	f8df 8150 	ldr.w	r8, [pc, #336]	; 90005098 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1ac>
90004f4a:	f8d8 0000 	ldr.w	r0, [r8]
90004f4e:	2800      	cmp	r0, #0
90004f50:	d061      	beq.n	90005016 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12a>
        (*currentScreen)->tearDownScreen();
90004f52:	6803      	ldr	r3, [r0, #0]
90004f54:	695b      	ldr	r3, [r3, #20]
90004f56:	4798      	blx	r3
    if (*currentPresenter)
90004f58:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004f5c:	2800      	cmp	r0, #0
90004f5e:	d055      	beq.n	9000500c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x120>
        (*currentPresenter)->deactivate();
90004f60:	6803      	ldr	r3, [r0, #0]
90004f62:	685b      	ldr	r3, [r3, #4]
90004f64:	4798      	blx	r3
    if (*currentScreen)
90004f66:	f8d8 0000 	ldr.w	r0, [r8]
90004f6a:	b110      	cbz	r0, 90004f72 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x86>
        (*currentScreen)->~Screen();
90004f6c:	6803      	ldr	r3, [r0, #0]
90004f6e:	681b      	ldr	r3, [r3, #0]
90004f70:	4798      	blx	r3
    if (*currentPresenter)
90004f72:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90004f76:	b110      	cbz	r0, 90004f7e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x92>
        (*currentPresenter)->~Presenter();
90004f78:	6803      	ldr	r3, [r0, #0]
90004f7a:	689b      	ldr	r3, [r3, #8]
90004f7c:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90004f7e:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
90004f80:	2100      	movs	r1, #0
90004f82:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
90004f84:	468b      	mov	fp, r1
90004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004f88:	4798      	blx	r3
90004f8a:	4b3a      	ldr	r3, [pc, #232]	; (90005074 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
90004f8c:	4605      	mov	r5, r0
90004f8e:	f8c0 b004 	str.w	fp, [r0, #4]
90004f92:	f880 b008 	strb.w	fp, [r0, #8]
90004f96:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90004f98:	68a0      	ldr	r0, [r4, #8]
90004f9a:	602b      	str	r3, [r5, #0]
90004f9c:	6803      	ldr	r3, [r0, #0]
90004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004fa0:	4798      	blx	r3
90004fa2:	4606      	mov	r6, r0
90004fa4:	f000 ff32 	bl	90005e0c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90004fa8:	6860      	ldr	r0, [r4, #4]
90004faa:	4659      	mov	r1, fp
90004fac:	6803      	ldr	r3, [r0, #0]
90004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90004fb0:	4798      	blx	r3
90004fb2:	4604      	mov	r4, r0
90004fb4:	4631      	mov	r1, r6
90004fb6:	f000 fefd 	bl	90005db4 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90004fba:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
90004fbe:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
90004fc2:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90004fc6:	b35c      	cbz	r4, 90005020 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>
90004fc8:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90004fca:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90004fce:	4630      	mov	r0, r6
90004fd0:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
90004fd2:	f8c4 a008 	str.w	sl, [r4, #8]
90004fd6:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90004fd8:	63f4      	str	r4, [r6, #60]	; 0x3c
90004fda:	4798      	blx	r3
    newPresenter->activate();
90004fdc:	6823      	ldr	r3, [r4, #0]
90004fde:	4620      	mov	r0, r4
90004fe0:	681b      	ldr	r3, [r3, #0]
90004fe2:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
90004fe4:	4629      	mov	r1, r5
90004fe6:	4630      	mov	r0, r6
90004fe8:	f011 f996 	bl	90016318 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
90004fec:	682b      	ldr	r3, [r5, #0]
90004fee:	4922      	ldr	r1, [pc, #136]	; (90005078 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90004ff0:	691a      	ldr	r2, [r3, #16]
90004ff2:	428a      	cmp	r2, r1
90004ff4:	d116      	bne.n	90005024 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>
    newTransition->invalidate();
90004ff6:	695b      	ldr	r3, [r3, #20]
90004ff8:	4a20      	ldr	r2, [pc, #128]	; (9000507c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
90004ffa:	4293      	cmp	r3, r2
90004ffc:	d119      	bne.n	90005032 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x146>
        Application::getInstance()->invalidate();
90004ffe:	f00f fccf 	bl	900149a0 <_ZN8touchgfx11Application11getInstanceEv>
}
90005002:	b001      	add	sp, #4
90005004:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005008:	f010 b914 	b.w	90015234 <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
9000500c:	f8d8 0000 	ldr.w	r0, [r8]
90005010:	2800      	cmp	r0, #0
90005012:	d1ab      	bne.n	90004f6c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x80>
90005014:	e7b3      	b.n	90004f7e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x92>
    if (*currentPresenter)
90005016:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
9000501a:	2800      	cmp	r0, #0
9000501c:	d1a0      	bne.n	90004f60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x74>
9000501e:	e7ae      	b.n	90004f7e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x92>
    model->bind(newPresenter);
90005020:	4623      	mov	r3, r4
90005022:	e7d2      	b.n	90004fca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xde>
    newTransition->init();
90005024:	4628      	mov	r0, r5
90005026:	4790      	blx	r2
    newTransition->invalidate();
90005028:	682b      	ldr	r3, [r5, #0]
9000502a:	4a14      	ldr	r2, [pc, #80]	; (9000507c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
9000502c:	695b      	ldr	r3, [r3, #20]
9000502e:	4293      	cmp	r3, r2
90005030:	d0e5      	beq.n	90004ffe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x112>
90005032:	4628      	mov	r0, r5
90005034:	b001      	add	sp, #4
90005036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000503a:	4718      	bx	r3
        (*currentTrans)->tearDown();
9000503c:	4790      	blx	r2
    if (*currentTrans)
9000503e:	f8d9 0000 	ldr.w	r0, [r9]
90005042:	2800      	cmp	r0, #0
90005044:	f43f af7f 	beq.w	90004f46 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5a>
        (*currentTrans)->~Transition();
90005048:	6803      	ldr	r3, [r0, #0]
9000504a:	e77a      	b.n	90004f42 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x56>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
9000504c:	4b0c      	ldr	r3, [pc, #48]	; (90005080 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
9000504e:	21a4      	movs	r1, #164	; 0xa4
90005050:	4a0c      	ldr	r2, [pc, #48]	; (90005084 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90005052:	480d      	ldr	r0, [pc, #52]	; (90005088 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90005054:	f01e fb08 	bl	90023668 <__assert_func>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005058:	4b0c      	ldr	r3, [pc, #48]	; (9000508c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
9000505a:	21a3      	movs	r1, #163	; 0xa3
9000505c:	4a09      	ldr	r2, [pc, #36]	; (90005084 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
9000505e:	480a      	ldr	r0, [pc, #40]	; (90005088 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90005060:	f01e fb02 	bl	90023668 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
90005064:	4b0a      	ldr	r3, [pc, #40]	; (90005090 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a4>)
90005066:	21a5      	movs	r1, #165	; 0xa5
90005068:	4a06      	ldr	r2, [pc, #24]	; (90005084 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
9000506a:	4807      	ldr	r0, [pc, #28]	; (90005088 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
9000506c:	f01e fafc 	bl	90023668 <__assert_func>
90005070:	90004e39 	.word	0x90004e39
90005074:	90026838 	.word	0x90026838
90005078:	90004e3d 	.word	0x90004e3d
9000507c:	90004edd 	.word	0x90004edd
90005080:	90026684 	.word	0x90026684
90005084:	90026538 	.word	0x90026538
90005088:	9002663c 	.word	0x9002663c
9000508c:	900264a8 	.word	0x900264a8
90005090:	90026728 	.word	0x90026728
90005094:	2402649c 	.word	0x2402649c
90005098:	24026498 	.word	0x24026498

9000509c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000509c:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
900050a0:	b1d3      	cbz	r3, 900050d8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
900050a2:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
900050a4:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
900050a6:	68d1      	ldr	r1, [r2, #12]
900050a8:	4604      	mov	r4, r0
900050aa:	4818      	ldr	r0, [pc, #96]	; (9000510c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
900050ac:	4281      	cmp	r1, r0
900050ae:	d118      	bne.n	900050e2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
900050b0:	6858      	ldr	r0, [r3, #4]
900050b2:	b180      	cbz	r0, 900050d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
900050b4:	6899      	ldr	r1, [r3, #8]
900050b6:	b1e1      	cbz	r1, 900050f2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
900050b8:	6892      	ldr	r2, [r2, #8]
900050ba:	4915      	ldr	r1, [pc, #84]	; (90005110 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
900050bc:	428a      	cmp	r2, r1
900050be:	d122      	bne.n	90005106 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
900050c0:	68da      	ldr	r2, [r3, #12]
900050c2:	6858      	ldr	r0, [r3, #4]
900050c4:	eb00 0062 	add.w	r0, r0, r2, asr #1
900050c8:	07d2      	lsls	r2, r2, #31
900050ca:	d406      	bmi.n	900050da <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
900050cc:	689b      	ldr	r3, [r3, #8]
900050ce:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
900050d0:	2300      	movs	r3, #0
900050d2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
900050d6:	bd70      	pop	{r4, r5, r6, pc}
900050d8:	4770      	bx	lr
900050da:	6899      	ldr	r1, [r3, #8]
900050dc:	6803      	ldr	r3, [r0, #0]
900050de:	585b      	ldr	r3, [r3, r1]
900050e0:	e7f5      	b.n	900050ce <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
900050e2:	4618      	mov	r0, r3
900050e4:	4788      	blx	r1
900050e6:	2800      	cmp	r0, #0
900050e8:	d0f5      	beq.n	900050d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
900050ea:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
900050ee:	681a      	ldr	r2, [r3, #0]
900050f0:	e7e2      	b.n	900050b8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
900050f2:	68dd      	ldr	r5, [r3, #12]
900050f4:	07ee      	lsls	r6, r5, #31
900050f6:	d5ee      	bpl.n	900050d6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
900050f8:	6892      	ldr	r2, [r2, #8]
900050fa:	4e05      	ldr	r6, [pc, #20]	; (90005110 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
900050fc:	42b2      	cmp	r2, r6
900050fe:	d102      	bne.n	90005106 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
90005100:	eb00 0065 	add.w	r0, r0, r5, asr #1
90005104:	e7ea      	b.n	900050dc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
90005106:	4618      	mov	r0, r3
90005108:	4790      	blx	r2
9000510a:	e7e1      	b.n	900050d0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
9000510c:	90004e95 	.word	0x90004e95
90005110:	90004e75 	.word	0x90004e75

90005114 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
90005114:	b570      	push	{r4, r5, r6, lr}
90005116:	4604      	mov	r4, r0
90005118:	4616      	mov	r6, r2
9000511a:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
9000511c:	f00f fd06 	bl	90014b2c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
90005120:	4a18      	ldr	r2, [pc, #96]	; (90005184 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
        : currentPresenter(0),
90005122:	2300      	movs	r3, #0
      frontendHeap(heap),
90005124:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
90005128:	6014      	str	r4, [r2, #0]
        return instance;
9000512a:	4e17      	ldr	r6, [pc, #92]	; (90005188 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
      model(m)
9000512c:	4a17      	ldr	r2, [pc, #92]	; (9000518c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
9000512e:	6830      	ldr	r0, [r6, #0]
90005130:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
90005132:	4a17      	ldr	r2, [pc, #92]	; (90005190 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
90005134:	4917      	ldr	r1, [pc, #92]	; (90005194 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
90005136:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
9000513a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
9000513e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
90005142:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90005146:	6802      	ldr	r2, [r0, #0]
90005148:	6892      	ldr	r2, [r2, #8]
9000514a:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
9000514c:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
90005150:	d115      	bne.n	9000517e <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
90005152:	f44f 7380 	mov.w	r3, #256	; 0x100
90005156:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
9000515a:	2000      	movs	r0, #0
9000515c:	f000 fd86 	bl	90005c6c <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
90005160:	6833      	ldr	r3, [r6, #0]
90005162:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90005166:	b12a      	cbz	r2, 90005174 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90005168:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9000516a:	b118      	cbz	r0, 90005174 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
9000516c:	f017 fb49 	bl	9001c802 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005170:	4620      	mov	r0, r4
90005172:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90005174:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005176:	f017 fb44 	bl	9001c802 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
9000517a:	4620      	mov	r0, r4
9000517c:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000517e:	4619      	mov	r1, r3
90005180:	4790      	blx	r2
90005182:	e7ea      	b.n	9000515a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90005184:	240264a8 	.word	0x240264a8
90005188:	2402645c 	.word	0x2402645c
9000518c:	900267ec 	.word	0x900267ec
90005190:	900267d4 	.word	0x900267d4
90005194:	90000665 	.word	0x90000665

90005198 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005198:	4905      	ldr	r1, [pc, #20]	; (900051b0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
9000519a:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
9000519c:	f500 73a2 	add.w	r3, r0, #324	; 0x144
900051a0:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
900051a4:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
900051a8:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
900051ac:	4770      	bx	lr
900051ae:	bf00      	nop
900051b0:	90004eed 	.word	0x90004eed

900051b4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
900051b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
900051b6:	4770      	bx	lr

900051b8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
900051b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
900051ba:	4770      	bx	lr

900051bc <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
900051bc:	4770      	bx	lr
900051be:	bf00      	nop

900051c0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
900051c0:	888b      	ldrh	r3, [r1, #4]
900051c2:	69c0      	ldr	r0, [r0, #28]
900051c4:	0adb      	lsrs	r3, r3, #11
900051c6:	680a      	ldr	r2, [r1, #0]
900051c8:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
900051cc:	4410      	add	r0, r2
900051ce:	4770      	bx	lr

900051d0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
900051d0:	b1da      	cbz	r2, 9000520a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
900051d2:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
900051d4:	7b14      	ldrb	r4, [r2, #12]
900051d6:	b1b4      	cbz	r4, 90005206 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
900051d8:	f892 c00d 	ldrb.w	ip, [r2, #13]
900051dc:	f892 e00b 	ldrb.w	lr, [r2, #11]
900051e0:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
900051e4:	6a03      	ldr	r3, [r0, #32]
900051e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
900051ea:	ea4e 0202 	orr.w	r2, lr, r2
900051ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900051f2:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
900051f6:	881a      	ldrh	r2, [r3, #0]
900051f8:	428a      	cmp	r2, r1
900051fa:	d008      	beq.n	9000520e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900051fc:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
90005200:	d801      	bhi.n	90005206 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
90005202:	4283      	cmp	r3, r0
90005204:	d1f7      	bne.n	900051f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
90005206:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
90005208:	bd10      	pop	{r4, pc}
        return 0;
9000520a:	4610      	mov	r0, r2
}
9000520c:	4770      	bx	lr
            return kerndata->distance;
9000520e:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
90005212:	bd10      	pop	{r4, pc}

90005214 <_ZN8touchgfx13GeneratedFontD0Ev>:
90005214:	b510      	push	{r4, lr}
90005216:	4604      	mov	r4, r0
90005218:	212c      	movs	r1, #44	; 0x2c
9000521a:	f01e f9f6 	bl	9002360a <_ZdlPvj>
9000521e:	4620      	mov	r0, r4
90005220:	bd10      	pop	{r4, pc}
90005222:	bf00      	nop

90005224 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005224:	b530      	push	{r4, r5, lr}
90005226:	b08b      	sub	sp, #44	; 0x2c
90005228:	4604      	mov	r4, r0
9000522a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
9000522e:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005230:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
90005234:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005236:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
9000523a:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000523c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
90005240:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005242:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
90005246:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005248:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
9000524c:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000524e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
90005252:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005254:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
90005258:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000525a:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
9000525e:	9508      	str	r5, [sp, #32]
90005260:	f010 fc90 	bl	90015b84 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
      glyphData(glyphDataInternalFlash),
90005264:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
90005266:	4620      	mov	r0, r4
      glyphData(glyphDataInternalFlash),
90005268:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
9000526a:	9b16      	ldr	r3, [sp, #88]	; 0x58
9000526c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
9000526e:	9b19      	ldr	r3, [sp, #100]	; 0x64
90005270:	6263      	str	r3, [r4, #36]	; 0x24
      arabicTable(formsTable)
90005272:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90005274:	62a3      	str	r3, [r4, #40]	; 0x28
90005276:	4b02      	ldr	r3, [pc, #8]	; (90005280 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90005278:	6023      	str	r3, [r4, #0]
}
9000527a:	b00b      	add	sp, #44	; 0x2c
9000527c:	bd30      	pop	{r4, r5, pc}
9000527e:	bf00      	nop
90005280:	9002685c 	.word	0x9002685c

90005284 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005284:	4770      	bx	lr
90005286:	bf00      	nop

90005288 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90005288:	4770      	bx	lr
9000528a:	bf00      	nop

9000528c <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
9000528c:	4770      	bx	lr
9000528e:	bf00      	nop

90005290 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005290:	4770      	bx	lr
90005292:	bf00      	nop

90005294 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005294:	b530      	push	{r4, r5, lr}
90005296:	b085      	sub	sp, #20
90005298:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
9000529a:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
9000529c:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
9000529e:	466d      	mov	r5, sp
900052a0:	4601      	mov	r1, r0
        rect.width = width;
900052a2:	8102      	strh	r2, [r0, #8]
900052a4:	343c      	adds	r4, #60	; 0x3c
900052a6:	4628      	mov	r0, r5
900052a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900052ac:	4798      	blx	r3
900052ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900052b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
900052b6:	b005      	add	sp, #20
900052b8:	bd30      	pop	{r4, r5, pc}
900052ba:	bf00      	nop

900052bc <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
900052bc:	b530      	push	{r4, r5, lr}
900052be:	b085      	sub	sp, #20
900052c0:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
900052c2:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
900052c4:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
900052c6:	466d      	mov	r5, sp
900052c8:	4601      	mov	r1, r0
        rect.height = height;
900052ca:	8142      	strh	r2, [r0, #10]
900052cc:	343c      	adds	r4, #60	; 0x3c
900052ce:	4628      	mov	r0, r5
900052d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900052d4:	4798      	blx	r3
900052d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
900052da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
900052de:	b005      	add	sp, #20
900052e0:	bd30      	pop	{r4, r5, pc}
900052e2:	bf00      	nop

900052e4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
900052e4:	2200      	movs	r2, #0
900052e6:	6002      	str	r2, [r0, #0]
900052e8:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
900052ea:	4770      	bx	lr

900052ec <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900052ec:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
900052f0:	4770      	bx	lr
900052f2:	bf00      	nop

900052f4 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
900052f4:	2000      	movs	r0, #0
900052f6:	4770      	bx	lr

900052f8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
900052f8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900052fc:	b112      	cbz	r2, 90005304 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
900052fe:	6803      	ldr	r3, [r0, #0]
90005300:	695b      	ldr	r3, [r3, #20]
90005302:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
90005304:	4770      	bx	lr
90005306:	bf00      	nop

90005308 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005308:	2200      	movs	r2, #0
9000530a:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
9000530e:	6082      	str	r2, [r0, #8]
90005310:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
90005314:	4770      	bx	lr
90005316:	bf00      	nop

90005318 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
90005318:	6c80      	ldr	r0, [r0, #72]	; 0x48
9000531a:	4770      	bx	lr

9000531c <_ZN15Screen1ViewBase22slider1ChangedCallbackEi>:
     * Virtual Action Handlers
     */
    virtual void slider1ChangedCallback(int value)
    {
        // Override and implement this function in Screen1
    }
9000531c:	4770      	bx	lr
9000531e:	bf00      	nop

90005320 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
90005320:	4770      	bx	lr
90005322:	bf00      	nop

90005324 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90005324:	4770      	bx	lr
90005326:	bf00      	nop

90005328 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED1Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
90005328:	4770      	bx	lr
9000532a:	bf00      	nop

9000532c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
9000532c:	4770      	bx	lr
9000532e:	bf00      	nop

90005330 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i>:
    virtual void execute(T1 t1, T2 t2)
90005330:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1, t2);
90005332:	68c4      	ldr	r4, [r0, #12]
    virtual void execute(T1 t1, T2 t2)
90005334:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1, t2);
90005336:	6845      	ldr	r5, [r0, #4]
90005338:	f014 0f01 	tst.w	r4, #1
9000533c:	eb05 0064 	add.w	r0, r5, r4, asr #1
90005340:	d102      	bne.n	90005348 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7executeES4_i+0x18>
90005342:	689b      	ldr	r3, [r3, #8]
    }
90005344:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1, t2);
90005346:	4718      	bx	r3
90005348:	ea4f 0c64 	mov.w	ip, r4, asr #1
9000534c:	689b      	ldr	r3, [r3, #8]
9000534e:	f855 400c 	ldr.w	r4, [r5, ip]
90005352:	58e3      	ldr	r3, [r4, r3]
    }
90005354:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1, t2);
90005356:	4718      	bx	r3

90005358 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
90005358:	6843      	ldr	r3, [r0, #4]
9000535a:	b13b      	cbz	r3, 9000536c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0x14>
9000535c:	6883      	ldr	r3, [r0, #8]
9000535e:	b10b      	cbz	r3, 90005364 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivE7isValidEv+0xc>
90005360:	2001      	movs	r0, #1
    }
90005362:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90005364:	68c0      	ldr	r0, [r0, #12]
90005366:	f000 0001 	and.w	r0, r0, #1
9000536a:	4770      	bx	lr
9000536c:	4618      	mov	r0, r3
9000536e:	4770      	bx	lr

90005370 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
90005370:	b510      	push	{r4, lr}
90005372:	4604      	mov	r4, r0
90005374:	214c      	movs	r1, #76	; 0x4c
90005376:	f01e f948 	bl	9002360a <_ZdlPvj>
9000537a:	4620      	mov	r0, r4
9000537c:	bd10      	pop	{r4, pc}
9000537e:	bf00      	nop

90005380 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_6SliderEivED0Ev>:
struct Callback<dest_type, T1, T2, void> : public GenericCallback<T1, T2>
90005380:	b510      	push	{r4, lr}
90005382:	4604      	mov	r4, r0
90005384:	2110      	movs	r1, #16
90005386:	f01e f940 	bl	9002360a <_ZdlPvj>
9000538a:	4620      	mov	r0, r4
9000538c:	bd10      	pop	{r4, pc}
9000538e:	bf00      	nop

90005390 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90005390:	b510      	push	{r4, lr}
90005392:	4604      	mov	r4, r0
}
90005394:	f44f 7131 	mov.w	r1, #708	; 0x2c4
90005398:	f01e f937 	bl	9002360a <_ZdlPvj>
9000539c:	4620      	mov	r0, r4
9000539e:	bd10      	pop	{r4, pc}

900053a0 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi>:

void Screen1ViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &slider1)
900053a0:	f500 7cac 	add.w	ip, r0, #344	; 0x158
900053a4:	458c      	cmp	ip, r1
900053a6:	d000      	beq.n	900053aa <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0xa>
        //Interaction1
        //When slider1 value changed call virtual function
        //Call slider1ChangedCallback
        slider1ChangedCallback(value);
    }
}
900053a8:	4770      	bx	lr
        slider1ChangedCallback(value);
900053aa:	6803      	ldr	r3, [r0, #0]
900053ac:	4902      	ldr	r1, [pc, #8]	; (900053b8 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x18>)
900053ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900053b0:	428b      	cmp	r3, r1
900053b2:	d0f9      	beq.n	900053a8 <_ZN15Screen1ViewBase33sliderValueChangedCallbackHandlerERKN8touchgfx6SliderEi+0x8>
900053b4:	4611      	mov	r1, r2
900053b6:	4718      	bx	r3
900053b8:	9000531d 	.word	0x9000531d

900053bc <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900053bc:	4b1b      	ldr	r3, [pc, #108]	; (9000542c <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053be:	6802      	ldr	r2, [r0, #0]
900053c0:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
900053c2:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053c4:	6b55      	ldr	r5, [r2, #52]	; 0x34
900053c6:	b323      	cbz	r3, 90005412 <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
900053c8:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
900053ca:	4919      	ldr	r1, [pc, #100]	; (90005430 <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
900053cc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900053ce:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900053d0:	8809      	ldrh	r1, [r1, #0]
900053d2:	4291      	cmp	r1, r2
900053d4:	d923      	bls.n	9000541e <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
900053d6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900053da:	4b16      	ldr	r3, [pc, #88]	; (90005434 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
900053dc:	681b      	ldr	r3, [r3, #0]
900053de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
900053e2:	4a15      	ldr	r2, [pc, #84]	; (90005438 <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
900053e4:	6803      	ldr	r3, [r0, #0]
900053e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900053e8:	4293      	cmp	r3, r2
900053ea:	d107      	bne.n	900053fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
900053ec:	88c0      	ldrh	r0, [r0, #6]
900053ee:	4b13      	ldr	r3, [pc, #76]	; (9000543c <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
900053f0:	1a31      	subs	r1, r6, r0
900053f2:	429d      	cmp	r5, r3
900053f4:	b209      	sxth	r1, r1
900053f6:	d107      	bne.n	90005408 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
900053f8:	80e1      	strh	r1, [r4, #6]
    }
900053fa:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900053fc:	4798      	blx	r3
900053fe:	4b0f      	ldr	r3, [pc, #60]	; (9000543c <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
90005400:	1a31      	subs	r1, r6, r0
90005402:	429d      	cmp	r5, r3
90005404:	b209      	sxth	r1, r1
90005406:	d0f7      	beq.n	900053f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005408:	4620      	mov	r0, r4
9000540a:	462b      	mov	r3, r5
    }
9000540c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005410:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005412:	4b0b      	ldr	r3, [pc, #44]	; (90005440 <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005414:	216c      	movs	r1, #108	; 0x6c
90005416:	4a0b      	ldr	r2, [pc, #44]	; (90005444 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005418:	480b      	ldr	r0, [pc, #44]	; (90005448 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
9000541a:	f01e f925 	bl	90023668 <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000541e:	4b0b      	ldr	r3, [pc, #44]	; (9000544c <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
90005420:	216d      	movs	r1, #109	; 0x6d
90005422:	4a08      	ldr	r2, [pc, #32]	; (90005444 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005424:	4808      	ldr	r0, [pc, #32]	; (90005448 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005426:	f01e f91f 	bl	90023668 <__assert_func>
9000542a:	bf00      	nop
9000542c:	240264ac 	.word	0x240264ac
90005430:	240264b0 	.word	0x240264b0
90005434:	240264b4 	.word	0x240264b4
90005438:	90004dfd 	.word	0x90004dfd
9000543c:	900022c1 	.word	0x900022c1
90005440:	900268b4 	.word	0x900268b4
90005444:	900268f8 	.word	0x900268f8
90005448:	90026934 	.word	0x90026934
9000544c:	9002697c 	.word	0x9002697c

90005450 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
90005450:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90005456:	4f25      	ldr	r7, [pc, #148]	; (900054ec <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
90005458:	4605      	mov	r5, r0
        setX(x);
9000545a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
9000545c:	4690      	mov	r8, r2
9000545e:	42be      	cmp	r6, r7
90005460:	d125      	bne.n	900054ae <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
90005462:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
90005464:	80a9      	strh	r1, [r5, #4]
90005466:	4922      	ldr	r1, [pc, #136]	; (900054f0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005468:	428c      	cmp	r4, r1
9000546a:	d126      	bne.n	900054ba <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000546c:	4921      	ldr	r1, [pc, #132]	; (900054f4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000546e:	fa1f f888 	uxth.w	r8, r8
90005472:	6b5e      	ldr	r6, [r3, #52]	; 0x34
90005474:	680b      	ldr	r3, [r1, #0]
90005476:	2b00      	cmp	r3, #0
90005478:	d032      	beq.n	900054e0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
9000547a:	491f      	ldr	r1, [pc, #124]	; (900054f8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
9000547c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000547e:	8809      	ldrh	r1, [r1, #0]
90005480:	4291      	cmp	r1, r2
90005482:	d927      	bls.n	900054d4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
90005484:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005488:	4b1c      	ldr	r3, [pc, #112]	; (900054fc <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
9000548a:	681b      	ldr	r3, [r3, #0]
9000548c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
90005490:	4a1b      	ldr	r2, [pc, #108]	; (90005500 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
90005492:	6803      	ldr	r3, [r0, #0]
90005494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005496:	4293      	cmp	r3, r2
90005498:	d11a      	bne.n	900054d0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
9000549a:	88c0      	ldrh	r0, [r0, #6]
9000549c:	4b19      	ldr	r3, [pc, #100]	; (90005504 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
9000549e:	eba8 0200 	sub.w	r2, r8, r0
900054a2:	429e      	cmp	r6, r3
900054a4:	b211      	sxth	r1, r2
900054a6:	d10e      	bne.n	900054c6 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
900054a8:	80e9      	strh	r1, [r5, #6]
    }
900054aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
900054ae:	47b0      	blx	r6
        setBaselineY(baselineY);
900054b0:	682b      	ldr	r3, [r5, #0]
900054b2:	490f      	ldr	r1, [pc, #60]	; (900054f0 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
900054b4:	6e5c      	ldr	r4, [r3, #100]	; 0x64
900054b6:	428c      	cmp	r4, r1
900054b8:	d0d8      	beq.n	9000546c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
900054ba:	4641      	mov	r1, r8
900054bc:	4628      	mov	r0, r5
900054be:	4623      	mov	r3, r4
    }
900054c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
900054c4:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
900054c6:	4628      	mov	r0, r5
900054c8:	4633      	mov	r3, r6
    }
900054ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900054ce:	4718      	bx	r3
900054d0:	4798      	blx	r3
900054d2:	e7e3      	b.n	9000549c <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900054d4:	4b0c      	ldr	r3, [pc, #48]	; (90005508 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
900054d6:	216d      	movs	r1, #109	; 0x6d
900054d8:	4a0c      	ldr	r2, [pc, #48]	; (9000550c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
900054da:	480d      	ldr	r0, [pc, #52]	; (90005510 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
900054dc:	f01e f8c4 	bl	90023668 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900054e0:	4b0c      	ldr	r3, [pc, #48]	; (90005514 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
900054e2:	216c      	movs	r1, #108	; 0x6c
900054e4:	4a09      	ldr	r2, [pc, #36]	; (9000550c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
900054e6:	480a      	ldr	r0, [pc, #40]	; (90005510 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
900054e8:	f01e f8be 	bl	90023668 <__assert_func>
900054ec:	900022bd 	.word	0x900022bd
900054f0:	900053bd 	.word	0x900053bd
900054f4:	240264ac 	.word	0x240264ac
900054f8:	240264b0 	.word	0x240264b0
900054fc:	240264b4 	.word	0x240264b4
90005500:	90004dfd 	.word	0x90004dfd
90005504:	900022c1 	.word	0x900022c1
90005508:	9002697c 	.word	0x9002697c
9000550c:	900268f8 	.word	0x900268f8
90005510:	90026934 	.word	0x90026934
90005514:	900268b4 	.word	0x900268b4

90005518 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
90005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000551c:	b08d      	sub	sp, #52	; 0x34
9000551e:	4604      	mov	r4, r0
        : presenter(0)
90005520:	f010 fd4e 	bl	90015fc0 <_ZN8touchgfx6ScreenC1Ev>
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
90005524:	4bd9      	ldr	r3, [pc, #868]	; (9000588c <_ZN15Screen1ViewBaseC1Ev+0x374>)
90005526:	2500      	movs	r5, #0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90005528:	f64f 7bff 	movw	fp, #65535	; 0xffff
          touchable(false),
9000552c:	f44f 7680 	mov.w	r6, #256	; 0x100
90005530:	27ff      	movs	r7, #255	; 0xff
    sliderValueChangedCallback(this, &Screen1ViewBase::sliderValueChangedCallbackHandler)
90005532:	f104 096c 	add.w	r9, r4, #108	; 0x6c
90005536:	4ad6      	ldr	r2, [pc, #856]	; (90005890 <_ZN15Screen1ViewBaseC1Ev+0x378>)
90005538:	6423      	str	r3, [r4, #64]	; 0x40
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
    {
        Image::setBitmap(bmp);
9000553a:	a90a      	add	r1, sp, #40	; 0x28
        : Widget(), bitmap(bmp), alpha(255)
9000553c:	4bd5      	ldr	r3, [pc, #852]	; (90005894 <_ZN15Screen1ViewBaseC1Ev+0x37c>)
        Image::setBitmap(bmp);
9000553e:	4648      	mov	r0, r9
90005540:	6022      	str	r2, [r4, #0]
90005542:	f104 0ae4 	add.w	sl, r4, #228	; 0xe4
90005546:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
9000554a:	f504 78ac 	add.w	r8, r4, #344	; 0x158
9000554e:	f884 7066 	strb.w	r7, [r4, #102]	; 0x66
90005552:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
        : Widget(), bitmap(bmp), alpha(255)
90005556:	f8a4 b092 	strh.w	fp, [r4, #146]	; 0x92
9000555a:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
9000555e:	66e3      	str	r3, [r4, #108]	; 0x6c
90005560:	63e5      	str	r5, [r4, #60]	; 0x3c
        : x(0), y(0), width(0), height(0)
90005562:	6465      	str	r5, [r4, #68]	; 0x44
          cachedAbsX(0),
90005564:	6625      	str	r5, [r4, #96]	; 0x60
        : color(col)
90005566:	66a5      	str	r5, [r4, #104]	; 0x68
        : x(0), y(0), width(0), height(0)
90005568:	6725      	str	r5, [r4, #112]	; 0x70
9000556a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
9000556e:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
90005572:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
          parent(0),
90005576:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
          nextDrawChainElement(0),
9000557a:	e9c4 5516 	strd	r5, r5, [r4, #88]	; 0x58
9000557e:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
          parent(0),
90005582:	e9c4 551f 	strd	r5, r5, [r4, #124]	; 0x7c
          nextDrawChainElement(0),
90005586:	e9c4 5521 	strd	r5, r5, [r4, #132]	; 0x84
        Image::setBitmap(bmp);
9000558a:	f00d fcca 	bl	90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000558e:	f04f 33ff 	mov.w	r3, #4294967295
     * @param  bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    TiledImage(const Bitmap& bmp = Bitmap())
        : Image(bmp), xOffset(0), yOffset(0)
90005592:	4ac1      	ldr	r2, [pc, #772]	; (90005898 <_ZN15Screen1ViewBaseC1Ev+0x380>)
90005594:	a90a      	add	r1, sp, #40	; 0x28
90005596:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
9000559a:	4650      	mov	r0, sl
9000559c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
        : typedTextId(id)
900055a0:	4bbe      	ldr	r3, [pc, #760]	; (9000589c <_ZN15Screen1ViewBaseC1Ev+0x384>)
          touchable(false),
900055a2:	f8a4 60c0 	strh.w	r6, [r4, #192]	; 0xc0
900055a6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900055aa:	4bbd      	ldr	r3, [pc, #756]	; (900058a0 <_ZN15Screen1ViewBaseC1Ev+0x388>)
900055ac:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
900055b0:	f8c4 70d2 	str.w	r7, [r4, #210]	; 0xd2
900055b4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
900055b8:	66e2      	str	r2, [r4, #108]	; 0x6c
900055ba:	f8c4 5096 	str.w	r5, [r4, #150]	; 0x96
        : color(col)
900055be:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
900055c2:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900055c6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
              text(0)
900055ca:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
        : x(0), y(0), width(0), height(0)
900055ce:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
900055d2:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
          nextSibling(0),
900055d6:	e9c4 552c 	strd	r5, r5, [r4, #176]	; 0xb0
          cachedAbsX(0),
900055da:	e9c4 552e 	strd	r5, r5, [r4, #184]	; 0xb8
900055de:	f00c fc9d 	bl	90011f1c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900055e2:	4baf      	ldr	r3, [pc, #700]	; (900058a0 <_ZN15Screen1ViewBaseC1Ev+0x388>)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900055e4:	f04f 32ff 	mov.w	r2, #4294967295
          touchable(false),
900055e8:	f8a4 6134 	strh.w	r6, [r4, #308]	; 0x134
900055ec:	f8a4 b13c 	strh.w	fp, [r4, #316]	; 0x13c
900055f0:	4640      	mov	r0, r8
900055f2:	f8c4 7146 	str.w	r7, [r4, #326]	; 0x146
          cachedAbsX(0),
900055f6:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
        : color(col)
900055fa:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
900055fe:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005602:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
        : x(0), y(0), width(0), height(0)
90005606:	e9c4 3544 	strd	r3, r5, [r4, #272]	; 0x110
9000560a:	4ba4      	ldr	r3, [pc, #656]	; (9000589c <_ZN15Screen1ViewBaseC1Ev+0x384>)
              text(0)
9000560c:	e9c4 2554 	strd	r2, r5, [r4, #336]	; 0x150
90005610:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
90005614:	e9c4 5546 	strd	r5, r5, [r4, #280]	; 0x118
          parent(0),
90005618:	e9c4 5548 	strd	r5, r5, [r4, #288]	; 0x120
          nextDrawChainElement(0),
9000561c:	e9c4 554a 	strd	r5, r5, [r4, #296]	; 0x128
90005620:	f00b fccc 	bl	90010fbc <_ZN8touchgfx6SliderC1Ev>
90005624:	4b9d      	ldr	r3, [pc, #628]	; (9000589c <_ZN15Screen1ViewBaseC1Ev+0x384>)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90005626:	f04f 32ff 	mov.w	r2, #4294967295
          touchable(false),
9000562a:	f8a4 6278 	strh.w	r6, [r4, #632]	; 0x278
9000562e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
90005632:	f104 0140 	add.w	r1, r4, #64	; 0x40
        : TextAreaWithWildcardBase(), wc1(0)
90005636:	4b9b      	ldr	r3, [pc, #620]	; (900058a4 <_ZN15Screen1ViewBaseC1Ev+0x38c>)
        rect.x = x;
90005638:	4e9b      	ldr	r6, [pc, #620]	; (900058a8 <_ZN15Screen1ViewBaseC1Ev+0x390>)
9000563a:	f8c4 3254 	str.w	r3, [r4, #596]	; 0x254
        : pobject(pObject), pmemfun(pmemfun_2)
9000563e:	4b9b      	ldr	r3, [pc, #620]	; (900058ac <_ZN15Screen1ViewBaseC1Ev+0x394>)
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90005640:	f8c4 728a 	str.w	r7, [r4, #650]	; 0x28a
90005644:	1d27      	adds	r7, r4, #4
90005646:	f8c4 32b4 	str.w	r3, [r4, #692]	; 0x2b4
9000564a:	4b99      	ldr	r3, [pc, #612]	; (900058b0 <_ZN15Screen1ViewBaseC1Ev+0x398>)
9000564c:	4638      	mov	r0, r7
9000564e:	f8a4 b280 	strh.w	fp, [r4, #640]	; 0x280
90005652:	f504 7b88 	add.w	fp, r4, #272	; 0x110
90005656:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
9000565a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
9000565e:	64a6      	str	r6, [r4, #72]	; 0x48
90005660:	66a3      	str	r3, [r4, #104]	; 0x68
        : color(col)
90005662:	f8c4 5284 	str.w	r5, [r4, #644]	; 0x284
90005666:	f8a4 5288 	strh.w	r5, [r4, #648]	; 0x288
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000566a:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
9000566e:	f8c4 529c 	str.w	r5, [r4, #668]	; 0x29c
90005672:	f8c4 42b8 	str.w	r4, [r4, #696]	; 0x2b8
90005676:	f8c4 52c0 	str.w	r5, [r4, #704]	; 0x2c0
9000567a:	6465      	str	r5, [r4, #68]	; 0x44
              text(0)
9000567c:	e9c4 25a5 	strd	r2, r5, [r4, #660]	; 0x294
        : x(0), y(0), width(0), height(0)
90005680:	e9c4 5596 	strd	r5, r5, [r4, #600]	; 0x258
90005684:	e9c4 5598 	strd	r5, r5, [r4, #608]	; 0x260
          nextSibling(0),
90005688:	e9c4 559a 	strd	r5, r5, [r4, #616]	; 0x268
          cachedAbsX(0),
9000568c:	e9c4 559c 	strd	r5, r5, [r4, #624]	; 0x270
90005690:	f00a ffac 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
    tiledImage1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_480X272_WAVES_ID));
90005694:	4648      	mov	r0, r9
90005696:	a90a      	add	r1, sp, #40	; 0x28
90005698:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
9000569c:	f00d fa28 	bl	90012af0 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>
    tiledImage1.setOffset(0, 0);
900056a0:	462a      	mov	r2, r5
900056a2:	4648      	mov	r0, r9
900056a4:	4629      	mov	r1, r5
        rect.x = x;
900056a6:	e9c4 561c 	strd	r5, r6, [r4, #112]	; 0x70
900056aa:	f00d f9ff 	bl	90012aac <_ZN8touchgfx10TiledImage9setOffsetEss>
900056ae:	4649      	mov	r1, r9
900056b0:	4638      	mov	r0, r7
        boundingArea = calculateBoundingArea();
900056b2:	ae04      	add	r6, sp, #16
900056b4:	f00a ff9a 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
900056b8:	f04f 32ff 	mov.w	r2, #4294967295
    sliderValueChangedCallback(this, &Screen1ViewBase::sliderValueChangedCallbackHandler)
900056bc:	f104 039c 	add.w	r3, r4, #156	; 0x9c
        boundingArea = calculateBoundingArea();
900056c0:	4630      	mov	r0, r6
        color = newColor;
900056c2:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
900056c6:	227c      	movs	r2, #124	; 0x7c
        boundingArea = calculateBoundingArea();
900056c8:	4619      	mov	r1, r3
        linespace = space;
900056ca:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
900056ce:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
    textArea3.setPosition(300, 136, 91, 48);
900056d2:	f504 7915 	add.w	r9, r4, #596	; 0x254
        boundingArea = calculateBoundingArea();
900056d6:	9303      	str	r3, [sp, #12]
900056d8:	f00c fef4 	bl	900124c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
900056dc:	4b6f      	ldr	r3, [pc, #444]	; (9000589c <_ZN15Screen1ViewBaseC1Ev+0x384>)
900056de:	f04f 0203 	mov.w	r2, #3
900056e2:	f104 0cd8 	add.w	ip, r4, #216	; 0xd8
900056e6:	930a      	str	r3, [sp, #40]	; 0x28
900056e8:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_GRR4));
900056ec:	9b03      	ldr	r3, [sp, #12]
900056ee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
900056f2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
900056f6:	4618      	mov	r0, r3
900056f8:	a90a      	add	r1, sp, #40	; 0x28
900056fa:	f00d f97d 	bl	900129f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900056fe:	9b03      	ldr	r3, [sp, #12]
90005700:	4638      	mov	r0, r7
90005702:	4619      	mov	r1, r3
90005704:	f00a ff72 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005708:	f04f 0203 	mov.w	r2, #3
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_ULFRI_ID));
9000570c:	4650      	mov	r0, sl
9000570e:	a90a      	add	r1, sp, #40	; 0x28
90005710:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90005714:	f00d fc05 	bl	90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90005718:	f04f 1364 	mov.w	r3, #6553700	; 0x640064
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
9000571c:	4650      	mov	r0, sl
9000571e:	4629      	mov	r1, r5
90005720:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
90005724:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
90005728:	f00c fbbf 	bl	90011eaa <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
9000572c:	4651      	mov	r1, sl
9000572e:	4638      	mov	r0, r7
90005730:	f04f 0a02 	mov.w	sl, #2
90005734:	f00a ff5a 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90005738:	f04f 32ff 	mov.w	r2, #4294967295
9000573c:	4b5d      	ldr	r3, [pc, #372]	; (900058b4 <_ZN15Screen1ViewBaseC1Ev+0x39c>)
        boundingArea = calculateBoundingArea();
9000573e:	4659      	mov	r1, fp
90005740:	4630      	mov	r0, r6
        color = newColor;
90005742:	f8c4 2140 	str.w	r2, [r4, #320]	; 0x140
90005746:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        linespace = space;
9000574a:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
        boundingArea = calculateBoundingArea();
9000574e:	f00c feb9 	bl	900124c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90005752:	4b52      	ldr	r3, [pc, #328]	; (9000589c <_ZN15Screen1ViewBaseC1Ev+0x384>)
90005754:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
90005758:	930a      	str	r3, [sp, #40]	; 0x28
9000575a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
9000575e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90005762:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_M7IY));
90005766:	a90a      	add	r1, sp, #40	; 0x28
90005768:	4658      	mov	r0, fp
9000576a:	f00d f945 	bl	900129f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
9000576e:	4659      	mov	r1, fp
90005770:	4638      	mov	r0, r7
90005772:	f00a ff3b 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005776:	4b50      	ldr	r3, [pc, #320]	; (900058b8 <_ZN15Screen1ViewBaseC1Ev+0x3a0>)
    slider1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_FILLER_MEDIUM_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THICK_ROUNDED_LIGHT_ID));
90005778:	aa09      	add	r2, sp, #36	; 0x24
9000577a:	a908      	add	r1, sp, #32
9000577c:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
90005780:	2301      	movs	r3, #1
90005782:	4640      	mov	r0, r8
90005784:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
90005788:	f8ad 3020 	strh.w	r3, [sp, #32]
9000578c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90005790:	ab0a      	add	r3, sp, #40	; 0x28
90005792:	f00b fc6f 	bl	90011074 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>
    slider1.setupHorizontalSlider(16, 11, 0, 0, 300);
90005796:	f44f 7396 	mov.w	r3, #300	; 0x12c
9000579a:	220b      	movs	r2, #11
9000579c:	2110      	movs	r1, #16
9000579e:	4640      	mov	r0, r8
900057a0:	9301      	str	r3, [sp, #4]
900057a2:	9500      	str	r5, [sp, #0]
900057a4:	462b      	mov	r3, r5
900057a6:	f00b fadb 	bl	90010d60 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>
    slider1.setValueRange(0, 100);
900057aa:	2264      	movs	r2, #100	; 0x64
900057ac:	4629      	mov	r1, r5
900057ae:	4640      	mov	r0, r8
900057b0:	f00b fa2d 	bl	90010c0e <_ZN8touchgfx6Slider13setValueRangeEii>
    slider1.setValue(0);
900057b4:	4629      	mov	r1, r5
900057b6:	4640      	mov	r0, r8
900057b8:	f00b f9ab 	bl	90010b12 <_ZN8touchgfx6Slider8setValueEi>
    slider1.setNewValueCallback(sliderValueChangedCallback);
900057bc:	f504 732d 	add.w	r3, r4, #692	; 0x2b4
900057c0:	4641      	mov	r1, r8
900057c2:	4638      	mov	r0, r7
     *
     * @see GenericCallback
     */
    void setNewValueCallback(GenericCallback<const Slider&, int>& callback)
    {
        newValueCallback = &callback;
900057c4:	f8c4 3250 	str.w	r3, [r4, #592]	; 0x250
900057c8:	f00a ff10 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
900057cc:	4a3b      	ldr	r2, [pc, #236]	; (900058bc <_ZN15Screen1ViewBaseC1Ev+0x3a4>)
        setX(x);
900057ce:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
        setY(y);
900057d2:	493b      	ldr	r1, [pc, #236]	; (900058c0 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
        rect.x = x;
900057d4:	f8c4 2258 	str.w	r2, [r4, #600]	; 0x258
        setWidth(width);
900057d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
900057da:	428a      	cmp	r2, r1
900057dc:	f040 808c 	bne.w	900058f8 <_ZN15Screen1ViewBaseC1Ev+0x3e0>
        rect.width = width;
900057e0:	225b      	movs	r2, #91	; 0x5b
        boundingArea = calculateBoundingArea();
900057e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
900057e6:	4649      	mov	r1, r9
900057e8:	4630      	mov	r0, r6
900057ea:	f8a4 225c 	strh.w	r2, [r4, #604]	; 0x25c
900057ee:	4798      	blx	r3
900057f0:	f504 7324 	add.w	r3, r4, #656	; 0x290
900057f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
900057f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        setHeight(height);
900057fc:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
90005800:	4930      	ldr	r1, [pc, #192]	; (900058c4 <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
90005802:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90005804:	428a      	cmp	r2, r1
90005806:	f040 8081 	bne.w	9000590c <_ZN15Screen1ViewBaseC1Ev+0x3f4>
        rect.height = height;
9000580a:	2230      	movs	r2, #48	; 0x30
        boundingArea = calculateBoundingArea();
9000580c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005810:	4649      	mov	r1, r9
90005812:	4630      	mov	r0, r6
90005814:	f8a4 225e 	strh.w	r2, [r4, #606]	; 0x25e
90005818:	4798      	blx	r3
9000581a:	f109 033c 	add.w	r3, r9, #60	; 0x3c
9000581e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90005822:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90005826:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
9000582a:	4927      	ldr	r1, [pc, #156]	; (900058c8 <_ZN15Screen1ViewBaseC1Ev+0x3b0>)
9000582c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
        color = newColor;
90005830:	4b26      	ldr	r3, [pc, #152]	; (900058cc <_ZN15Screen1ViewBaseC1Ev+0x3b4>)
90005832:	428a      	cmp	r2, r1
90005834:	f8c4 3284 	str.w	r3, [r4, #644]	; 0x284
        linespace = space;
90005838:	f04f 0300 	mov.w	r3, #0
9000583c:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
        boundingArea = calculateBoundingArea();
90005840:	d168      	bne.n	90005914 <_ZN15Screen1ViewBaseC1Ev+0x3fc>
90005842:	f8c4 3290 	str.w	r3, [r4, #656]	; 0x290
90005846:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
9000584a:	f04f 33ff 	mov.w	r3, #4294967295
9000584e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005852:	4b1f      	ldr	r3, [pc, #124]	; (900058d0 <_ZN15Screen1ViewBaseC1Ev+0x3b8>)
    Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YY2C).getText());
90005854:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
90005858:	681b      	ldr	r3, [r3, #0]
9000585a:	2b00      	cmp	r3, #0
9000585c:	d06a      	beq.n	90005934 <_ZN15Screen1ViewBaseC1Ev+0x41c>
        return typedTextId < numberOfTypedTexts;
9000585e:	4b1d      	ldr	r3, [pc, #116]	; (900058d4 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005860:	881b      	ldrh	r3, [r3, #0]
90005862:	2b00      	cmp	r3, #0
90005864:	d060      	beq.n	90005928 <_ZN15Screen1ViewBaseC1Ev+0x410>
        return texts->getText(typedTextId);
90005866:	4b1c      	ldr	r3, [pc, #112]	; (900058d8 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
90005868:	2100      	movs	r1, #0
9000586a:	6818      	ldr	r0, [r3, #0]
9000586c:	f000 fa3c 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
90005870:	4a1a      	ldr	r2, [pc, #104]	; (900058dc <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
90005872:	4603      	mov	r3, r0
90005874:	210a      	movs	r1, #10
90005876:	4628      	mov	r0, r5
90005878:	f012 f82c 	bl	900178d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
9000587c:	4b07      	ldr	r3, [pc, #28]	; (9000589c <_ZN15Screen1ViewBaseC1Ev+0x384>)
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LIMJ));
9000587e:	a90a      	add	r1, sp, #40	; 0x28
90005880:	4648      	mov	r0, r9
90005882:	930a      	str	r3, [sp, #40]	; 0x28
90005884:	2301      	movs	r3, #1
        wc1 = value;
90005886:	f8c4 529c 	str.w	r5, [r4, #668]	; 0x29c
9000588a:	e029      	b.n	900058e0 <_ZN15Screen1ViewBaseC1Ev+0x3c8>
9000588c:	900275dc 	.word	0x900275dc
90005890:	90026aa8 	.word	0x90026aa8
90005894:	900276c8 	.word	0x900276c8
90005898:	90027644 	.word	0x90027644
9000589c:	900264a0 	.word	0x900264a0
900058a0:	9002754c 	.word	0x9002754c
900058a4:	90026a00 	.word	0x90026a00
900058a8:	011001e0 	.word	0x011001e0
900058ac:	90026a90 	.word	0x90026a90
900058b0:	900053a1 	.word	0x900053a1
900058b4:	002a007c 	.word	0x002a007c
900058b8:	00d0004a 	.word	0x00d0004a
900058bc:	0088012c 	.word	0x0088012c
900058c0:	90005295 	.word	0x90005295
900058c4:	900052bd 	.word	0x900052bd
900058c8:	90005309 	.word	0x90005309
900058cc:	fff5f2c4 	.word	0xfff5f2c4
900058d0:	240264ac 	.word	0x240264ac
900058d4:	240264b0 	.word	0x240264b0
900058d8:	240264b8 	.word	0x240264b8
900058dc:	900269f4 	.word	0x900269f4
900058e0:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
900058e4:	f00d f888 	bl	900129f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
900058e8:	4638      	mov	r0, r7
900058ea:	4649      	mov	r1, r9
900058ec:	f00a fe7e 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
900058f0:	4620      	mov	r0, r4
900058f2:	b00d      	add	sp, #52	; 0x34
900058f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setWidth(width);
900058f8:	215b      	movs	r1, #91	; 0x5b
900058fa:	4648      	mov	r0, r9
900058fc:	4790      	blx	r2
        setHeight(height);
900058fe:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
90005902:	490f      	ldr	r1, [pc, #60]	; (90005940 <_ZN15Screen1ViewBaseC1Ev+0x428>)
90005904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90005906:	428a      	cmp	r2, r1
90005908:	f43f af7f 	beq.w	9000580a <_ZN15Screen1ViewBaseC1Ev+0x2f2>
9000590c:	2130      	movs	r1, #48	; 0x30
9000590e:	4648      	mov	r0, r9
90005910:	4790      	blx	r2
90005912:	e788      	b.n	90005826 <_ZN15Screen1ViewBaseC1Ev+0x30e>
90005914:	4649      	mov	r1, r9
90005916:	4630      	mov	r0, r6
90005918:	4790      	blx	r2
9000591a:	f109 033c 	add.w	r3, r9, #60	; 0x3c
9000591e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
90005922:	e883 0007 	stmia.w	r3, {r0, r1, r2}
90005926:	e794      	b.n	90005852 <_ZN15Screen1ViewBaseC1Ev+0x33a>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005928:	4b06      	ldr	r3, [pc, #24]	; (90005944 <_ZN15Screen1ViewBaseC1Ev+0x42c>)
9000592a:	2161      	movs	r1, #97	; 0x61
9000592c:	4a06      	ldr	r2, [pc, #24]	; (90005948 <_ZN15Screen1ViewBaseC1Ev+0x430>)
9000592e:	4807      	ldr	r0, [pc, #28]	; (9000594c <_ZN15Screen1ViewBaseC1Ev+0x434>)
90005930:	f01d fe9a 	bl	90023668 <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005934:	4b06      	ldr	r3, [pc, #24]	; (90005950 <_ZN15Screen1ViewBaseC1Ev+0x438>)
90005936:	2160      	movs	r1, #96	; 0x60
90005938:	4a03      	ldr	r2, [pc, #12]	; (90005948 <_ZN15Screen1ViewBaseC1Ev+0x430>)
9000593a:	4804      	ldr	r0, [pc, #16]	; (9000594c <_ZN15Screen1ViewBaseC1Ev+0x434>)
9000593c:	f01d fe94 	bl	90023668 <__assert_func>
90005940:	900052bd 	.word	0x900052bd
90005944:	9002697c 	.word	0x9002697c
90005948:	900269bc 	.word	0x900269bc
9000594c:	90026934 	.word	0x90026934
90005950:	900268b4 	.word	0x900268b4

90005954 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005954:	4770      	bx	lr
90005956:	bf00      	nop

90005958 <_Z23getFont_verdana_10_4bppv>:
{
90005958:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000595a:	4d18      	ldr	r5, [pc, #96]	; (900059bc <_Z23getFont_verdana_10_4bppv+0x64>)
{
9000595c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
9000595e:	682c      	ldr	r4, [r5, #0]
90005960:	f3bf 8f5b 	dmb	ish
90005964:	f014 0401 	ands.w	r4, r4, #1
90005968:	d002      	beq.n	90005970 <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
9000596a:	4815      	ldr	r0, [pc, #84]	; (900059c0 <_Z23getFont_verdana_10_4bppv+0x68>)
9000596c:	b00f      	add	sp, #60	; 0x3c
9000596e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
90005970:	4628      	mov	r0, r5
90005972:	f01d fe4c 	bl	9002360e <__cxa_guard_acquire>
90005976:	2800      	cmp	r0, #0
90005978:	d0f7      	beq.n	9000596a <_Z23getFont_verdana_10_4bppv+0x12>
9000597a:	213f      	movs	r1, #63	; 0x3f
9000597c:	2201      	movs	r2, #1
9000597e:	230a      	movs	r3, #10
90005980:	2004      	movs	r0, #4
90005982:	9204      	str	r2, [sp, #16]
90005984:	9300      	str	r3, [sp, #0]
90005986:	9003      	str	r0, [sp, #12]
90005988:	480d      	ldr	r0, [pc, #52]	; (900059c0 <_Z23getFont_verdana_10_4bppv+0x68>)
9000598a:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000598e:	490d      	ldr	r1, [pc, #52]	; (900059c4 <_Z23getFont_verdana_10_4bppv+0x6c>)
90005990:	9108      	str	r1, [sp, #32]
90005992:	490d      	ldr	r1, [pc, #52]	; (900059c8 <_Z23getFont_verdana_10_4bppv+0x70>)
90005994:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005998:	9107      	str	r1, [sp, #28]
9000599a:	490c      	ldr	r1, [pc, #48]	; (900059cc <_Z23getFont_verdana_10_4bppv+0x74>)
9000599c:	e9cd 4405 	strd	r4, r4, [sp, #20]
900059a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
900059a4:	f7ff fc3e 	bl	90005224 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900059a8:	4809      	ldr	r0, [pc, #36]	; (900059d0 <_Z23getFont_verdana_10_4bppv+0x78>)
900059aa:	f01d fe7b 	bl	900236a4 <atexit>
900059ae:	4628      	mov	r0, r5
900059b0:	f01d fe39 	bl	90023626 <__cxa_guard_release>
}
900059b4:	4802      	ldr	r0, [pc, #8]	; (900059c0 <_Z23getFont_verdana_10_4bppv+0x68>)
900059b6:	b00f      	add	sp, #60	; 0x3c
900059b8:	bd30      	pop	{r4, r5, pc}
900059ba:	bf00      	nop
900059bc:	2400b32c 	.word	0x2400b32c
900059c0:	2400b330 	.word	0x2400b330
900059c4:	90027bac 	.word	0x90027bac
900059c8:	9002804c 	.word	0x9002804c
900059cc:	9020a160 	.word	0x9020a160
900059d0:	90005955 	.word	0x90005955

900059d4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900059d4:	4770      	bx	lr
900059d6:	bf00      	nop

900059d8 <_Z23getFont_verdana_20_4bppv>:
{
900059d8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900059da:	4d19      	ldr	r5, [pc, #100]	; (90005a40 <_Z23getFont_verdana_20_4bppv+0x68>)
{
900059dc:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900059de:	682c      	ldr	r4, [r5, #0]
900059e0:	f3bf 8f5b 	dmb	ish
900059e4:	f014 0401 	ands.w	r4, r4, #1
900059e8:	d002      	beq.n	900059f0 <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
900059ea:	4816      	ldr	r0, [pc, #88]	; (90005a44 <_Z23getFont_verdana_20_4bppv+0x6c>)
900059ec:	b00f      	add	sp, #60	; 0x3c
900059ee:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 18, 24, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900059f0:	4628      	mov	r0, r5
900059f2:	f01d fe0c 	bl	9002360e <__cxa_guard_acquire>
900059f6:	2800      	cmp	r0, #0
900059f8:	d0f7      	beq.n	900059ea <_Z23getFont_verdana_20_4bppv+0x12>
900059fa:	213f      	movs	r1, #63	; 0x3f
900059fc:	4a12      	ldr	r2, [pc, #72]	; (90005a48 <_Z23getFont_verdana_20_4bppv+0x70>)
900059fe:	2301      	movs	r3, #1
90005a00:	2014      	movs	r0, #20
90005a02:	9208      	str	r2, [sp, #32]
90005a04:	2204      	movs	r2, #4
90005a06:	9304      	str	r3, [sp, #16]
90005a08:	9000      	str	r0, [sp, #0]
90005a0a:	9401      	str	r4, [sp, #4]
90005a0c:	480d      	ldr	r0, [pc, #52]	; (90005a44 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005a0e:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90005a12:	490e      	ldr	r1, [pc, #56]	; (90005a4c <_Z23getFont_verdana_20_4bppv+0x74>)
90005a14:	e9cd 4305 	strd	r4, r3, [sp, #20]
90005a18:	9107      	str	r1, [sp, #28]
90005a1a:	2318      	movs	r3, #24
90005a1c:	490c      	ldr	r1, [pc, #48]	; (90005a50 <_Z23getFont_verdana_20_4bppv+0x78>)
90005a1e:	e9cd 4202 	strd	r4, r2, [sp, #8]
90005a22:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005a26:	2212      	movs	r2, #18
90005a28:	f7ff fbfc 	bl	90005224 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005a2c:	4809      	ldr	r0, [pc, #36]	; (90005a54 <_Z23getFont_verdana_20_4bppv+0x7c>)
90005a2e:	f01d fe39 	bl	900236a4 <atexit>
90005a32:	4628      	mov	r0, r5
90005a34:	f01d fdf7 	bl	90023626 <__cxa_guard_release>
}
90005a38:	4802      	ldr	r0, [pc, #8]	; (90005a44 <_Z23getFont_verdana_20_4bppv+0x6c>)
90005a3a:	b00f      	add	sp, #60	; 0x3c
90005a3c:	bd30      	pop	{r4, r5, pc}
90005a3e:	bf00      	nop
90005a40:	2400b35c 	.word	0x2400b35c
90005a44:	2400b360 	.word	0x2400b360
90005a48:	90027bb0 	.word	0x90027bb0
90005a4c:	90028050 	.word	0x90028050
90005a50:	9020a170 	.word	0x9020a170
90005a54:	900059d5 	.word	0x900059d5

90005a58 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_30_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_30_4bpp();

touchgfx::GeneratedFont& getFont_verdana_30_4bpp()
{
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 76, 36, 30, 0, 0, 4, 1, 1, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 48, 0, 0, 0);
90005a58:	4770      	bx	lr
90005a5a:	bf00      	nop

90005a5c <_Z23getFont_verdana_30_4bppv>:
{
90005a5c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 76, 36, 30, 0, 0, 4, 1, 1, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 48, 0, 0, 0);
90005a5e:	4d19      	ldr	r5, [pc, #100]	; (90005ac4 <_Z23getFont_verdana_30_4bppv+0x68>)
{
90005a60:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 76, 36, 30, 0, 0, 4, 1, 1, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 48, 0, 0, 0);
90005a62:	682c      	ldr	r4, [r5, #0]
90005a64:	f3bf 8f5b 	dmb	ish
90005a68:	f014 0401 	ands.w	r4, r4, #1
90005a6c:	d002      	beq.n	90005a74 <_Z23getFont_verdana_30_4bppv+0x18>
    return verdana_30_4bpp;
}
90005a6e:	4816      	ldr	r0, [pc, #88]	; (90005ac8 <_Z23getFont_verdana_30_4bppv+0x6c>)
90005a70:	b00f      	add	sp, #60	; 0x3c
90005a72:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_30_4bpp(glyphs_verdana_30_4bpp, 76, 36, 30, 0, 0, 4, 1, 1, 1, unicodes_verdana_30_4bpp, kerning_verdana_30_4bpp, 48, 0, 0, 0);
90005a74:	4628      	mov	r0, r5
90005a76:	f01d fdca 	bl	9002360e <__cxa_guard_acquire>
90005a7a:	2800      	cmp	r0, #0
90005a7c:	d0f7      	beq.n	90005a6e <_Z23getFont_verdana_30_4bppv+0x12>
90005a7e:	2130      	movs	r1, #48	; 0x30
90005a80:	4a12      	ldr	r2, [pc, #72]	; (90005acc <_Z23getFont_verdana_30_4bppv+0x70>)
90005a82:	2301      	movs	r3, #1
90005a84:	201e      	movs	r0, #30
90005a86:	9208      	str	r2, [sp, #32]
90005a88:	2204      	movs	r2, #4
90005a8a:	9304      	str	r3, [sp, #16]
90005a8c:	9000      	str	r0, [sp, #0]
90005a8e:	9401      	str	r4, [sp, #4]
90005a90:	480d      	ldr	r0, [pc, #52]	; (90005ac8 <_Z23getFont_verdana_30_4bppv+0x6c>)
90005a92:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90005a96:	490e      	ldr	r1, [pc, #56]	; (90005ad0 <_Z23getFont_verdana_30_4bppv+0x74>)
90005a98:	e9cd 3305 	strd	r3, r3, [sp, #20]
90005a9c:	9107      	str	r1, [sp, #28]
90005a9e:	2324      	movs	r3, #36	; 0x24
90005aa0:	490c      	ldr	r1, [pc, #48]	; (90005ad4 <_Z23getFont_verdana_30_4bppv+0x78>)
90005aa2:	e9cd 4202 	strd	r4, r2, [sp, #8]
90005aa6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005aaa:	224c      	movs	r2, #76	; 0x4c
90005aac:	f7ff fbba 	bl	90005224 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005ab0:	4809      	ldr	r0, [pc, #36]	; (90005ad8 <_Z23getFont_verdana_30_4bppv+0x7c>)
90005ab2:	f01d fdf7 	bl	900236a4 <atexit>
90005ab6:	4628      	mov	r0, r5
90005ab8:	f01d fdb5 	bl	90023626 <__cxa_guard_release>
}
90005abc:	4802      	ldr	r0, [pc, #8]	; (90005ac8 <_Z23getFont_verdana_30_4bppv+0x6c>)
90005abe:	b00f      	add	sp, #60	; 0x3c
90005ac0:	bd30      	pop	{r4, r5, pc}
90005ac2:	bf00      	nop
90005ac4:	2400b38c 	.word	0x2400b38c
90005ac8:	2400b390 	.word	0x2400b390
90005acc:	90027bb4 	.word	0x90027bb4
90005ad0:	90028054 	.word	0x90028054
90005ad4:	9020a26c 	.word	0x9020a26c
90005ad8:	90005a59 	.word	0x90005a59

90005adc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 48, 0, 0, 0);
90005adc:	4770      	bx	lr
90005ade:	bf00      	nop

90005ae0 <_Z23getFont_verdana_40_4bppv>:
{
90005ae0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 48, 0, 0, 0);
90005ae2:	4d19      	ldr	r5, [pc, #100]	; (90005b48 <_Z23getFont_verdana_40_4bppv+0x68>)
{
90005ae4:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 48, 0, 0, 0);
90005ae6:	682c      	ldr	r4, [r5, #0]
90005ae8:	f3bf 8f5b 	dmb	ish
90005aec:	f014 0401 	ands.w	r4, r4, #1
90005af0:	d002      	beq.n	90005af8 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
90005af2:	4816      	ldr	r0, [pc, #88]	; (90005b4c <_Z23getFont_verdana_40_4bppv+0x6c>)
90005af4:	b00f      	add	sp, #60	; 0x3c
90005af6:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 48, 0, 0, 0);
90005af8:	4628      	mov	r0, r5
90005afa:	f01d fd88 	bl	9002360e <__cxa_guard_acquire>
90005afe:	2800      	cmp	r0, #0
90005b00:	d0f7      	beq.n	90005af2 <_Z23getFont_verdana_40_4bppv+0x12>
90005b02:	4913      	ldr	r1, [pc, #76]	; (90005b50 <_Z23getFont_verdana_40_4bppv+0x70>)
90005b04:	2330      	movs	r3, #48	; 0x30
90005b06:	4813      	ldr	r0, [pc, #76]	; (90005b54 <_Z23getFont_verdana_40_4bppv+0x74>)
90005b08:	2202      	movs	r2, #2
90005b0a:	9108      	str	r1, [sp, #32]
90005b0c:	2101      	movs	r1, #1
90005b0e:	9007      	str	r0, [sp, #28]
90005b10:	2028      	movs	r0, #40	; 0x28
90005b12:	9104      	str	r1, [sp, #16]
90005b14:	2104      	movs	r1, #4
90005b16:	9000      	str	r0, [sp, #0]
90005b18:	9103      	str	r1, [sp, #12]
90005b1a:	480c      	ldr	r0, [pc, #48]	; (90005b4c <_Z23getFont_verdana_40_4bppv+0x6c>)
90005b1c:	490e      	ldr	r1, [pc, #56]	; (90005b58 <_Z23getFont_verdana_40_4bppv+0x78>)
90005b1e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
90005b22:	e9cd 2205 	strd	r2, r2, [sp, #20]
90005b26:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90005b2a:	225f      	movs	r2, #95	; 0x5f
90005b2c:	e9cd 4401 	strd	r4, r4, [sp, #4]
90005b30:	f7ff fb78 	bl	90005224 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90005b34:	4809      	ldr	r0, [pc, #36]	; (90005b5c <_Z23getFont_verdana_40_4bppv+0x7c>)
90005b36:	f01d fdb5 	bl	900236a4 <atexit>
90005b3a:	4628      	mov	r0, r5
90005b3c:	f01d fd73 	bl	90023626 <__cxa_guard_release>
}
90005b40:	4802      	ldr	r0, [pc, #8]	; (90005b4c <_Z23getFont_verdana_40_4bppv+0x6c>)
90005b42:	b00f      	add	sp, #60	; 0x3c
90005b44:	bd30      	pop	{r4, r5, pc}
90005b46:	bf00      	nop
90005b48:	2400b3bc 	.word	0x2400b3bc
90005b4c:	2400b3c0 	.word	0x2400b3c0
90005b50:	90027d68 	.word	0x90027d68
90005b54:	90028058 	.word	0x90028058
90005b58:	9020a694 	.word	0x9020a694
90005b5c:	90005add 	.word	0x90005add

90005b60 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
90005b60:	2000      	movs	r0, #0
90005b62:	4770      	bx	lr

90005b64 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
90005b64:	2000      	movs	r0, #0
90005b66:	4770      	bx	lr

90005b68 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90005b68:	b40e      	push	{r1, r2, r3}
90005b6a:	b500      	push	{lr}
90005b6c:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90005b6e:	2100      	movs	r1, #0
{
90005b70:	ab03      	add	r3, sp, #12
90005b72:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
90005b76:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
90005b78:	f00f fe2c 	bl	900157d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90005b7c:	b002      	add	sp, #8
90005b7e:	f85d eb04 	ldr.w	lr, [sp], #4
90005b82:	b003      	add	sp, #12
90005b84:	4770      	bx	lr
90005b86:	bf00      	nop

90005b88 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90005b88:	b40c      	push	{r2, r3}
90005b8a:	b500      	push	{lr}
90005b8c:	b083      	sub	sp, #12
90005b8e:	ab04      	add	r3, sp, #16
90005b90:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
90005b94:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
90005b96:	f00f fe1d 	bl	900157d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90005b9a:	b003      	add	sp, #12
90005b9c:	f85d eb04 	ldr.w	lr, [sp], #4
90005ba0:	b002      	add	sp, #8
90005ba2:	4770      	bx	lr

90005ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
90005ba4:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
90005ba6:	b510      	push	{r4, lr}
90005ba8:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90005baa:	b133      	cbz	r3, 90005bba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90005bac:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90005bae:	b39b      	cbz	r3, 90005c18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90005bb0:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90005bb2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90005bb6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
90005bb8:	b923      	cbnz	r3, 90005bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
90005bba:	4620      	mov	r0, r4
}
90005bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90005bc0:	f010 bfdc 	b.w	90016b7c <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
90005bc4:	f011 f8d8 	bl	90016d78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90005bc8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90005bca:	2b01      	cmp	r3, #1
90005bcc:	d92a      	bls.n	90005c24 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90005bce:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90005bd0:	1c53      	adds	r3, r2, #1
90005bd2:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
90005bd4:	2b09      	cmp	r3, #9
90005bd6:	d812      	bhi.n	90005bfe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90005bd8:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90005bdc:	f640 103f 	movw	r0, #2367	; 0x93f
90005be0:	8c49      	ldrh	r1, [r1, #34]	; 0x22
90005be2:	4281      	cmp	r1, r0
90005be4:	d1e9      	bne.n	90005bba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90005be6:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005bea:	0052      	lsls	r2, r2, #1
90005bec:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90005bee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
90005bf2:	4422      	add	r2, r4
90005bf4:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
90005bf8:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
90005bfa:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90005bfc:	e7dd      	b.n	90005bba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90005bfe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90005c02:	f640 113f 	movw	r1, #2367	; 0x93f
90005c06:	89db      	ldrh	r3, [r3, #14]
90005c08:	428b      	cmp	r3, r1
90005c0a:	d1d6      	bne.n	90005bba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90005c0c:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90005c10:	2300      	movs	r3, #0
90005c12:	0052      	lsls	r2, r2, #1
90005c14:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
90005c16:	e7ea      	b.n	90005bee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90005c18:	4b05      	ldr	r3, [pc, #20]	; (90005c30 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90005c1a:	21c5      	movs	r1, #197	; 0xc5
90005c1c:	4a05      	ldr	r2, [pc, #20]	; (90005c34 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90005c1e:	4806      	ldr	r0, [pc, #24]	; (90005c38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005c20:	f01d fd22 	bl	90023668 <__assert_func>
            assert(offset < used);
90005c24:	4b05      	ldr	r3, [pc, #20]	; (90005c3c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
90005c26:	21cb      	movs	r1, #203	; 0xcb
90005c28:	4a05      	ldr	r2, [pc, #20]	; (90005c40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
90005c2a:	4803      	ldr	r0, [pc, #12]	; (90005c38 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90005c2c:	f01d fd1c 	bl	90023668 <__assert_func>
90005c30:	90026ad8 	.word	0x90026ad8
90005c34:	90026ae4 	.word	0x90026ae4
90005c38:	90026b90 	.word	0x90026b90
90005c3c:	90026bdc 	.word	0x90026bdc
90005c40:	90026bec 	.word	0x90026bec

90005c44 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
90005c44:	f010 bf63 	b.w	90016b0e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90005c48 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
90005c48:	b510      	push	{r4, lr}
90005c4a:	b086      	sub	sp, #24
90005c4c:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
90005c50:	ac0a      	add	r4, sp, #40	; 0x28
{
90005c52:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90005c56:	461a      	mov	r2, r3
90005c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
90005c5a:	4661      	mov	r1, ip
90005c5c:	9401      	str	r4, [sp, #4]
90005c5e:	9300      	str	r3, [sp, #0]
90005c60:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
90005c62:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
90005c64:	f00e fa3c 	bl	900140e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
90005c68:	b006      	add	sp, #24
90005c6a:	bd10      	pop	{r4, pc}

90005c6c <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
90005c6c:	b9e0      	cbnz	r0, 90005ca8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
90005c6e:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
90005c70:	4b13      	ldr	r3, [pc, #76]	; (90005cc0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
90005c72:	681b      	ldr	r3, [r3, #0]
90005c74:	b1cb      	cbz	r3, 90005caa <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005c76:	4c13      	ldr	r4, [pc, #76]	; (90005cc4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005c78:	4813      	ldr	r0, [pc, #76]	; (90005cc8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90005c7a:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005c7e:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005c80:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
90005c82:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90005c84:	6899      	ldr	r1, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
90005c86:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90005c88:	185c      	adds	r4, r3, r1
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90005c8a:	4b10      	ldr	r3, [pc, #64]	; (90005ccc <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90005c8c:	2200      	movs	r2, #0
90005c8e:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90005c90:	f000 f83a 	bl	90005d08 <_ZN17TypedTextDatabase8getFontsEv>
90005c94:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
90005c96:	f000 f835 	bl	90005d04 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90005c9a:	4b0d      	ldr	r3, [pc, #52]	; (90005cd0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90005c9c:	4a0d      	ldr	r2, [pc, #52]	; (90005cd4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90005c9e:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90005ca0:	4b0d      	ldr	r3, [pc, #52]	; (90005cd8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
90005ca2:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
90005ca4:	8018      	strh	r0, [r3, #0]
    }
}
90005ca6:	bd38      	pop	{r3, r4, r5, pc}
90005ca8:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005caa:	4c0c      	ldr	r4, [pc, #48]	; (90005cdc <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90005cac:	4905      	ldr	r1, [pc, #20]	; (90005cc4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90005cae:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90005cb0:	480b      	ldr	r0, [pc, #44]	; (90005ce0 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
90005cb2:	4b05      	ldr	r3, [pc, #20]	; (90005cc8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
90005cb4:	4a0b      	ldr	r2, [pc, #44]	; (90005ce4 <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
90005cb6:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
90005cb8:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
90005cba:	2c00      	cmp	r4, #0
90005cbc:	d1e5      	bne.n	90005c8a <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90005cbe:	bd38      	pop	{r3, r4, r5, pc}
90005cc0:	2400b3ec 	.word	0x2400b3ec
90005cc4:	2400b3f0 	.word	0x2400b3f0
90005cc8:	2400b3f4 	.word	0x2400b3f4
90005ccc:	2400b3f8 	.word	0x2400b3f8
90005cd0:	240264ac 	.word	0x240264ac
90005cd4:	240264b4 	.word	0x240264b4
90005cd8:	240264b0 	.word	0x240264b0
90005cdc:	9020ac40 	.word	0x9020ac40
90005ce0:	9020abd8 	.word	0x9020abd8
90005ce4:	9020abc8 	.word	0x9020abc8

90005ce8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90005ce8:	4a04      	ldr	r2, [pc, #16]	; (90005cfc <_ZNK8touchgfx5Texts7getTextEt+0x14>)
90005cea:	4b05      	ldr	r3, [pc, #20]	; (90005d00 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90005cec:	6812      	ldr	r2, [r2, #0]
90005cee:	681b      	ldr	r3, [r3, #0]
90005cf0:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
90005cf4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90005cf8:	4770      	bx	lr
90005cfa:	bf00      	nop
90005cfc:	2400b3f4 	.word	0x2400b3f4
90005d00:	2400b3f0 	.word	0x2400b3f0

90005d04 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
90005d04:	2004      	movs	r0, #4
90005d06:	4770      	bx	lr

90005d08 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90005d08:	4800      	ldr	r0, [pc, #0]	; (90005d0c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90005d0a:	4770      	bx	lr
90005d0c:	2400b3fc 	.word	0x2400b3fc

90005d10 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_30_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90005d10:	b510      	push	{r4, lr}
};
90005d12:	4c07      	ldr	r4, [pc, #28]	; (90005d30 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_20_4bpp()),
90005d14:	f7ff fe60 	bl	900059d8 <_Z23getFont_verdana_20_4bppv>
};
90005d18:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90005d1a:	f7ff fee1 	bl	90005ae0 <_Z23getFont_verdana_40_4bppv>
};
90005d1e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
90005d20:	f7ff fe1a 	bl	90005958 <_Z23getFont_verdana_10_4bppv>
};
90005d24:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_30_4bpp())
90005d26:	f7ff fe99 	bl	90005a5c <_Z23getFont_verdana_30_4bppv>
};
90005d2a:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
90005d2c:	bd10      	pop	{r4, pc}
90005d2e:	bf00      	nop
90005d30:	2400b3fc 	.word	0x2400b3fc

90005d34 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
90005d34:	4770      	bx	lr
90005d36:	bf00      	nop

90005d38 <_ZN19FrontendApplicationD0Ev>:
90005d38:	b510      	push	{r4, lr}
90005d3a:	4604      	mov	r4, r0
90005d3c:	f44f 71ae 	mov.w	r1, #348	; 0x15c
90005d40:	f01d fc63 	bl	9002360a <_ZdlPvj>
90005d44:	4620      	mov	r0, r4
90005d46:	bd10      	pop	{r4, pc}

90005d48 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
90005d48:	b510      	push	{r4, lr}
90005d4a:	4604      	mov	r4, r0
    {
        model.tick();
90005d4c:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
90005d50:	f000 f814 	bl	90005d7c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
90005d54:	4620      	mov	r0, r4
    }
90005d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
90005d5a:	f00e bea3 	b.w	90014aa4 <_ZN8touchgfx11Application15handleTickEventEv>
90005d5e:	bf00      	nop

90005d60 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
90005d60:	b510      	push	{r4, lr}
90005d62:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
90005d64:	f7ff f9d6 	bl	90005114 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
90005d68:	4b01      	ldr	r3, [pc, #4]	; (90005d70 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
90005d6a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
90005d6c:	6023      	str	r3, [r4, #0]
}
90005d6e:	bd10      	pop	{r4, pc}
90005d70:	90026cc8 	.word	0x90026cc8

90005d74 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
90005d74:	2200      	movs	r2, #0
90005d76:	6002      	str	r2, [r0, #0]
{

}
90005d78:	4770      	bx	lr
90005d7a:	bf00      	nop

90005d7c <_ZN5Model4tickEv>:

void Model::tick()
{

}
90005d7c:	4770      	bx	lr
90005d7e:	bf00      	nop

90005d80 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
90005d80:	4770      	bx	lr
90005d82:	bf00      	nop

90005d84 <_ZThn4_N16Screen1PresenterD1Ev>:
90005d84:	3804      	subs	r0, #4
90005d86:	4770      	bx	lr

90005d88 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90005d88:	4770      	bx	lr
90005d8a:	bf00      	nop

90005d8c <_ZN16Screen1PresenterD0Ev>:
90005d8c:	b510      	push	{r4, lr}
90005d8e:	4604      	mov	r4, r0
90005d90:	2110      	movs	r1, #16
90005d92:	f01d fc3a 	bl	9002360a <_ZdlPvj>
90005d96:	4620      	mov	r0, r4
90005d98:	bd10      	pop	{r4, pc}
90005d9a:	bf00      	nop

90005d9c <_ZThn4_N16Screen1PresenterD0Ev>:
90005d9c:	b500      	push	{lr}
90005d9e:	3804      	subs	r0, #4
90005da0:	b083      	sub	sp, #12
90005da2:	2110      	movs	r1, #16
90005da4:	9001      	str	r0, [sp, #4]
90005da6:	f01d fc30 	bl	9002360a <_ZdlPvj>
90005daa:	9801      	ldr	r0, [sp, #4]
90005dac:	b003      	add	sp, #12
90005dae:	f85d fb04 	ldr.w	pc, [sp], #4
90005db2:	bf00      	nop

90005db4 <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90005db4:	4a06      	ldr	r2, [pc, #24]	; (90005dd0 <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90005db6:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90005db8:	b410      	push	{r4}
    ModelListener() : model(0) {}
90005dba:	2400      	movs	r4, #0
90005dbc:	6084      	str	r4, [r0, #8]
    : view(v)
90005dbe:	f102 0408 	add.w	r4, r2, #8
90005dc2:	3220      	adds	r2, #32
90005dc4:	e9c0 4200 	strd	r4, r2, [r0]
}
90005dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
90005dcc:	4770      	bx	lr
90005dce:	bf00      	nop
90005dd0:	90026d0c 	.word	0x90026d0c

90005dd4 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90005dd4:	4770      	bx	lr
90005dd6:	bf00      	nop

90005dd8 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90005dd8:	4b03      	ldr	r3, [pc, #12]	; (90005de8 <_ZN11Screen1ViewD1Ev+0x10>)
90005dda:	b510      	push	{r4, lr}
90005ddc:	4604      	mov	r4, r0
90005dde:	6003      	str	r3, [r0, #0]
90005de0:	f7ff fa9e 	bl	90005320 <_ZN15Screen1ViewBaseD1Ev>
90005de4:	4620      	mov	r0, r4
90005de6:	bd10      	pop	{r4, pc}
90005de8:	90026d40 	.word	0x90026d40

90005dec <_ZN11Screen1ViewD0Ev>:
90005dec:	4b06      	ldr	r3, [pc, #24]	; (90005e08 <_ZN11Screen1ViewD0Ev+0x1c>)
90005dee:	b510      	push	{r4, lr}
90005df0:	4604      	mov	r4, r0
90005df2:	6003      	str	r3, [r0, #0]
90005df4:	f7ff fa94 	bl	90005320 <_ZN15Screen1ViewBaseD1Ev>
90005df8:	f44f 7131 	mov.w	r1, #708	; 0x2c4
90005dfc:	4620      	mov	r0, r4
90005dfe:	f01d fc04 	bl	9002360a <_ZdlPvj>
90005e02:	4620      	mov	r0, r4
90005e04:	bd10      	pop	{r4, pc}
90005e06:	bf00      	nop
90005e08:	90026d40 	.word	0x90026d40

90005e0c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
90005e0c:	b510      	push	{r4, lr}
90005e0e:	4604      	mov	r4, r0
90005e10:	f7ff fb82 	bl	90005518 <_ZN15Screen1ViewBaseC1Ev>
90005e14:	4b01      	ldr	r3, [pc, #4]	; (90005e1c <_ZN11Screen1ViewC1Ev+0x10>)
}
90005e16:	4620      	mov	r0, r4
Screen1View::Screen1View()
90005e18:	6023      	str	r3, [r4, #0]
}
90005e1a:	bd10      	pop	{r4, pc}
90005e1c:	90026d40 	.word	0x90026d40

90005e20 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
90005e20:	f7ff ba80 	b.w	90005324 <_ZN15Screen1ViewBase11setupScreenEv>

90005e24 <_ZN11Screen1View11updateSpeedEi>:
	this->updateSpeed(slider1.getValue());
}


void Screen1View::updateSpeed(int speed)
{
90005e24:	b510      	push	{r4, lr}
90005e26:	4604      	mov	r4, r0
90005e28:	460b      	mov	r3, r1
	Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%u", speed);
90005e2a:	4a06      	ldr	r2, [pc, #24]	; (90005e44 <_ZN11Screen1View11updateSpeedEi+0x20>)
90005e2c:	210a      	movs	r1, #10
90005e2e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
90005e32:	f011 fd4f 	bl	900178d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea3.invalidate();
90005e36:	f504 7015 	add.w	r0, r4, #596	; 0x254
}
90005e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	textArea3.invalidate();
90005e3e:	f00f bdf4 	b.w	90015a2a <_ZNK8touchgfx8Drawable10invalidateEv>
90005e42:	bf00      	nop
90005e44:	90026d34 	.word	0x90026d34

90005e48 <_ZN11Screen1View22slider1ChangedCallbackEi>:
	this->updateSpeed(slider1.getValue());
90005e48:	6802      	ldr	r2, [r0, #0]
     *
     * @return The current value.
     */
    int getValue()
    {
        return currentValue;
90005e4a:	f8d0 3188 	ldr.w	r3, [r0, #392]	; 0x188
90005e4e:	4911      	ldr	r1, [pc, #68]	; (90005e94 <_ZN11Screen1View22slider1ChangedCallbackEi+0x4c>)
{
90005e50:	b570      	push	{r4, r5, r6, lr}
	this->updateSpeed(slider1.getValue());
90005e52:	6b15      	ldr	r5, [r2, #48]	; 0x30
	ocPeriod = 2100 - (slider1.getValue() * 20);
90005e54:	ebc3 3203 	rsb	r2, r3, r3, lsl #12
90005e58:	4e0f      	ldr	r6, [pc, #60]	; (90005e98 <_ZN11Screen1View22slider1ChangedCallbackEi+0x50>)
90005e5a:	ebc3 0282 	rsb	r2, r3, r2, lsl #2
90005e5e:	428d      	cmp	r5, r1
90005e60:	ea4f 0282 	mov.w	r2, r2, lsl #2
90005e64:	f602 0234 	addw	r2, r2, #2100	; 0x834
90005e68:	b292      	uxth	r2, r2
90005e6a:	8032      	strh	r2, [r6, #0]
	this->updateSpeed(slider1.getValue());
90005e6c:	d10c      	bne.n	90005e88 <_ZN11Screen1View22slider1ChangedCallbackEi+0x40>
	Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%u", speed);
90005e6e:	4604      	mov	r4, r0
90005e70:	4a0a      	ldr	r2, [pc, #40]	; (90005e9c <_ZN11Screen1View22slider1ChangedCallbackEi+0x54>)
90005e72:	210a      	movs	r1, #10
90005e74:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
90005e78:	f011 fd2c 	bl	900178d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textArea3.invalidate();
90005e7c:	f504 7015 	add.w	r0, r4, #596	; 0x254
}
90005e80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	textArea3.invalidate();
90005e84:	f00f bdd1 	b.w	90015a2a <_ZNK8touchgfx8Drawable10invalidateEv>
	this->updateSpeed(slider1.getValue());
90005e88:	4619      	mov	r1, r3
90005e8a:	462b      	mov	r3, r5
}
90005e8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	this->updateSpeed(slider1.getValue());
90005e90:	4718      	bx	r3
90005e92:	bf00      	nop
90005e94:	90005e25 	.word	0x90005e25
90005e98:	24000024 	.word	0x24000024
90005e9c:	90026d34 	.word	0x90026d34

90005ea0 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
90005ea0:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005ea4:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
90005ea6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005eaa:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
90005eae:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
90005eb0:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
90005eb2:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
90005eb6:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
90005eba:	4770      	bx	lr

90005ebc <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
90005ebc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
90005ec0:	2b01      	cmp	r3, #1
90005ec2:	d102      	bne.n	90005eca <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
90005ec4:	2300      	movs	r3, #0
90005ec6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
90005eca:	2000      	movs	r0, #0
90005ecc:	4770      	bx	lr
90005ece:	bf00      	nop

90005ed0 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
90005ed0:	2000      	movs	r0, #0
90005ed2:	4770      	bx	lr

90005ed4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005ed4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005ed6:	6904      	ldr	r4, [r0, #16]
90005ed8:	8900      	ldrh	r0, [r0, #8]
90005eda:	46a4      	mov	ip, r4
}
90005edc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
90005ee0:	4760      	bx	ip
90005ee2:	bf00      	nop

90005ee4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
90005ee4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005ee6:	68c4      	ldr	r4, [r0, #12]
90005ee8:	8900      	ldrh	r0, [r0, #8]
90005eea:	46a4      	mov	ip, r4
}
90005eec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90005ef0:	4760      	bx	ip
90005ef2:	bf00      	nop

90005ef4 <FT5336_GestureConfig>:
{
90005ef4:	b570      	push	{r4, r5, r6, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005ef6:	f100 0518 	add.w	r5, r0, #24
{
90005efa:	460e      	mov	r6, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90005efc:	7809      	ldrb	r1, [r1, #0]
90005efe:	4628      	mov	r0, r5
90005f00:	f000 f96c 	bl	900061dc <ft5336_radian_value>
90005f04:	4604      	mov	r4, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90005f06:	7931      	ldrb	r1, [r6, #4]
90005f08:	4628      	mov	r0, r5
90005f0a:	f000 f975 	bl	900061f8 <ft5336_offset_left_right>
90005f0e:	4404      	add	r4, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90005f10:	7a31      	ldrb	r1, [r6, #8]
90005f12:	4628      	mov	r0, r5
90005f14:	f000 f97e 	bl	90006214 <ft5336_offset_up_down>
90005f18:	4404      	add	r4, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005f1a:	7b31      	ldrb	r1, [r6, #12]
90005f1c:	4628      	mov	r0, r5
90005f1e:	f000 f987 	bl	90006230 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005f22:	7c31      	ldrb	r1, [r6, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90005f24:	4404      	add	r4, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005f26:	4628      	mov	r0, r5
90005f28:	f000 f990 	bl	9000624c <ft5336_distance_up_down>
90005f2c:	4603      	mov	r3, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005f2e:	7d31      	ldrb	r1, [r6, #20]
90005f30:	4628      	mov	r0, r5
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90005f32:	441c      	add	r4, r3
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90005f34:	f000 f998 	bl	90006268 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90005f38:	42c4      	cmn	r4, r0
}
90005f3a:	bf14      	ite	ne
90005f3c:	f04f 30ff 	movne.w	r0, #4294967295
90005f40:	2000      	moveq	r0, #0
90005f42:	bd70      	pop	{r4, r5, r6, pc}

90005f44 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90005f44:	3018      	adds	r0, #24
90005f46:	f000 b9ab 	b.w	900062a0 <ft5336_chip_id>
90005f4a:	bf00      	nop

90005f4c <FT5336_GetState>:
{
90005f4c:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005f4e:	f100 0518 	add.w	r5, r0, #24
{
90005f52:	b083      	sub	sp, #12
90005f54:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005f56:	4628      	mov	r0, r5
90005f58:	a901      	add	r1, sp, #4
90005f5a:	f000 f931 	bl	900061c0 <ft5336_td_status>
90005f5e:	bb10      	cbnz	r0, 90005fa6 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005f60:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005f64:	2b05      	cmp	r3, #5
90005f66:	bf94      	ite	ls
90005f68:	4619      	movls	r1, r3
90005f6a:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005f6c:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005f6e:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005f70:	4628      	mov	r0, r5
90005f72:	2103      	movs	r1, #3
90005f74:	eb0d 0203 	add.w	r2, sp, r3
90005f78:	f000 f910 	bl	9000619c <ft5336_read_reg>
90005f7c:	b9b0      	cbnz	r0, 90005fac <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005f7e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005f82:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005f86:	0212      	lsls	r2, r2, #8
90005f88:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005f8c:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005f8e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005f92:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
90005f96:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
90005f98:	f89d 1007 	ldrb.w	r1, [sp, #7]
90005f9c:	430b      	orrs	r3, r1
90005f9e:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90005fa2:	b003      	add	sp, #12
90005fa4:	bd30      	pop	{r4, r5, pc}
90005fa6:	f04f 31ff 	mov.w	r1, #4294967295
90005faa:	e7df      	b.n	90005f6c <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
90005fac:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90005fb0:	e7f7      	b.n	90005fa2 <FT5336_GetState+0x56>
90005fb2:	bf00      	nop

90005fb4 <FT5336_GetMultiTouchState>:
{
90005fb4:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005fb6:	f100 0518 	add.w	r5, r0, #24
{
90005fba:	b088      	sub	sp, #32
90005fbc:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90005fbe:	4628      	mov	r0, r5
90005fc0:	4669      	mov	r1, sp
90005fc2:	f000 f8fd 	bl	900061c0 <ft5336_td_status>
90005fc6:	2800      	cmp	r0, #0
90005fc8:	f040 809a 	bne.w	90006100 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90005fcc:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90005fd0:	2b05      	cmp	r3, #5
90005fd2:	bf94      	ite	ls
90005fd4:	4619      	movls	r1, r3
90005fd6:	2100      	movhi	r1, #0
90005fd8:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90005fda:	231e      	movs	r3, #30
90005fdc:	466a      	mov	r2, sp
90005fde:	4628      	mov	r0, r5
90005fe0:	2103      	movs	r1, #3
90005fe2:	f000 f8db 	bl	9000619c <ft5336_read_reg>
90005fe6:	2800      	cmp	r0, #0
90005fe8:	f040 808d 	bne.w	90006106 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005fec:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ff0:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ff4:	020a      	lsls	r2, r1, #8
90005ff6:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90005ffa:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90005ffc:	f89d c007 	ldrb.w	ip, [sp, #7]
90006000:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90006004:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006006:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000600a:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000600e:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006010:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90006014:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006016:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006018:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000601a:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000601c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006020:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006022:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006026:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000602a:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000602c:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000602e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006032:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006034:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90006036:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006038:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000603c:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000603e:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006040:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90006044:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90006048:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000604a:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000604c:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000604e:	ea45 050c 	orr.w	r5, r5, ip
90006052:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006056:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000605a:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000605c:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000605e:	0212      	lsls	r2, r2, #8
90006060:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90006064:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006066:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000606a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000606e:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90006070:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006072:	f89d 300e 	ldrb.w	r3, [sp, #14]
90006076:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006078:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000607c:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000607e:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006080:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006084:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006086:	f89d 200f 	ldrb.w	r2, [sp, #15]
9000608a:	4313      	orrs	r3, r2
9000608c:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000608e:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006090:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90006094:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90006098:	020a      	lsls	r2, r1, #8
9000609a:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000609e:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060a0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900060a4:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060a6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060aa:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060ac:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900060b0:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060b2:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060b4:	f89d 1018 	ldrb.w	r1, [sp, #24]
900060b8:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060ba:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060bc:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900060be:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900060c2:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900060c4:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900060c8:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060ca:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900060ce:	f89d 301d 	ldrb.w	r3, [sp, #29]
900060d2:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900060d4:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900060d6:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900060d8:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900060dc:	6625      	str	r5, [r4, #96]	; 0x60
900060de:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060e0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900060e4:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900060e6:	021b      	lsls	r3, r3, #8
900060e8:	f89d 101b 	ldrb.w	r1, [sp, #27]
900060ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
900060f0:	430b      	orrs	r3, r1
900060f2:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900060f4:	f89d 3019 	ldrb.w	r3, [sp, #25]
900060f8:	4313      	orrs	r3, r2
900060fa:	6163      	str	r3, [r4, #20]
}
900060fc:	b008      	add	sp, #32
900060fe:	bd70      	pop	{r4, r5, r6, pc}
90006100:	f04f 31ff 	mov.w	r1, #4294967295
90006104:	e768      	b.n	90005fd8 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
90006106:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
9000610a:	e7f7      	b.n	900060fc <FT5336_GetMultiTouchState+0x148>

9000610c <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
9000610c:	3018      	adds	r0, #24
9000610e:	f000 b84d 	b.w	900061ac <ft5336_gest_id>
90006112:	bf00      	nop

90006114 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90006114:	2101      	movs	r1, #1
90006116:	3018      	adds	r0, #24
90006118:	f000 b8b4 	b.w	90006284 <ft5336_g_mode>

9000611c <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
9000611c:	2100      	movs	r1, #0
9000611e:	3018      	adds	r0, #24
90006120:	f000 b8b0 	b.w	90006284 <ft5336_g_mode>

90006124 <FT5336_Init>:
{
90006124:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
90006126:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
9000612a:	b98d      	cbnz	r5, 90006150 <FT5336_Init+0x2c>
    pObj->IO.Init();
9000612c:	4606      	mov	r6, r0
9000612e:	4604      	mov	r4, r0
90006130:	f856 3b18 	ldr.w	r3, [r6], #24
90006134:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90006136:	4629      	mov	r1, r5
90006138:	4630      	mov	r0, r6
9000613a:	f000 f8a3 	bl	90006284 <ft5336_g_mode>
  if(ret != FT5336_OK)
9000613e:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90006140:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90006144:	bf18      	it	ne
90006146:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
90006148:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
9000614c:	4240      	negs	r0, r0
}
9000614e:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
90006150:	2000      	movs	r0, #0
}
90006152:	bd70      	pop	{r4, r5, r6, pc}

90006154 <FT5336_ClearIT>:
90006154:	2000      	movs	r0, #0
90006156:	4770      	bx	lr

90006158 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
90006158:	b1c0      	cbz	r0, 9000618c <FT5336_RegisterBusIO+0x34>
    pObj->IO.Address   = pIO->Address;
9000615a:	890a      	ldrh	r2, [r1, #8]
{
9000615c:	b430      	push	{r4, r5}
    pObj->IO.DeInit    = pIO->DeInit;
9000615e:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
90006162:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
90006164:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.WriteReg  = pIO->WriteReg;
90006168:	694a      	ldr	r2, [r1, #20]
9000616a:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
    pObj->Ctx.ReadReg  = ReadRegWrap;
9000616e:	4909      	ldr	r1, [pc, #36]	; (90006194 <FT5336_RegisterBusIO+0x3c>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90006170:	60c5      	str	r5, [r0, #12]
90006172:	e9c0 4204 	strd	r4, r2, [r0, #16]
    pObj->Ctx.WriteReg = WriteRegWrap;
90006176:	4a08      	ldr	r2, [pc, #32]	; (90006198 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.handle   = pObj;
90006178:	e9c0 1007 	strd	r1, r0, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
9000617c:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
9000617e:	b10b      	cbz	r3, 90006184 <FT5336_RegisterBusIO+0x2c>
}
90006180:	bc30      	pop	{r4, r5}
      ret = pObj->IO.Init();
90006182:	4718      	bx	r3
}
90006184:	f04f 30ff 	mov.w	r0, #4294967295
90006188:	bc30      	pop	{r4, r5}
9000618a:	4770      	bx	lr
9000618c:	f04f 30ff 	mov.w	r0, #4294967295
90006190:	4770      	bx	lr
90006192:	bf00      	nop
90006194:	90005ed5 	.word	0x90005ed5
90006198:	90005ee5 	.word	0x90005ee5

9000619c <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
9000619c:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
9000619e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900061a2:	46a4      	mov	ip, r4
}
900061a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061a8:	4760      	bx	ip
900061aa:	bf00      	nop

900061ac <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900061ac:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061ae:	2301      	movs	r3, #1
{
900061b0:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061b2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900061b6:	4619      	mov	r1, r3
900061b8:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
900061ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061be:	4760      	bx	ip

900061c0 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
900061c0:	b538      	push	{r3, r4, r5, lr}
900061c2:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900061c4:	2301      	movs	r3, #1
900061c6:	2102      	movs	r1, #2
900061c8:	4622      	mov	r2, r4
900061ca:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
900061ce:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
900061d0:	b918      	cbnz	r0, 900061da <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
900061d2:	7823      	ldrb	r3, [r4, #0]
900061d4:	f003 030f 	and.w	r3, r3, #15
900061d8:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
900061da:	bd38      	pop	{r3, r4, r5, pc}

900061dc <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
900061dc:	b510      	push	{r4, lr}
900061de:	460c      	mov	r4, r1
900061e0:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900061e2:	2301      	movs	r3, #1
900061e4:	2191      	movs	r1, #145	; 0x91
{
900061e6:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900061ea:	f10d 0207 	add.w	r2, sp, #7
900061ee:	6804      	ldr	r4, [r0, #0]
900061f0:	6880      	ldr	r0, [r0, #8]
900061f2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
900061f4:	b002      	add	sp, #8
900061f6:	bd10      	pop	{r4, pc}

900061f8 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
900061f8:	b510      	push	{r4, lr}
900061fa:	460c      	mov	r4, r1
900061fc:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
900061fe:	2301      	movs	r3, #1
90006200:	2192      	movs	r1, #146	; 0x92
{
90006202:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006206:	f10d 0207 	add.w	r2, sp, #7
9000620a:	6804      	ldr	r4, [r0, #0]
9000620c:	6880      	ldr	r0, [r0, #8]
9000620e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90006210:	b002      	add	sp, #8
90006212:	bd10      	pop	{r4, pc}

90006214 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90006214:	b510      	push	{r4, lr}
90006216:	460c      	mov	r4, r1
90006218:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000621a:	2301      	movs	r3, #1
9000621c:	2193      	movs	r1, #147	; 0x93
{
9000621e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006222:	f10d 0207 	add.w	r2, sp, #7
90006226:	6804      	ldr	r4, [r0, #0]
90006228:	6880      	ldr	r0, [r0, #8]
9000622a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
9000622c:	b002      	add	sp, #8
9000622e:	bd10      	pop	{r4, pc}

90006230 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90006230:	b510      	push	{r4, lr}
90006232:	460c      	mov	r4, r1
90006234:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006236:	2301      	movs	r3, #1
90006238:	2194      	movs	r1, #148	; 0x94
{
9000623a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000623e:	f10d 0207 	add.w	r2, sp, #7
90006242:	6804      	ldr	r4, [r0, #0]
90006244:	6880      	ldr	r0, [r0, #8]
90006246:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90006248:	b002      	add	sp, #8
9000624a:	bd10      	pop	{r4, pc}

9000624c <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
9000624c:	b510      	push	{r4, lr}
9000624e:	460c      	mov	r4, r1
90006250:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006252:	2301      	movs	r3, #1
90006254:	2195      	movs	r1, #149	; 0x95
{
90006256:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000625a:	f10d 0207 	add.w	r2, sp, #7
9000625e:	6804      	ldr	r4, [r0, #0]
90006260:	6880      	ldr	r0, [r0, #8]
90006262:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90006264:	b002      	add	sp, #8
90006266:	bd10      	pop	{r4, pc}

90006268 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90006268:	b510      	push	{r4, lr}
9000626a:	460c      	mov	r4, r1
9000626c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000626e:	2301      	movs	r3, #1
90006270:	2196      	movs	r1, #150	; 0x96
{
90006272:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006276:	f10d 0207 	add.w	r2, sp, #7
9000627a:	6804      	ldr	r4, [r0, #0]
9000627c:	6880      	ldr	r0, [r0, #8]
9000627e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90006280:	b002      	add	sp, #8
90006282:	bd10      	pop	{r4, pc}

90006284 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90006284:	b510      	push	{r4, lr}
90006286:	460c      	mov	r4, r1
90006288:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
9000628a:	2301      	movs	r3, #1
9000628c:	21a4      	movs	r1, #164	; 0xa4
{
9000628e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90006292:	f10d 0207 	add.w	r2, sp, #7
90006296:	6804      	ldr	r4, [r0, #0]
90006298:	6880      	ldr	r0, [r0, #8]
9000629a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
9000629c:	b002      	add	sp, #8
9000629e:	bd10      	pop	{r4, pc}

900062a0 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900062a0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900062a2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
900062a6:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900062a8:	2301      	movs	r3, #1
900062aa:	46a4      	mov	ip, r4
900062ac:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
900062ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900062b2:	4760      	bx	ip

900062b4 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
900062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900062b6:	680b      	ldr	r3, [r1, #0]
{
900062b8:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900062ba:	4c2a      	ldr	r4, [pc, #168]	; (90006364 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
900062c0:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
900062c2:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
900062c4:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062c6:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
900062c8:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
900062ca:	2301      	movs	r3, #1
900062cc:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
900062ce:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062d0:	f005 fd38 	bl	9000bd44 <HAL_SDRAM_SendCommand>
900062d4:	2800      	cmp	r0, #0
900062d6:	d142      	bne.n	9000635e <MT48LC4M32B2_Init+0xaa>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
900062d8:	f000 ff46 	bl	90007168 <HAL_GetTick>
900062dc:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
900062de:	f000 ff43 	bl	90007168 <HAL_GetTick>
900062e2:	4286      	cmp	r6, r0
900062e4:	d0fb      	beq.n	900062de <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900062e6:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
900062e8:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
900062ea:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062ec:	491d      	ldr	r1, [pc, #116]	; (90006364 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
900062ee:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
900062f0:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
900062f2:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062f4:	4638      	mov	r0, r7
900062f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
900062fa:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
900062fc:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
900062fe:	f005 fd21 	bl	9000bd44 <HAL_SDRAM_SendCommand>
90006302:	bb60      	cbnz	r0, 9000635e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006304:	4917      	ldr	r1, [pc, #92]	; (90006364 <MT48LC4M32B2_Init+0xb0>)
  Command.CommandMode            = RefreshMode;
90006306:	e9d5 3200 	ldrd	r3, r2, [r5]
  Command.ModeRegisterDefinition = 0;
9000630a:	60e0      	str	r0, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000630c:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
9000630e:	e9c4 2300 	strd	r2, r3, [r4]
  Command.AutoRefreshNumber      = 8;
90006312:	2308      	movs	r3, #8
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006314:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 8;
90006318:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
9000631a:	f005 fd13 	bl	9000bd44 <HAL_SDRAM_SendCommand>
9000631e:	b9f0      	cbnz	r0, 9000635e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006320:	4910      	ldr	r1, [pc, #64]	; (90006364 <MT48LC4M32B2_Init+0xb0>)
90006322:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90006324:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90006328:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
9000632a:	696a      	ldr	r2, [r5, #20]
9000632c:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
9000632e:	69aa      	ldr	r2, [r5, #24]
90006330:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90006332:	69ea      	ldr	r2, [r5, #28]
90006334:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90006336:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90006338:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
9000633a:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
9000633c:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006340:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90006344:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90006346:	f005 fcfd 	bl	9000bd44 <HAL_SDRAM_SendCommand>
9000634a:	b940      	cbnz	r0, 9000635e <MT48LC4M32B2_Init+0xaa>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
9000634c:	68a9      	ldr	r1, [r5, #8]
9000634e:	4638      	mov	r0, r7
90006350:	f005 fd18 	bl	9000bd84 <HAL_SDRAM_ProgramRefreshRate>
90006354:	3800      	subs	r0, #0
90006356:	bf18      	it	ne
90006358:	2001      	movne	r0, #1
9000635a:	4240      	negs	r0, r0
}
9000635c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
9000635e:	f04f 30ff 	mov.w	r0, #4294967295
}
90006362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90006364:	2400b40c 	.word	0x2400b40c

90006368 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90006368:	4a10      	ldr	r2, [pc, #64]	; (900063ac <BSP_I2C4_DeInit+0x44>)
{
9000636a:	b508      	push	{r3, lr}
  I2c4InitCounter--;
9000636c:	6813      	ldr	r3, [r2, #0]
9000636e:	3b01      	subs	r3, #1
90006370:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90006372:	b10b      	cbz	r3, 90006378 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90006374:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90006376:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90006378:	f44f 5180 	mov.w	r1, #4096	; 0x1000
9000637c:	480c      	ldr	r0, [pc, #48]	; (900063b0 <BSP_I2C4_DeInit+0x48>)
9000637e:	f001 faaf 	bl	900078e0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90006382:	480b      	ldr	r0, [pc, #44]	; (900063b0 <BSP_I2C4_DeInit+0x48>)
90006384:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90006388:	f001 faaa 	bl	900078e0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
9000638c:	4a09      	ldr	r2, [pc, #36]	; (900063b4 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
9000638e:	480a      	ldr	r0, [pc, #40]	; (900063b8 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90006390:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90006394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90006398:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
9000639c:	f001 fd56 	bl	90007e4c <HAL_I2C_DeInit>
900063a0:	2800      	cmp	r0, #0
900063a2:	d0e7      	beq.n	90006374 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
900063a4:	f06f 0007 	mvn.w	r0, #7
}
900063a8:	bd08      	pop	{r3, pc}
900063aa:	bf00      	nop
900063ac:	2400b41c 	.word	0x2400b41c
900063b0:	58020c00 	.word	0x58020c00
900063b4:	58024400 	.word	0x58024400
900063b8:	2400be24 	.word	0x2400be24

900063bc <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
900063bc:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
900063be:	2201      	movs	r2, #1
{
900063c0:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
900063c2:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
900063c6:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
900063ca:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
900063ce:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
900063d2:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
900063d4:	f001 fce2 	bl	90007d9c <HAL_I2C_Init>
900063d8:	b108      	cbz	r0, 900063de <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
900063da:	2001      	movs	r0, #1
}
900063dc:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
900063de:	4601      	mov	r1, r0
900063e0:	4620      	mov	r0, r4
900063e2:	f001 fff1 	bl	900083c8 <HAL_I2CEx_ConfigAnalogFilter>
900063e6:	2800      	cmp	r0, #0
900063e8:	d1f7      	bne.n	900063da <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
900063ea:	4601      	mov	r1, r0
900063ec:	4620      	mov	r0, r4
900063ee:	f002 f815 	bl	9000841c <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
900063f2:	3800      	subs	r0, #0
900063f4:	bf18      	it	ne
900063f6:	2001      	movne	r0, #1
}
900063f8:	bd10      	pop	{r4, pc}
900063fa:	bf00      	nop

900063fc <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
900063fc:	4b99      	ldr	r3, [pc, #612]	; (90006664 <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
900063fe:	489a      	ldr	r0, [pc, #616]	; (90006668 <BSP_I2C4_Init+0x26c>)
90006400:	4a9a      	ldr	r2, [pc, #616]	; (9000666c <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
90006402:	6819      	ldr	r1, [r3, #0]
{
90006404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90006408:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
9000640a:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
9000640c:	9103      	str	r1, [sp, #12]
9000640e:	b119      	cbz	r1, 90006418 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
90006410:	2000      	movs	r0, #0
}
90006412:	b01f      	add	sp, #124	; 0x7c
90006414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90006418:	2201      	movs	r2, #1
9000641a:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
9000641c:	f001 ffce 	bl	900083bc <HAL_I2C_GetState>
90006420:	2800      	cmp	r0, #0
90006422:	d1f5      	bne.n	90006410 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006424:	4c92      	ldr	r4, [pc, #584]	; (90006670 <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006426:	f44f 5080 	mov.w	r0, #4096	; 0x1000
9000642a:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
9000642c:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
9000642e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006432:	2600      	movs	r6, #0
90006434:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90006436:	f043 0308 	orr.w	r3, r3, #8
9000643a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
9000643e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90006442:	f003 0308 	and.w	r3, r3, #8
90006446:	9315      	str	r3, [sp, #84]	; 0x54
90006448:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000644a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
9000644e:	f043 0308 	orr.w	r3, r3, #8
90006452:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90006456:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
9000645a:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000645c:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90006460:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90006464:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90006466:	a918      	add	r1, sp, #96	; 0x60
90006468:	4882      	ldr	r0, [pc, #520]	; (90006674 <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
9000646a:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
9000646c:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90006470:	f001 f904 	bl	9000767c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90006474:	2312      	movs	r3, #18
90006476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
9000647a:	a918      	add	r1, sp, #96	; 0x60
9000647c:	487d      	ldr	r0, [pc, #500]	; (90006674 <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
9000647e:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90006480:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90006484:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90006488:	f001 f8f8 	bl	9000767c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
9000648c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90006490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90006494:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90006498:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
9000649c:	f003 0380 	and.w	r3, r3, #128	; 0x80
900064a0:	9317      	str	r3, [sp, #92]	; 0x5c
900064a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
900064a4:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
900064a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
900064ac:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
900064b0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
900064b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
900064b8:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900064bc:	f004 fca2 	bl	9000ae04 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
900064c0:	2800      	cmp	r0, #0
900064c2:	f000 81f6 	beq.w	900068b2 <BSP_I2C4_Init+0x4b6>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900064c6:	4b6c      	ldr	r3, [pc, #432]	; (90006678 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
900064c8:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900064cc:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900064ce:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900064d2:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 90006680 <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900064d6:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900064d8:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
900064dc:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
900064de:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900064e0:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900064e4:	f5c3 7cc3 	rsb	ip, r3, #390	; 0x186
900064e8:	4b64      	ldr	r3, [pc, #400]	; (9000667c <BSP_I2C4_Init+0x280>)
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
900064ea:	f1c2 0432 	rsb	r4, r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
900064ee:	0079      	lsls	r1, r7, #1
900064f0:	681b      	ldr	r3, [r3, #0]
900064f2:	ea2c 7cec 	bic.w	ip, ip, ip, asr #31
900064f6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
900064fa:	9113      	str	r1, [sp, #76]	; 0x4c
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
900064fc:	4699      	mov	r9, r3
900064fe:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90006500:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90006504:	46b8      	mov	r8, r7
90006506:	eb07 0347 	add.w	r3, r7, r7, lsl #1
9000650a:	bf94      	ite	ls
9000650c:	2101      	movls	r1, #1
9000650e:	2100      	movhi	r1, #0
90006510:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90006514:	f001 0101 	and.w	r1, r1, #1
90006518:	eb07 0287 	add.w	r2, r7, r7, lsl #2
9000651c:	bf38      	it	cc
9000651e:	2100      	movcc	r1, #0
90006520:	429c      	cmp	r4, r3
90006522:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90006526:	9105      	str	r1, [sp, #20]
90006528:	bf8c      	ite	hi
9000652a:	2100      	movhi	r1, #0
9000652c:	2101      	movls	r1, #1
9000652e:	459c      	cmp	ip, r3
90006530:	bf38      	it	cc
90006532:	2100      	movcc	r1, #0
90006534:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90006538:	9106      	str	r1, [sp, #24]
9000653a:	eb07 0142 	add.w	r1, r7, r2, lsl #1
9000653e:	9104      	str	r1, [sp, #16]
90006540:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90006544:	9111      	str	r1, [sp, #68]	; 0x44
90006546:	bf94      	ite	ls
90006548:	2101      	movls	r1, #1
9000654a:	2100      	movhi	r1, #0
9000654c:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
90006550:	f001 0e01 	and.w	lr, r1, #1
90006554:	bf38      	it	cc
90006556:	f04f 0e00 	movcc.w	lr, #0
9000655a:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
9000655c:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90006560:	f8cd e01c 	str.w	lr, [sp, #28]
90006564:	bf8c      	ite	hi
90006566:	f04f 0e00 	movhi.w	lr, #0
9000656a:	f04f 0e01 	movls.w	lr, #1
9000656e:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006570:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90006572:	bf38      	it	cc
90006574:	f04f 0e00 	movcc.w	lr, #0
90006578:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
9000657c:	bf98      	it	ls
9000657e:	2101      	movls	r1, #1
90006580:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90006584:	f8cd e020 	str.w	lr, [sp, #32]
90006588:	f001 0101 	and.w	r1, r1, #1
9000658c:	bf38      	it	cc
9000658e:	2100      	movcc	r1, #0
90006590:	4284      	cmp	r4, r0
90006592:	9109      	str	r1, [sp, #36]	; 0x24
90006594:	4601      	mov	r1, r0
90006596:	bf8c      	ite	hi
90006598:	2000      	movhi	r0, #0
9000659a:	2001      	movls	r0, #1
9000659c:	458c      	cmp	ip, r1
9000659e:	bf38      	it	cc
900065a0:	2000      	movcc	r0, #0
900065a2:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
900065a6:	900b      	str	r0, [sp, #44]	; 0x2c
900065a8:	bf94      	ite	ls
900065aa:	2001      	movls	r0, #1
900065ac:	2000      	movhi	r0, #0
900065ae:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
900065b2:	f000 0001 	and.w	r0, r0, #1
900065b6:	bf38      	it	cc
900065b8:	2000      	movcc	r0, #0
900065ba:	900c      	str	r0, [sp, #48]	; 0x30
900065bc:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
900065c0:	4284      	cmp	r4, r0
900065c2:	bf8c      	ite	hi
900065c4:	f04f 0e00 	movhi.w	lr, #0
900065c8:	f04f 0e01 	movls.w	lr, #1
900065cc:	4584      	cmp	ip, r0
900065ce:	bf38      	it	cc
900065d0:	f04f 0e00 	movcc.w	lr, #0
900065d4:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
900065d8:	4670      	mov	r0, lr
900065da:	bf94      	ite	ls
900065dc:	2001      	movls	r0, #1
900065de:	2000      	movhi	r0, #0
900065e0:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
900065e4:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
900065e8:	f04f 0e00 	mov.w	lr, #0
900065ec:	f000 0001 	and.w	r0, r0, #1
900065f0:	bf38      	it	cc
900065f2:	2000      	movcc	r0, #0
900065f4:	900e      	str	r0, [sp, #56]	; 0x38
900065f6:	9804      	ldr	r0, [sp, #16]
900065f8:	4284      	cmp	r4, r0
900065fa:	4602      	mov	r2, r0
900065fc:	bf8c      	ite	hi
900065fe:	2200      	movhi	r2, #0
90006600:	2201      	movls	r2, #1
90006602:	4584      	cmp	ip, r0
90006604:	bf38      	it	cc
90006606:	2200      	movcc	r2, #0
90006608:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
9000660c:	920f      	str	r2, [sp, #60]	; 0x3c
9000660e:	bf94      	ite	ls
90006610:	2201      	movls	r2, #1
90006612:	2200      	movhi	r2, #0
90006614:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
90006618:	f002 0201 	and.w	r2, r2, #1
9000661c:	bf38      	it	cc
9000661e:	2200      	movcc	r2, #0
90006620:	9210      	str	r2, [sp, #64]	; 0x40
90006622:	9a11      	ldr	r2, [sp, #68]	; 0x44
90006624:	4294      	cmp	r4, r2
90006626:	4613      	mov	r3, r2
90006628:	bf8c      	ite	hi
9000662a:	2300      	movhi	r3, #0
9000662c:	2301      	movls	r3, #1
9000662e:	4594      	cmp	ip, r2
90006630:	bf38      	it	cc
90006632:	2300      	movcc	r3, #0
90006634:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90006638:	9311      	str	r3, [sp, #68]	; 0x44
9000663a:	bf94      	ite	ls
9000663c:	2301      	movls	r3, #1
9000663e:	2300      	movhi	r3, #0
90006640:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90006644:	f003 0301 	and.w	r3, r3, #1
90006648:	bf38      	it	cc
9000664a:	2300      	movcc	r3, #0
9000664c:	9312      	str	r3, [sp, #72]	; 0x48
9000664e:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
90006652:	429c      	cmp	r4, r3
90006654:	bf8c      	ite	hi
90006656:	2200      	movhi	r2, #0
90006658:	2201      	movls	r2, #1
9000665a:	459c      	cmp	ip, r3
9000665c:	bf38      	it	cc
9000665e:	2200      	movcc	r2, #0
90006660:	9204      	str	r2, [sp, #16]
90006662:	e014      	b.n	9000668e <BSP_I2C4_Init+0x292>
90006664:	2400b41c 	.word	0x2400b41c
90006668:	2400be24 	.word	0x2400be24
9000666c:	58001c00 	.word	0x58001c00
90006670:	58024400 	.word	0x58024400
90006674:	58020c00 	.word	0x58020c00
90006678:	3b9aca00 	.word	0x3b9aca00
9000667c:	2400be20 	.word	0x2400be20
90006680:	2400b420 	.word	0x2400b420
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90006684:	f1be 0f10 	cmp.w	lr, #16
90006688:	44b8      	add	r8, r7
9000668a:	f000 826c 	beq.w	90006b66 <BSP_I2C4_Init+0x76a>
      if (tscldel >= (uint32_t)tscldel_min)
9000668e:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
90006692:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90006694:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
90006698:	d3f4      	bcc.n	90006684 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
9000669a:	ebbb 0205 	subs.w	r2, fp, r5
9000669e:	bf18      	it	ne
900066a0:	2201      	movne	r2, #1
900066a2:	2c00      	cmp	r4, #0
900066a4:	bf18      	it	ne
900066a6:	2200      	movne	r2, #0
900066a8:	2a00      	cmp	r2, #0
900066aa:	f040 824a 	bne.w	90006b42 <BSP_I2C4_Init+0x746>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
900066ae:	45bc      	cmp	ip, r7
900066b0:	bf34      	ite	cc
900066b2:	2200      	movcc	r2, #0
900066b4:	2201      	movcs	r2, #1
900066b6:	42bc      	cmp	r4, r7
900066b8:	bf88      	it	hi
900066ba:	2200      	movhi	r2, #0
            if(presc != prev_presc)
900066bc:	45ab      	cmp	fp, r5
900066be:	bf0c      	ite	eq
900066c0:	2200      	moveq	r2, #0
900066c2:	f002 0201 	andne.w	r2, r2, #1
900066c6:	2a00      	cmp	r2, #0
900066c8:	f000 80fd 	beq.w	900068c6 <BSP_I2C4_Init+0x4ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900066cc:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900066d0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900066d4:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900066d6:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900066da:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900066de:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900066e2:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900066e4:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900066e6:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900066e8:	f200 81a5 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
900066ec:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900066ee:	9906      	ldr	r1, [sp, #24]
900066f0:	45ab      	cmp	fp, r5
900066f2:	bf0c      	ite	eq
900066f4:	2100      	moveq	r1, #0
900066f6:	f001 0101 	andne.w	r1, r1, #1
900066fa:	2900      	cmp	r1, #0
900066fc:	f000 80ff 	beq.w	900068fe <BSP_I2C4_Init+0x502>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006700:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006704:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006708:	2003      	movs	r0, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000670a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000670e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006712:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006716:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006718:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000671a:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000671c:	f200 818b 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
90006720:	460a      	mov	r2, r1
90006722:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006724:	9908      	ldr	r1, [sp, #32]
90006726:	45ab      	cmp	fp, r5
90006728:	bf0c      	ite	eq
9000672a:	2100      	moveq	r1, #0
9000672c:	f001 0101 	andne.w	r1, r1, #1
90006730:	2900      	cmp	r1, #0
90006732:	f000 80ff 	beq.w	90006934 <BSP_I2C4_Init+0x538>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006736:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000673a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000673e:	2005      	movs	r0, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006740:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006744:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006748:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000674c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000674e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006750:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006752:	f200 8170 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
90006756:	460a      	mov	r2, r1
90006758:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000675a:	990b      	ldr	r1, [sp, #44]	; 0x2c
9000675c:	45ab      	cmp	fp, r5
9000675e:	bf0c      	ite	eq
90006760:	2100      	moveq	r1, #0
90006762:	f001 0101 	andne.w	r1, r1, #1
90006766:	2900      	cmp	r1, #0
90006768:	f000 80fe 	beq.w	90006968 <BSP_I2C4_Init+0x56c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000676c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006770:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006774:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006776:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000677a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000677e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006782:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006784:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006786:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006788:	f200 8155 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
9000678c:	460a      	mov	r2, r1
9000678e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006790:	990d      	ldr	r1, [sp, #52]	; 0x34
90006792:	45ab      	cmp	fp, r5
90006794:	bf0c      	ite	eq
90006796:	2100      	moveq	r1, #0
90006798:	f001 0101 	andne.w	r1, r1, #1
9000679c:	2900      	cmp	r1, #0
9000679e:	f000 80fd 	beq.w	9000699c <BSP_I2C4_Init+0x5a0>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067a2:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900067a6:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900067aa:	2009      	movs	r0, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067ac:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900067b0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067b4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900067b8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067ba:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900067bc:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900067be:	f200 813a 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
900067c2:	460a      	mov	r2, r1
900067c4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900067c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
900067c8:	45ab      	cmp	fp, r5
900067ca:	bf0c      	ite	eq
900067cc:	2100      	moveq	r1, #0
900067ce:	f001 0101 	andne.w	r1, r1, #1
900067d2:	2900      	cmp	r1, #0
900067d4:	f000 80fc 	beq.w	900069d0 <BSP_I2C4_Init+0x5d4>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067d8:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900067dc:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900067e0:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067e2:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900067e6:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067ea:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900067ee:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900067f0:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900067f2:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900067f4:	f200 811f 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
900067f8:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900067fa:	9e11      	ldr	r6, [sp, #68]	; 0x44
900067fc:	455d      	cmp	r5, fp
900067fe:	bf0c      	ite	eq
90006800:	2600      	moveq	r6, #0
90006802:	f006 0601 	andne.w	r6, r6, #1
90006806:	2e00      	cmp	r6, #0
90006808:	f000 80fb 	beq.w	90006a02 <BSP_I2C4_Init+0x606>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000680c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006810:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006814:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006816:	4650      	mov	r0, sl
90006818:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000681c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006820:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006824:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006826:	6091      	str	r1, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006828:	f200 8105 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
9000682c:	4631      	mov	r1, r6
9000682e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006830:	9e04      	ldr	r6, [sp, #16]
90006832:	455d      	cmp	r5, fp
90006834:	bf0c      	ite	eq
90006836:	2600      	moveq	r6, #0
90006838:	f006 0601 	andne.w	r6, r6, #1
9000683c:	2e00      	cmp	r6, #0
9000683e:	f000 817c 	beq.w	90006b3a <BSP_I2C4_Init+0x73e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006842:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006846:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000684a:	4650      	mov	r0, sl
9000684c:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90006850:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006854:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006858:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000685a:	f04f 030f 	mov.w	r3, #15
9000685e:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006860:	f200 80e9 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
90006864:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
90006866:	e70d      	b.n	90006684 <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90006868:	9a07      	ldr	r2, [sp, #28]
9000686a:	9b08      	ldr	r3, [sp, #32]
9000686c:	3214      	adds	r2, #20
9000686e:	3301      	adds	r3, #1
90006870:	9207      	str	r2, [sp, #28]
90006872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90006874:	9308      	str	r3, [sp, #32]
90006876:	4293      	cmp	r3, r2
90006878:	f040 80ff 	bne.w	90006a7a <BSP_I2C4_Init+0x67e>
        if (idx < I2C_VALID_TIMING_NBR)
9000687c:	297f      	cmp	r1, #127	; 0x7f
9000687e:	d818      	bhi.n	900068b2 <BSP_I2C4_Init+0x4b6>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90006880:	eb01 0381 	add.w	r3, r1, r1, lsl #2
90006884:	990b      	ldr	r1, [sp, #44]	; 0x2c
90006886:	eb01 0283 	add.w	r2, r1, r3, lsl #2
9000688a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
9000688e:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
90006890:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90006892:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90006894:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
90006898:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
9000689c:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900068a0:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900068a2:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900068a4:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900068a6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900068aa:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900068ac:	430b      	orrs	r3, r1
900068ae:	4313      	orrs	r3, r2
900068b0:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900068b2:	9903      	ldr	r1, [sp, #12]
900068b4:	48b5      	ldr	r0, [pc, #724]	; (90006b8c <BSP_I2C4_Init+0x790>)
900068b6:	f7ff fd81 	bl	900063bc <MX_I2C4_Init>
900068ba:	2800      	cmp	r0, #0
900068bc:	f43f ada8 	beq.w	90006410 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
900068c0:	f06f 0007 	mvn.w	r0, #7
  return ret;
900068c4:	e5a5      	b.n	90006412 <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
900068c6:	4632      	mov	r2, r6
900068c8:	9905      	ldr	r1, [sp, #20]
900068ca:	45ab      	cmp	fp, r5
900068cc:	bf0c      	ite	eq
900068ce:	2100      	moveq	r1, #0
900068d0:	f001 0101 	andne.w	r1, r1, #1
900068d4:	2900      	cmp	r1, #0
900068d6:	f43f af0a 	beq.w	900066ee <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900068da:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900068de:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900068e2:	2002      	movs	r0, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900068e4:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900068e8:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900068ec:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900068f0:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900068f2:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900068f4:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900068f6:	f200 809e 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
900068fa:	460a      	mov	r2, r1
900068fc:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900068fe:	9907      	ldr	r1, [sp, #28]
90006900:	45ab      	cmp	fp, r5
90006902:	bf0c      	ite	eq
90006904:	2100      	moveq	r1, #0
90006906:	f001 0101 	andne.w	r1, r1, #1
9000690a:	2900      	cmp	r1, #0
9000690c:	f43f af0a 	beq.w	90006724 <BSP_I2C4_Init+0x328>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006910:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006914:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006918:	2004      	movs	r0, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000691a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000691e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006922:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006926:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006928:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000692a:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000692c:	f200 8083 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
90006930:	460a      	mov	r2, r1
90006932:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006934:	9909      	ldr	r1, [sp, #36]	; 0x24
90006936:	45ab      	cmp	fp, r5
90006938:	bf0c      	ite	eq
9000693a:	2100      	moveq	r1, #0
9000693c:	f001 0101 	andne.w	r1, r1, #1
90006940:	2900      	cmp	r1, #0
90006942:	f43f af0a 	beq.w	9000675a <BSP_I2C4_Init+0x35e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006946:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000694a:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000694e:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006950:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006954:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006958:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000695c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000695e:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006960:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006962:	d868      	bhi.n	90006a36 <BSP_I2C4_Init+0x63a>
90006964:	460a      	mov	r2, r1
90006966:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006968:	990c      	ldr	r1, [sp, #48]	; 0x30
9000696a:	45ab      	cmp	fp, r5
9000696c:	bf0c      	ite	eq
9000696e:	2100      	moveq	r1, #0
90006970:	f001 0101 	andne.w	r1, r1, #1
90006974:	2900      	cmp	r1, #0
90006976:	f43f af0b 	beq.w	90006790 <BSP_I2C4_Init+0x394>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000697a:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000697e:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006982:	2008      	movs	r0, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006984:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006988:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000698c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006990:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006992:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006994:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006996:	d84e      	bhi.n	90006a36 <BSP_I2C4_Init+0x63a>
90006998:	460a      	mov	r2, r1
9000699a:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000699c:	990e      	ldr	r1, [sp, #56]	; 0x38
9000699e:	45ab      	cmp	fp, r5
900069a0:	bf0c      	ite	eq
900069a2:	2100      	moveq	r1, #0
900069a4:	f001 0101 	andne.w	r1, r1, #1
900069a8:	2900      	cmp	r1, #0
900069aa:	f43f af0c 	beq.w	900067c6 <BSP_I2C4_Init+0x3ca>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069ae:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900069b2:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900069b6:	200a      	movs	r0, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069b8:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900069bc:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069c0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900069c4:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069c6:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900069c8:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900069ca:	d834      	bhi.n	90006a36 <BSP_I2C4_Init+0x63a>
900069cc:	460a      	mov	r2, r1
900069ce:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900069d0:	9910      	ldr	r1, [sp, #64]	; 0x40
900069d2:	45ab      	cmp	fp, r5
900069d4:	bf0c      	ite	eq
900069d6:	2100      	moveq	r1, #0
900069d8:	f001 0101 	andne.w	r1, r1, #1
900069dc:	2900      	cmp	r1, #0
900069de:	f000 80ae 	beq.w	90006b3e <BSP_I2C4_Init+0x742>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069e2:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900069e6:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900069ea:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069ec:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900069f0:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069f4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900069f8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900069fa:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900069fc:	6053      	str	r3, [r2, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900069fe:	d81a      	bhi.n	90006a36 <BSP_I2C4_Init+0x63a>
90006a00:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90006a02:	9e12      	ldr	r6, [sp, #72]	; 0x48
90006a04:	455d      	cmp	r5, fp
90006a06:	bf0c      	ite	eq
90006a08:	2600      	moveq	r6, #0
90006a0a:	f006 0601 	andne.w	r6, r6, #1
90006a0e:	2e00      	cmp	r6, #0
90006a10:	f43f af0e 	beq.w	90006830 <BSP_I2C4_Init+0x434>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006a14:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006a18:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006a1c:	4650      	mov	r0, sl
90006a1e:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90006a22:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006a26:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006a2a:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006a2c:	f04f 030e 	mov.w	r3, #14
90006a30:	6093      	str	r3, [r2, #8]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006a32:	f67f af17 	bls.w	90006864 <BSP_I2C4_Init+0x468>
90006a36:	4b56      	ldr	r3, [pc, #344]	; (90006b90 <BSP_I2C4_Init+0x794>)
90006a38:	900b      	str	r0, [sp, #44]	; 0x2c
90006a3a:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
90006a3e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90006a42:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90006a44:	f240 4201 	movw	r2, #1025	; 0x401
90006a48:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006a4c:	f640 1ac4 	movw	sl, #2500	; 0x9c4
90006a50:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006a52:	f240 4b12 	movw	fp, #1042	; 0x412
90006a56:	920d      	str	r2, [sp, #52]	; 0x34
90006a58:	9a02      	ldr	r2, [sp, #8]
90006a5a:	4296      	cmp	r6, r2
90006a5c:	bf38      	it	cc
90006a5e:	4616      	movcc	r6, r2
90006a60:	4a4c      	ldr	r2, [pc, #304]	; (90006b94 <BSP_I2C4_Init+0x798>)
90006a62:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006a64:	2200      	movs	r2, #0
90006a66:	9208      	str	r2, [sp, #32]
90006a68:	f04f 32ff 	mov.w	r2, #4294967295
90006a6c:	4611      	mov	r1, r2
90006a6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
90006a72:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
90006a76:	920c      	str	r2, [sp, #48]	; 0x30
90006a78:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90006a7a:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90006a7c:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90006a80:	6818      	ldr	r0, [r3, #0]
90006a82:	9b02      	ldr	r3, [sp, #8]
90006a84:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90006a88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90006a8a:	1a1b      	subs	r3, r3, r0
90006a8c:	ea4f 0943 	mov.w	r9, r3, lsl #1
90006a90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90006a92:	eb03 0e00 	add.w	lr, r3, r0
90006a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90006a98:	4403      	add	r3, r0
90006a9a:	9309      	str	r3, [sp, #36]	; 0x24
90006a9c:	e006      	b.n	90006aac <BSP_I2C4_Init+0x6b0>
90006a9e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
90006aa2:	4486      	add	lr, r0
90006aa4:	eba9 0900 	sub.w	r9, r9, r0
90006aa8:	f43f aede 	beq.w	90006868 <BSP_I2C4_Init+0x46c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90006aac:	f240 5214 	movw	r2, #1300	; 0x514
90006ab0:	f8cd 8004 	str.w	r8, [sp, #4]
90006ab4:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90006ab8:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
90006abc:	4596      	cmp	lr, r2
90006abe:	d9ee      	bls.n	90006a9e <BSP_I2C4_Init+0x6a2>
90006ac0:	9a02      	ldr	r2, [sp, #8]
90006ac2:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
90006ac6:	d2ea      	bcs.n	90006a9e <BSP_I2C4_Init+0x6a2>
90006ac8:	f640 0c34 	movw	ip, #2100	; 0x834
90006acc:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006ace:	f8cd 9018 	str.w	r9, [sp, #24]
90006ad2:	2200      	movs	r2, #0
90006ad4:	ebac 0c03 	sub.w	ip, ip, r3
90006ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
90006ada:	4689      	mov	r9, r1
90006adc:	4473      	add	r3, lr
90006ade:	e9cd e804 	strd	lr, r8, [sp, #16]
90006ae2:	f8dd 8020 	ldr.w	r8, [sp, #32]
90006ae6:	f8dd e01c 	ldr.w	lr, [sp, #28]
90006aea:	e005      	b.n	90006af8 <BSP_I2C4_Init+0x6fc>
90006aec:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90006af0:	4403      	add	r3, r0
90006af2:	eba4 0400 	sub.w	r4, r4, r0
90006af6:	d01a      	beq.n	90006b2e <BSP_I2C4_Init+0x732>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006af8:	eb0c 0103 	add.w	r1, ip, r3
90006afc:	4617      	mov	r7, r2
90006afe:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90006b02:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90006b04:	42b1      	cmp	r1, r6
90006b06:	d9f1      	bls.n	90006aec <BSP_I2C4_Init+0x6f0>
90006b08:	455d      	cmp	r5, fp
90006b0a:	d8ef      	bhi.n	90006aec <BSP_I2C4_Init+0x6f0>
            if (error < 0)
90006b0c:	ea33 0123 	bics.w	r1, r3, r3, asr #32
90006b10:	bf28      	it	cs
90006b12:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
90006b14:	458a      	cmp	sl, r1
90006b16:	d9e9      	bls.n	90006aec <BSP_I2C4_Init+0x6f0>
              I2c_valid_timing[count].sclh = sclh;
90006b18:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006b1a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
90006b1e:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
90006b20:	46c1      	mov	r9, r8
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006b22:	4403      	add	r3, r0
90006b24:	eba4 0400 	sub.w	r4, r4, r0
              I2c_valid_timing[count].sclh = sclh;
90006b28:	e9ce 7103 	strd	r7, r1, [lr, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90006b2c:	d1e4      	bne.n	90006af8 <BSP_I2C4_Init+0x6fc>
90006b2e:	4649      	mov	r1, r9
90006b30:	f8dd 9018 	ldr.w	r9, [sp, #24]
90006b34:	e9dd e804 	ldrd	lr, r8, [sp, #16]
90006b38:	e7b1      	b.n	90006a9e <BSP_I2C4_Init+0x6a2>
90006b3a:	460e      	mov	r6, r1
90006b3c:	e5a2      	b.n	90006684 <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90006b3e:	4611      	mov	r1, r2
90006b40:	e65b      	b.n	900067fa <BSP_I2C4_Init+0x3fe>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006b42:	eb09 0189 	add.w	r1, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90006b46:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006b4a:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006b4c:	f84a 5021 	str.w	r5, [sl, r1, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006b50:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006b54:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90006b58:	6088      	str	r0, [r1, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90006b5a:	4650      	mov	r0, sl
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90006b5c:	604b      	str	r3, [r1, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90006b5e:	f63f af6a 	bhi.w	90006a36 <BSP_I2C4_Init+0x63a>
90006b62:	46ab      	mov	fp, r5
90006b64:	e6b0      	b.n	900068c8 <BSP_I2C4_Init+0x4cc>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
90006b66:	3501      	adds	r5, #1
90006b68:	9b02      	ldr	r3, [sp, #8]
90006b6a:	2d10      	cmp	r5, #16
90006b6c:	441f      	add	r7, r3
90006b6e:	f47f acc7 	bne.w	90006500 <BSP_I2C4_Init+0x104>
90006b72:	b126      	cbz	r6, 90006b7e <BSP_I2C4_Init+0x782>
90006b74:	4b06      	ldr	r3, [pc, #24]	; (90006b90 <BSP_I2C4_Init+0x794>)
90006b76:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
90006b7a:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90006b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90006b80:	2b00      	cmp	r3, #0
90006b82:	f43f ae96 	beq.w	900068b2 <BSP_I2C4_Init+0x4b6>
90006b86:	4b03      	ldr	r3, [pc, #12]	; (90006b94 <BSP_I2C4_Init+0x798>)
90006b88:	930b      	str	r3, [sp, #44]	; 0x2c
90006b8a:	e75a      	b.n	90006a42 <BSP_I2C4_Init+0x646>
90006b8c:	2400be24 	.word	0x2400be24
90006b90:	2400be20 	.word	0x2400be20
90006b94:	2400b420 	.word	0x2400b420

90006b98 <BSP_I2C4_WriteReg>:
{
90006b98:	b530      	push	{r4, r5, lr}
90006b9a:	4614      	mov	r4, r2
90006b9c:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90006b9e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90006ba2:	460a      	mov	r2, r1
90006ba4:	9301      	str	r3, [sp, #4]
90006ba6:	4601      	mov	r1, r0
90006ba8:	2301      	movs	r3, #1
90006baa:	4809      	ldr	r0, [pc, #36]	; (90006bd0 <BSP_I2C4_WriteReg+0x38>)
90006bac:	9502      	str	r5, [sp, #8]
90006bae:	9400      	str	r4, [sp, #0]
90006bb0:	f001 f966 	bl	90007e80 <HAL_I2C_Mem_Write>
90006bb4:	b908      	cbnz	r0, 90006bba <BSP_I2C4_WriteReg+0x22>
}
90006bb6:	b005      	add	sp, #20
90006bb8:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006bba:	4805      	ldr	r0, [pc, #20]	; (90006bd0 <BSP_I2C4_WriteReg+0x38>)
90006bbc:	f001 fc02 	bl	900083c4 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90006bc0:	2804      	cmp	r0, #4
90006bc2:	bf0c      	ite	eq
90006bc4:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90006bc8:	f06f 0003 	mvnne.w	r0, #3
90006bcc:	e7f3      	b.n	90006bb6 <BSP_I2C4_WriteReg+0x1e>
90006bce:	bf00      	nop
90006bd0:	2400be24 	.word	0x2400be24

90006bd4 <BSP_I2C4_ReadReg>:
{
90006bd4:	b530      	push	{r4, r5, lr}
90006bd6:	4614      	mov	r4, r2
90006bd8:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90006bda:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90006bde:	460a      	mov	r2, r1
90006be0:	9301      	str	r3, [sp, #4]
90006be2:	4601      	mov	r1, r0
90006be4:	2301      	movs	r3, #1
90006be6:	4809      	ldr	r0, [pc, #36]	; (90006c0c <BSP_I2C4_ReadReg+0x38>)
90006be8:	9502      	str	r5, [sp, #8]
90006bea:	9400      	str	r4, [sp, #0]
90006bec:	f001 fa7c 	bl	900080e8 <HAL_I2C_Mem_Read>
90006bf0:	b908      	cbnz	r0, 90006bf6 <BSP_I2C4_ReadReg+0x22>
}
90006bf2:	b005      	add	sp, #20
90006bf4:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
90006bf6:	4805      	ldr	r0, [pc, #20]	; (90006c0c <BSP_I2C4_ReadReg+0x38>)
90006bf8:	f001 fbe4 	bl	900083c4 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90006bfc:	2804      	cmp	r0, #4
90006bfe:	bf0c      	ite	eq
90006c00:	f06f 0065 	mvneq.w	r0, #101	; 0x65
90006c04:	f06f 0003 	mvnne.w	r0, #3
90006c08:	e7f3      	b.n	90006bf2 <BSP_I2C4_ReadReg+0x1e>
90006c0a:	bf00      	nop
90006c0c:	2400be24 	.word	0x2400be24

90006c10 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
90006c10:	f000 baaa 	b.w	90007168 <HAL_GetTick>

90006c14 <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
90006c14:	b970      	cbnz	r0, 90006c34 <BSP_SDRAM_DeInit+0x20>
{
90006c16:	b510      	push	{r4, lr}
90006c18:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90006c1a:	4808      	ldr	r0, [pc, #32]	; (90006c3c <BSP_SDRAM_DeInit+0x28>)
90006c1c:	f005 f884 	bl	9000bd28 <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
90006c20:	207a      	movs	r0, #122	; 0x7a
90006c22:	f000 fb0b 	bl	9000723c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006c26:	4b06      	ldr	r3, [pc, #24]	; (90006c40 <BSP_SDRAM_DeInit+0x2c>)
90006c28:	4806      	ldr	r0, [pc, #24]	; (90006c44 <BSP_SDRAM_DeInit+0x30>)
90006c2a:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90006c2c:	f003 f99c 	bl	90009f68 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
90006c30:	4620      	mov	r0, r4
}
90006c32:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006c34:	f06f 0001 	mvn.w	r0, #1
}
90006c38:	4770      	bx	lr
90006c3a:	bf00      	nop
90006c3c:	2400be78 	.word	0x2400be78
90006c40:	52000040 	.word	0x52000040
90006c44:	2400beac 	.word	0x2400beac

90006c48 <MX_SDRAM_BANK2_Init>:
{
90006c48:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90006c4a:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90006c4c:	2200      	movs	r2, #0
{
90006c4e:	b089      	sub	sp, #36	; 0x24
  hsdram->Instance = FMC_SDRAM_DEVICE;
90006c50:	4c13      	ldr	r4, [pc, #76]	; (90006ca0 <MX_SDRAM_BANK2_Init+0x58>)
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90006c52:	6082      	str	r2, [r0, #8]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90006c54:	2540      	movs	r5, #64	; 0x40
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90006c56:	61c2      	str	r2, [r0, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
90006c58:	2307      	movs	r3, #7
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90006c5a:	6282      	str	r2, [r0, #40]	; 0x28
  sdram_timing.LoadToActiveDelay    = 2;
90006c5c:	2202      	movs	r2, #2
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
90006c5e:	60c1      	str	r1, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90006c60:	f44f 71c0 	mov.w	r1, #384	; 0x180
  sdram_timing.LoadToActiveDelay    = 2;
90006c64:	9200      	str	r2, [sp, #0]
  sdram_timing.RCDDelay             = 2;
90006c66:	9206      	str	r2, [sp, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006c68:	2201      	movs	r2, #1
  sdram_timing.ExitSelfRefreshDelay = 7;
90006c6a:	9301      	str	r3, [sp, #4]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
90006c6c:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006c6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90006c72:	6165      	str	r5, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006c74:	f44f 6500 	mov.w	r5, #2048	; 0x800
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90006c78:	6181      	str	r1, [r0, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006c7a:	4669      	mov	r1, sp
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90006c7c:	e9c0 5208 	strd	r5, r2, [r0, #32]
  sdram_timing.SelfRefreshTime      = 4;
90006c80:	2204      	movs	r2, #4
90006c82:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdram_timing.WriteRecoveryTime    = 2;
90006c86:	2202      	movs	r2, #2
90006c88:	2302      	movs	r3, #2
90006c8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
90006c8e:	4b05      	ldr	r3, [pc, #20]	; (90006ca4 <MX_SDRAM_BANK2_Init+0x5c>)
90006c90:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
90006c92:	f005 f81f 	bl	9000bcd4 <HAL_SDRAM_Init>
}
90006c96:	3800      	subs	r0, #0
90006c98:	bf18      	it	ne
90006c9a:	2001      	movne	r0, #1
90006c9c:	b009      	add	sp, #36	; 0x24
90006c9e:	bd30      	pop	{r4, r5, pc}
90006ca0:	2400be78 	.word	0x2400be78
90006ca4:	52004140 	.word	0x52004140

90006ca8 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
90006ca8:	2800      	cmp	r0, #0
90006caa:	f040 80d2 	bne.w	90006e52 <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
90006cae:	4b6c      	ldr	r3, [pc, #432]	; (90006e60 <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90006cb0:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90006cb2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006cb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
90006cba:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
90006cbc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
90006cc0:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
90006cc2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006cc6:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006cc8:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006ccc:	4c65      	ldr	r4, [pc, #404]	; (90006e64 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
90006cce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006cd2:	4e65      	ldr	r6, [pc, #404]	; (90006e68 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
90006cd4:	9201      	str	r2, [sp, #4]
90006cd6:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
90006cd8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006cdc:	f042 0201 	orr.w	r2, r2, #1
90006ce0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90006ce4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90006ce8:	f002 0201 	and.w	r2, r2, #1
90006cec:	9202      	str	r2, [sp, #8]
90006cee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90006cf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006cf4:	f042 0208 	orr.w	r2, r2, #8
90006cf8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006cfc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006d00:	f002 0208 	and.w	r2, r2, #8
90006d04:	9203      	str	r2, [sp, #12]
90006d06:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90006d08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006d0c:	f042 0210 	orr.w	r2, r2, #16
90006d10:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006d14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006d18:	f002 0210 	and.w	r2, r2, #16
90006d1c:	9204      	str	r2, [sp, #16]
90006d1e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90006d20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006d24:	f042 0220 	orr.w	r2, r2, #32
90006d28:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006d2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006d30:	f002 0220 	and.w	r2, r2, #32
90006d34:	9205      	str	r2, [sp, #20]
90006d36:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90006d38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006d3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90006d40:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006d44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006d48:	f002 0240 	and.w	r2, r2, #64	; 0x40
90006d4c:	9206      	str	r2, [sp, #24]
90006d4e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006d50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90006d54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90006d58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90006d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
90006d60:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006d62:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006d68:	e9cd 0108 	strd	r0, r1, [sp, #32]
90006d6c:	2001      	movs	r0, #1
90006d6e:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
90006d70:	9307      	str	r3, [sp, #28]
90006d72:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90006d74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
90006d78:	a908      	add	r1, sp, #32
90006d7a:	483c      	ldr	r0, [pc, #240]	; (90006e6c <BSP_SDRAM_Init+0x1c4>)
90006d7c:	f000 fc7e 	bl	9000767c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90006d80:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90006d84:	a908      	add	r1, sp, #32
90006d86:	483a      	ldr	r0, [pc, #232]	; (90006e70 <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
90006d88:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
90006d8a:	f000 fc77 	bl	9000767c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90006d8e:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90006d92:	a908      	add	r1, sp, #32
90006d94:	4837      	ldr	r0, [pc, #220]	; (90006e74 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
90006d96:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
90006d98:	f000 fc70 	bl	9000767c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006d9c:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90006da0:	a908      	add	r1, sp, #32
90006da2:	4835      	ldr	r0, [pc, #212]	; (90006e78 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
90006da4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
90006da6:	f000 fc69 	bl	9000767c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90006daa:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006dac:	a908      	add	r1, sp, #32
90006dae:	4833      	ldr	r0, [pc, #204]	; (90006e7c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
90006db0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
90006db2:	f000 fc63 	bl	9000767c <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90006db6:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006db8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006dbc:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
90006dc0:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
90006dc2:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
90006dc4:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
90006dc6:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90006dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
90006dcc:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
90006dce:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006dd0:	4a2b      	ldr	r2, [pc, #172]	; (90006e80 <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006dd2:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90006dd4:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90006dd6:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90006dd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90006ddc:	f640 0308 	movw	r3, #2056	; 0x808
90006de0:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90006de2:	2320      	movs	r3, #32
90006de4:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90006dea:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90006dee:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
90006df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90006df4:	f003 f8b8 	bl	90009f68 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
90006df8:	4620      	mov	r0, r4
90006dfa:	f003 f83b 	bl	90009e74 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
90006dfe:	462a      	mov	r2, r5
90006e00:	210f      	movs	r1, #15
90006e02:	207a      	movs	r0, #122	; 0x7a
90006e04:	f000 f9ce 	bl	900071a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90006e08:	207a      	movs	r0, #122	; 0x7a
90006e0a:	f000 fa09 	bl	90007220 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
90006e0e:	2210      	movs	r2, #16
90006e10:	2104      	movs	r1, #4
90006e12:	4630      	mov	r0, r6
90006e14:	f7ff ff18 	bl	90006c48 <MX_SDRAM_BANK2_Init>
90006e18:	b9f0      	cbnz	r0, 90006e58 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90006e1a:	491a      	ldr	r1, [pc, #104]	; (90006e84 <BSP_SDRAM_Init+0x1dc>)
90006e1c:	2208      	movs	r2, #8
90006e1e:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006e20:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90006e22:	e9c1 2300 	strd	r2, r3, [r1]
90006e26:	f240 6203 	movw	r2, #1539	; 0x603
90006e2a:	2300      	movs	r3, #0
90006e2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
90006e30:	2200      	movs	r2, #0
90006e32:	2330      	movs	r3, #48	; 0x30
90006e34:	e9c1 2304 	strd	r2, r3, [r1, #16]
90006e38:	2200      	movs	r2, #0
90006e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
90006e3e:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
90006e42:	f7ff fa37 	bl	900062b4 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90006e46:	2800      	cmp	r0, #0
90006e48:	bf18      	it	ne
90006e4a:	f06f 0004 	mvnne.w	r0, #4
}
90006e4e:	b00e      	add	sp, #56	; 0x38
90006e50:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
90006e52:	f06f 0001 	mvn.w	r0, #1
}
90006e56:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90006e58:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90006e5c:	e7f7      	b.n	90006e4e <BSP_SDRAM_Init+0x1a6>
90006e5e:	bf00      	nop
90006e60:	58024400 	.word	0x58024400
90006e64:	2400bf18 	.word	0x2400bf18
90006e68:	2400be78 	.word	0x2400be78
90006e6c:	58020c00 	.word	0x58020c00
90006e70:	58021000 	.word	0x58021000
90006e74:	58021400 	.word	0x58021400
90006e78:	58021800 	.word	0x58021800
90006e7c:	58021c00 	.word	0x58021c00
90006e80:	52000040 	.word	0x52000040
90006e84:	2400bf88 	.word	0x2400bf88

90006e88 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
90006e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90006e8c:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
90006e8e:	2800      	cmp	r0, #0
90006e90:	d16b      	bne.n	90006f6a <BSP_TS_Init+0xe2>
90006e92:	680b      	ldr	r3, [r1, #0]
90006e94:	460c      	mov	r4, r1
90006e96:	1e5a      	subs	r2, r3, #1
90006e98:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
90006e9c:	d265      	bcs.n	90006f6a <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006e9e:	684a      	ldr	r2, [r1, #4]
90006ea0:	1e51      	subs	r1, r2, #1
90006ea2:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
90006ea6:	d260      	bcs.n	90006f6a <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
90006ea8:	4293      	cmp	r3, r2
90006eaa:	bf28      	it	cs
90006eac:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
90006eae:	68e2      	ldr	r2, [r4, #12]
90006eb0:	429a      	cmp	r2, r3
90006eb2:	d85a      	bhi.n	90006f6a <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
90006eb4:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
90006eb6:	4b31      	ldr	r3, [pc, #196]	; (90006f7c <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006eb8:	4d31      	ldr	r5, [pc, #196]	; (90006f80 <BSP_TS_Init+0xf8>)
90006eba:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
90006ebc:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
90006ec0:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006ec2:	4a30      	ldr	r2, [pc, #192]	; (90006f84 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006ec4:	4b30      	ldr	r3, [pc, #192]	; (90006f88 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
90006ec6:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
90006ec8:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006eca:	4a30      	ldr	r2, [pc, #192]	; (90006f8c <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
90006ecc:	4b30      	ldr	r3, [pc, #192]	; (90006f90 <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
90006ece:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006ed0:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
90006ed2:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90006ed4:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90006ed6:	f7ff f93f 	bl	90006158 <FT5336_RegisterBusIO>
90006eda:	2800      	cmp	r0, #0
90006edc:	d14b      	bne.n	90006f76 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
90006ede:	a901      	add	r1, sp, #4
90006ee0:	4628      	mov	r0, r5
90006ee2:	f7ff f82f 	bl	90005f44 <FT5336_ReadID>
90006ee6:	2800      	cmp	r0, #0
90006ee8:	d145      	bne.n	90006f76 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90006eea:	9b01      	ldr	r3, [sp, #4]
90006eec:	2b51      	cmp	r3, #81	; 0x51
90006eee:	d142      	bne.n	90006f76 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006ef0:	4b28      	ldr	r3, [pc, #160]	; (90006f94 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006ef2:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90006ef4:	4f28      	ldr	r7, [pc, #160]	; (90006f98 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006ef6:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 90006fa0 <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90006efa:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90006efc:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
90006f00:	681b      	ldr	r3, [r3, #0]
90006f02:	4798      	blx	r3
90006f04:	4606      	mov	r6, r0
90006f06:	2800      	cmp	r0, #0
90006f08:	d135      	bne.n	90006f76 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006f0a:	4d24      	ldr	r5, [pc, #144]	; (90006f9c <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006f0c:	a902      	add	r1, sp, #8
90006f0e:	6838      	ldr	r0, [r7, #0]
90006f10:	f8d8 3000 	ldr.w	r3, [r8]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006f14:	e9d4 7200 	ldrd	r7, r2, [r4]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006f18:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90006f1a:	e9c5 7200 	strd	r7, r2, [r5]
90006f1e:	68a2      	ldr	r2, [r4, #8]
90006f20:	60aa      	str	r2, [r5, #8]
90006f22:	68e2      	ldr	r2, [r4, #12]
90006f24:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90006f26:	4798      	blx	r3
90006f28:	2800      	cmp	r0, #0
90006f2a:	db18      	blt.n	90006f5e <BSP_TS_Init+0xd6>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90006f2c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
90006f30:	e9c5 3204 	strd	r3, r2, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f34:	68e3      	ldr	r3, [r4, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f36:	e9d4 2100 	ldrd	r2, r1, [r4]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f3a:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f3c:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f3e:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f40:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f42:	e9c5 2206 	strd	r2, r2, [r5, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f46:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f4a:	622a      	str	r2, [r5, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f4c:	636b      	str	r3, [r5, #52]	; 0x34
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f4e:	626a      	str	r2, [r5, #36]	; 0x24
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f50:	63ab      	str	r3, [r5, #56]	; 0x38
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90006f52:	62aa      	str	r2, [r5, #40]	; 0x28
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90006f54:	63eb      	str	r3, [r5, #60]	; 0x3c
}
90006f56:	4630      	mov	r0, r6
90006f58:	b008      	add	sp, #32
90006f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
90006f5e:	f06f 0604 	mvn.w	r6, #4
}
90006f62:	4630      	mov	r0, r6
90006f64:	b008      	add	sp, #32
90006f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90006f6a:	f06f 0601 	mvn.w	r6, #1
}
90006f6e:	4630      	mov	r0, r6
90006f70:	b008      	add	sp, #32
90006f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
90006f76:	f04f 36ff 	mov.w	r6, #4294967295
90006f7a:	e7ec      	b.n	90006f56 <BSP_TS_Init+0xce>
90006f7c:	900063fd 	.word	0x900063fd
90006f80:	2400bfa8 	.word	0x2400bfa8
90006f84:	90006369 	.word	0x90006369
90006f88:	90006bd5 	.word	0x90006bd5
90006f8c:	90006b99 	.word	0x90006b99
90006f90:	90006c11 	.word	0x90006c11
90006f94:	24000028 	.word	0x24000028
90006f98:	2400bfd0 	.word	0x2400bfd0
90006f9c:	2400bfd4 	.word	0x2400bfd4
90006fa0:	2400c014 	.word	0x2400c014

90006fa4 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
90006fa4:	2800      	cmp	r0, #0
90006fa6:	d157      	bne.n	90007058 <BSP_TS_GetState+0xb4>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006fa8:	4b2d      	ldr	r3, [pc, #180]	; (90007060 <BSP_TS_GetState+0xbc>)
90006faa:	4a2e      	ldr	r2, [pc, #184]	; (90007064 <BSP_TS_GetState+0xc0>)
90006fac:	681b      	ldr	r3, [r3, #0]
90006fae:	6810      	ldr	r0, [r2, #0]
90006fb0:	691b      	ldr	r3, [r3, #16]
{
90006fb2:	b5f0      	push	{r4, r5, r6, r7, lr}
90006fb4:	b085      	sub	sp, #20
90006fb6:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
90006fb8:	a901      	add	r1, sp, #4
90006fba:	4798      	blx	r3
90006fbc:	2800      	cmp	r0, #0
90006fbe:	db41      	blt.n	90007044 <BSP_TS_GetState+0xa0>
    else if(state.TouchDetected != 0U)
90006fc0:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006fc2:	4b29      	ldr	r3, [pc, #164]	; (90007068 <BSP_TS_GetState+0xc4>)
    else if(state.TouchDetected != 0U)
90006fc4:	b93d      	cbnz	r5, 90006fd6 <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
90006fc6:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
90006fc8:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
90006fcc:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90006fce:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
90006fd2:	b005      	add	sp, #20
90006fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006fd6:	6898      	ldr	r0, [r3, #8]
90006fd8:	0702      	lsls	r2, r0, #28
      y_oriented = state.TouchY;
90006fda:	e9dd c702 	ldrd	ip, r7, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90006fde:	d435      	bmi.n	9000704c <BSP_TS_GetState+0xa8>
      y_oriented = state.TouchY;
90006fe0:	4639      	mov	r1, r7
      x_oriented = state.TouchX;
90006fe2:	4662      	mov	r2, ip
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006fe4:	691e      	ldr	r6, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90006fe6:	f010 0f02 	tst.w	r0, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90006fea:	bf1c      	itt	ne
90006fec:	f106 32ff 	addne.w	r2, r6, #4294967295
90006ff0:	eba2 020c 	subne.w	r2, r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90006ff4:	f010 0f04 	tst.w	r0, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90006ff8:	6958      	ldr	r0, [r3, #20]
90006ffa:	bf18      	it	ne
90006ffc:	1bc1      	subne	r1, r0, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90006ffe:	681f      	ldr	r7, [r3, #0]
90007000:	fb07 f202 	mul.w	r2, r7, r2
90007004:	fbb2 f2f6 	udiv	r2, r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90007008:	685e      	ldr	r6, [r3, #4]
      TS_State->TouchDetected = state.TouchDetected;
9000700a:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000700c:	fb06 f101 	mul.w	r1, r6, r1
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90007010:	699e      	ldr	r6, [r3, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90007012:	6add      	ldr	r5, [r3, #44]	; 0x2c
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90007014:	42b2      	cmp	r2, r6
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90007016:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90007018:	fbb1 f1f0 	udiv	r1, r1, r0
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
9000701c:	bf8c      	ite	hi
9000701e:	1b90      	subhi	r0, r2, r6
90007020:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90007022:	42a9      	cmp	r1, r5
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90007024:	60a1      	str	r1, [r4, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
90007026:	bf8c      	ite	hi
90007028:	1b4f      	subhi	r7, r1, r5
9000702a:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
9000702c:	42b8      	cmp	r0, r7
9000702e:	bf38      	it	cc
90007030:	4638      	movcc	r0, r7
90007032:	68df      	ldr	r7, [r3, #12]
90007034:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
90007036:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
9000703a:	d20a      	bcs.n	90007052 <BSP_TS_GetState+0xae>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
9000703c:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
9000703e:	62d9      	str	r1, [r3, #44]	; 0x2c
}
90007040:	b005      	add	sp, #20
90007042:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
90007044:	f06f 0004 	mvn.w	r0, #4
}
90007048:	b005      	add	sp, #20
9000704a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
9000704c:	4661      	mov	r1, ip
        x_oriented = state.TouchY;
9000704e:	463a      	mov	r2, r7
90007050:	e7c8      	b.n	90006fe4 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
90007052:	e9c4 6501 	strd	r6, r5, [r4, #4]
90007056:	e7bc      	b.n	90006fd2 <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
90007058:	f06f 0001 	mvn.w	r0, #1
}
9000705c:	4770      	bx	lr
9000705e:	bf00      	nop
90007060:	2400c014 	.word	0x2400c014
90007064:	2400bfd0 	.word	0x2400bfd0
90007068:	2400bfd4 	.word	0x2400bfd4

9000706c <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
9000706c:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000706e:	4c19      	ldr	r4, [pc, #100]	; (900070d4 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90007070:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
90007072:	4b19      	ldr	r3, [pc, #100]	; (900070d8 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90007074:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
90007078:	4818      	ldr	r0, [pc, #96]	; (900070dc <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000707a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000707e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
90007082:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90007084:	4c16      	ldr	r4, [pc, #88]	; (900070e0 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
90007086:	f041 0101 	orr.w	r1, r1, #1
9000708a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
9000708c:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
9000708e:	6819      	ldr	r1, [r3, #0]
90007090:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
90007092:	4914      	ldr	r1, [pc, #80]	; (900070e4 <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
90007094:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
90007096:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
90007098:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
9000709a:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
9000709c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
9000709e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
900070a0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
900070a2:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
900070a4:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
900070a6:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
900070a8:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
900070aa:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
900070ac:	6818      	ldr	r0, [r3, #0]
900070ae:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
900070b2:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
900070b4:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900070b6:	6823      	ldr	r3, [r4, #0]
900070b8:	4019      	ands	r1, r3
900070ba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
900070be:	d203      	bcs.n	900070c8 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
900070c0:	4b09      	ldr	r3, [pc, #36]	; (900070e8 <SystemInit+0x7c>)
900070c2:	2201      	movs	r2, #1
900070c4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900070c8:	4a08      	ldr	r2, [pc, #32]	; (900070ec <SystemInit+0x80>)
900070ca:	4b02      	ldr	r3, [pc, #8]	; (900070d4 <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
900070cc:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900070d0:	609a      	str	r2, [r3, #8]
}
900070d2:	4770      	bx	lr
900070d4:	e000ed00 	.word	0xe000ed00
900070d8:	58024400 	.word	0x58024400
900070dc:	eaf6ed7f 	.word	0xeaf6ed7f
900070e0:	5c001000 	.word	0x5c001000
900070e4:	ffff0000 	.word	0xffff0000
900070e8:	51008000 	.word	0x51008000
900070ec:	90000000 	.word	0x90000000

900070f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
900070f0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900070f2:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
900070f4:	4c12      	ldr	r4, [pc, #72]	; (90007140 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
900070f6:	f000 f843 	bl	90007180 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
900070fa:	f003 fc73 	bl	9000a9e4 <HAL_RCC_GetSysClockFreq>
900070fe:	4b11      	ldr	r3, [pc, #68]	; (90007144 <HAL_Init+0x54>)
90007100:	4911      	ldr	r1, [pc, #68]	; (90007148 <HAL_Init+0x58>)
90007102:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007104:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007106:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000710a:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000710e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007110:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90007112:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
90007116:	490d      	ldr	r1, [pc, #52]	; (9000714c <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007118:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000711c:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000711e:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
90007122:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90007124:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90007126:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90007128:	f7fd fd48 	bl	90004bbc <HAL_InitTick>
9000712c:	b110      	cbz	r0, 90007134 <HAL_Init+0x44>
  {
    return HAL_ERROR;
9000712e:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90007130:	4620      	mov	r0, r4
90007132:	bd10      	pop	{r4, pc}
90007134:	4604      	mov	r4, r0
  HAL_MspInit();
90007136:	f7fd faff 	bl	90004738 <HAL_MspInit>
}
9000713a:	4620      	mov	r0, r4
9000713c:	bd10      	pop	{r4, pc}
9000713e:	bf00      	nop
90007140:	2400005c 	.word	0x2400005c
90007144:	58024400 	.word	0x58024400
90007148:	90026d74 	.word	0x90026d74
9000714c:	24000058 	.word	0x24000058

90007150 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90007150:	4a03      	ldr	r2, [pc, #12]	; (90007160 <HAL_IncTick+0x10>)
90007152:	4b04      	ldr	r3, [pc, #16]	; (90007164 <HAL_IncTick+0x14>)
90007154:	6811      	ldr	r1, [r2, #0]
90007156:	781b      	ldrb	r3, [r3, #0]
90007158:	440b      	add	r3, r1
9000715a:	6013      	str	r3, [r2, #0]
}
9000715c:	4770      	bx	lr
9000715e:	bf00      	nop
90007160:	2400c018 	.word	0x2400c018
90007164:	24000060 	.word	0x24000060

90007168 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90007168:	4b01      	ldr	r3, [pc, #4]	; (90007170 <HAL_GetTick+0x8>)
9000716a:	6818      	ldr	r0, [r3, #0]
}
9000716c:	4770      	bx	lr
9000716e:	bf00      	nop
90007170:	2400c018 	.word	0x2400c018

90007174 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
90007174:	4b01      	ldr	r3, [pc, #4]	; (9000717c <HAL_GetREVID+0x8>)
90007176:	6818      	ldr	r0, [r3, #0]
}
90007178:	0c00      	lsrs	r0, r0, #16
9000717a:	4770      	bx	lr
9000717c:	5c001000 	.word	0x5c001000

90007180 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
90007180:	4906      	ldr	r1, [pc, #24]	; (9000719c <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90007182:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
90007186:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
90007188:	4b05      	ldr	r3, [pc, #20]	; (900071a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
9000718a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
9000718c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
90007190:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
90007194:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
90007196:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
90007198:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
9000719a:	4770      	bx	lr
9000719c:	e000ed00 	.word	0xe000ed00
900071a0:	05fa0000 	.word	0x05fa0000

900071a4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900071a4:	4b1b      	ldr	r3, [pc, #108]	; (90007214 <HAL_NVIC_SetPriority+0x70>)
900071a6:	68db      	ldr	r3, [r3, #12]
900071a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
900071ac:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900071ae:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900071b2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900071b6:	f1be 0f04 	cmp.w	lr, #4
900071ba:	bf28      	it	cs
900071bc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900071c0:	f1bc 0f06 	cmp.w	ip, #6
900071c4:	d91a      	bls.n	900071fc <HAL_NVIC_SetPriority+0x58>
900071c6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900071c8:	f04f 3cff 	mov.w	ip, #4294967295
900071cc:	fa0c fc03 	lsl.w	ip, ip, r3
900071d0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900071d4:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
900071d8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900071da:	fa0c fc0e 	lsl.w	ip, ip, lr
900071de:	ea21 010c 	bic.w	r1, r1, ip
900071e2:	fa01 f103 	lsl.w	r1, r1, r3
900071e6:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
900071ea:	db0a      	blt.n	90007202 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
900071ec:	0109      	lsls	r1, r1, #4
900071ee:	4b0a      	ldr	r3, [pc, #40]	; (90007218 <HAL_NVIC_SetPriority+0x74>)
900071f0:	b2c9      	uxtb	r1, r1
900071f2:	4403      	add	r3, r0
900071f4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
900071f8:	f85d fb04 	ldr.w	pc, [sp], #4
900071fc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900071fe:	4613      	mov	r3, r2
90007200:	e7e8      	b.n	900071d4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90007202:	f000 000f 	and.w	r0, r0, #15
90007206:	0109      	lsls	r1, r1, #4
90007208:	4b04      	ldr	r3, [pc, #16]	; (9000721c <HAL_NVIC_SetPriority+0x78>)
9000720a:	b2c9      	uxtb	r1, r1
9000720c:	4403      	add	r3, r0
9000720e:	7619      	strb	r1, [r3, #24]
90007210:	f85d fb04 	ldr.w	pc, [sp], #4
90007214:	e000ed00 	.word	0xe000ed00
90007218:	e000e100 	.word	0xe000e100
9000721c:	e000ecfc 	.word	0xe000ecfc

90007220 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90007220:	2800      	cmp	r0, #0
90007222:	db07      	blt.n	90007234 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007224:	2301      	movs	r3, #1
90007226:	f000 011f 	and.w	r1, r0, #31
9000722a:	4a03      	ldr	r2, [pc, #12]	; (90007238 <HAL_NVIC_EnableIRQ+0x18>)
9000722c:	0940      	lsrs	r0, r0, #5
9000722e:	408b      	lsls	r3, r1
90007230:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90007234:	4770      	bx	lr
90007236:	bf00      	nop
90007238:	e000e100 	.word	0xe000e100

9000723c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
9000723c:	2800      	cmp	r0, #0
9000723e:	db0c      	blt.n	9000725a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90007240:	0943      	lsrs	r3, r0, #5
90007242:	2201      	movs	r2, #1
90007244:	f000 001f 	and.w	r0, r0, #31
90007248:	4904      	ldr	r1, [pc, #16]	; (9000725c <HAL_NVIC_DisableIRQ+0x20>)
9000724a:	3320      	adds	r3, #32
9000724c:	4082      	lsls	r2, r0
9000724e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90007252:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007256:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
9000725a:	4770      	bx	lr
9000725c:	e000e100 	.word	0xe000e100

90007260 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90007260:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007264:	4b04      	ldr	r3, [pc, #16]	; (90007278 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90007266:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90007268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000726a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000726e:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90007270:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90007274:	4770      	bx	lr
90007276:	bf00      	nop
90007278:	e000ed00 	.word	0xe000ed00

9000727c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
9000727c:	4b06      	ldr	r3, [pc, #24]	; (90007298 <HAL_MPU_Enable+0x1c>)
9000727e:	f040 0001 	orr.w	r0, r0, #1
90007282:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90007286:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90007288:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000728c:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
9000728e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90007292:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90007296:	4770      	bx	lr
90007298:	e000ed00 	.word	0xe000ed00

9000729c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
9000729c:	4a17      	ldr	r2, [pc, #92]	; (900072fc <HAL_MPU_ConfigRegion+0x60>)
9000729e:	7843      	ldrb	r3, [r0, #1]
900072a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
900072a4:	7801      	ldrb	r1, [r0, #0]
900072a6:	b321      	cbz	r1, 900072f2 <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
900072a8:	6843      	ldr	r3, [r0, #4]
{
900072aa:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
900072ac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900072b0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900072b2:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
900072b6:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
900072b8:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900072bc:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
900072c0:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900072c4:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
900072c6:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900072c8:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
900072cc:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900072d0:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
900072d4:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
900072d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
900072dc:	7a01      	ldrb	r1, [r0, #8]
900072de:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
900072e2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
900072e6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
900072ea:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
900072ee:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
900072f2:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
900072f6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
900072fa:	4770      	bx	lr
900072fc:	e000ed00 	.word	0xe000ed00

90007300 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90007300:	2800      	cmp	r0, #0
90007302:	d036      	beq.n	90007372 <HAL_CRC_Init+0x72>
{
90007304:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90007306:	7f43      	ldrb	r3, [r0, #29]
90007308:	4604      	mov	r4, r0
9000730a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000730e:	b363      	cbz	r3, 9000736a <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90007310:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007312:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90007314:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90007316:	b9f3      	cbnz	r3, 90007356 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90007318:	6823      	ldr	r3, [r4, #0]
9000731a:	4a17      	ldr	r2, [pc, #92]	; (90007378 <HAL_CRC_Init+0x78>)
9000731c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
9000731e:	689a      	ldr	r2, [r3, #8]
90007320:	f022 0218 	bic.w	r2, r2, #24
90007324:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90007326:	7962      	ldrb	r2, [r4, #5]
90007328:	b18a      	cbz	r2, 9000734e <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
9000732a:	6922      	ldr	r2, [r4, #16]
9000732c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
9000732e:	689a      	ldr	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007330:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90007334:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90007338:	4302      	orrs	r2, r0

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
9000733a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
9000733c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
9000733e:	689a      	ldr	r2, [r3, #8]
90007340:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90007344:	430a      	orrs	r2, r1
  hcrc->State = HAL_CRC_STATE_READY;
90007346:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90007348:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
9000734a:	7761      	strb	r1, [r4, #29]
}
9000734c:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
9000734e:	f04f 32ff 	mov.w	r2, #4294967295
90007352:	611a      	str	r2, [r3, #16]
90007354:	e7eb      	b.n	9000732e <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90007356:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
9000735a:	4620      	mov	r0, r4
9000735c:	f000 f80e 	bl	9000737c <HAL_CRCEx_Polynomial_Set>
90007360:	b908      	cbnz	r0, 90007366 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90007362:	6823      	ldr	r3, [r4, #0]
90007364:	e7df      	b.n	90007326 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90007366:	2001      	movs	r0, #1
}
90007368:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
9000736a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
9000736c:	f7fd f9fe 	bl	9000476c <HAL_CRC_MspInit>
90007370:	e7ce      	b.n	90007310 <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90007372:	2001      	movs	r0, #1
}
90007374:	4770      	bx	lr
90007376:	bf00      	nop
90007378:	04c11db7 	.word	0x04c11db7

9000737c <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
9000737c:	07cb      	lsls	r3, r1, #31
9000737e:	d51a      	bpl.n	900073b6 <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007380:	231e      	movs	r3, #30
{
90007382:	b410      	push	{r4}
90007384:	e001      	b.n	9000738a <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90007386:	3b01      	subs	r3, #1
90007388:	d317      	bcc.n	900073ba <HAL_CRCEx_Polynomial_Set+0x3e>
9000738a:	fa21 fc03 	lsr.w	ip, r1, r3
9000738e:	f01c 0f01 	tst.w	ip, #1
90007392:	d0f8      	beq.n	90007386 <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90007394:	2a18      	cmp	r2, #24
90007396:	d811      	bhi.n	900073bc <HAL_CRCEx_Polynomial_Set+0x40>
90007398:	e8df f002 	tbb	[pc, r2]
9000739c:	10101016 	.word	0x10101016
900073a0:	10101010 	.word	0x10101010
900073a4:	10101024 	.word	0x10101024
900073a8:	10101010 	.word	0x10101010
900073ac:	10101021 	.word	0x10101021
900073b0:	10101010 	.word	0x10101010
900073b4:	14          	.byte	0x14
900073b5:	00          	.byte	0x00
    status =  HAL_ERROR;
900073b6:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
900073b8:	4770      	bx	lr
    switch (PolyLength)
900073ba:	b12a      	cbz	r2, 900073c8 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
900073bc:	2001      	movs	r0, #1
}
900073be:	f85d 4b04 	ldr.w	r4, [sp], #4
900073c2:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
900073c4:	2b06      	cmp	r3, #6
900073c6:	d8f9      	bhi.n	900073bc <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
900073c8:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
900073ca:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
900073cc:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
900073ce:	68a3      	ldr	r3, [r4, #8]
900073d0:	f023 0318 	bic.w	r3, r3, #24
900073d4:	4313      	orrs	r3, r2
900073d6:	60a3      	str	r3, [r4, #8]
}
900073d8:	f85d 4b04 	ldr.w	r4, [sp], #4
900073dc:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
900073de:	2b07      	cmp	r3, #7
900073e0:	d9f2      	bls.n	900073c8 <HAL_CRCEx_Polynomial_Set+0x4c>
900073e2:	e7eb      	b.n	900073bc <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
900073e4:	2b0f      	cmp	r3, #15
900073e6:	d9ef      	bls.n	900073c8 <HAL_CRCEx_Polynomial_Set+0x4c>
900073e8:	e7e8      	b.n	900073bc <HAL_CRCEx_Polynomial_Set+0x40>
900073ea:	bf00      	nop

900073ec <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
900073ec:	2800      	cmp	r0, #0
900073ee:	d035      	beq.n	9000745c <HAL_DMA2D_Init+0x70>
{
900073f0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
900073f2:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
900073f6:	4604      	mov	r4, r0
900073f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
900073fc:	b34b      	cbz	r3, 90007452 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
900073fe:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007400:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007402:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
90007404:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007408:	69e1      	ldr	r1, [r4, #28]
9000740a:	681d      	ldr	r5, [r3, #0]
9000740c:	4814      	ldr	r0, [pc, #80]	; (90007460 <HAL_DMA2D_Init+0x74>)
9000740e:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007410:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007412:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007414:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
90007416:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007418:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000741a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000741c:	4302      	orrs	r2, r0
9000741e:	6b59      	ldr	r1, [r3, #52]	; 0x34
90007420:	4810      	ldr	r0, [pc, #64]	; (90007464 <HAL_DMA2D_Init+0x78>)
90007422:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007424:	4910      	ldr	r1, [pc, #64]	; (90007468 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
90007426:	4302      	orrs	r2, r0
90007428:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000742a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000742c:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000742e:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007432:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007434:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
90007436:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007438:	6b59      	ldr	r1, [r3, #52]	; 0x34
9000743a:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000743e:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
90007440:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
90007444:	430a      	orrs	r2, r1
90007446:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
90007448:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000744a:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000744c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
90007450:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
90007452:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
90007456:	f7fd f9a1 	bl	9000479c <HAL_DMA2D_MspInit>
9000745a:	e7d0      	b.n	900073fe <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
9000745c:	2001      	movs	r0, #1
}
9000745e:	4770      	bx	lr
90007460:	fff8ffbf 	.word	0xfff8ffbf
90007464:	fffffef8 	.word	0xfffffef8
90007468:	ffff0000 	.word	0xffff0000

9000746c <HAL_DMA2D_LineEventCallback>:
9000746c:	4770      	bx	lr
9000746e:	bf00      	nop

90007470 <HAL_DMA2D_CLUTLoadingCpltCallback>:
90007470:	4770      	bx	lr
90007472:	bf00      	nop

90007474 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007474:	6803      	ldr	r3, [r0, #0]
{
90007476:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
90007478:	685d      	ldr	r5, [r3, #4]
{
9000747a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
9000747c:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000747e:	07ea      	lsls	r2, r5, #31
90007480:	d501      	bpl.n	90007486 <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
90007482:	05f1      	lsls	r1, r6, #23
90007484:	d456      	bmi.n	90007534 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
90007486:	06aa      	lsls	r2, r5, #26
90007488:	d501      	bpl.n	9000748e <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
9000748a:	04b3      	lsls	r3, r6, #18
9000748c:	d43b      	bmi.n	90007506 <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
9000748e:	0728      	lsls	r0, r5, #28
90007490:	d501      	bpl.n	90007496 <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
90007492:	0531      	lsls	r1, r6, #20
90007494:	d421      	bmi.n	900074da <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
90007496:	076a      	lsls	r2, r5, #29
90007498:	d501      	bpl.n	9000749e <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
9000749a:	0573      	lsls	r3, r6, #21
9000749c:	d472      	bmi.n	90007584 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
9000749e:	07a8      	lsls	r0, r5, #30
900074a0:	d501      	bpl.n	900074a6 <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
900074a2:	05b1      	lsls	r1, r6, #22
900074a4:	d404      	bmi.n	900074b0 <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
900074a6:	06ea      	lsls	r2, r5, #27
900074a8:	d501      	bpl.n	900074ae <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
900074aa:	04f3      	lsls	r3, r6, #19
900074ac:	d457      	bmi.n	9000755e <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
900074ae:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
900074b0:	6823      	ldr	r3, [r4, #0]
900074b2:	681a      	ldr	r2, [r3, #0]
900074b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
900074b8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
900074ba:	2202      	movs	r2, #2
900074bc:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
900074be:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
900074c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
900074c2:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
900074c4:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
900074c6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
900074ca:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
900074ce:	6a23      	ldr	r3, [r4, #32]
900074d0:	2b00      	cmp	r3, #0
900074d2:	d0e8      	beq.n	900074a6 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
900074d4:	4620      	mov	r0, r4
900074d6:	4798      	blx	r3
900074d8:	e7e5      	b.n	900074a6 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
900074da:	6823      	ldr	r3, [r4, #0]
900074dc:	681a      	ldr	r2, [r3, #0]
900074de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
900074e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
900074e4:	2208      	movs	r2, #8
900074e6:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900074e8:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
900074ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
900074ec:	4313      	orrs	r3, r2
900074ee:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
900074f0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
900074f4:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
900074f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
900074f8:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
900074fc:	2b00      	cmp	r3, #0
900074fe:	d0ca      	beq.n	90007496 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
90007500:	4620      	mov	r0, r4
90007502:	4798      	blx	r3
90007504:	e7c7      	b.n	90007496 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
90007506:	6823      	ldr	r3, [r4, #0]
90007508:	681a      	ldr	r2, [r3, #0]
9000750a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
9000750e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
90007510:	2220      	movs	r2, #32
90007512:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007514:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
90007516:	6e63      	ldr	r3, [r4, #100]	; 0x64
90007518:	f043 0302 	orr.w	r3, r3, #2
9000751c:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000751e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
90007522:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
90007524:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
90007526:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
9000752a:	2b00      	cmp	r3, #0
9000752c:	d0af      	beq.n	9000748e <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
9000752e:	4620      	mov	r0, r4
90007530:	4798      	blx	r3
90007532:	e7ac      	b.n	9000748e <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
90007534:	681a      	ldr	r2, [r3, #0]
90007536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000753a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000753c:	6e42      	ldr	r2, [r0, #100]	; 0x64
9000753e:	f042 0201 	orr.w	r2, r2, #1
90007542:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
90007544:	2201      	movs	r2, #1
90007546:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
90007548:	2304      	movs	r3, #4
9000754a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000754e:	2300      	movs	r3, #0
90007550:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
90007554:	6a43      	ldr	r3, [r0, #36]	; 0x24
90007556:	2b00      	cmp	r3, #0
90007558:	d095      	beq.n	90007486 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
9000755a:	4798      	blx	r3
9000755c:	e793      	b.n	90007486 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
9000755e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
90007560:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
90007562:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
90007564:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
90007566:	681a      	ldr	r2, [r3, #0]
90007568:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
9000756c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
9000756e:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
90007570:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007572:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
90007574:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
90007578:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000757a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
9000757e:	f7ff ff77 	bl	90007470 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
90007582:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007584:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007586:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
90007588:	681a      	ldr	r2, [r3, #0]
9000758a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
9000758e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
90007590:	2204      	movs	r2, #4
90007592:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
90007594:	f7ff ff6a 	bl	9000746c <HAL_DMA2D_LineEventCallback>
90007598:	e781      	b.n	9000749e <HAL_DMA2D_IRQHandler+0x2a>
9000759a:	bf00      	nop

9000759c <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000759c:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
900075a0:	2a01      	cmp	r2, #1
900075a2:	d065      	beq.n	90007670 <HAL_DMA2D_ConfigLayer+0xd4>
900075a4:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075a6:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900075aa:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
900075b0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
900075b2:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
900075b4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
900075b8:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900075bc:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075be:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
900075c0:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
900075c2:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900075c4:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075c8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
900075cc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900075ce:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
900075d2:	ea42 0204 	orr.w	r2, r2, r4
900075d6:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
900075da:	d922      	bls.n	90007622 <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
900075dc:	6b45      	ldr	r5, [r0, #52]	; 0x34
900075de:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
900075e2:	b981      	cbnz	r1, 90007606 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900075e4:	6818      	ldr	r0, [r3, #0]
900075e6:	4923      	ldr	r1, [pc, #140]	; (90007674 <HAL_DMA2D_ConfigLayer+0xd8>)
900075e8:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900075ea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
900075ec:	4029      	ands	r1, r5
900075ee:	4311      	orrs	r1, r2
900075f0:	6241      	str	r1, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
900075f2:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
900075f4:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
900075f6:	2101      	movs	r1, #1

  return HAL_OK;
900075f8:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
900075fa:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
900075fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
90007602:	bc70      	pop	{r4, r5, r6}
90007604:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
90007606:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007608:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
9000760a:	d129      	bne.n	90007660 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000760c:	69e5      	ldr	r5, [r4, #28]
9000760e:	491a      	ldr	r1, [pc, #104]	; (90007678 <HAL_DMA2D_ConfigLayer+0xdc>)
90007610:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
90007612:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007614:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007616:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
9000761a:	4311      	orrs	r1, r2
9000761c:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000761e:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
90007620:	e7e8      	b.n	900075f4 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
90007622:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007624:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
90007628:	4314      	orrs	r4, r2
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000762a:	b961      	cbnz	r1, 90007646 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000762c:	6819      	ldr	r1, [r3, #0]
9000762e:	4a11      	ldr	r2, [pc, #68]	; (90007674 <HAL_DMA2D_ConfigLayer+0xd8>)
90007630:	6a4e      	ldr	r6, [r1, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007632:	6b58      	ldr	r0, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
90007634:	4032      	ands	r2, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007636:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007638:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000763c:	4322      	orrs	r2, r4
9000763e:	624a      	str	r2, [r1, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
90007640:	618d      	str	r5, [r1, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
90007642:	6288      	str	r0, [r1, #40]	; 0x28
90007644:	e7d6      	b.n	900075f4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007646:	6819      	ldr	r1, [r3, #0]
90007648:	4a0a      	ldr	r2, [pc, #40]	; (90007674 <HAL_DMA2D_ConfigLayer+0xd8>)
9000764a:	69cd      	ldr	r5, [r1, #28]
9000764c:	402a      	ands	r2, r5
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000764e:	6a85      	ldr	r5, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007650:	4322      	orrs	r2, r4
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
90007652:	6b44      	ldr	r4, [r0, #52]	; 0x34
90007654:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007658:	61ca      	str	r2, [r1, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000765a:	610d      	str	r5, [r1, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
9000765c:	620c      	str	r4, [r1, #32]
9000765e:	e7c9      	b.n	900075f4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007660:	69e5      	ldr	r5, [r4, #28]
90007662:	4904      	ldr	r1, [pc, #16]	; (90007674 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
90007664:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
90007666:	4029      	ands	r1, r5
90007668:	4311      	orrs	r1, r2
9000766a:	61e1      	str	r1, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000766c:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000766e:	e7c1      	b.n	900075f4 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
90007670:	2002      	movs	r0, #2
}
90007672:	4770      	bx	lr
90007674:	00ccfff0 	.word	0x00ccfff0
90007678:	00c0fff0 	.word	0x00c0fff0

9000767c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
9000767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007680:	680c      	ldr	r4, [r1, #0]
{
90007682:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
90007684:	2c00      	cmp	r4, #0
90007686:	f000 80a7 	beq.w	900077d8 <HAL_GPIO_Init+0x15c>
9000768a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000768e:	4f8a      	ldr	r7, [pc, #552]	; (900078b8 <HAL_GPIO_Init+0x23c>)
  uint32_t position = 0x00U;
90007690:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
90007692:	2201      	movs	r2, #1
90007694:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
90007696:	ea12 0e04 	ands.w	lr, r2, r4
9000769a:	f000 8096 	beq.w	900077ca <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
9000769e:	684d      	ldr	r5, [r1, #4]
900076a0:	f005 0903 	and.w	r9, r5, #3
900076a4:	f109 36ff 	add.w	r6, r9, #4294967295
900076a8:	2e01      	cmp	r6, #1
900076aa:	f240 8098 	bls.w	900077de <HAL_GPIO_Init+0x162>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
900076ae:	f1b9 0f03 	cmp.w	r9, #3
900076b2:	f040 80d2 	bne.w	9000785a <HAL_GPIO_Init+0x1de>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900076b6:	fa09 f20c 	lsl.w	r2, r9, ip
900076ba:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
900076be:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900076c0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
900076c4:	ea06 0608 	and.w	r6, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
900076c8:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
900076cc:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
900076ce:	d07c      	beq.n	900077ca <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076d0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
900076d4:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900076d8:	f003 0903 	and.w	r9, r3, #3
900076dc:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076de:	f042 0202 	orr.w	r2, r2, #2
900076e2:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900076e6:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076ea:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
900076ee:	f508 6880 	add.w	r8, r8, #1024	; 0x400
900076f2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
900076f6:	fa06 f609 	lsl.w	r6, r6, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
900076fa:	f002 0202 	and.w	r2, r2, #2
900076fe:	9201      	str	r2, [sp, #4]
90007700:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
90007702:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
90007706:	ea22 0206 	bic.w	r2, r2, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000770a:	4e6c      	ldr	r6, [pc, #432]	; (900078bc <HAL_GPIO_Init+0x240>)
9000770c:	42b0      	cmp	r0, r6
9000770e:	d028      	beq.n	90007762 <HAL_GPIO_Init+0xe6>
90007710:	f506 6680 	add.w	r6, r6, #1024	; 0x400
90007714:	42b0      	cmp	r0, r6
90007716:	f000 80ac 	beq.w	90007872 <HAL_GPIO_Init+0x1f6>
9000771a:	4e69      	ldr	r6, [pc, #420]	; (900078c0 <HAL_GPIO_Init+0x244>)
9000771c:	42b0      	cmp	r0, r6
9000771e:	f000 80ad 	beq.w	9000787c <HAL_GPIO_Init+0x200>
90007722:	4e68      	ldr	r6, [pc, #416]	; (900078c4 <HAL_GPIO_Init+0x248>)
90007724:	42b0      	cmp	r0, r6
90007726:	f000 809f 	beq.w	90007868 <HAL_GPIO_Init+0x1ec>
9000772a:	4e67      	ldr	r6, [pc, #412]	; (900078c8 <HAL_GPIO_Init+0x24c>)
9000772c:	42b0      	cmp	r0, r6
9000772e:	f000 80af 	beq.w	90007890 <HAL_GPIO_Init+0x214>
90007732:	4e66      	ldr	r6, [pc, #408]	; (900078cc <HAL_GPIO_Init+0x250>)
90007734:	42b0      	cmp	r0, r6
90007736:	f000 80b0 	beq.w	9000789a <HAL_GPIO_Init+0x21e>
9000773a:	4e65      	ldr	r6, [pc, #404]	; (900078d0 <HAL_GPIO_Init+0x254>)
9000773c:	42b0      	cmp	r0, r6
9000773e:	f000 80a2 	beq.w	90007886 <HAL_GPIO_Init+0x20a>
90007742:	4e64      	ldr	r6, [pc, #400]	; (900078d4 <HAL_GPIO_Init+0x258>)
90007744:	42b0      	cmp	r0, r6
90007746:	f000 80ad 	beq.w	900078a4 <HAL_GPIO_Init+0x228>
9000774a:	4e63      	ldr	r6, [pc, #396]	; (900078d8 <HAL_GPIO_Init+0x25c>)
9000774c:	42b0      	cmp	r0, r6
9000774e:	f000 80ae 	beq.w	900078ae <HAL_GPIO_Init+0x232>
90007752:	4e62      	ldr	r6, [pc, #392]	; (900078dc <HAL_GPIO_Init+0x260>)
90007754:	42b0      	cmp	r0, r6
90007756:	bf0c      	ite	eq
90007758:	2609      	moveq	r6, #9
9000775a:	260a      	movne	r6, #10
9000775c:	fa06 f609 	lsl.w	r6, r6, r9
90007760:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
90007762:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
90007766:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
9000776a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
9000776e:	ea6f 060e 	mvn.w	r6, lr
        temp = EXTI->RTSR1;
90007772:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
90007774:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90007778:	bf0c      	ite	eq
9000777a:	4032      	andeq	r2, r6
          temp |= iocurrent;
9000777c:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
90007780:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
90007784:	f8c8 2000 	str.w	r2, [r8]
        temp = EXTI->FTSR1;
90007788:	f8d8 2004 	ldr.w	r2, [r8, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
9000778c:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
90007790:	bf0c      	ite	eq
90007792:	4032      	andeq	r2, r6
          temp |= iocurrent;
90007794:	ea4e 0202 	orrne.w	r2, lr, r2

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
90007798:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        EXTI->FTSR1 = temp;
9000779c:	f8c8 2004 	str.w	r2, [r8, #4]
        temp = EXTI_CurrentCPU->EMR1;
900077a0:	f8d8 2084 	ldr.w	r2, [r8, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
900077a4:	f04f 48b0 	mov.w	r8, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
900077a8:	bf0c      	ite	eq
900077aa:	4032      	andeq	r2, r6
          temp |= iocurrent;
900077ac:	ea4e 0202 	orrne.w	r2, lr, r2

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
900077b0:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
900077b2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
900077b6:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
900077ba:	f8d8 2080 	ldr.w	r2, [r8, #128]	; 0x80
        temp &= ~(iocurrent);
900077be:	bf54      	ite	pl
900077c0:	4032      	andpl	r2, r6
          temp |= iocurrent;
900077c2:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
900077c6:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
900077ca:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
900077cc:	f10c 0c02 	add.w	ip, ip, #2
900077d0:	fa34 f203 	lsrs.w	r2, r4, r3
900077d4:	f47f af5d 	bne.w	90007692 <HAL_GPIO_Init+0x16>
  }
}
900077d8:	b003      	add	sp, #12
900077da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900077de:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
900077e2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900077e4:	fa08 f80c 	lsl.w	r8, r8, ip
900077e8:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
900077ec:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900077ee:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
900077f2:	fa06 f60c 	lsl.w	r6, r6, ip
900077f6:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
900077fa:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
900077fc:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
90007800:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
90007804:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
90007806:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000780a:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
9000780c:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
9000780e:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90007810:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
90007814:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
90007816:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000781a:	fa06 f60c 	lsl.w	r6, r6, ip
9000781e:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
90007822:	fa09 f20c 	lsl.w	r2, r9, ip
90007826:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
90007828:	f47f af49 	bne.w	900076be <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
9000782c:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90007830:	f003 0b07 	and.w	fp, r3, #7
90007834:	260f      	movs	r6, #15
90007836:	eb00 0989 	add.w	r9, r0, r9, lsl #2
9000783a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
9000783e:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
90007842:	fa06 f60b 	lsl.w	r6, r6, fp
90007846:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000784a:	690e      	ldr	r6, [r1, #16]
9000784c:	fa06 f60b 	lsl.w	r6, r6, fp
90007850:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
90007854:	f8c9 6020 	str.w	r6, [r9, #32]
90007858:	e731      	b.n	900076be <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000785a:	f04f 0803 	mov.w	r8, #3
9000785e:	fa08 f80c 	lsl.w	r8, r8, ip
90007862:	ea6f 0808 	mvn.w	r8, r8
90007866:	e7d2      	b.n	9000780e <HAL_GPIO_Init+0x192>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
90007868:	2603      	movs	r6, #3
9000786a:	fa06 f609 	lsl.w	r6, r6, r9
9000786e:	4332      	orrs	r2, r6
90007870:	e777      	b.n	90007762 <HAL_GPIO_Init+0xe6>
90007872:	2601      	movs	r6, #1
90007874:	fa06 f609 	lsl.w	r6, r6, r9
90007878:	4332      	orrs	r2, r6
9000787a:	e772      	b.n	90007762 <HAL_GPIO_Init+0xe6>
9000787c:	2602      	movs	r6, #2
9000787e:	fa06 f609 	lsl.w	r6, r6, r9
90007882:	4332      	orrs	r2, r6
90007884:	e76d      	b.n	90007762 <HAL_GPIO_Init+0xe6>
90007886:	2606      	movs	r6, #6
90007888:	fa06 f609 	lsl.w	r6, r6, r9
9000788c:	4332      	orrs	r2, r6
9000788e:	e768      	b.n	90007762 <HAL_GPIO_Init+0xe6>
90007890:	2604      	movs	r6, #4
90007892:	fa06 f609 	lsl.w	r6, r6, r9
90007896:	4332      	orrs	r2, r6
90007898:	e763      	b.n	90007762 <HAL_GPIO_Init+0xe6>
9000789a:	2605      	movs	r6, #5
9000789c:	fa06 f609 	lsl.w	r6, r6, r9
900078a0:	4332      	orrs	r2, r6
900078a2:	e75e      	b.n	90007762 <HAL_GPIO_Init+0xe6>
900078a4:	2607      	movs	r6, #7
900078a6:	fa06 f609 	lsl.w	r6, r6, r9
900078aa:	4332      	orrs	r2, r6
900078ac:	e759      	b.n	90007762 <HAL_GPIO_Init+0xe6>
900078ae:	2608      	movs	r6, #8
900078b0:	fa06 f609 	lsl.w	r6, r6, r9
900078b4:	4332      	orrs	r2, r6
900078b6:	e754      	b.n	90007762 <HAL_GPIO_Init+0xe6>
900078b8:	58024400 	.word	0x58024400
900078bc:	58020000 	.word	0x58020000
900078c0:	58020800 	.word	0x58020800
900078c4:	58020c00 	.word	0x58020c00
900078c8:	58021000 	.word	0x58021000
900078cc:	58021400 	.word	0x58021400
900078d0:	58021800 	.word	0x58021800
900078d4:	58021c00 	.word	0x58021c00
900078d8:	58022000 	.word	0x58022000
900078dc:	58022400 	.word	0x58022400

900078e0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
900078e0:	2900      	cmp	r1, #0
900078e2:	f000 80a4 	beq.w	90007a2e <HAL_GPIO_DeInit+0x14e>
  uint32_t position = 0x00U;
900078e6:	2300      	movs	r3, #0
{
900078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900078ec:	f8df 9168 	ldr.w	r9, [pc, #360]	; 90007a58 <HAL_GPIO_DeInit+0x178>
900078f0:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900078f2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 90007a5c <HAL_GPIO_DeInit+0x17c>
900078f6:	f8df a168 	ldr.w	sl, [pc, #360]	; 90007a60 <HAL_GPIO_DeInit+0x180>
900078fa:	f8df b168 	ldr.w	fp, [pc, #360]	; 90007a64 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
900078fe:	f04f 0e01 	mov.w	lr, #1
90007902:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
90007906:	ea12 0c01 	ands.w	ip, r2, r1
9000790a:	d06b      	beq.n	900079e4 <HAL_GPIO_DeInit+0x104>
      tmp = SYSCFG->EXTICR[position >> 2U];
9000790c:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90007910:	f003 0403 	and.w	r4, r3, #3
90007914:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
90007916:	4540      	cmp	r0, r8
90007918:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000791a:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
9000791e:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
90007920:	fa06 f604 	lsl.w	r6, r6, r4
90007924:	ea07 0706 	and.w	r7, r7, r6
90007928:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000792a:	d01f      	beq.n	9000796c <HAL_GPIO_DeInit+0x8c>
9000792c:	4550      	cmp	r0, sl
9000792e:	d01a      	beq.n	90007966 <HAL_GPIO_DeInit+0x86>
90007930:	4558      	cmp	r0, fp
90007932:	d05e      	beq.n	900079f2 <HAL_GPIO_DeInit+0x112>
90007934:	4f43      	ldr	r7, [pc, #268]	; (90007a44 <HAL_GPIO_DeInit+0x164>)
90007936:	42b8      	cmp	r0, r7
90007938:	d065      	beq.n	90007a06 <HAL_GPIO_DeInit+0x126>
9000793a:	4f43      	ldr	r7, [pc, #268]	; (90007a48 <HAL_GPIO_DeInit+0x168>)
9000793c:	42b8      	cmp	r0, r7
9000793e:	d067      	beq.n	90007a10 <HAL_GPIO_DeInit+0x130>
90007940:	4f42      	ldr	r7, [pc, #264]	; (90007a4c <HAL_GPIO_DeInit+0x16c>)
90007942:	42b8      	cmp	r0, r7
90007944:	d05a      	beq.n	900079fc <HAL_GPIO_DeInit+0x11c>
90007946:	4f42      	ldr	r7, [pc, #264]	; (90007a50 <HAL_GPIO_DeInit+0x170>)
90007948:	42b8      	cmp	r0, r7
9000794a:	d06b      	beq.n	90007a24 <HAL_GPIO_DeInit+0x144>
9000794c:	4f41      	ldr	r7, [pc, #260]	; (90007a54 <HAL_GPIO_DeInit+0x174>)
9000794e:	42b8      	cmp	r0, r7
90007950:	d06e      	beq.n	90007a30 <HAL_GPIO_DeInit+0x150>
90007952:	f8df e114 	ldr.w	lr, [pc, #276]	; 90007a68 <HAL_GPIO_DeInit+0x188>
90007956:	4570      	cmp	r0, lr
90007958:	d05f      	beq.n	90007a1a <HAL_GPIO_DeInit+0x13a>
9000795a:	f8df e110 	ldr.w	lr, [pc, #272]	; 90007a6c <HAL_GPIO_DeInit+0x18c>
9000795e:	4570      	cmp	r0, lr
90007960:	d06b      	beq.n	90007a3a <HAL_GPIO_DeInit+0x15a>
90007962:	f04f 0e0a 	mov.w	lr, #10
90007966:	fa0e f404 	lsl.w	r4, lr, r4
9000796a:	e000      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
9000796c:	2400      	movs	r4, #0
9000796e:	9f01      	ldr	r7, [sp, #4]
90007970:	42a7      	cmp	r7, r4
90007972:	d119      	bne.n	900079a8 <HAL_GPIO_DeInit+0xc8>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
90007974:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
90007978:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
9000797c:	ea27 070c 	bic.w	r7, r7, ip
90007980:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
90007984:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
90007988:	ea27 070c 	bic.w	r7, r7, ip
9000798c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
90007990:	6867      	ldr	r7, [r4, #4]
90007992:	ea27 070c 	bic.w	r7, r7, ip
90007996:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
90007998:	6827      	ldr	r7, [r4, #0]
9000799a:	ea27 070c 	bic.w	r7, r7, ip
9000799e:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
900079a0:	68ac      	ldr	r4, [r5, #8]
900079a2:	ea24 0406 	bic.w	r4, r4, r6
900079a6:	60ac      	str	r4, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900079a8:	005d      	lsls	r5, r3, #1
900079aa:	2403      	movs	r4, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900079ac:	f003 0607 	and.w	r6, r3, #7
900079b0:	270f      	movs	r7, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900079b2:	40ac      	lsls	r4, r5
900079b4:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900079b6:	00b6      	lsls	r6, r6, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900079b8:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900079ba:	40b7      	lsls	r7, r6
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
900079bc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
900079be:	08dd      	lsrs	r5, r3, #3
900079c0:	eb00 0585 	add.w	r5, r0, r5, lsl #2
900079c4:	6a2e      	ldr	r6, [r5, #32]
900079c6:	ea26 0607 	bic.w	r6, r6, r7
900079ca:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
900079cc:	68c5      	ldr	r5, [r0, #12]
900079ce:	ea25 0504 	bic.w	r5, r5, r4
900079d2:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
900079d4:	6845      	ldr	r5, [r0, #4]
900079d6:	ea25 0202 	bic.w	r2, r5, r2
900079da:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
900079dc:	6882      	ldr	r2, [r0, #8]
900079de:	ea22 0204 	bic.w	r2, r2, r4
900079e2:	6082      	str	r2, [r0, #8]
    }

    position++;
900079e4:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
900079e6:	fa31 f203 	lsrs.w	r2, r1, r3
900079ea:	d188      	bne.n	900078fe <HAL_GPIO_DeInit+0x1e>
  }
}
900079ec:	b003      	add	sp, #12
900079ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
900079f2:	f04f 0e02 	mov.w	lr, #2
900079f6:	fa0e f404 	lsl.w	r4, lr, r4
900079fa:	e7b8      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
900079fc:	f04f 0e05 	mov.w	lr, #5
90007a00:	fa0e f404 	lsl.w	r4, lr, r4
90007a04:	e7b3      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
90007a06:	f04f 0e03 	mov.w	lr, #3
90007a0a:	fa0e f404 	lsl.w	r4, lr, r4
90007a0e:	e7ae      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
90007a10:	f04f 0e04 	mov.w	lr, #4
90007a14:	fa0e f404 	lsl.w	r4, lr, r4
90007a18:	e7a9      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
90007a1a:	f04f 0e08 	mov.w	lr, #8
90007a1e:	fa0e f404 	lsl.w	r4, lr, r4
90007a22:	e7a4      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
90007a24:	f04f 0e06 	mov.w	lr, #6
90007a28:	fa0e f404 	lsl.w	r4, lr, r4
90007a2c:	e79f      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
90007a2e:	4770      	bx	lr
90007a30:	f04f 0e07 	mov.w	lr, #7
90007a34:	fa0e f404 	lsl.w	r4, lr, r4
90007a38:	e799      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
90007a3a:	f04f 0e09 	mov.w	lr, #9
90007a3e:	fa0e f404 	lsl.w	r4, lr, r4
90007a42:	e794      	b.n	9000796e <HAL_GPIO_DeInit+0x8e>
90007a44:	58020c00 	.word	0x58020c00
90007a48:	58021000 	.word	0x58021000
90007a4c:	58021400 	.word	0x58021400
90007a50:	58021800 	.word	0x58021800
90007a54:	58021c00 	.word	0x58021c00
90007a58:	58000400 	.word	0x58000400
90007a5c:	58020000 	.word	0x58020000
90007a60:	58020400 	.word	0x58020400
90007a64:	58020800 	.word	0x58020800
90007a68:	58022000 	.word	0x58022000
90007a6c:	58022400 	.word	0x58022400

90007a70 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
90007a70:	6903      	ldr	r3, [r0, #16]
90007a72:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
90007a74:	bf14      	ite	ne
90007a76:	2001      	movne	r0, #1
90007a78:	2000      	moveq	r0, #0
90007a7a:	4770      	bx	lr

90007a7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
90007a7c:	b902      	cbnz	r2, 90007a80 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
90007a7e:	0409      	lsls	r1, r1, #16
90007a80:	6181      	str	r1, [r0, #24]
  }
}
90007a82:	4770      	bx	lr

90007a84 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
90007a84:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
90007a86:	ea01 0203 	and.w	r2, r1, r3
90007a8a:	ea21 0103 	bic.w	r1, r1, r3
90007a8e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
90007a92:	6181      	str	r1, [r0, #24]
}
90007a94:	4770      	bx	lr
90007a96:	bf00      	nop

90007a98 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
90007a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
90007a9c:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
90007aa0:	4201      	tst	r1, r0
90007aa2:	d100      	bne.n	90007aa6 <HAL_GPIO_EXTI_IRQHandler+0xe>
90007aa4:	4770      	bx	lr
{
90007aa6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
90007aa8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
90007aac:	f7fc fe0c 	bl	900046c8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
90007ab0:	bd08      	pop	{r3, pc}
90007ab2:	bf00      	nop

90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
90007ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007ab8:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007aba:	f04f 0820 	mov.w	r8, #32
{
90007abe:	4605      	mov	r5, r0
90007ac0:	460e      	mov	r6, r1
90007ac2:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
90007ac4:	6998      	ldr	r0, [r3, #24]
90007ac6:	f010 0902 	ands.w	r9, r0, #2
90007aca:	f040 809e 	bne.w	90007c0a <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
90007ace:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90007ad0:	f014 0410 	ands.w	r4, r4, #16
90007ad4:	d068      	beq.n	90007ba8 <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007ad6:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
90007ad8:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
90007ada:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007adc:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007ade:	1c71      	adds	r1, r6, #1
90007ae0:	699a      	ldr	r2, [r3, #24]
90007ae2:	d163      	bne.n	90007bac <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
90007ae4:	0690      	lsls	r0, r2, #26
90007ae6:	f100 8093 	bmi.w	90007c10 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90007aea:	f1ba 0f00 	cmp.w	sl, #0
90007aee:	d104      	bne.n	90007afa <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90007af0:	699c      	ldr	r4, [r3, #24]
90007af2:	06a1      	lsls	r1, r4, #26
90007af4:	d5fc      	bpl.n	90007af0 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007af6:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
90007afa:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
90007afe:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
90007b00:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90007b02:	05d0      	lsls	r0, r2, #23
90007b04:	d530      	bpl.n	90007b68 <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007b06:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007b0a:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90007b0c:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007b10:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007b12:	d504      	bpl.n	90007b1e <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90007b18:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007b1c:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007b1e:	0591      	lsls	r1, r2, #22
90007b20:	d504      	bpl.n	90007b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007b22:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90007b26:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007b2a:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90007b2c:	699a      	ldr	r2, [r3, #24]
90007b2e:	0790      	lsls	r0, r2, #30
90007b30:	d501      	bpl.n	90007b36 <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
90007b32:	2200      	movs	r2, #0
90007b34:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007b36:	699a      	ldr	r2, [r3, #24]
90007b38:	07d1      	lsls	r1, r2, #31
90007b3a:	d403      	bmi.n	90007b44 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90007b3c:	699a      	ldr	r2, [r3, #24]
90007b3e:	f042 0201 	orr.w	r2, r2, #1
90007b42:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
90007b44:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007b46:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90007b48:	4834      	ldr	r0, [pc, #208]	; (90007c1c <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
90007b4a:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
90007b4c:	4002      	ands	r2, r0
      return HAL_ERROR;
90007b4e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90007b50:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90007b52:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90007b54:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90007b58:	4323      	orrs	r3, r4
90007b5a:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90007b5c:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007b60:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
90007b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007b68:	0550      	lsls	r0, r2, #21
90007b6a:	d4d3      	bmi.n	90007b14 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007b6c:	0592      	lsls	r2, r2, #22
90007b6e:	d4d8      	bmi.n	90007b22 <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
90007b70:	2900      	cmp	r1, #0
90007b72:	d1db      	bne.n	90007b2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
90007b74:	1c72      	adds	r2, r6, #1
90007b76:	d0a5      	beq.n	90007ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007b78:	f7ff faf6 	bl	90007168 <HAL_GetTick>
90007b7c:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90007b7e:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007b80:	42b0      	cmp	r0, r6
90007b82:	d801      	bhi.n	90007b88 <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
90007b84:	2e00      	cmp	r6, #0
90007b86:	d19d      	bne.n	90007ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
90007b88:	699a      	ldr	r2, [r3, #24]
90007b8a:	f012 0202 	ands.w	r2, r2, #2
90007b8e:	d199      	bne.n	90007ac4 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007b90:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007b92:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
90007b94:	2001      	movs	r0, #1
90007b96:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007b9a:	430b      	orrs	r3, r1
90007b9c:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007b9e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007ba2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
90007ba6:	e7dd      	b.n	90007b64 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
90007ba8:	4621      	mov	r1, r4
90007baa:	e7a9      	b.n	90007b00 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007bac:	0692      	lsls	r2, r2, #26
90007bae:	d42f      	bmi.n	90007c10 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
90007bb0:	f1ba 0f00 	cmp.w	sl, #0
90007bb4:	d1a1      	bne.n	90007afa <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007bb6:	f7ff fad7 	bl	90007168 <HAL_GetTick>
90007bba:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007bbc:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007bbe:	4286      	cmp	r6, r0
90007bc0:	d301      	bcc.n	90007bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x112>
90007bc2:	2e00      	cmp	r6, #0
90007bc4:	d18b      	bne.n	90007ade <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007bc6:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90007bc8:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007bcc:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90007bce:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007bd0:	0409      	lsls	r1, r1, #16
90007bd2:	d50b      	bpl.n	90007bec <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
90007bd4:	0441      	lsls	r1, r0, #17
90007bd6:	d409      	bmi.n	90007bec <I2C_WaitOnTXISFlagUntilTimeout+0x138>
90007bd8:	2a20      	cmp	r2, #32
90007bda:	d007      	beq.n	90007bec <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007bdc:	685a      	ldr	r2, [r3, #4]
90007bde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90007be2:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90007be4:	f7ff fac0 	bl	90007168 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007be8:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
90007bea:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007bec:	699a      	ldr	r2, [r3, #24]
90007bee:	0690      	lsls	r0, r2, #26
90007bf0:	f53f af75 	bmi.w	90007ade <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007bf4:	f7ff fab8 	bl	90007168 <HAL_GetTick>
90007bf8:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007bfa:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007bfc:	2819      	cmp	r0, #25
90007bfe:	d9f5      	bls.n	90007bec <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007c00:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
90007c04:	f04f 0a01 	mov.w	sl, #1
90007c08:	e769      	b.n	90007ade <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
90007c0a:	2000      	movs	r0, #0
}
90007c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
90007c10:	f1ba 0f00 	cmp.w	sl, #0
90007c14:	f43f af6f 	beq.w	90007af6 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
90007c18:	e76f      	b.n	90007afa <I2C_WaitOnTXISFlagUntilTimeout+0x46>
90007c1a:	bf00      	nop
90007c1c:	fe00e800 	.word	0xfe00e800

90007c20 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
90007c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007c24:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007c26:	6802      	ldr	r2, [r0, #0]
{
90007c28:	460f      	mov	r7, r1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007c2a:	6991      	ldr	r1, [r2, #24]
90007c2c:	068c      	lsls	r4, r1, #26
90007c2e:	d469      	bmi.n	90007d04 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
90007c30:	4606      	mov	r6, r0
90007c32:	4613      	mov	r3, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007c34:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
90007c38:	6994      	ldr	r4, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
90007c3a:	f014 0410 	ands.w	r4, r4, #16
90007c3e:	d064      	beq.n	90007d0a <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  uint32_t error_code = 0;
90007c40:	2500      	movs	r5, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007c42:	4613      	mov	r3, r2
  uint32_t tickstart = Tickstart;
90007c44:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
90007c46:	f8c2 901c 	str.w	r9, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
90007c4a:	46aa      	mov	sl, r5
90007c4c:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007c4e:	699a      	ldr	r2, [r3, #24]
90007c50:	d15d      	bne.n	90007d0e <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
90007c52:	0690      	lsls	r0, r2, #26
90007c54:	f100 8083 	bmi.w	90007d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90007c58:	f1ba 0f00 	cmp.w	sl, #0
90007c5c:	d104      	bne.n	90007c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
90007c5e:	699c      	ldr	r4, [r3, #24]
90007c60:	06a1      	lsls	r1, r4, #26
90007c62:	d5fc      	bpl.n	90007c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90007c64:	2220      	movs	r2, #32
90007c66:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
90007c68:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
90007c6c:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
90007c6e:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
90007c70:	05d0      	lsls	r0, r2, #23
90007c72:	d530      	bpl.n	90007cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xb6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007c74:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007c78:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
90007c7a:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
90007c7e:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007c80:	d504      	bpl.n	90007c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007c82:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
90007c86:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
90007c8a:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007c8c:	0591      	lsls	r1, r2, #22
90007c8e:	d504      	bpl.n	90007c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007c90:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
90007c94:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
90007c98:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
90007c9a:	699a      	ldr	r2, [r3, #24]
90007c9c:	0795      	lsls	r5, r2, #30
90007c9e:	d501      	bpl.n	90007ca4 <I2C_WaitOnSTOPFlagUntilTimeout+0x84>
    hi2c->Instance->TXDR = 0x00U;
90007ca0:	2200      	movs	r2, #0
90007ca2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
90007ca4:	699a      	ldr	r2, [r3, #24]
90007ca6:	07d0      	lsls	r0, r2, #31
90007ca8:	d403      	bmi.n	90007cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
90007caa:	699a      	ldr	r2, [r3, #24]
90007cac:	f042 0201 	orr.w	r2, r2, #1
90007cb0:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
90007cb2:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007cb4:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
90007cb6:	4837      	ldr	r0, [pc, #220]	; (90007d94 <I2C_WaitOnSTOPFlagUntilTimeout+0x174>)
    hi2c->State = HAL_I2C_STATE_READY;
90007cb8:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
90007cba:	4002      	ands	r2, r0
      return HAL_ERROR;
90007cbc:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
90007cbe:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
90007cc0:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
90007cc2:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
90007cc6:	4323      	orrs	r3, r4
90007cc8:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
90007cca:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
90007cce:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
90007cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
90007cd6:	0550      	lsls	r0, r2, #21
90007cd8:	d4d3      	bmi.n	90007c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
90007cda:	0592      	lsls	r2, r2, #22
90007cdc:	d4d8      	bmi.n	90007c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  if (status != HAL_OK)
90007cde:	2900      	cmp	r1, #0
90007ce0:	d1db      	bne.n	90007c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007ce2:	f7ff fa41 	bl	90007168 <HAL_GetTick>
90007ce6:	eba0 0008 	sub.w	r0, r0, r8
90007cea:	42b8      	cmp	r0, r7
90007cec:	d801      	bhi.n	90007cf2 <I2C_WaitOnSTOPFlagUntilTimeout+0xd2>
90007cee:	2f00      	cmp	r7, #0
90007cf0:	d132      	bne.n	90007d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x138>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90007cf2:	6832      	ldr	r2, [r6, #0]
90007cf4:	6991      	ldr	r1, [r2, #24]
90007cf6:	4613      	mov	r3, r2
90007cf8:	f011 0120 	ands.w	r1, r1, #32
90007cfc:	d034      	beq.n	90007d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007cfe:	6991      	ldr	r1, [r2, #24]
90007d00:	0689      	lsls	r1, r1, #26
90007d02:	d599      	bpl.n	90007c38 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
90007d04:	2000      	movs	r0, #0
}
90007d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
90007d0a:	4621      	mov	r1, r4
90007d0c:	e7af      	b.n	90007c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007d0e:	0692      	lsls	r2, r2, #26
90007d10:	d425      	bmi.n	90007d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x13e>
90007d12:	f1ba 0f00 	cmp.w	sl, #0
90007d16:	d1a7      	bne.n	90007c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007d18:	f7ff fa26 	bl	90007168 <HAL_GetTick>
90007d1c:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007d1e:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
90007d20:	4287      	cmp	r7, r0
90007d22:	d301      	bcc.n	90007d28 <I2C_WaitOnSTOPFlagUntilTimeout+0x108>
90007d24:	2f00      	cmp	r7, #0
90007d26:	d191      	bne.n	90007c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
90007d28:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
90007d2a:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007d2e:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
90007d30:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
90007d32:	0409      	lsls	r1, r1, #16
90007d34:	d503      	bpl.n	90007d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              (tmp1 != I2C_CR2_STOP) && \
90007d36:	0441      	lsls	r1, r0, #17
90007d38:	d401      	bmi.n	90007d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
90007d3a:	2a20      	cmp	r2, #32
90007d3c:	d121      	bne.n	90007d82 <I2C_WaitOnSTOPFlagUntilTimeout+0x162>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007d3e:	699a      	ldr	r2, [r3, #24]
90007d40:	0690      	lsls	r0, r2, #26
90007d42:	d483      	bmi.n	90007c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007d44:	f7ff fa10 	bl	90007168 <HAL_GetTick>
90007d48:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
90007d4a:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
90007d4c:	2819      	cmp	r0, #25
90007d4e:	d9f6      	bls.n	90007d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
90007d50:	2520      	movs	r5, #32
              status = HAL_ERROR;
90007d52:	f04f 0a01 	mov.w	sl, #1
90007d56:	e779      	b.n	90007c4c <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
90007d58:	6833      	ldr	r3, [r6, #0]
90007d5a:	461a      	mov	r2, r3
90007d5c:	e7cf      	b.n	90007cfe <I2C_WaitOnSTOPFlagUntilTimeout+0xde>
    if (status == HAL_OK)
90007d5e:	f1ba 0f00 	cmp.w	sl, #0
90007d62:	f43f af7f 	beq.w	90007c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
90007d66:	e77f      	b.n	90007c68 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007d68:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007d6a:	2220      	movs	r2, #32
          __HAL_UNLOCK(hi2c);
90007d6c:	2001      	movs	r0, #1
90007d6e:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007d72:	4313      	orrs	r3, r2
90007d74:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007d76:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007d7a:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
90007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
90007d82:	685a      	ldr	r2, [r3, #4]
90007d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
90007d88:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
90007d8a:	f7ff f9ed 	bl	90007168 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
90007d8e:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
90007d90:	4604      	mov	r4, r0
90007d92:	e7d4      	b.n	90007d3e <I2C_WaitOnSTOPFlagUntilTimeout+0x11e>
90007d94:	fe00e800 	.word	0xfe00e800

90007d98 <HAL_I2C_MspInit>:
}
90007d98:	4770      	bx	lr
90007d9a:	bf00      	nop

90007d9c <HAL_I2C_Init>:
  if (hi2c == NULL)
90007d9c:	2800      	cmp	r0, #0
90007d9e:	d04e      	beq.n	90007e3e <HAL_I2C_Init+0xa2>
{
90007da0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
90007da2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
90007da6:	4604      	mov	r4, r0
90007da8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90007dac:	2b00      	cmp	r3, #0
90007dae:	d041      	beq.n	90007e34 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
90007db0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90007db2:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007db4:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
90007db6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
90007dba:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007dc0:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
90007dc2:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007dc6:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
90007dc8:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
90007dca:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
90007dcc:	689a      	ldr	r2, [r3, #8]
90007dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90007dd2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90007dd4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
90007dd6:	d029      	beq.n	90007e2c <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007dd8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007ddc:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
90007dde:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007de0:	d102      	bne.n	90007de8 <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
90007de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
90007de6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007de8:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
90007dea:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007dee:	4915      	ldr	r1, [pc, #84]	; (90007e44 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007df0:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
90007df2:	4301      	orrs	r1, r0
90007df4:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
90007df6:	68d9      	ldr	r1, [r3, #12]
90007df8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
90007dfc:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
90007dfe:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007e02:	4302      	orrs	r2, r0
90007e04:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007e08:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
90007e0c:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007e0e:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007e10:	4301      	orrs	r1, r0
  return HAL_OK;
90007e12:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
90007e14:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
90007e16:	6819      	ldr	r1, [r3, #0]
90007e18:	f041 0101 	orr.w	r1, r1, #1
90007e1c:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007e1e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
90007e20:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
90007e24:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007e26:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90007e2a:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
90007e2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
90007e30:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
90007e32:	e7d9      	b.n	90007de8 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
90007e34:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
90007e38:	f7ff ffae 	bl	90007d98 <HAL_I2C_MspInit>
90007e3c:	e7b8      	b.n	90007db0 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
90007e3e:	2001      	movs	r0, #1
}
90007e40:	4770      	bx	lr
90007e42:	bf00      	nop
90007e44:	02008000 	.word	0x02008000

90007e48 <HAL_I2C_MspDeInit>:
90007e48:	4770      	bx	lr
90007e4a:	bf00      	nop

90007e4c <HAL_I2C_DeInit>:
  if (hi2c == NULL)
90007e4c:	b1b0      	cbz	r0, 90007e7c <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
90007e4e:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
90007e50:	2324      	movs	r3, #36	; 0x24
{
90007e52:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
90007e54:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
90007e58:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
90007e5a:	6813      	ldr	r3, [r2, #0]
90007e5c:	f023 0301 	bic.w	r3, r3, #1
90007e60:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
90007e62:	f7ff fff1 	bl	90007e48 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007e66:	2300      	movs	r3, #0
90007e68:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
90007e6a:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
90007e6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
90007e70:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
90007e74:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
90007e76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
90007e7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
90007e7c:	2001      	movs	r0, #1
}
90007e7e:	4770      	bx	lr

90007e80 <HAL_I2C_Mem_Write>:
{
90007e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90007e84:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
90007e86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
90007e8a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
90007e8e:	2b20      	cmp	r3, #32
{
90007e90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
90007e92:	d132      	bne.n	90007efa <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
90007e94:	9b08      	ldr	r3, [sp, #32]
90007e96:	4604      	mov	r4, r0
90007e98:	b34b      	cbz	r3, 90007eee <HAL_I2C_Mem_Write+0x6e>
90007e9a:	f1ba 0f00 	cmp.w	sl, #0
90007e9e:	d026      	beq.n	90007eee <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
90007ea0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
90007ea4:	2b01      	cmp	r3, #1
90007ea6:	d028      	beq.n	90007efa <HAL_I2C_Mem_Write+0x7a>
90007ea8:	2301      	movs	r3, #1
90007eaa:	460e      	mov	r6, r1
90007eac:	4691      	mov	r9, r2
90007eae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
90007eb2:	f7ff f959 	bl	90007168 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007eb6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
90007eb8:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007eba:	699a      	ldr	r2, [r3, #24]
90007ebc:	0411      	lsls	r1, r2, #16
90007ebe:	d51f      	bpl.n	90007f00 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007ec0:	f7ff f952 	bl	90007168 <HAL_GetTick>
90007ec4:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007ec6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90007ec8:	2819      	cmp	r0, #25
90007eca:	d9f6      	bls.n	90007eba <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90007ecc:	699a      	ldr	r2, [r3, #24]
90007ece:	0412      	lsls	r2, r2, #16
90007ed0:	d5f3      	bpl.n	90007eba <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ed2:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ed4:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007ed6:	2200      	movs	r2, #0
      return HAL_ERROR;
90007ed8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007eda:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
90007edc:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90007ee0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90007ee2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90007ee6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
90007eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007eee:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90007ef2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90007ef4:	6463      	str	r3, [r4, #68]	; 0x44
}
90007ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
90007efa:	2002      	movs	r0, #2
}
90007efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
90007f00:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007f02:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90007f04:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007f08:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
90007f0a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007f0e:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90007f10:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007f12:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90007f14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
90007f18:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90007f1a:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
90007f1c:	496d      	ldr	r1, [pc, #436]	; (900080d4 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
90007f1e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90007f22:	685a      	ldr	r2, [r3, #4]
90007f24:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90007f26:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
90007f2a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90007f2e:	496a      	ldr	r1, [pc, #424]	; (900080d8 <HAL_I2C_Mem_Write+0x258>)
90007f30:	4332      	orrs	r2, r6
90007f32:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007f34:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
90007f36:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007f38:	4639      	mov	r1, r7
90007f3a:	f7ff fdbb 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
90007f3e:	2800      	cmp	r0, #0
90007f40:	d175      	bne.n	9000802e <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
90007f42:	f1b8 0f01 	cmp.w	r8, #1
90007f46:	d00a      	beq.n	90007f5e <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007f48:	ea4f 2219 	mov.w	r2, r9, lsr #8
90007f4c:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007f4e:	4639      	mov	r1, r7
90007f50:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
90007f52:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
90007f54:	462a      	mov	r2, r5
90007f56:	f7ff fdad 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
90007f5a:	2800      	cmp	r0, #0
90007f5c:	d167      	bne.n	9000802e <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
90007f5e:	fa5f f389 	uxtb.w	r3, r9
90007f62:	6822      	ldr	r2, [r4, #0]
90007f64:	6293      	str	r3, [r2, #40]	; 0x28
90007f66:	1c78      	adds	r0, r7, #1
90007f68:	d14a      	bne.n	90008000 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007f6a:	6993      	ldr	r3, [r2, #24]
90007f6c:	0619      	lsls	r1, r3, #24
90007f6e:	d5fc      	bpl.n	90007f6a <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007f70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007f72:	b29b      	uxth	r3, r3
90007f74:	2bff      	cmp	r3, #255	; 0xff
90007f76:	f240 808a 	bls.w	9000808e <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
90007f7a:	6853      	ldr	r3, [r2, #4]
90007f7c:	4957      	ldr	r1, [pc, #348]	; (900080dc <HAL_I2C_Mem_Write+0x25c>)
90007f7e:	400b      	ands	r3, r1
90007f80:	4957      	ldr	r1, [pc, #348]	; (900080e0 <HAL_I2C_Mem_Write+0x260>)
90007f82:	4333      	orrs	r3, r6
90007f84:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90007f86:	23ff      	movs	r3, #255	; 0xff
90007f88:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007f8a:	6051      	str	r1, [r2, #4]
90007f8c:	f8df 814c 	ldr.w	r8, [pc, #332]	; 900080dc <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007f90:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90007f94:	f8df 9148 	ldr.w	r9, [pc, #328]	; 900080e0 <HAL_I2C_Mem_Write+0x260>
90007f98:	e004      	b.n	90007fa4 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
90007f9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007f9c:	b29b      	uxth	r3, r3
90007f9e:	2b00      	cmp	r3, #0
90007fa0:	f000 8083 	beq.w	900080aa <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90007fa4:	462a      	mov	r2, r5
90007fa6:	4639      	mov	r1, r7
90007fa8:	4620      	mov	r0, r4
90007faa:	f7ff fd83 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
90007fae:	2800      	cmp	r0, #0
90007fb0:	d16b      	bne.n	9000808a <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007fb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90007fb4:	6821      	ldr	r1, [r4, #0]
90007fb6:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
90007fba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
90007fbc:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
90007fbe:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
90007fc0:	3b01      	subs	r3, #1
      hi2c->XferCount--;
90007fc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
90007fc4:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
90007fc6:	3a01      	subs	r2, #1
      hi2c->XferSize--;
90007fc8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
90007fca:	b292      	uxth	r2, r2
90007fcc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90007fce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
90007fd0:	b292      	uxth	r2, r2
90007fd2:	2a00      	cmp	r2, #0
90007fd4:	d0e1      	beq.n	90007f9a <HAL_I2C_Mem_Write+0x11a>
90007fd6:	2b00      	cmp	r3, #0
90007fd8:	d1df      	bne.n	90007f9a <HAL_I2C_Mem_Write+0x11a>
90007fda:	1c78      	adds	r0, r7, #1
90007fdc:	d12c      	bne.n	90008038 <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90007fde:	698b      	ldr	r3, [r1, #24]
90007fe0:	061a      	lsls	r2, r3, #24
90007fe2:	d5fc      	bpl.n	90007fde <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
90007fe4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90007fe6:	b29b      	uxth	r3, r3
90007fe8:	2bff      	cmp	r3, #255	; 0xff
90007fea:	d940      	bls.n	9000806e <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
90007fec:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90007fee:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90007ff2:	ea03 0308 	and.w	r3, r3, r8
90007ff6:	4333      	orrs	r3, r6
90007ff8:	ea43 0309 	orr.w	r3, r3, r9
90007ffc:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
90007ffe:	e7cc      	b.n	90007f9a <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008000:	6993      	ldr	r3, [r2, #24]
90008002:	061b      	lsls	r3, r3, #24
90008004:	d4b4      	bmi.n	90007f70 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008006:	f7ff f8af 	bl	90007168 <HAL_GetTick>
9000800a:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000800c:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000800e:	4287      	cmp	r7, r0
90008010:	d301      	bcc.n	90008016 <HAL_I2C_Mem_Write+0x196>
90008012:	2f00      	cmp	r7, #0
90008014:	d1a7      	bne.n	90007f66 <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008016:	6993      	ldr	r3, [r2, #24]
90008018:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000801c:	d1a3      	bne.n	90007f66 <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000801e:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008020:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008022:	430a      	orrs	r2, r1
90008024:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008026:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000802a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000802e:	2300      	movs	r3, #0
      return HAL_ERROR;
90008030:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
90008032:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
90008036:	e75e      	b.n	90007ef6 <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008038:	698b      	ldr	r3, [r1, #24]
9000803a:	061b      	lsls	r3, r3, #24
9000803c:	d4d2      	bmi.n	90007fe4 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000803e:	f7ff f893 	bl	90007168 <HAL_GetTick>
90008042:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008044:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008046:	4287      	cmp	r7, r0
90008048:	d301      	bcc.n	9000804e <HAL_I2C_Mem_Write+0x1ce>
9000804a:	2f00      	cmp	r7, #0
9000804c:	d1c5      	bne.n	90007fda <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000804e:	698b      	ldr	r3, [r1, #24]
90008050:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90008054:	d1c1      	bne.n	90007fda <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008056:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008058:	2120      	movs	r1, #32
          return HAL_ERROR;
9000805a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000805c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008060:	430a      	orrs	r2, r1
90008062:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008064:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
9000806c:	e743      	b.n	90007ef6 <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
9000806e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90008070:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008072:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
90008074:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008076:	684b      	ldr	r3, [r1, #4]
90008078:	ea03 0308 	and.w	r3, r3, r8
9000807c:	4333      	orrs	r3, r6
9000807e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
90008082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90008086:	604b      	str	r3, [r1, #4]
}
90008088:	e787      	b.n	90007f9a <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
9000808a:	2001      	movs	r0, #1
9000808c:	e733      	b.n	90007ef6 <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
9000808e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008090:	4812      	ldr	r0, [pc, #72]	; (900080dc <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
90008092:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
90008094:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
90008096:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008098:	6853      	ldr	r3, [r2, #4]
9000809a:	4003      	ands	r3, r0
9000809c:	4333      	orrs	r3, r6
9000809e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
900080a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
900080a6:	6053      	str	r3, [r2, #4]
}
900080a8:	e770      	b.n	90007f8c <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
900080aa:	462a      	mov	r2, r5
900080ac:	4639      	mov	r1, r7
900080ae:	4620      	mov	r0, r4
900080b0:	f7ff fdb6 	bl	90007c20 <I2C_WaitOnSTOPFlagUntilTimeout>
900080b4:	2800      	cmp	r0, #0
900080b6:	d1e8      	bne.n	9000808a <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900080b8:	6823      	ldr	r3, [r4, #0]
900080ba:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
900080bc:	4d09      	ldr	r5, [pc, #36]	; (900080e4 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
900080be:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
900080c0:	685a      	ldr	r2, [r3, #4]
900080c2:	402a      	ands	r2, r5
900080c4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
900080c6:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
900080ca:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
900080ce:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
900080d2:	e710      	b.n	90007ef6 <HAL_I2C_Mem_Write+0x76>
900080d4:	fc009800 	.word	0xfc009800
900080d8:	01002000 	.word	0x01002000
900080dc:	fc009c00 	.word	0xfc009c00
900080e0:	01ff0000 	.word	0x01ff0000
900080e4:	fe00e800 	.word	0xfe00e800

900080e8 <HAL_I2C_Mem_Read>:
{
900080e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900080ec:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
900080ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
900080f2:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  if (hi2c->State == HAL_I2C_STATE_READY)
900080f6:	2b20      	cmp	r3, #32
{
900080f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
900080fa:	d137      	bne.n	9000816c <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
900080fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900080fe:	4683      	mov	fp, r0
90008100:	b36b      	cbz	r3, 9000815e <HAL_I2C_Mem_Read+0x76>
90008102:	f1b9 0f00 	cmp.w	r9, #0
90008106:	d02a      	beq.n	9000815e <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
90008108:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000810c:	2b01      	cmp	r3, #1
9000810e:	d02d      	beq.n	9000816c <HAL_I2C_Mem_Read+0x84>
90008110:	2301      	movs	r3, #1
90008112:	460f      	mov	r7, r1
90008114:	4690      	mov	r8, r2
90008116:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000811a:	f7ff f825 	bl	90007168 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000811e:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
90008122:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008124:	699a      	ldr	r2, [r3, #24]
90008126:	0410      	lsls	r0, r2, #16
90008128:	d523      	bpl.n	90008172 <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000812a:	f7ff f81d 	bl	90007168 <HAL_GetTick>
9000812e:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008130:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008134:	2819      	cmp	r0, #25
90008136:	d9f5      	bls.n	90008124 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008138:	699a      	ldr	r2, [r3, #24]
9000813a:	0411      	lsls	r1, r2, #16
9000813c:	d5f2      	bpl.n	90008124 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000813e:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008142:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008144:	2200      	movs	r2, #0
      return HAL_ERROR;
90008146:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008148:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000814a:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000814e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008152:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
90008156:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
9000815a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000815e:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
90008162:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
90008164:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
}
90008168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
9000816c:	2002      	movs	r0, #2
}
9000816e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
90008172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
90008174:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
90008176:	f3c7 0709 	ubfx	r7, r7, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000817a:	4658      	mov	r0, fp
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000817c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008180:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
90008182:	f8cb 2024 	str.w	r2, [fp, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008186:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
90008188:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000818c:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
90008190:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
90008194:	4983      	ldr	r1, [pc, #524]	; (900083a4 <HAL_I2C_Mem_Read+0x2bc>)
    hi2c->XferCount = Size;
90008196:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000819a:	685a      	ldr	r2, [r3, #4]
9000819c:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000819e:	b2e1      	uxtb	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
900081a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900081a4:	4629      	mov	r1, r5
  MODIFY_REG(hi2c->Instance->CR2, \
900081a6:	433a      	orrs	r2, r7
900081a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
900081ac:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900081ae:	4632      	mov	r2, r6
900081b0:	f7ff fc80 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
900081b4:	2800      	cmp	r0, #0
900081b6:	f040 8091 	bne.w	900082dc <HAL_I2C_Mem_Read+0x1f4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
900081ba:	2c01      	cmp	r4, #1
900081bc:	d00c      	beq.n	900081d8 <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900081be:	ea4f 2218 	mov.w	r2, r8, lsr #8
900081c2:	f8db 3000 	ldr.w	r3, [fp]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900081c6:	4629      	mov	r1, r5
900081c8:	4658      	mov	r0, fp
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
900081ca:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
900081cc:	4632      	mov	r2, r6
900081ce:	f7ff fc71 	bl	90007ab4 <I2C_WaitOnTXISFlagUntilTimeout>
900081d2:	2800      	cmp	r0, #0
900081d4:	f040 8082 	bne.w	900082dc <HAL_I2C_Mem_Read+0x1f4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
900081d8:	fa5f f388 	uxtb.w	r3, r8
900081dc:	f8db 4000 	ldr.w	r4, [fp]
900081e0:	62a3      	str	r3, [r4, #40]	; 0x28
900081e2:	1c6a      	adds	r2, r5, #1
900081e4:	d160      	bne.n	900082a8 <HAL_I2C_Mem_Read+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900081e6:	69a3      	ldr	r3, [r4, #24]
900081e8:	065b      	lsls	r3, r3, #25
900081ea:	d5fc      	bpl.n	900081e6 <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
900081ec:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
900081f0:	b29b      	uxth	r3, r3
900081f2:	2bff      	cmp	r3, #255	; 0xff
900081f4:	f240 80ae 	bls.w	90008354 <HAL_I2C_Mem_Read+0x26c>
  MODIFY_REG(hi2c->Instance->CR2, \
900081f8:	6863      	ldr	r3, [r4, #4]
900081fa:	4a6a      	ldr	r2, [pc, #424]	; (900083a4 <HAL_I2C_Mem_Read+0x2bc>)
900081fc:	4013      	ands	r3, r2
900081fe:	4a6a      	ldr	r2, [pc, #424]	; (900083a8 <HAL_I2C_Mem_Read+0x2c0>)
90008200:	433b      	orrs	r3, r7
90008202:	431a      	orrs	r2, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
90008204:	23ff      	movs	r3, #255	; 0xff
90008206:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000820a:	6062      	str	r2, [r4, #4]
9000820c:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 900083b4 <HAL_I2C_Mem_Read+0x2cc>
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008210:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
90008214:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 900083b8 <HAL_I2C_Mem_Read+0x2d0>
90008218:	1c69      	adds	r1, r5, #1
9000821a:	d127      	bne.n	9000826c <HAL_I2C_Mem_Read+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000821c:	69a3      	ldr	r3, [r4, #24]
9000821e:	075a      	lsls	r2, r3, #29
90008220:	d5fc      	bpl.n	9000821c <HAL_I2C_Mem_Read+0x134>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
90008222:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008224:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
90008228:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
9000822a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
9000822e:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
      hi2c->XferCount--;
90008232:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
90008234:	3301      	adds	r3, #1
      hi2c->XferCount--;
90008236:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
90008238:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
      hi2c->XferSize--;
9000823c:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
90008240:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
90008244:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008246:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
9000824a:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000824c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
9000824e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
90008252:	b10a      	cbz	r2, 90008258 <HAL_I2C_Mem_Read+0x170>
90008254:	2b00      	cmp	r3, #0
90008256:	d046      	beq.n	900082e6 <HAL_I2C_Mem_Read+0x1fe>
    } while (hi2c->XferCount > 0U);
90008258:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
9000825c:	b29b      	uxth	r3, r3
9000825e:	2b00      	cmp	r3, #0
90008260:	f000 8088 	beq.w	90008374 <HAL_I2C_Mem_Read+0x28c>
90008264:	1c69      	adds	r1, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008266:	f8db 4000 	ldr.w	r4, [fp]
9000826a:	d0d7      	beq.n	9000821c <HAL_I2C_Mem_Read+0x134>
9000826c:	69a3      	ldr	r3, [r4, #24]
9000826e:	075b      	lsls	r3, r3, #29
90008270:	d4d7      	bmi.n	90008222 <HAL_I2C_Mem_Read+0x13a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008272:	f7fe ff79 	bl	90007168 <HAL_GetTick>
90008276:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008278:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000827c:	4285      	cmp	r5, r0
9000827e:	d301      	bcc.n	90008284 <HAL_I2C_Mem_Read+0x19c>
90008280:	2d00      	cmp	r5, #0
90008282:	d1c9      	bne.n	90008218 <HAL_I2C_Mem_Read+0x130>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
90008284:	69a3      	ldr	r3, [r4, #24]
90008286:	f013 0304 	ands.w	r3, r3, #4
9000828a:	d1c5      	bne.n	90008218 <HAL_I2C_Mem_Read+0x130>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000828c:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
90008290:	2120      	movs	r1, #32
          return HAL_ERROR;
90008292:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
90008294:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
90008298:	430a      	orrs	r2, r1
9000829a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000829e:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900082a2:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
900082a6:	e75f      	b.n	90008168 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900082a8:	69a3      	ldr	r3, [r4, #24]
900082aa:	0658      	lsls	r0, r3, #25
900082ac:	d49e      	bmi.n	900081ec <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900082ae:	f7fe ff5b 	bl	90007168 <HAL_GetTick>
900082b2:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900082b4:	f8db 4000 	ldr.w	r4, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
900082b8:	4285      	cmp	r5, r0
900082ba:	d301      	bcc.n	900082c0 <HAL_I2C_Mem_Read+0x1d8>
900082bc:	2d00      	cmp	r5, #0
900082be:	d190      	bne.n	900081e2 <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
900082c0:	69a3      	ldr	r3, [r4, #24]
900082c2:	f013 0340 	ands.w	r3, r3, #64	; 0x40
900082c6:	d18c      	bne.n	900081e2 <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900082c8:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900082cc:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
900082ce:	430a      	orrs	r2, r1
900082d0:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
900082d4:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
900082d8:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
900082dc:	2300      	movs	r3, #0
      return HAL_ERROR;
900082de:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
900082e0:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
      return HAL_ERROR;
900082e4:	e740      	b.n	90008168 <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
900082e6:	f8db 2000 	ldr.w	r2, [fp]
900082ea:	1c68      	adds	r0, r5, #1
900082ec:	d111      	bne.n	90008312 <HAL_I2C_Mem_Read+0x22a>
900082ee:	6993      	ldr	r3, [r2, #24]
900082f0:	0619      	lsls	r1, r3, #24
900082f2:	d5fc      	bpl.n	900082ee <HAL_I2C_Mem_Read+0x206>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
900082f4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
900082f8:	b29b      	uxth	r3, r3
900082fa:	2bff      	cmp	r3, #255	; 0xff
900082fc:	d91a      	bls.n	90008334 <HAL_I2C_Mem_Read+0x24c>
  MODIFY_REG(hi2c->Instance->CR2, \
900082fe:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
90008300:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008304:	ea03 0308 	and.w	r3, r3, r8
90008308:	433b      	orrs	r3, r7
9000830a:	ea43 0309 	orr.w	r3, r3, r9
9000830e:	6053      	str	r3, [r2, #4]
}
90008310:	e7a2      	b.n	90008258 <HAL_I2C_Mem_Read+0x170>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
90008312:	6993      	ldr	r3, [r2, #24]
90008314:	061b      	lsls	r3, r3, #24
90008316:	d4ed      	bmi.n	900082f4 <HAL_I2C_Mem_Read+0x20c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008318:	f7fe ff26 	bl	90007168 <HAL_GetTick>
9000831c:	1b80      	subs	r0, r0, r6
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000831e:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90008322:	4285      	cmp	r5, r0
90008324:	d301      	bcc.n	9000832a <HAL_I2C_Mem_Read+0x242>
90008326:	2d00      	cmp	r5, #0
90008328:	d1df      	bne.n	900082ea <HAL_I2C_Mem_Read+0x202>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000832a:	6993      	ldr	r3, [r2, #24]
9000832c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
90008330:	d1db      	bne.n	900082ea <HAL_I2C_Mem_Read+0x202>
90008332:	e7ab      	b.n	9000828c <HAL_I2C_Mem_Read+0x1a4>
          hi2c->XferSize = hi2c->XferCount;
90008334:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
90008338:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000833a:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
9000833c:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008340:	6853      	ldr	r3, [r2, #4]
90008342:	ea03 0308 	and.w	r3, r3, r8
90008346:	433b      	orrs	r3, r7
90008348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000834c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
90008350:	6053      	str	r3, [r2, #4]
}
90008352:	e781      	b.n	90008258 <HAL_I2C_Mem_Read+0x170>
      hi2c->XferSize = hi2c->XferCount;
90008354:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
90008358:	4912      	ldr	r1, [pc, #72]	; (900083a4 <HAL_I2C_Mem_Read+0x2bc>)
      hi2c->XferSize = hi2c->XferCount;
9000835a:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000835c:	b2da      	uxtb	r2, r3
      hi2c->XferSize = hi2c->XferCount;
9000835e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
90008362:	6863      	ldr	r3, [r4, #4]
90008364:	400b      	ands	r3, r1
90008366:	433b      	orrs	r3, r7
90008368:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000836c:	4a0f      	ldr	r2, [pc, #60]	; (900083ac <HAL_I2C_Mem_Read+0x2c4>)
9000836e:	431a      	orrs	r2, r3
90008370:	6062      	str	r2, [r4, #4]
}
90008372:	e74b      	b.n	9000820c <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
90008374:	4632      	mov	r2, r6
90008376:	4629      	mov	r1, r5
90008378:	4658      	mov	r0, fp
9000837a:	f7ff fc51 	bl	90007c20 <I2C_WaitOnSTOPFlagUntilTimeout>
9000837e:	b970      	cbnz	r0, 9000839e <HAL_I2C_Mem_Read+0x2b6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008380:	f8db 3000 	ldr.w	r3, [fp]
90008384:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
90008386:	4c0a      	ldr	r4, [pc, #40]	; (900083b0 <HAL_I2C_Mem_Read+0x2c8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
90008388:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000838a:	685a      	ldr	r2, [r3, #4]
9000838c:	4022      	ands	r2, r4
9000838e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
90008390:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008394:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
90008398:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
9000839c:	e6e4      	b.n	90008168 <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
9000839e:	2001      	movs	r0, #1
900083a0:	e6e2      	b.n	90008168 <HAL_I2C_Mem_Read+0x80>
900083a2:	bf00      	nop
900083a4:	fc009800 	.word	0xfc009800
900083a8:	01ff2400 	.word	0x01ff2400
900083ac:	02002400 	.word	0x02002400
900083b0:	fe00e800 	.word	0xfe00e800
900083b4:	fc009c00 	.word	0xfc009c00
900083b8:	01ff0000 	.word	0x01ff0000

900083bc <HAL_I2C_GetState>:
  return hi2c->State;
900083bc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
900083c0:	4770      	bx	lr
900083c2:	bf00      	nop

900083c4 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
900083c4:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
900083c6:	4770      	bx	lr

900083c8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
900083c8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
900083cc:	2a20      	cmp	r2, #32
900083ce:	d123      	bne.n	90008418 <HAL_I2CEx_ConfigAnalogFilter+0x50>
900083d0:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
900083d4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
900083d8:	4603      	mov	r3, r0
900083da:	2a01      	cmp	r2, #1
900083dc:	d01c      	beq.n	90008418 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
900083de:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
900083e0:	2024      	movs	r0, #36	; 0x24
{
900083e2:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
900083e4:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
900083e8:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
900083ec:	6810      	ldr	r0, [r2, #0]
900083ee:	f020 0001 	bic.w	r0, r0, #1
900083f2:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
900083f4:	6810      	ldr	r0, [r2, #0]
900083f6:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
900083fa:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
900083fc:	6810      	ldr	r0, [r2, #0]
900083fe:	4301      	orrs	r1, r0

    return HAL_OK;
90008400:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
90008402:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008404:	6811      	ldr	r1, [r2, #0]
90008406:	f041 0101 	orr.w	r1, r1, #1
9000840a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000840c:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008410:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008414:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
90008418:	2002      	movs	r0, #2
}
9000841a:	4770      	bx	lr

9000841c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000841c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
90008420:	2a20      	cmp	r2, #32
90008422:	d122      	bne.n	9000846a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
90008424:	4603      	mov	r3, r0
{
90008426:	b500      	push	{lr}
90008428:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000842c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
90008430:	2a01      	cmp	r2, #1
90008432:	d01c      	beq.n	9000846e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
90008434:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
90008436:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
90008438:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
9000843c:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
90008440:	6810      	ldr	r0, [r2, #0]
90008442:	f020 0001 	bic.w	r0, r0, #1
90008446:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
90008448:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
9000844a:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
9000844e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
90008452:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
90008454:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
90008456:	6811      	ldr	r1, [r2, #0]
90008458:	f041 0101 	orr.w	r1, r1, #1
9000845c:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000845e:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
90008462:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
90008466:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000846a:	2002      	movs	r0, #2
}
9000846c:	4770      	bx	lr
    return HAL_BUSY;
9000846e:	2002      	movs	r0, #2
}
90008470:	f85d fb04 	ldr.w	pc, [sp], #4

90008474 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
90008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90008478:	460d      	mov	r5, r1
9000847a:	4614      	mov	r4, r2
9000847c:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
9000847e:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
90008480:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
90008482:	2701      	movs	r7, #1
  p = 0;
90008484:	f04f 0800 	mov.w	r8, #0
90008488:	e006      	b.n	90008498 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
9000848a:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
9000848e:	eb06 0308 	add.w	r3, r6, r8
90008492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90008496:	d837      	bhi.n	90008508 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
90008498:	eb05 0008 	add.w	r0, r5, r8
9000849c:	4632      	mov	r2, r6
9000849e:	4639      	mov	r1, r7
    while (i != 0UL)
900084a0:	b116      	cbz	r6, 900084a8 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
900084a2:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
900084a4:	f01b fb7a 	bl	90023b9c <memset>
  for (l = 0; l < 16UL; l++)
900084a8:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
900084aa:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
900084ae:	d1ec      	bne.n	9000848a <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
900084b0:	2300      	movs	r3, #0
900084b2:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
900084b6:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
900084ba:	7828      	ldrb	r0, [r5, #0]
900084bc:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
900084be:	b300      	cbz	r0, 90008502 <JPEG_Bits_To_SizeCodes+0x8e>
900084c0:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
900084c4:	2701      	movs	r7, #1
  p = 0;
900084c6:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
900084c8:	4288      	cmp	r0, r1
900084ca:	d10f      	bne.n	900084ec <JPEG_Bits_To_SizeCodes+0x78>
900084cc:	eb02 0008 	add.w	r0, r2, r8
900084d0:	1c56      	adds	r6, r2, #1
900084d2:	eb05 0c02 	add.w	ip, r5, r2
900084d6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
900084da:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
900084dc:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
900084e0:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
900084e2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
900084e6:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
900084e8:	458e      	cmp	lr, r1
900084ea:	d0f7      	beq.n	900084dc <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
900084ec:	291f      	cmp	r1, #31
900084ee:	d80b      	bhi.n	90008508 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
900084f0:	fa07 f001 	lsl.w	r0, r7, r1
900084f4:	4298      	cmp	r0, r3
900084f6:	d907      	bls.n	90008508 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
900084f8:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
900084fa:	005b      	lsls	r3, r3, #1
    si++;
900084fc:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
900084fe:	2800      	cmp	r0, #0
90008500:	d1e2      	bne.n	900084c8 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
90008502:	2000      	movs	r0, #0
}
90008504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
90008508:	2001      	movs	r0, #1
}
9000850a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000850e:	bf00      	nop

90008510 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
90008510:	b5f0      	push	{r4, r5, r6, r7, lr}
90008512:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
90008516:	460d      	mov	r5, r1
90008518:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000851a:	ab01      	add	r3, sp, #4
9000851c:	aa43      	add	r2, sp, #268	; 0x10c
9000851e:	a902      	add	r1, sp, #8
90008520:	f7ff ffa8 	bl	90008474 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
90008524:	b9d0      	cbnz	r0, 9000855c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
90008526:	9f01      	ldr	r7, [sp, #4]
90008528:	b1c7      	cbz	r7, 9000855c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
9000852a:	370f      	adds	r7, #15
9000852c:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
90008530:	a902      	add	r1, sp, #8
90008532:	f104 0c0f 	add.w	ip, r4, #15
90008536:	4427      	add	r7, r4
90008538:	e009      	b.n	9000854e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000853a:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
9000853e:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008540:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008544:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008548:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000854a:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
9000854c:	d006      	beq.n	9000855c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
9000854e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008552:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008554:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
90008558:	d9ef      	bls.n	9000853a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000855a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000855c:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
90008560:	bdf0      	pop	{r4, r5, r6, r7, pc}
90008562:	bf00      	nop

90008564 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
90008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
90008568:	6804      	ldr	r4, [r0, #0]
{
9000856a:	b093      	sub	sp, #76	; 0x4c
9000856c:	4608      	mov	r0, r1
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000856e:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
90008572:	429a      	cmp	r2, r3
90008574:	f000 809d 	beq.w	900086b2 <JPEG_Set_HuffDC_Mem+0x14e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
90008578:	f504 63fc 	add.w	r3, r4, #2016	; 0x7e0
9000857c:	429a      	cmp	r2, r3
9000857e:	d003      	beq.n	90008588 <JPEG_Set_HuffDC_Mem+0x24>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
90008580:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
90008582:	b013      	add	sp, #76	; 0x4c
90008584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
90008588:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
9000858c:	a903      	add	r1, sp, #12
9000858e:	f7ff ffbf 	bl	90008510 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
90008592:	2800      	cmp	r0, #0
90008594:	d1f5      	bne.n	90008582 <JPEG_Set_HuffDC_Mem+0x1e>
    *addressDef = 0x0FFF0FFF;
90008596:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000859a:	f89d a017 	ldrb.w	sl, [sp, #23]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000859e:	f89d e016 	ldrb.w	lr, [sp, #22]
    *addressDef = 0x0FFF0FFF;
900085a2:	6023      	str	r3, [r4, #0]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085a4:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
    *addressDef = 0x0FFF0FFF;
900085a8:	6063      	str	r3, [r4, #4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085aa:	ea4f 2e0e 	mov.w	lr, lr, lsl #8
900085ae:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085b2:	f40a 6a70 	and.w	sl, sl, #3840	; 0xf00
900085b6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085ba:	f40e 6e70 	and.w	lr, lr, #3840	; 0xf00
900085be:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085c0:	f89d 9015 	ldrb.w	r9, [sp, #21]
900085c4:	ea4a 0a02 	orr.w	sl, sl, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085c8:	f89d c014 	ldrb.w	ip, [sp, #20]
900085cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085d0:	ea4f 2909 	mov.w	r9, r9, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085d4:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085d8:	f89d 8013 	ldrb.w	r8, [sp, #19]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085dc:	9301      	str	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085de:	f409 6970 	and.w	r9, r9, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
900085e6:	f40c 6c70 	and.w	ip, ip, #3840	; 0xf00
900085ea:	f89d 1012 	ldrb.w	r1, [sp, #18]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085ee:	ea4f 2808 	mov.w	r8, r8, lsl #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085f2:	ea4e 0e03 	orr.w	lr, lr, r3
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085f6:	f89d 7011 	ldrb.w	r7, [sp, #17]
900085fa:	f408 6870 	and.w	r8, r8, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
900085fe:	0209      	lsls	r1, r1, #8
      *address = lsb | (msb << 16);
90008600:	ea4e 4e0a 	orr.w	lr, lr, sl, lsl #16
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008604:	f89d 2010 	ldrb.w	r2, [sp, #16]
90008608:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000860c:	023f      	lsls	r7, r7, #8
      *address = lsb | (msb << 16);
9000860e:	f844 ec04 	str.w	lr, [r4, #-4]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008612:	0212      	lsls	r2, r2, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008614:	f89d e03c 	ldrb.w	lr, [sp, #60]	; 0x3c
90008618:	f407 6770 	and.w	r7, r7, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000861c:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008620:	f89d 600f 	ldrb.w	r6, [sp, #15]
90008624:	ea49 090e 	orr.w	r9, r9, lr
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008628:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000862c:	0236      	lsls	r6, r6, #8
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000862e:	9b01      	ldr	r3, [sp, #4]
90008630:	ea4c 0c0e 	orr.w	ip, ip, lr
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008634:	f89d 500d 	ldrb.w	r5, [sp, #13]
90008638:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000863c:	f89d b00c 	ldrb.w	fp, [sp, #12]
      *address = lsb | (msb << 16);
90008640:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008644:	022d      	lsls	r5, r5, #8
      *address = lsb | (msb << 16);
90008646:	f844 cc08 	str.w	ip, [r4, #-8]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000864a:	ea4f 2b0b 	mov.w	fp, fp, lsl #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000864e:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90008652:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008656:	f40b 6b70 	and.w	fp, fp, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000865a:	ea48 080c 	orr.w	r8, r8, ip
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000865e:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
90008662:	ea41 010c 	orr.w	r1, r1, ip
      *address = lsb | (msb << 16);
90008666:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
9000866a:	f844 1c0c 	str.w	r1, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000866e:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
90008672:	430f      	orrs	r7, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008674:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
90008678:	430a      	orrs	r2, r1
      *address = lsb | (msb << 16);
9000867a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
9000867e:	f844 2c10 	str.w	r2, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008682:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
90008686:	4316      	orrs	r6, r2
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008688:	f89d 2020 	ldrb.w	r2, [sp, #32]
9000868c:	4313      	orrs	r3, r2
      *address = lsb | (msb << 16);
9000868e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90008692:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
90008696:	f89d 301c 	ldrb.w	r3, [sp, #28]
9000869a:	431d      	orrs	r5, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000869c:	f89d 3018 	ldrb.w	r3, [sp, #24]
900086a0:	ea4b 0303 	orr.w	r3, fp, r3
      *address = lsb | (msb << 16);
900086a4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
900086a8:	f844 3c18 	str.w	r3, [r4, #-24]
}
900086ac:	b013      	add	sp, #76	; 0x4c
900086ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
900086b2:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
900086b6:	e769      	b.n	9000858c <JPEG_Set_HuffDC_Mem+0x28>

900086b8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
900086b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
900086bc:	6804      	ldr	r4, [r0, #0]
{
900086be:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
900086c2:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
900086c4:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
900086c8:	429a      	cmp	r2, r3
900086ca:	d042      	beq.n	90008752 <JPEG_Set_HuffAC_Mem+0x9a>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
900086cc:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
900086d0:	429a      	cmp	r2, r3
900086d2:	d004      	beq.n	900086de <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
900086d4:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
900086d6:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
900086da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
900086de:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
900086e2:	4628      	mov	r0, r5
900086e4:	466b      	mov	r3, sp
900086e6:	f20d 4234 	addw	r2, sp, #1076	; 0x434
900086ea:	a901      	add	r1, sp, #4
900086ec:	f7ff fec2 	bl	90008474 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
900086f0:	2800      	cmp	r0, #0
900086f2:	d1f0      	bne.n	900086d6 <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
900086f4:	9b00      	ldr	r3, [sp, #0]
900086f6:	b37b      	cbz	r3, 90008758 <JPEG_Set_HuffAC_Mem+0xa0>
900086f8:	330f      	adds	r3, #15
900086fa:	f20d 4734 	addw	r7, sp, #1076	; 0x434
900086fe:	f10d 0c04 	add.w	ip, sp, #4
90008702:	f105 020f 	add.w	r2, r5, #15
90008706:	eb05 0e03 	add.w	lr, r5, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000870a:	ae42      	add	r6, sp, #264	; 0x108
9000870c:	e011      	b.n	90008732 <JPEG_Set_HuffAC_Mem+0x7a>
      l = (msb * 10UL) + lsb - 1UL;
9000870e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
90008712:	2ba1      	cmp	r3, #161	; 0xa1
90008714:	d8de      	bhi.n	900086d4 <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008716:	f81c 5b01 	ldrb.w	r5, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000871a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
9000871e:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
90008722:	4596      	cmp	lr, r2
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
90008724:	f105 35ff 	add.w	r5, r5, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
90008728:	4631      	mov	r1, r6
9000872a:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000872e:	54f5      	strb	r5, [r6, r3]
  while (k < lastK)
90008730:	d013      	beq.n	9000875a <JPEG_Set_HuffAC_Mem+0xa2>
    l = AC_BitsValsTable->HuffVal[k];
90008732:	f812 1f01 	ldrb.w	r1, [r2, #1]!
      l = 160; /*l = 0x00 EOB code*/
90008736:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
90008738:	2900      	cmp	r1, #0
9000873a:	d0ec      	beq.n	90008716 <JPEG_Set_HuffAC_Mem+0x5e>
      msb = (l & 0xF0UL) >> 4;
9000873c:	090d      	lsrs	r5, r1, #4
      lsb = (l & 0x0FUL);
9000873e:	f001 030f 	and.w	r3, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
90008742:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
90008744:	eb05 0585 	add.w	r5, r5, r5, lsl #2
90008748:	f103 33ff 	add.w	r3, r3, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000874c:	d1df      	bne.n	9000870e <JPEG_Set_HuffAC_Mem+0x56>
      l = 161;
9000874e:	23a1      	movs	r3, #161	; 0xa1
90008750:	e7e1      	b.n	90008716 <JPEG_Set_HuffAC_Mem+0x5e>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
90008752:	f204 6444 	addw	r4, r4, #1604	; 0x644
90008756:	e7c4      	b.n	900086e2 <JPEG_Set_HuffAC_Mem+0x2a>
90008758:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
9000875a:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
9000875e:	4a1a      	ldr	r2, [pc, #104]	; (900087c8 <JPEG_Set_HuffAC_Mem+0x110>)
90008760:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
90008764:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
90008768:	6023      	str	r3, [r4, #0]
9000876a:	6063      	str	r3, [r4, #4]
9000876c:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
90008770:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
90008772:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
90008776:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
90008778:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
9000877c:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
90008780:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
90008782:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
90008786:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
90008788:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000878c:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000878e:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008792:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
90008796:	0212      	lsls	r2, r2, #8
90008798:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000879c:	021b      	lsls	r3, r3, #8
9000879e:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900087a2:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
900087a6:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900087a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900087ac:	433a      	orrs	r2, r7
    while (i > 1UL)
900087ae:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
900087b0:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
900087b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
900087b8:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
900087bc:	d1e7      	bne.n	9000878e <JPEG_Set_HuffAC_Mem+0xd6>
}
900087be:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
900087c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900087c6:	bf00      	nop
900087c8:	0fd10fd0 	.word	0x0fd10fd0

900087cc <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
900087cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
900087ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
900087d2:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900087d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
900087d6:	f003 0303 	and.w	r3, r3, #3
900087da:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
900087dc:	6803      	ldr	r3, [r0, #0]
900087de:	685a      	ldr	r2, [r3, #4]
900087e0:	bf0c      	ite	eq
900087e2:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
900087e6:	f022 0208 	bicne.w	r2, r2, #8
900087ea:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900087ec:	681a      	ldr	r2, [r3, #0]
900087ee:	f022 0201 	bic.w	r2, r2, #1
900087f2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900087f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900087f6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900087fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
900087fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900087fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
90008802:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90008804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000880a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000880c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000880e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008812:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
90008814:	681a      	ldr	r2, [r3, #0]
90008816:	f042 0201 	orr.w	r2, r2, #1
9000881a:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000881c:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000881e:	f002 020c 	and.w	r2, r2, #12
90008822:	2a08      	cmp	r2, #8
90008824:	d00a      	beq.n	9000883c <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008826:	6d42      	ldr	r2, [r0, #84]	; 0x54
90008828:	f002 020c 	and.w	r2, r2, #12
9000882c:	2a0c      	cmp	r2, #12
9000882e:	d000      	beq.n	90008832 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
90008830:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008834:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90008838:	631a      	str	r2, [r3, #48]	; 0x30
}
9000883a:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
9000883c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000883e:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
90008842:	631a      	str	r2, [r3, #48]	; 0x30
90008844:	4770      	bx	lr
90008846:	bf00      	nop

90008848 <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008848:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000884a:	6a82      	ldr	r2, [r0, #40]	; 0x28
{
9000884c:	b5f0      	push	{r4, r5, r6, r7, lr}
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000884e:	6a8d      	ldr	r5, [r1, #40]	; 0x28
{
90008850:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
90008852:	42aa      	cmp	r2, r5
90008854:	d32d      	bcc.n	900088b2 <JPEG_DMA_StartProcess+0x6a>
90008856:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008858:	6b40      	ldr	r0, [r0, #52]	; 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000885a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000885c:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000885e:	42b3      	cmp	r3, r6
90008860:	d327      	bcc.n	900088b2 <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90008862:	4f1b      	ldr	r7, [pc, #108]	; (900088d0 <JPEG_DMA_StartProcess+0x88>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
90008864:	f8df c074 	ldr.w	ip, [pc, #116]	; 900088dc <JPEG_DMA_StartProcess+0x94>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
90008868:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000886a:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000886e:	4919      	ldr	r1, [pc, #100]	; (900088d4 <JPEG_DMA_StartProcess+0x8c>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
90008870:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
90008872:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
90008874:	4918      	ldr	r1, [pc, #96]	; (900088d8 <JPEG_DMA_StartProcess+0x90>)
90008876:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
90008878:	b1a5      	cbz	r5, 900088a4 <JPEG_DMA_StartProcess+0x5c>
9000887a:	b19e      	cbz	r6, 900088a4 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000887c:	fbb2 f1f5 	udiv	r1, r2, r5
90008880:	fb05 2111 	mls	r1, r5, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008884:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008886:	1a52      	subs	r2, r2, r1
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90008888:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000888a:	62a2      	str	r2, [r4, #40]	; 0x28
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000888c:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000888e:	fbb3 f2f6 	udiv	r2, r3, r6
90008892:	fb06 3212 	mls	r2, r6, r2, r3
90008896:	1a9b      	subs	r3, r3, r2
90008898:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000889a:	9500      	str	r5, [sp, #0]
9000889c:	69e2      	ldr	r2, [r4, #28]
9000889e:	f001 fbb5 	bl	9000a00c <HAL_MDMA_Start_IT>
900088a2:	b148      	cbz	r0, 900088b8 <JPEG_DMA_StartProcess+0x70>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900088a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
900088a6:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900088a8:	f043 0304 	orr.w	r3, r3, #4
900088ac:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
900088ae:	b003      	add	sp, #12
900088b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
900088b2:	2001      	movs	r0, #1
}
900088b4:	b003      	add	sp, #12
900088b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
900088b8:	6822      	ldr	r2, [r4, #0]
900088ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
900088bc:	69a1      	ldr	r1, [r4, #24]
900088be:	3240      	adds	r2, #64	; 0x40
900088c0:	9500      	str	r5, [sp, #0]
900088c2:	6b20      	ldr	r0, [r4, #48]	; 0x30
900088c4:	f001 fba2 	bl	9000a00c <HAL_MDMA_Start_IT>
900088c8:	2800      	cmp	r0, #0
900088ca:	d0f3      	beq.n	900088b4 <JPEG_DMA_StartProcess+0x6c>
900088cc:	e7ea      	b.n	900088a4 <JPEG_DMA_StartProcess+0x5c>
900088ce:	bf00      	nop
900088d0:	90008e01 	.word	0x90008e01
900088d4:	90009079 	.word	0x90009079
900088d8:	900090f9 	.word	0x900090f9
900088dc:	90008e2d 	.word	0x90008e2d

900088e0 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
900088e0:	6803      	ldr	r3, [r0, #0]
900088e2:	685a      	ldr	r2, [r3, #4]
900088e4:	f002 0203 	and.w	r2, r2, #3
900088e8:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
900088ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900088ee:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
900088f0:	f000 8094 	beq.w	90008a1c <HAL_JPEG_GetInfo.part.0+0x13c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
900088f4:	685c      	ldr	r4, [r3, #4]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900088f6:	685a      	ldr	r2, [r3, #4]
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
900088f8:	f014 0403 	ands.w	r4, r4, #3
900088fc:	d172      	bne.n	900089e4 <HAL_JPEG_GetInfo.part.0+0x104>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
900088fe:	0c12      	lsrs	r2, r2, #16
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90008900:	600c      	str	r4, [r1, #0]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008902:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008904:	68da      	ldr	r2, [r3, #12]
90008906:	0c12      	lsrs	r2, r2, #16
90008908:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000890a:	4a5f      	ldr	r2, [pc, #380]	; (90008a88 <HAL_JPEG_GetInfo.part.0+0x1a8>)
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
9000890c:	f103 0c50 	add.w	ip, r3, #80	; 0x50
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
90008910:	f8c9 4004 	str.w	r4, [r9, #4]
  uint32_t quality = 0;
90008914:	2600      	movs	r6, #0
90008916:	f102 0540 	add.w	r5, r2, #64	; 0x40
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000891a:	f04f 0e64 	mov.w	lr, #100	; 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
9000891e:	f241 3488 	movw	r4, #5000	; 0x1388
90008922:	e033      	b.n	9000898c <HAL_JPEG_GetInfo.part.0+0xac>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008924:	f892 8001 	ldrb.w	r8, [r2, #1]
90008928:	fb0e f707 	mul.w	r7, lr, r7
9000892c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000892e:	f811 8008 	ldrb.w	r8, [r1, r8]
90008932:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
90008936:	2f64      	cmp	r7, #100	; 0x64
90008938:	d961      	bls.n	900089fe <HAL_JPEG_GetInfo.part.0+0x11e>
          quality += 5000UL / scale;
9000893a:	fbb4 f7f7 	udiv	r7, r4, r7
9000893e:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008940:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
90008944:	2f01      	cmp	r7, #1
90008946:	d03d      	beq.n	900089c4 <HAL_JPEG_GetInfo.part.0+0xe4>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008948:	f892 8002 	ldrb.w	r8, [r2, #2]
9000894c:	fb0e f707 	mul.w	r7, lr, r7
90008950:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90008952:	f811 8008 	ldrb.w	r8, [r1, r8]
90008956:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000895a:	2f64      	cmp	r7, #100	; 0x64
9000895c:	d94a      	bls.n	900089f4 <HAL_JPEG_GetInfo.part.0+0x114>
          quality += 5000UL / scale;
9000895e:	fbb4 f7f7 	udiv	r7, r4, r7
90008962:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008964:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
90008966:	2b01      	cmp	r3, #1
90008968:	d030      	beq.n	900089cc <HAL_JPEG_GetInfo.part.0+0xec>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000896a:	78d7      	ldrb	r7, [r2, #3]
9000896c:	fb0e f303 	mul.w	r3, lr, r3
90008970:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
90008972:	5dcf      	ldrb	r7, [r1, r7]
90008974:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
90008978:	2b64      	cmp	r3, #100	; 0x64
9000897a:	d94a      	bls.n	90008a12 <HAL_JPEG_GetInfo.part.0+0x132>
          quality += 5000UL / scale;
9000897c:	fbb4 f3f3 	udiv	r3, r4, r3
90008980:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90008982:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
90008984:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
90008988:	4295      	cmp	r5, r2
9000898a:	d025      	beq.n	900089d8 <HAL_JPEG_GetInfo.part.0+0xf8>
    quantRow = *tableAddress;
9000898c:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
90008990:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
90008992:	2f01      	cmp	r7, #1
90008994:	d02c      	beq.n	900089f0 <HAL_JPEG_GetInfo.part.0+0x110>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
90008996:	f892 8000 	ldrb.w	r8, [r2]
9000899a:	fb0e f707 	mul.w	r7, lr, r7
9000899e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
900089a0:	f811 8008 	ldrb.w	r8, [r1, r8]
900089a4:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
900089a8:	2f64      	cmp	r7, #100	; 0x64
900089aa:	d92d      	bls.n	90008a08 <HAL_JPEG_GetInfo.part.0+0x128>
          quality += 5000UL / scale;
900089ac:	fbb4 f7f7 	udiv	r7, r4, r7
900089b0:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900089b2:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
900089b6:	2f01      	cmp	r7, #1
900089b8:	d1b4      	bne.n	90008924 <HAL_JPEG_GetInfo.part.0+0x44>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900089ba:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
900089be:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
900089c0:	2f01      	cmp	r7, #1
900089c2:	d1c1      	bne.n	90008948 <HAL_JPEG_GetInfo.part.0+0x68>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
900089c4:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
900089c6:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
900089c8:	2b01      	cmp	r3, #1
900089ca:	d1ce      	bne.n	9000896a <HAL_JPEG_GetInfo.part.0+0x8a>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900089cc:	3204      	adds	r2, #4
        quality += 100UL;
900089ce:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
900089d0:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
900089d4:	4295      	cmp	r5, r2
900089d6:	d1d9      	bne.n	9000898c <HAL_JPEG_GetInfo.part.0+0xac>
  }

  return (quality / 64UL);
900089d8:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
900089da:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
900089dc:	f8c9 6010 	str.w	r6, [r9, #16]
}
900089e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
900089e4:	f002 0203 	and.w	r2, r2, #3
900089e8:	2a03      	cmp	r2, #3
900089ea:	d14a      	bne.n	90008a82 <HAL_JPEG_GetInfo.part.0+0x1a2>
900089ec:	2430      	movs	r4, #48	; 0x30
900089ee:	e016      	b.n	90008a1e <HAL_JPEG_GetInfo.part.0+0x13e>
        quality += 100UL;
900089f0:	3664      	adds	r6, #100	; 0x64
900089f2:	e7de      	b.n	900089b2 <HAL_JPEG_GetInfo.part.0+0xd2>
          quality += (200UL - scale) / 2UL;
900089f4:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
900089f8:	eb06 0657 	add.w	r6, r6, r7, lsr #1
900089fc:	e7b2      	b.n	90008964 <HAL_JPEG_GetInfo.part.0+0x84>
900089fe:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90008a02:	eb06 0657 	add.w	r6, r6, r7, lsr #1
90008a06:	e79b      	b.n	90008940 <HAL_JPEG_GetInfo.part.0+0x60>
90008a08:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
90008a0c:	eb06 0657 	add.w	r6, r6, r7, lsr #1
90008a10:	e7cf      	b.n	900089b2 <HAL_JPEG_GetInfo.part.0+0xd2>
90008a12:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
90008a16:	eb06 0653 	add.w	r6, r6, r3, lsr #1
90008a1a:	e7b2      	b.n	90008982 <HAL_JPEG_GetInfo.part.0+0xa2>
90008a1c:	2410      	movs	r4, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008a1e:	685a      	ldr	r2, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
90008a20:	f8c9 4000 	str.w	r4, [r9]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
90008a24:	0c12      	lsrs	r2, r2, #16
90008a26:	f8c9 2008 	str.w	r2, [r9, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008a2a:	68da      	ldr	r2, [r3, #12]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90008a2c:	691d      	ldr	r5, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
90008a2e:	695f      	ldr	r7, [r3, #20]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008a30:	0c12      	lsrs	r2, r2, #16
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
90008a32:	699e      	ldr	r6, [r3, #24]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008a34:	f017 0ff0 	tst.w	r7, #240	; 0xf0
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
90008a38:	f8c9 200c 	str.w	r2, [r9, #12]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
90008a3c:	ea4f 1616 	mov.w	r6, r6, lsr #4
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
90008a40:	ea4f 1215 	mov.w	r2, r5, lsr #4
90008a44:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
90008a48:	ea4f 1c17 	mov.w	ip, r7, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008a4c:	d108      	bne.n	90008a60 <HAL_JPEG_GetInfo.part.0+0x180>
90008a4e:	2d01      	cmp	r5, #1
90008a50:	d106      	bne.n	90008a60 <HAL_JPEG_GetInfo.part.0+0x180>
90008a52:	f016 0f0f 	tst.w	r6, #15
90008a56:	bf0c      	ite	eq
90008a58:	2401      	moveq	r4, #1
90008a5a:	2400      	movne	r4, #0
90008a5c:	0064      	lsls	r4, r4, #1
90008a5e:	e754      	b.n	9000890a <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008a60:	ea42 020c 	orr.w	r2, r2, ip
90008a64:	f012 040f 	ands.w	r4, r2, #15
90008a68:	f43f af4f 	beq.w	9000890a <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
90008a6c:	ea4c 0206 	orr.w	r2, ip, r6
90008a70:	f3c2 0203 	ubfx	r2, r2, #0, #4
90008a74:	2d03      	cmp	r5, #3
90008a76:	bf08      	it	eq
90008a78:	2a00      	cmpeq	r2, #0
90008a7a:	bf0c      	ite	eq
90008a7c:	2401      	moveq	r4, #1
90008a7e:	2400      	movne	r4, #0
90008a80:	e743      	b.n	9000890a <HAL_JPEG_GetInfo.part.0+0x2a>
    return HAL_ERROR;
90008a82:	2001      	movs	r0, #1
}
90008a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90008a88:	90026fa4 	.word	0x90026fa4

90008a8c <HAL_JPEG_Init>:
  if (hjpeg == NULL)
90008a8c:	2800      	cmp	r0, #0
90008a8e:	f000 810b 	beq.w	90008ca8 <HAL_JPEG_Init+0x21c>
{
90008a92:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
90008a94:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
90008a98:	4604      	mov	r4, r0
90008a9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90008a9e:	2b00      	cmp	r3, #0
90008aa0:	f000 80fd 	beq.w	90008c9e <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
90008aa4:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
90008aa6:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
90008aa8:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90008aaa:	4880      	ldr	r0, [pc, #512]	; (90008cac <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
90008aac:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
90008ab0:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008ab2:	f041 0101 	orr.w	r1, r1, #1
90008ab6:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008ab8:	6811      	ldr	r1, [r2, #0]
90008aba:	f021 0101 	bic.w	r1, r1, #1
90008abe:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008ac0:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008ac2:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
90008ac6:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
90008ac8:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008aca:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
90008ace:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
90008ad0:	6b11      	ldr	r1, [r2, #48]	; 0x30
90008ad2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
90008ad6:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90008ad8:	6b91      	ldr	r1, [r2, #56]	; 0x38
90008ada:	f041 0160 	orr.w	r1, r1, #96	; 0x60
90008ade:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90008ae0:	4973      	ldr	r1, [pc, #460]	; (90008cb0 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
90008ae2:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008ae4:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
90008ae6:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
90008ae8:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008aec:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
90008af0:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
90008af4:	4b6f      	ldr	r3, [pc, #444]	; (90008cb4 <HAL_JPEG_Init+0x228>)
90008af6:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
90008afa:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008afe:	486e      	ldr	r0, [pc, #440]	; (90008cb8 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008b00:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008b04:	4b6d      	ldr	r3, [pc, #436]	; (90008cbc <HAL_JPEG_Init+0x230>)
90008b06:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
90008b0a:	496d      	ldr	r1, [pc, #436]	; (90008cc0 <HAL_JPEG_Init+0x234>)
90008b0c:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008b10:	4b6c      	ldr	r3, [pc, #432]	; (90008cc4 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008b12:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
90008b16:	486c      	ldr	r0, [pc, #432]	; (90008cc8 <HAL_JPEG_Init+0x23c>)
90008b18:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
90008b1c:	496b      	ldr	r1, [pc, #428]	; (90008ccc <HAL_JPEG_Init+0x240>)
90008b1e:	4b6c      	ldr	r3, [pc, #432]	; (90008cd0 <HAL_JPEG_Init+0x244>)
90008b20:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
90008b24:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
90008b28:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90008b2c:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
90008b30:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
90008b34:	4967      	ldr	r1, [pc, #412]	; (90008cd4 <HAL_JPEG_Init+0x248>)
90008b36:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
90008b38:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
90008b3c:	430b      	orrs	r3, r1
  *address = value;
90008b3e:	4966      	ldr	r1, [pc, #408]	; (90008cd8 <HAL_JPEG_Init+0x24c>)
90008b40:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
90008b44:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
90008b48:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
90008b4c:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008b4e:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
90008b52:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
90008b54:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90008b58:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
90008b5c:	42b1      	cmp	r1, r6
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008b5e:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
90008b62:	ea43 030c 	orr.w	r3, r3, ip
90008b66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
90008b6a:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
90008b6e:	d1eb      	bne.n	90008b48 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
90008b70:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008b74:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
90008b78:	4856      	ldr	r0, [pc, #344]	; (90008cd4 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008b7a:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
90008b7c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
90008b7e:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
90008b82:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
90008b86:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
90008b8a:	4003      	ands	r3, r0
  *address = value;
90008b8c:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008b90:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
90008b94:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
90008b98:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
90008b9c:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
90008ba0:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
90008ba4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
90008ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
90008baa:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
90008bae:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
90008bb2:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
90008bb4:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008bb6:	4b49      	ldr	r3, [pc, #292]	; (90008cdc <HAL_JPEG_Init+0x250>)
  *address = value;
90008bb8:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90008bbc:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008bc0:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
90008bc4:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
90008bc8:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
90008bcc:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
90008bd0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
90008bd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
90008bd6:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
90008bda:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
90008bde:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008be0:	483f      	ldr	r0, [pc, #252]	; (90008ce0 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
90008be2:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008be4:	4b3f      	ldr	r3, [pc, #252]	; (90008ce4 <HAL_JPEG_Init+0x258>)
  *address = value;
90008be6:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008bea:	493f      	ldr	r1, [pc, #252]	; (90008ce8 <HAL_JPEG_Init+0x25c>)
90008bec:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
90008bf0:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
90008bf4:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
90008bf8:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
90008bfc:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
90008c00:	493a      	ldr	r1, [pc, #232]	; (90008cec <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
90008c02:	b29b      	uxth	r3, r3
90008c04:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
90008c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
90008c0c:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90008c10:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
90008c14:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008c16:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
90008c1a:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
90008c1c:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
90008c20:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
90008c24:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
90008c26:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
90008c2a:	ea43 030e 	orr.w	r3, r3, lr
90008c2e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
90008c32:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
90008c36:	d1eb      	bne.n	90008c10 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
90008c38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
90008c3c:	4926      	ldr	r1, [pc, #152]	; (90008cd8 <HAL_JPEG_Init+0x24c>)
90008c3e:	4620      	mov	r0, r4
90008c40:	f7ff fd3a 	bl	900086b8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90008c44:	b118      	cbz	r0, 90008c4e <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
90008c46:	2301      	movs	r3, #1
    return HAL_ERROR;
90008c48:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
90008c4a:	6523      	str	r3, [r4, #80]	; 0x50
}
90008c4c:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
90008c4e:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
90008c50:	4620      	mov	r0, r4
90008c52:	4926      	ldr	r1, [pc, #152]	; (90008cec <HAL_JPEG_Init+0x260>)
90008c54:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
90008c58:	f7ff fd2e 	bl	900086b8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
90008c5c:	2800      	cmp	r0, #0
90008c5e:	d1f2      	bne.n	90008c46 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
90008c60:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
90008c62:	4620      	mov	r0, r4
90008c64:	4922      	ldr	r1, [pc, #136]	; (90008cf0 <HAL_JPEG_Init+0x264>)
90008c66:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
90008c6a:	f7ff fc7b 	bl	90008564 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
90008c6e:	2800      	cmp	r0, #0
90008c70:	d1e9      	bne.n	90008c46 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
90008c72:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
90008c74:	4620      	mov	r0, r4
90008c76:	491f      	ldr	r1, [pc, #124]	; (90008cf4 <HAL_JPEG_Init+0x268>)
90008c78:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
90008c7c:	f7ff fc72 	bl	90008564 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
90008c80:	2800      	cmp	r0, #0
90008c82:	d1e0      	bne.n	90008c46 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90008c84:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
90008c86:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
90008c88:	6853      	ldr	r3, [r2, #4]
90008c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
90008c8e:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
90008c90:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
90008c92:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
90008c94:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
90008c98:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
90008c9a:	6560      	str	r0, [r4, #84]	; 0x54
}
90008c9c:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
90008c9e:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
90008ca2:	f7fb fd9f 	bl	900047e4 <HAL_JPEG_MspInit>
90008ca6:	e6fd      	b.n	90008aa4 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
90008ca8:	2001      	movs	r0, #1
}
90008caa:	4770      	bx	lr
90008cac:	90026f64 	.word	0x90026f64
90008cb0:	90026eec 	.word	0x90026eec
90008cb4:	01050100 	.word	0x01050100
90008cb8:	0b0a0908 	.word	0x0b0a0908
90008cbc:	07060504 	.word	0x07060504
90008cc0:	03020100 	.word	0x03020100
90008cc4:	7d010000 	.word	0x7d010000
90008cc8:	04040505 	.word	0x04040505
90008ccc:	03040203 	.word	0x03040203
90008cd0:	03010200 	.word	0x03010200
90008cd4:	ffff0000 	.word	0xffff0000
90008cd8:	90026e38 	.word	0x90026e38
90008cdc:	09080706 	.word	0x09080706
90008ce0:	01000404 	.word	0x01000404
90008ce4:	04040201 	.word	0x04040201
90008ce8:	05070403 	.word	0x05070403
90008cec:	90026d84 	.word	0x90026d84
90008cf0:	90026f48 	.word	0x90026f48
90008cf4:	90026f2c 	.word	0x90026f2c

90008cf8 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
90008cf8:	2b00      	cmp	r3, #0
90008cfa:	bf18      	it	ne
90008cfc:	2900      	cmpne	r1, #0
90008cfe:	d03b      	beq.n	90008d78 <HAL_JPEG_Decode_DMA+0x80>
{
90008d00:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
90008d02:	fab0 f580 	clz	r5, r0
90008d06:	4604      	mov	r4, r0
90008d08:	096d      	lsrs	r5, r5, #5
90008d0a:	b330      	cbz	r0, 90008d5a <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
90008d0c:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
90008d10:	f1bc 0f01 	cmp.w	ip, #1
90008d14:	d02e      	beq.n	90008d74 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90008d16:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
90008d1a:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90008d1e:	45f4      	cmp	ip, lr
90008d20:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
90008d24:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
90008d28:	d119      	bne.n	90008d5e <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
90008d2a:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
90008d2c:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
90008d30:	9b04      	ldr	r3, [sp, #16]
90008d32:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
90008d34:	2304      	movs	r3, #4
90008d36:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
90008d3a:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008d3c:	f023 030f 	bic.w	r3, r3, #15
90008d40:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
90008d42:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008d44:	f043 030e 	orr.w	r3, r3, #14
90008d48:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
90008d4a:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
90008d4c:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
90008d4e:	f7ff fd3d 	bl	900087cc <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
90008d52:	f7ff fd79 	bl	90008848 <JPEG_DMA_StartProcess>
90008d56:	b930      	cbnz	r0, 90008d66 <HAL_JPEG_Decode_DMA+0x6e>
}
90008d58:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90008d5a:	2001      	movs	r0, #1
}
90008d5c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
90008d5e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
90008d60:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
90008d64:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
90008d66:	2306      	movs	r3, #6
      return HAL_ERROR;
90008d68:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
90008d6a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
90008d6e:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
90008d72:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
90008d74:	2002      	movs	r0, #2
}
90008d76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90008d78:	2001      	movs	r0, #1
}
90008d7a:	4770      	bx	lr

90008d7c <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008d7c:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008d7e:	f003 030c 	and.w	r3, r3, #12
90008d82:	2b0c      	cmp	r3, #12
90008d84:	d01a      	beq.n	90008dbc <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008d86:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008d88:	f003 030c 	and.w	r3, r3, #12
90008d8c:	2b08      	cmp	r3, #8
90008d8e:	d001      	beq.n	90008d94 <HAL_JPEG_Pause+0x18>
}
90008d90:	2000      	movs	r0, #0
90008d92:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008d94:	07ca      	lsls	r2, r1, #31
90008d96:	d41f      	bmi.n	90008dd8 <HAL_JPEG_Pause+0x5c>
90008d98:	f04f 3cff 	mov.w	ip, #4294967295
90008d9c:	f06f 0228 	mvn.w	r2, #40	; 0x28
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008da0:	078b      	lsls	r3, r1, #30
90008da2:	d504      	bpl.n	90008dae <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90008da4:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008da6:	4694      	mov	ip, r2
90008da8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90008dac:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90008dae:	6802      	ldr	r2, [r0, #0]
}
90008db0:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90008db2:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008db4:	ea03 030c 	and.w	r3, r3, ip
90008db8:	6313      	str	r3, [r2, #48]	; 0x30
}
90008dba:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008dbc:	07cb      	lsls	r3, r1, #31
90008dbe:	d503      	bpl.n	90008dc8 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008dc0:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008dc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90008dc6:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008dc8:	0789      	lsls	r1, r1, #30
90008dca:	d5e1      	bpl.n	90008d90 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
90008dcc:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
90008dd2:	6543      	str	r3, [r0, #84]	; 0x54
}
90008dd4:	2000      	movs	r0, #0
90008dd6:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90008dd8:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008dda:	f06f 0c06 	mvn.w	ip, #6
90008dde:	f06f 022e 	mvn.w	r2, #46	; 0x2e
90008de2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
90008de6:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90008de8:	e7da      	b.n	90008da0 <HAL_JPEG_Pause+0x24>
90008dea:	bf00      	nop

90008dec <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
90008dec:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
90008dee:	6282      	str	r2, [r0, #40]	; 0x28
}
90008df0:	4770      	bx	lr
90008df2:	bf00      	nop

90008df4 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
90008df4:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
90008df6:	62c2      	str	r2, [r0, #44]	; 0x2c
}
90008df8:	4770      	bx	lr
90008dfa:	bf00      	nop

90008dfc <HAL_JPEG_EncodeCpltCallback>:
90008dfc:	4770      	bx	lr
90008dfe:	bf00      	nop

90008e00 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008e00:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
90008e02:	2101      	movs	r1, #1
{
90008e04:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008e06:	6803      	ldr	r3, [r0, #0]
90008e08:	681a      	ldr	r2, [r3, #0]
90008e0a:	f022 0201 	bic.w	r2, r2, #1
90008e0e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90008e12:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
90008e16:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
90008e18:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008e1c:	6d03      	ldr	r3, [r0, #80]	; 0x50
90008e1e:	f043 0304 	orr.w	r3, r3, #4
90008e22:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
90008e24:	f7f8 fd0a 	bl	9000183c <HAL_JPEG_ErrorCallback>
}
90008e28:	bd08      	pop	{r3, pc}
90008e2a:	bf00      	nop

90008e2c <JPEG_MDMAInCpltCallback>:
{
90008e2c:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
90008e2e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90008e30:	f248 010c 	movw	r1, #32780	; 0x800c
{
90008e34:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90008e36:	6822      	ldr	r2, [r4, #0]
90008e38:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008e3a:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
90008e3e:	6313      	str	r3, [r2, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
90008e40:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008e42:	400b      	ands	r3, r1
90008e44:	2b0c      	cmp	r3, #12
90008e46:	d001      	beq.n	90008e4c <JPEG_MDMAInCpltCallback+0x20>
}
90008e48:	b003      	add	sp, #12
90008e4a:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008e4c:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008e4e:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008e50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008e52:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008e54:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008e56:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008e5a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90008e5c:	1a9b      	subs	r3, r3, r2
90008e5e:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
90008e60:	6a21      	ldr	r1, [r4, #32]
90008e62:	f7f8 fc83 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
90008e66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008e68:	42ab      	cmp	r3, r5
90008e6a:	d311      	bcc.n	90008e90 <JPEG_MDMAInCpltCallback+0x64>
      if (inXfrSize == 0UL)
90008e6c:	b305      	cbz	r5, 90008eb0 <JPEG_MDMAInCpltCallback+0x84>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008e6e:	fbb3 f2f5 	udiv	r2, r3, r5
90008e72:	fb05 3212 	mls	r2, r5, r2, r3
90008e76:	1a9b      	subs	r3, r3, r2
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008e78:	6d62      	ldr	r2, [r4, #84]	; 0x54
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
90008e7a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008e7c:	04d1      	lsls	r1, r2, #19
90008e7e:	d400      	bmi.n	90008e82 <JPEG_MDMAInCpltCallback+0x56>
90008e80:	b963      	cbnz	r3, 90008e9c <JPEG_MDMAInCpltCallback+0x70>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
90008e82:	6822      	ldr	r2, [r4, #0]
90008e84:	6b13      	ldr	r3, [r2, #48]	; 0x30
90008e86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
90008e8a:	6313      	str	r3, [r2, #48]	; 0x30
}
90008e8c:	b003      	add	sp, #12
90008e8e:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
90008e90:	b1cb      	cbz	r3, 90008ec6 <JPEG_MDMAInCpltCallback+0x9a>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
90008e92:	0798      	lsls	r0, r3, #30
90008e94:	d119      	bne.n	90008eca <JPEG_MDMAInCpltCallback+0x9e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008e96:	6d62      	ldr	r2, [r4, #84]	; 0x54
90008e98:	04d2      	lsls	r2, r2, #19
90008e9a:	d4f2      	bmi.n	90008e82 <JPEG_MDMAInCpltCallback+0x56>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90008e9c:	6822      	ldr	r2, [r4, #0]
90008e9e:	2501      	movs	r5, #1
90008ea0:	69a1      	ldr	r1, [r4, #24]
90008ea2:	6b20      	ldr	r0, [r4, #48]	; 0x30
90008ea4:	3240      	adds	r2, #64	; 0x40
90008ea6:	9500      	str	r5, [sp, #0]
90008ea8:	f001 f8b0 	bl	9000a00c <HAL_MDMA_Start_IT>
90008eac:	2800      	cmp	r0, #0
90008eae:	d0e8      	beq.n	90008e82 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008eb0:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008eb2:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
90008eb4:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008eb6:	f043 0304 	orr.w	r3, r3, #4
90008eba:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
90008ebc:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
90008ec0:	f7f8 fcbc 	bl	9000183c <HAL_JPEG_ErrorCallback>
        return;
90008ec4:	e7c0      	b.n	90008e48 <JPEG_MDMAInCpltCallback+0x1c>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
90008ec6:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008ec8:	e7db      	b.n	90008e82 <JPEG_MDMAInCpltCallback+0x56>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
90008eca:	f023 0303 	bic.w	r3, r3, #3
90008ece:	3304      	adds	r3, #4
90008ed0:	e7d2      	b.n	90008e78 <JPEG_MDMAInCpltCallback+0x4c>
90008ed2:	bf00      	nop

90008ed4 <JPEG_DMA_PollResidualData>:
{
90008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008ed6:	6802      	ldr	r2, [r0, #0]
90008ed8:	2610      	movs	r6, #16
{
90008eda:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90008edc:	6d65      	ldr	r5, [r4, #84]	; 0x54
90008ede:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
90008ee2:	d11d      	bne.n	90008f20 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
90008ee4:	6b53      	ldr	r3, [r2, #52]	; 0x34
90008ee6:	06df      	lsls	r7, r3, #27
90008ee8:	d51a      	bpl.n	90008f20 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
90008eea:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008eec:	69e7      	ldr	r7, [r4, #28]
90008eee:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008ef0:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008ef2:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
90008ef4:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008ef6:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
90008ef8:	6a67      	ldr	r7, [r4, #36]	; 0x24
90008efa:	69e2      	ldr	r2, [r4, #28]
90008efc:	443a      	add	r2, r7
90008efe:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
90008f00:	6a60      	ldr	r0, [r4, #36]	; 0x24
90008f02:	69e2      	ldr	r2, [r4, #28]
90008f04:	4402      	add	r2, r0
90008f06:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
90008f08:	6a61      	ldr	r1, [r4, #36]	; 0x24
90008f0a:	69e2      	ldr	r2, [r4, #28]
90008f0c:	440a      	add	r2, r1
90008f0e:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
90008f10:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008f12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
90008f14:	3304      	adds	r3, #4
90008f16:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90008f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008f1a:	4293      	cmp	r3, r2
90008f1c:	d021      	beq.n	90008f62 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008f1e:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
90008f20:	3e01      	subs	r6, #1
90008f22:	d1db      	bne.n	90008edc <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
90008f24:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008f26:	6b53      	ldr	r3, [r2, #52]	; 0x34
90008f28:	06d8      	lsls	r0, r3, #27
90008f2a:	d501      	bpl.n	90008f30 <JPEG_DMA_PollResidualData+0x5c>
90008f2c:	048b      	lsls	r3, r1, #18
90008f2e:	d417      	bmi.n	90008f60 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90008f30:	6813      	ldr	r3, [r2, #0]
90008f32:	f023 0301 	bic.w	r3, r3, #1
90008f36:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
90008f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
90008f3a:	b9eb      	cbnz	r3, 90008f78 <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
90008f3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90008f3e:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008f40:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008f42:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008f44:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90008f48:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008f4c:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008f50:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008f52:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90008f54:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90008f56:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90008f5a:	d00a      	beq.n	90008f72 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90008f5c:	f7ff ff4e 	bl	90008dfc <HAL_JPEG_EncodeCpltCallback>
}
90008f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008f62:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f64:	4620      	mov	r0, r4
90008f66:	69e1      	ldr	r1, [r4, #28]
90008f68:	f7f8 fc20 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
90008f6c:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
90008f6e:	6265      	str	r5, [r4, #36]	; 0x24
90008f70:	e7d6      	b.n	90008f20 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90008f72:	f7f8 fc65 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
}
90008f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90008f78:	6a62      	ldr	r2, [r4, #36]	; 0x24
90008f7a:	4620      	mov	r0, r4
90008f7c:	69e1      	ldr	r1, [r4, #28]
90008f7e:	f7f8 fc15 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90008f82:	2300      	movs	r3, #0
90008f84:	6263      	str	r3, [r4, #36]	; 0x24
90008f86:	e7d9      	b.n	90008f3c <JPEG_DMA_PollResidualData+0x68>

90008f88 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
90008f88:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008f8a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
90008f8e:	d028      	beq.n	90008fe2 <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008f90:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008f92:	f003 030c 	and.w	r3, r3, #12
90008f96:	2b0c      	cmp	r3, #12
{
90008f98:	b570      	push	{r4, r5, r6, lr}
90008f9a:	4604      	mov	r4, r0
90008f9c:	b082      	sub	sp, #8
90008f9e:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90008fa0:	d007      	beq.n	90008fb2 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90008fa2:	6d43      	ldr	r3, [r0, #84]	; 0x54
90008fa4:	f003 030c 	and.w	r3, r3, #12
90008fa8:	2b08      	cmp	r3, #8
90008faa:	d037      	beq.n	9000901c <HAL_JPEG_Resume+0x94>
  return HAL_OK;
90008fac:	2000      	movs	r0, #0
}
90008fae:	b002      	add	sp, #8
90008fb0:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
90008fb2:	07c8      	lsls	r0, r1, #31
90008fb4:	d417      	bmi.n	90008fe6 <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
90008fb6:	07a9      	lsls	r1, r5, #30
90008fb8:	d5f8      	bpl.n	90008fac <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90008fba:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008fbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
90008fc0:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
90008fc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
90008fc4:	041a      	lsls	r2, r3, #16
90008fc6:	d453      	bmi.n	90009070 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
90008fc8:	6b60      	ldr	r0, [r4, #52]	; 0x34
90008fca:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
90008fcc:	2a00      	cmp	r2, #0
90008fce:	d13e      	bne.n	9000904e <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008fd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008fd2:	2206      	movs	r2, #6
          return HAL_ERROR;
90008fd4:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
90008fd6:	f043 0304 	orr.w	r3, r3, #4
90008fda:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
90008fdc:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
90008fe0:	e7e5      	b.n	90008fae <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
90008fe2:	2001      	movs	r0, #1
}
90008fe4:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008fe6:	6d63      	ldr	r3, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008fe8:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
90008fee:	6a82      	ldr	r2, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90008ff0:	6563      	str	r3, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
90008ff2:	2a00      	cmp	r2, #0
90008ff4:	d0ec      	beq.n	90008fd0 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
90008ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90008ff8:	fbb3 f1f2 	udiv	r1, r3, r2
90008ffc:	fb02 3211 	mls	r2, r2, r1, r3
90009000:	1a9b      	subs	r3, r3, r2
90009002:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
90009004:	2b00      	cmp	r3, #0
90009006:	d0d6      	beq.n	90008fb6 <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
90009008:	6822      	ldr	r2, [r4, #0]
9000900a:	2601      	movs	r6, #1
9000900c:	3240      	adds	r2, #64	; 0x40
9000900e:	9600      	str	r6, [sp, #0]
90009010:	69a1      	ldr	r1, [r4, #24]
90009012:	f000 fffb 	bl	9000a00c <HAL_MDMA_Start_IT>
90009016:	2800      	cmp	r0, #0
90009018:	d0cd      	beq.n	90008fb6 <HAL_JPEG_Resume+0x2e>
9000901a:	e7d9      	b.n	90008fd0 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000901c:	f011 0101 	ands.w	r1, r1, #1
90009020:	d013      	beq.n	9000904a <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90009022:	6d43      	ldr	r3, [r0, #84]	; 0x54
90009024:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
90009026:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
90009028:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000902c:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000902e:	07ab      	lsls	r3, r5, #30
90009030:	d504      	bpl.n	9000903c <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90009032:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
90009034:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
90009036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000903a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000903c:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
9000903e:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
90009040:	6b13      	ldr	r3, [r2, #48]	; 0x30
90009042:	430b      	orrs	r3, r1
90009044:	6313      	str	r3, [r2, #48]	; 0x30
}
90009046:	b002      	add	sp, #8
90009048:	bd70      	pop	{r4, r5, r6, pc}
9000904a:	2228      	movs	r2, #40	; 0x28
9000904c:	e7ef      	b.n	9000902e <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000904e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009050:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009052:	fbb3 f1f2 	udiv	r1, r3, r2
90009056:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000905a:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000905c:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000905e:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
90009060:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
90009062:	9500      	str	r5, [sp, #0]
90009064:	69e2      	ldr	r2, [r4, #28]
90009066:	f000 ffd1 	bl	9000a00c <HAL_MDMA_Start_IT>
9000906a:	2800      	cmp	r0, #0
9000906c:	d09e      	beq.n	90008fac <HAL_JPEG_Resume+0x24>
9000906e:	e7af      	b.n	90008fd0 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
90009070:	4620      	mov	r0, r4
90009072:	f7ff ff2f 	bl	90008ed4 <JPEG_DMA_PollResidualData>
90009076:	e799      	b.n	90008fac <HAL_JPEG_Resume+0x24>

90009078 <JPEG_MDMAOutCpltCallback>:
{
90009078:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000907a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000907c:	f248 010c 	movw	r1, #32780	; 0x800c
{
90009080:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
90009082:	6823      	ldr	r3, [r4, #0]
90009084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009086:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000908a:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000908c:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000908e:	400a      	ands	r2, r1
90009090:	2a0c      	cmp	r2, #12
90009092:	d001      	beq.n	90009098 <JPEG_MDMAOutCpltCallback+0x20>
}
90009094:	b003      	add	sp, #12
90009096:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
90009098:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000909a:	0692      	lsls	r2, r2, #26
9000909c:	d505      	bpl.n	900090aa <JPEG_MDMAOutCpltCallback+0x32>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000909e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900090a0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
900090a4:	631a      	str	r2, [r3, #48]	; 0x30
}
900090a6:	b003      	add	sp, #12
900090a8:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900090aa:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900090ac:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900090ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900090b0:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900090b2:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
900090b4:	f3c2 0210 	ubfx	r2, r2, #0, #17
900090b8:	1a9b      	subs	r3, r3, r2
900090ba:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900090bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
900090be:	f7f8 fb75 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
900090c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
900090c4:	049b      	lsls	r3, r3, #18
900090c6:	d501      	bpl.n	900090cc <JPEG_MDMAOutCpltCallback+0x54>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
900090c8:	6823      	ldr	r3, [r4, #0]
900090ca:	e7e8      	b.n	9000909e <JPEG_MDMAOutCpltCallback+0x26>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
900090cc:	6821      	ldr	r1, [r4, #0]
900090ce:	2501      	movs	r5, #1
900090d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900090d2:	69e2      	ldr	r2, [r4, #28]
900090d4:	3144      	adds	r1, #68	; 0x44
900090d6:	6b60      	ldr	r0, [r4, #52]	; 0x34
900090d8:	9500      	str	r5, [sp, #0]
900090da:	f000 ff97 	bl	9000a00c <HAL_MDMA_Start_IT>
900090de:	2800      	cmp	r0, #0
900090e0:	d0f2      	beq.n	900090c8 <JPEG_MDMAOutCpltCallback+0x50>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900090e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
900090e4:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
900090e6:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
900090e8:	f043 0304 	orr.w	r3, r3, #4
900090ec:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
900090ee:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
900090f2:	f7f8 fba3 	bl	9000183c <HAL_JPEG_ErrorCallback>
          return;
900090f6:	e7cd      	b.n	90009094 <JPEG_MDMAOutCpltCallback+0x1c>

900090f8 <JPEG_MDMAOutAbortCallback>:
{
900090f8:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
900090fa:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
900090fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
900090fe:	041a      	lsls	r2, r3, #16
90009100:	d400      	bmi.n	90009104 <JPEG_MDMAOutAbortCallback+0xc>
}
90009102:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009104:	6b63      	ldr	r3, [r4, #52]	; 0x34
90009106:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009108:	681b      	ldr	r3, [r3, #0]
9000910a:	695b      	ldr	r3, [r3, #20]
9000910c:	f3c3 0310 	ubfx	r3, r3, #0, #17
90009110:	1ad3      	subs	r3, r2, r3
90009112:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90009114:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009116:	429a      	cmp	r2, r3
90009118:	d025      	beq.n	90009166 <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000911a:	6822      	ldr	r2, [r4, #0]
9000911c:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000911e:	f015 0510 	ands.w	r5, r5, #16
90009122:	d118      	bne.n	90009156 <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
90009124:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009126:	bb4b      	cbnz	r3, 9000917c <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009128:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000912a:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000912c:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000912e:	f023 0301 	bic.w	r3, r3, #1
90009132:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
90009134:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009136:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009138:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000913c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009140:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009144:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009146:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009148:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000914a:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000914e:	d012      	beq.n	90009176 <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009150:	f7ff fe54 	bl	90008dfc <HAL_JPEG_EncodeCpltCallback>
}
90009154:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009156:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009158:	049b      	lsls	r3, r3, #18
9000915a:	d4d2      	bmi.n	90009102 <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
9000915c:	4620      	mov	r0, r4
}
9000915e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90009162:	f7ff beb7 	b.w	90008ed4 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009166:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009168:	4620      	mov	r0, r4
9000916a:	69e1      	ldr	r1, [r4, #28]
9000916c:	f7f8 fb1e 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90009170:	2300      	movs	r3, #0
90009172:	6263      	str	r3, [r4, #36]	; 0x24
90009174:	e7d1      	b.n	9000911a <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009176:	f7f8 fb63 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
}
9000917a:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000917c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000917e:	4620      	mov	r0, r4
90009180:	69e1      	ldr	r1, [r4, #28]
90009182:	f7f8 fb13 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009186:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009188:	6265      	str	r5, [r4, #36]	; 0x24
9000918a:	e7cd      	b.n	90009128 <JPEG_MDMAOutAbortCallback+0x30>

9000918c <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000918c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000918e:	f003 0303 	and.w	r3, r3, #3
90009192:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009194:	6803      	ldr	r3, [r0, #0]
{
90009196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000919a:	4604      	mov	r4, r0
9000919c:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000919e:	d01f      	beq.n	900091e0 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
900091a0:	6d62      	ldr	r2, [r4, #84]	; 0x54
900091a2:	04d7      	lsls	r7, r2, #19
900091a4:	d407      	bmi.n	900091b6 <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
900091a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900091a8:	0796      	lsls	r6, r2, #30
900091aa:	f100 811d 	bmi.w	900093e8 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
900091ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900091b0:	0750      	lsls	r0, r2, #29
900091b2:	f100 81b1 	bmi.w	90009518 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
900091b6:	6d65      	ldr	r5, [r4, #84]	; 0x54
900091b8:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
900091bc:	d107      	bne.n	900091ce <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
900091be:	6b5e      	ldr	r6, [r3, #52]	; 0x34
900091c0:	f016 0608 	ands.w	r6, r6, #8
900091c4:	d14c      	bne.n	90009260 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
900091c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900091c8:	06d2      	lsls	r2, r2, #27
900091ca:	f100 81e3 	bmi.w	90009594 <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900091ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900091d0:	f002 0238 	and.w	r2, r2, #56	; 0x38
900091d4:	2a20      	cmp	r2, #32
900091d6:	d01a      	beq.n	9000920e <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
900091d8:	2000      	movs	r0, #0
}
900091da:	b002      	add	sp, #8
900091dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
900091e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900091e2:	0652      	lsls	r2, r2, #25
900091e4:	d5dc      	bpl.n	900091a0 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
900091e6:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
900091e8:	9101      	str	r1, [sp, #4]
900091ea:	f7ff fb79 	bl	900088e0 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
900091ee:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
900091f0:	9901      	ldr	r1, [sp, #4]
900091f2:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
900091f4:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
900091f6:	f7f8 fa67 	bl	900016c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
900091fa:	6823      	ldr	r3, [r4, #0]
900091fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900091fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
90009202:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90009204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000920a:	639a      	str	r2, [r3, #56]	; 0x38
9000920c:	e7c8      	b.n	900091a0 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000920e:	681a      	ldr	r2, [r3, #0]
90009210:	f022 0201 	bic.w	r2, r2, #1
90009214:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009216:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009218:	f002 020c 	and.w	r2, r2, #12
9000921c:	2a08      	cmp	r2, #8
9000921e:	f000 81e6 	beq.w	900095ee <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009224:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90009228:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
9000922a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000922c:	2b00      	cmp	r3, #0
9000922e:	f040 81e3 	bne.w	900095f8 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
90009232:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
90009234:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009236:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009238:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000923a:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000923e:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009240:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
90009244:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009248:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000924a:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000924c:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009250:	f000 81c9 	beq.w	900095e6 <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009254:	f7ff fdd2 	bl	90008dfc <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
90009258:	4628      	mov	r0, r5
}
9000925a:	b002      	add	sp, #8
9000925c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009260:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009262:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009264:	3220      	adds	r2, #32
90009266:	4296      	cmp	r6, r2
90009268:	f0c0 81e4 	bcc.w	90009634 <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
9000926c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000926e:	69e1      	ldr	r1, [r4, #28]
90009270:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009272:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009274:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009276:	69e2      	ldr	r2, [r4, #28]
90009278:	440a      	add	r2, r1
9000927a:	0a19      	lsrs	r1, r3, #8
9000927c:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000927e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009280:	69e2      	ldr	r2, [r4, #28]
90009282:	440a      	add	r2, r1
90009284:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009286:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009288:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000928a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000928c:	69e2      	ldr	r2, [r4, #28]
9000928e:	440a      	add	r2, r1
90009290:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009292:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
90009294:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009296:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009298:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000929a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000929c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000929e:	6a62      	ldr	r2, [r4, #36]	; 0x24
900092a0:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900092a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
900092a4:	69e2      	ldr	r2, [r4, #28]
900092a6:	440a      	add	r2, r1
900092a8:	0a19      	lsrs	r1, r3, #8
900092aa:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900092ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
900092ae:	69e2      	ldr	r2, [r4, #28]
900092b0:	440a      	add	r2, r1
900092b2:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900092b4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900092b6:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900092b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
900092ba:	69e2      	ldr	r2, [r4, #28]
900092bc:	440a      	add	r2, r1
900092be:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900092c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900092c2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
900092c4:	3304      	adds	r3, #4
900092c6:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
900092c8:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900092ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
900092cc:	69e1      	ldr	r1, [r4, #28]
900092ce:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900092d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
900092d2:	69e2      	ldr	r2, [r4, #28]
900092d4:	440a      	add	r2, r1
900092d6:	0a19      	lsrs	r1, r3, #8
900092d8:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900092da:	6a61      	ldr	r1, [r4, #36]	; 0x24
900092dc:	69e2      	ldr	r2, [r4, #28]
900092de:	440a      	add	r2, r1
900092e0:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900092e2:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900092e4:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900092e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
900092e8:	69e2      	ldr	r2, [r4, #28]
900092ea:	440a      	add	r2, r1
900092ec:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900092ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900092f0:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
900092f2:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900092f4:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
900092f6:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
900092f8:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900092fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
900092fc:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900092fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009300:	69e2      	ldr	r2, [r4, #28]
90009302:	440a      	add	r2, r1
90009304:	0a19      	lsrs	r1, r3, #8
90009306:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009308:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000930a:	69e2      	ldr	r2, [r4, #28]
9000930c:	440a      	add	r2, r1
9000930e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009310:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009312:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009314:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009316:	69e2      	ldr	r2, [r4, #28]
90009318:	440a      	add	r2, r1
9000931a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000931c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000931e:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
90009320:	3304      	adds	r3, #4
90009322:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009324:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009326:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009328:	69e1      	ldr	r1, [r4, #28]
9000932a:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000932c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000932e:	69e2      	ldr	r2, [r4, #28]
90009330:	440a      	add	r2, r1
90009332:	0a19      	lsrs	r1, r3, #8
90009334:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009336:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009338:	69e2      	ldr	r2, [r4, #28]
9000933a:	440a      	add	r2, r1
9000933c:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000933e:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009340:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009342:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009344:	69e2      	ldr	r2, [r4, #28]
90009346:	440a      	add	r2, r1
90009348:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000934a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000934c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000934e:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009350:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
90009352:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009354:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009356:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009358:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000935a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000935c:	69e2      	ldr	r2, [r4, #28]
9000935e:	440a      	add	r2, r1
90009360:	0a19      	lsrs	r1, r3, #8
90009362:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009364:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009366:	69e2      	ldr	r2, [r4, #28]
90009368:	440a      	add	r2, r1
9000936a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000936c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000936e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009370:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009372:	69e2      	ldr	r2, [r4, #28]
90009374:	440a      	add	r2, r1
90009376:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009378:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000937a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000937c:	3304      	adds	r3, #4
9000937e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009380:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009382:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009384:	69e1      	ldr	r1, [r4, #28]
90009386:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009388:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000938a:	69e2      	ldr	r2, [r4, #28]
9000938c:	440a      	add	r2, r1
9000938e:	0a19      	lsrs	r1, r3, #8
90009390:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009392:	6a61      	ldr	r1, [r4, #36]	; 0x24
90009394:	69e2      	ldr	r2, [r4, #28]
90009396:	440a      	add	r2, r1
90009398:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000939a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000939c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000939e:	6a61      	ldr	r1, [r4, #36]	; 0x24
900093a0:	69e2      	ldr	r2, [r4, #28]
900093a2:	440a      	add	r2, r1
900093a4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900093a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900093a8:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
900093aa:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900093ac:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
900093ae:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
900093b0:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900093b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
900093b4:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900093b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
900093b8:	69e2      	ldr	r2, [r4, #28]
900093ba:	440a      	add	r2, r1
900093bc:	0a19      	lsrs	r1, r3, #8
900093be:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900093c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
900093c2:	69e2      	ldr	r2, [r4, #28]
900093c4:	440a      	add	r2, r1
900093c6:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900093c8:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900093ca:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900093cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
900093ce:	69e2      	ldr	r2, [r4, #28]
900093d0:	440a      	add	r2, r1
900093d2:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900093d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
900093d6:	3304      	adds	r3, #4
900093d8:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
900093da:	6a63      	ldr	r3, [r4, #36]	; 0x24
900093dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900093de:	429a      	cmp	r2, r3
900093e0:	f000 82ae 	beq.w	90009940 <JPEG_Process+0x7b4>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900093e4:	6823      	ldr	r3, [r4, #0]
900093e6:	e6f2      	b.n	900091ce <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
900093e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900093ea:	2a00      	cmp	r2, #0
900093ec:	f000 810c 	beq.w	90009608 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
900093f0:	6a21      	ldr	r1, [r4, #32]
900093f2:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
900093f4:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
900093f6:	f240 81a4 	bls.w	90009742 <JPEG_Process+0x5b6>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
900093fa:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
900093fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
900093fe:	04cd      	lsls	r5, r1, #19
90009400:	f53f aed9 	bmi.w	900091b6 <JPEG_Process+0x2a>
90009404:	2a00      	cmp	r2, #0
90009406:	f43f aed6 	beq.w	900091b6 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000940a:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
9000940c:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
90009410:	f240 8203 	bls.w	9000981a <JPEG_Process+0x68e>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009414:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
90009416:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009418:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000941a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000941c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000941e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009420:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009422:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009424:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009428:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000942a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000942e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009430:	6a21      	ldr	r1, [r4, #32]
90009432:	3104      	adds	r1, #4
90009434:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009436:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009438:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000943a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000943c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000943e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009440:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009442:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009444:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009448:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000944a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000944e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009450:	6a21      	ldr	r1, [r4, #32]
90009452:	3104      	adds	r1, #4
90009454:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009456:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009458:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000945a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000945c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000945e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009460:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009462:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009464:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009468:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000946a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000946e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009470:	6a21      	ldr	r1, [r4, #32]
90009472:	3104      	adds	r1, #4
90009474:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009476:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009478:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000947a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000947c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000947e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009480:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009482:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009484:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
90009488:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000948a:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000948e:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009490:	6a21      	ldr	r1, [r4, #32]
90009492:	3104      	adds	r1, #4
90009494:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
90009496:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009498:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000949a:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000949c:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000949e:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094a0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900094a2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094a4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
900094a8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094aa:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094ae:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
900094b0:	6a21      	ldr	r1, [r4, #32]
900094b2:	3104      	adds	r1, #4
900094b4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900094b6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094b8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094ba:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094bc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094be:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094c0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900094c2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094c4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
900094c8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094ca:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094ce:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
900094d0:	6a21      	ldr	r1, [r4, #32]
900094d2:	3104      	adds	r1, #4
900094d4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900094d6:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094d8:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094da:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094dc:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094de:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094e0:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900094e2:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094e4:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
900094e8:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094ea:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094ee:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
900094f0:	6a21      	ldr	r1, [r4, #32]
900094f2:	3104      	adds	r1, #4
900094f4:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
900094f6:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900094f8:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900094fa:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900094fc:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900094fe:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009500:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009502:	7849      	ldrb	r1, [r1, #1]
90009504:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90009508:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000950a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000950e:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
90009510:	6a22      	ldr	r2, [r4, #32]
90009512:	3204      	adds	r2, #4
90009514:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
90009516:	e64e      	b.n	900091b6 <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
90009518:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000951a:	2a00      	cmp	r2, #0
9000951c:	d074      	beq.n	90009608 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000951e:	6a21      	ldr	r1, [r4, #32]
90009520:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
90009522:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
90009524:	f200 8164 	bhi.w	900097f0 <JPEG_Process+0x664>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90009528:	428a      	cmp	r2, r1
9000952a:	f040 810c 	bne.w	90009746 <JPEG_Process+0x5ba>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000952e:	6a21      	ldr	r1, [r4, #32]
90009530:	4620      	mov	r0, r4
90009532:	f7f8 f91b 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
90009536:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90009538:	2a04      	cmp	r2, #4
9000953a:	d902      	bls.n	90009542 <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000953c:	f022 0203 	bic.w	r2, r2, #3
90009540:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90009542:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009544:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
90009546:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009548:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000954a:	04c9      	lsls	r1, r1, #19
9000954c:	f53f ae33 	bmi.w	900091b6 <JPEG_Process+0x2a>
90009550:	2a00      	cmp	r2, #0
90009552:	f43f ae30 	beq.w	900091b6 <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
90009556:	0891      	lsrs	r1, r2, #2
90009558:	f040 8203 	bne.w	90009962 <JPEG_Process+0x7d6>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000955c:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000955e:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
90009560:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009562:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009564:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009568:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
9000956a:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000956c:	d010      	beq.n	90009590 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000956e:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009570:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009572:	5c69      	ldrb	r1, [r5, r1]
90009574:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
90009578:	6a21      	ldr	r1, [r4, #32]
9000957a:	f101 0101 	add.w	r1, r1, #1
9000957e:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009580:	d106      	bne.n	90009590 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009582:	6a22      	ldr	r2, [r4, #32]
90009584:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
90009586:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009588:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
9000958c:	3201      	adds	r2, #1
9000958e:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
90009590:	6418      	str	r0, [r3, #64]	; 0x40
90009592:	e610      	b.n	900091b6 <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
90009594:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009596:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
90009598:	3204      	adds	r2, #4
9000959a:	4295      	cmp	r5, r2
9000959c:	f0c0 80d5 	bcc.w	9000974a <JPEG_Process+0x5be>
      dataword = hjpeg->Instance->DOR;
900095a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
900095a2:	69e1      	ldr	r1, [r4, #28]
900095a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
900095a6:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
900095a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
900095aa:	69e2      	ldr	r2, [r4, #28]
900095ac:	440a      	add	r2, r1
900095ae:	0a19      	lsrs	r1, r3, #8
900095b0:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900095b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
900095b4:	69e2      	ldr	r2, [r4, #28]
900095b6:	440a      	add	r2, r1
900095b8:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900095ba:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
900095bc:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
900095be:	6a61      	ldr	r1, [r4, #36]	; 0x24
900095c0:	69e2      	ldr	r2, [r4, #28]
900095c2:	440a      	add	r2, r1
900095c4:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
900095c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
900095c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
900095ca:	3304      	adds	r3, #4
900095cc:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
900095ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
900095d0:	429a      	cmp	r2, r3
900095d2:	f47f af07 	bne.w	900093e4 <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900095d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
900095d8:	4620      	mov	r0, r4
900095da:	69e1      	ldr	r1, [r4, #28]
900095dc:	f7f8 f8e6 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
900095e0:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
900095e2:	6266      	str	r6, [r4, #36]	; 0x24
900095e4:	e5f3      	b.n	900091ce <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
900095e6:	f7f8 f92b 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
900095ea:	4628      	mov	r0, r5
900095ec:	e5f5      	b.n	900091da <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900095ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900095f0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900095f4:	631a      	str	r2, [r3, #48]	; 0x30
900095f6:	e614      	b.n	90009222 <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900095f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
900095fa:	4620      	mov	r0, r4
900095fc:	69e1      	ldr	r1, [r4, #28]
900095fe:	f7f8 f8d5 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
90009602:	2300      	movs	r3, #0
90009604:	6263      	str	r3, [r4, #36]	; 0x24
90009606:	e614      	b.n	90009232 <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009608:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000960a:	f002 020c 	and.w	r2, r2, #12
9000960e:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009610:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
90009612:	f000 80fd 	beq.w	90009810 <JPEG_Process+0x684>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
90009616:	f002 020c 	and.w	r2, r2, #12
9000961a:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000961c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000961e:	f47f adca 	bne.w	900091b6 <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009622:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90009626:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
90009628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000962a:	f022 0206 	bic.w	r2, r2, #6
9000962e:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009630:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009632:	e5c0      	b.n	900091b6 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
90009634:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009636:	4296      	cmp	r6, r2
90009638:	f67f adc9 	bls.w	900091ce <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000963c:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000963e:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
90009640:	0880      	lsrs	r0, r0, #2
90009642:	d020      	beq.n	90009686 <JPEG_Process+0x4fa>
90009644:	4629      	mov	r1, r5
90009646:	e000      	b.n	9000964a <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
90009648:	6823      	ldr	r3, [r4, #0]
9000964a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000964c:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000964e:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009650:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
90009652:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009654:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
90009656:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009658:	69e2      	ldr	r2, [r4, #28]
9000965a:	4432      	add	r2, r6
9000965c:	ea4f 2613 	mov.w	r6, r3, lsr #8
90009660:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009662:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009664:	69e2      	ldr	r2, [r4, #28]
90009666:	4432      	add	r2, r6
90009668:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000966c:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009670:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009672:	6a66      	ldr	r6, [r4, #36]	; 0x24
90009674:	69e2      	ldr	r2, [r4, #28]
90009676:	4432      	add	r2, r6
90009678:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000967c:	f103 0304 	add.w	r3, r3, #4
90009680:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90009682:	d1e1      	bne.n	90009648 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
90009684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90009686:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009688:	42b3      	cmp	r3, r6
9000968a:	f000 8161 	beq.w	90009950 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000968e:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
90009692:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
90009694:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
90009698:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000969a:	d00e      	beq.n	900096ba <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000969c:	f005 0303 	and.w	r3, r5, #3
900096a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
900096a2:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
900096a4:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900096a6:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
900096a8:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900096aa:	fa27 f303 	lsr.w	r3, r7, r3
900096ae:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
900096b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
900096b2:	f103 0301 	add.w	r3, r3, #1
900096b6:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
900096b8:	d1f0      	bne.n	9000969c <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
900096ba:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900096be:	6a62      	ldr	r2, [r4, #36]	; 0x24
900096c0:	69e1      	ldr	r1, [r4, #28]
900096c2:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
900096c4:	eba8 0806 	sub.w	r8, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900096c8:	f7f8 f870 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900096cc:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
900096ce:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
900096d2:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
900096d4:	f63f ae86 	bhi.w	900093e4 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900096d8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
900096dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
900096de:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
900096e0:	f1b8 0f03 	cmp.w	r8, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900096e4:	fa27 f003 	lsr.w	r0, r7, r3
900096e8:	5488      	strb	r0, [r1, r2]
        hjpeg->JpegOutCount++;
900096ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
900096ec:	f102 0201 	add.w	r2, r2, #1
900096f0:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
900096f2:	f43f ae77 	beq.w	900093e4 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
900096f6:	f103 0208 	add.w	r2, r3, #8
900096fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
900096fc:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
900096fe:	f1b8 0f02 	cmp.w	r8, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009702:	fa27 f202 	lsr.w	r2, r7, r2
90009706:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
90009708:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000970a:	f102 0201 	add.w	r2, r2, #1
9000970e:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009710:	f108 0202 	add.w	r2, r8, #2
90009714:	f43f ae66 	beq.w	900093e4 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009718:	3310      	adds	r3, #16
9000971a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000971c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000971e:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009720:	fa27 f303 	lsr.w	r3, r7, r3
90009724:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
90009726:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009728:	f103 0301 	add.w	r3, r3, #1
9000972c:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000972e:	f47f ae59 	bne.w	900093e4 <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
90009732:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009734:	0e3f      	lsrs	r7, r7, #24
90009736:	69e2      	ldr	r2, [r4, #28]
90009738:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000973a:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000973c:	3301      	adds	r3, #1
9000973e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
90009740:	e650      	b.n	900093e4 <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
90009742:	428a      	cmp	r2, r1
90009744:	d056      	beq.n	900097f4 <JPEG_Process+0x668>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009746:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009748:	e535      	b.n	900091b6 <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000974a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000974c:	4295      	cmp	r5, r2
9000974e:	f67f ad3e 	bls.w	900091ce <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
90009752:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009754:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
90009756:	0880      	lsrs	r0, r0, #2
90009758:	d020      	beq.n	9000979c <JPEG_Process+0x610>
9000975a:	4631      	mov	r1, r6
9000975c:	e000      	b.n	90009760 <JPEG_Process+0x5d4>
      dataword = hjpeg->Instance->DOR;
9000975e:	6823      	ldr	r3, [r4, #0]
90009760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
90009762:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
90009764:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009766:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
90009768:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000976a:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000976c:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000976e:	69e2      	ldr	r2, [r4, #28]
90009770:	442a      	add	r2, r5
90009772:	ea4f 2513 	mov.w	r5, r3, lsr #8
90009776:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009778:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000977a:	69e2      	ldr	r2, [r4, #28]
9000977c:	442a      	add	r2, r5
9000977e:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009782:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
90009786:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
90009788:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000978a:	69e2      	ldr	r2, [r4, #28]
9000978c:	442a      	add	r2, r5
9000978e:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
90009790:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009792:	f103 0304 	add.w	r3, r3, #4
90009796:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
90009798:	d1e1      	bne.n	9000975e <JPEG_Process+0x5d2>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000979a:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000979c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000979e:	429d      	cmp	r5, r3
900097a0:	f000 80d6 	beq.w	90009950 <JPEG_Process+0x7c4>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
900097a4:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
900097a8:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
900097aa:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
900097ae:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
900097b0:	d00e      	beq.n	900097d0 <JPEG_Process+0x644>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900097b2:	f006 0303 	and.w	r3, r6, #3
900097b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
900097b8:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
900097ba:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900097bc:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
900097be:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
900097c0:	fa27 f303 	lsr.w	r3, r7, r3
900097c4:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
900097c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
900097c8:	f103 0301 	add.w	r3, r3, #1
900097cc:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
900097ce:	d1f0      	bne.n	900097b2 <JPEG_Process+0x626>
      nb_bytes = 4UL - nb_bytes;
900097d0:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900097d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
900097d6:	69e1      	ldr	r1, [r4, #28]
900097d8:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
900097da:	eba8 0805 	sub.w	r8, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
900097de:	f7f7 ffe5 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
900097e2:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
900097e4:	f1b8 0f03 	cmp.w	r8, #3
      hjpeg->JpegOutCount = 0;
900097e8:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
900097ea:	f67f af75 	bls.w	900096d8 <JPEG_Process+0x54c>
900097ee:	e5f9      	b.n	900093e4 <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
900097f0:	1a52      	subs	r2, r2, r1
900097f2:	e6a9      	b.n	90009548 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
900097f4:	6a21      	ldr	r1, [r4, #32]
900097f6:	4620      	mov	r0, r4
900097f8:	f7f7 ffb8 	bl	9000176c <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
900097fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900097fe:	2a04      	cmp	r2, #4
90009800:	d902      	bls.n	90009808 <JPEG_Process+0x67c>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
90009802:	f022 0203 	bic.w	r2, r2, #3
90009806:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
90009808:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000980a:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000980c:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
9000980e:	e5f5      	b.n	900093fc <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
90009810:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90009814:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
90009816:	6d62      	ldr	r2, [r4, #84]	; 0x54
90009818:	e4cd      	b.n	900091b6 <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000981a:	2a03      	cmp	r2, #3
9000981c:	f240 80a4 	bls.w	90009968 <JPEG_Process+0x7dc>
        for (index = 0; index < nb_words; index++)
90009820:	2900      	cmp	r1, #0
90009822:	f43f acc8 	beq.w	900091b6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009826:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009828:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000982a:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000982c:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009830:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009832:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009834:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009836:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000983a:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000983c:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
90009840:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009844:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009848:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000984a:	6a20      	ldr	r0, [r4, #32]
9000984c:	f100 0004 	add.w	r0, r0, #4
90009850:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009852:	f43f acb0 	beq.w	900091b6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009856:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009858:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000985a:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000985e:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009860:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009862:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009864:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009868:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000986a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000986e:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009872:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009876:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009878:	6a20      	ldr	r0, [r4, #32]
9000987a:	f100 0004 	add.w	r0, r0, #4
9000987e:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009880:	f43f ac99 	beq.w	900091b6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
90009884:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009886:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009888:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000988c:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000988e:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009890:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009892:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009896:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009898:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000989c:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098a0:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098a4:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
900098a6:	6a20      	ldr	r0, [r4, #32]
900098a8:	f100 0004 	add.w	r0, r0, #4
900098ac:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900098ae:	f43f ac82 	beq.w	900091b6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
900098b2:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900098b4:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098b6:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098ba:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098bc:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098be:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098c0:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900098c4:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098c6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
900098ca:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098ce:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098d2:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
900098d4:	6a20      	ldr	r0, [r4, #32]
900098d6:	f100 0004 	add.w	r0, r0, #4
900098da:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900098dc:	f43f ac6b 	beq.w	900091b6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
900098e0:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
900098e2:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098e4:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
900098e8:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098ea:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098ec:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098ee:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
900098f2:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
900098f4:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
900098f8:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
900098fc:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009900:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009902:	6a20      	ldr	r0, [r4, #32]
90009904:	f100 0004 	add.w	r0, r0, #4
90009908:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000990a:	f43f ac54 	beq.w	900091b6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000990e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009910:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009912:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009916:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
90009918:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000991a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000991c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
90009920:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
90009922:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
90009926:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000992a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000992e:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
90009930:	6a20      	ldr	r0, [r4, #32]
90009932:	f100 0004 	add.w	r0, r0, #4
90009936:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
90009938:	f47f ac3d 	bne.w	900091b6 <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000993c:	6a20      	ldr	r0, [r4, #32]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000993e:	e5db      	b.n	900094f8 <JPEG_Process+0x36c>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009940:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009942:	4620      	mov	r0, r4
90009944:	69e1      	ldr	r1, [r4, #28]
90009946:	f7f7 ff31 	bl	900017ac <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000994a:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000994c:	6265      	str	r5, [r4, #36]	; 0x24
9000994e:	e43e      	b.n	900091ce <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009950:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009952:	4620      	mov	r0, r4
90009954:	69e1      	ldr	r1, [r4, #28]
90009956:	f7f7 ff29 	bl	900017ac <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000995a:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000995c:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000995e:	6262      	str	r2, [r4, #36]	; 0x24
90009960:	e435      	b.n	900091ce <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
90009962:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
90009964:	69a0      	ldr	r0, [r4, #24]
90009966:	e5c7      	b.n	900094f8 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009968:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000996a:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000996c:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000996e:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
90009970:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009974:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
90009976:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
90009978:	d010      	beq.n	9000999c <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000997a:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000997c:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000997e:	5c28      	ldrb	r0, [r5, r0]
90009980:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
90009984:	6a20      	ldr	r0, [r4, #32]
90009986:	f100 0001 	add.w	r0, r0, #1
9000998a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000998c:	d106      	bne.n	9000999c <JPEG_Process+0x810>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000998e:	6a22      	ldr	r2, [r4, #32]
90009990:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
90009992:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
90009994:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
90009998:	3201      	adds	r2, #1
9000999a:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000999c:	6419      	str	r1, [r3, #64]	; 0x40
9000999e:	e40a      	b.n	900091b6 <JPEG_Process+0x2a>

900099a0 <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
900099a0:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
900099a4:	3b03      	subs	r3, #3
900099a6:	2b01      	cmp	r3, #1
900099a8:	d900      	bls.n	900099ac <HAL_JPEG_IRQHandler+0xc>
900099aa:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900099ac:	6d43      	ldr	r3, [r0, #84]	; 0x54
900099ae:	f003 030c 	and.w	r3, r3, #12
900099b2:	2b08      	cmp	r3, #8
{
900099b4:	b530      	push	{r4, r5, lr}
900099b6:	4604      	mov	r4, r0
900099b8:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
900099ba:	d006      	beq.n	900099ca <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
900099bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
900099be:	f003 030c 	and.w	r3, r3, #12
900099c2:	2b0c      	cmp	r3, #12
900099c4:	d006      	beq.n	900099d4 <HAL_JPEG_IRQHandler+0x34>
}
900099c6:	b003      	add	sp, #12
900099c8:	bd30      	pop	{r4, r5, pc}
900099ca:	b003      	add	sp, #12
900099cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
900099d0:	f7ff bbdc 	b.w	9000918c <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900099d4:	6d43      	ldr	r3, [r0, #84]	; 0x54
900099d6:	f003 0303 	and.w	r3, r3, #3
900099da:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
900099dc:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
900099de:	d045      	beq.n	90009a6c <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
900099e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
900099e2:	0692      	lsls	r2, r2, #26
900099e4:	d5ef      	bpl.n	900099c6 <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
900099e6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
900099e8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
900099ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
900099ee:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
900099f0:	681a      	ldr	r2, [r3, #0]
900099f2:	f022 0201 	bic.w	r2, r2, #1
900099f6:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
900099f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
900099fa:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
900099fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
90009a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009a02:	f042 0260 	orr.w	r2, r2, #96	; 0x60
90009a06:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
90009a08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90009a0c:	2b02      	cmp	r3, #2
90009a0e:	d052      	beq.n	90009ab6 <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
90009a10:	6b60      	ldr	r0, [r4, #52]	; 0x34
90009a12:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
90009a16:	2b02      	cmp	r3, #2
90009a18:	d03f      	beq.n	90009a9a <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
90009a1a:	6803      	ldr	r3, [r0, #0]
90009a1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90009a1e:	695b      	ldr	r3, [r3, #20]
90009a20:	f3c3 0310 	ubfx	r3, r3, #0, #17
90009a24:	1ad3      	subs	r3, r2, r3
90009a26:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
90009a28:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009a2a:	429a      	cmp	r2, r3
90009a2c:	d046      	beq.n	90009abc <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
90009a2e:	6822      	ldr	r2, [r4, #0]
90009a30:	6b55      	ldr	r5, [r2, #52]	; 0x34
90009a32:	f015 0510 	ands.w	r5, r5, #16
90009a36:	d135      	bne.n	90009aa4 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
90009a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
90009a3a:	2b00      	cmp	r3, #0
90009a3c:	d149      	bne.n	90009ad2 <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009a3e:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
90009a40:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
90009a42:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009a44:	f023 0301 	bic.w	r3, r3, #1
90009a48:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
90009a4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a4c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a4e:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
90009a52:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a56:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009a5a:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a5c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
90009a5e:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
90009a60:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
90009a64:	d032      	beq.n	90009acc <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
90009a66:	f7ff f9c9 	bl	90008dfc <HAL_JPEG_EncodeCpltCallback>
90009a6a:	e7ac      	b.n	900099c6 <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
90009a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009a6e:	0651      	lsls	r1, r2, #25
90009a70:	d5b6      	bpl.n	900099e0 <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
90009a72:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
90009a74:	9101      	str	r1, [sp, #4]
90009a76:	f7fe ff33 	bl	900088e0 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
90009a7a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009a7c:	9901      	ldr	r1, [sp, #4]
90009a7e:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
90009a80:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
90009a82:	f7f7 fe21 	bl	900016c8 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
90009a86:	6823      	ldr	r3, [r4, #0]
90009a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90009a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
90009a8e:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
90009a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90009a92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
90009a96:	639a      	str	r2, [r3, #56]	; 0x38
90009a98:	e7a2      	b.n	900099e0 <HAL_JPEG_IRQHandler+0x40>
}
90009a9a:	b003      	add	sp, #12
90009a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
90009aa0:	f000 bb30 	b.w	9000a104 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
90009aa4:	6d63      	ldr	r3, [r4, #84]	; 0x54
90009aa6:	049b      	lsls	r3, r3, #18
90009aa8:	d48d      	bmi.n	900099c6 <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
90009aaa:	4620      	mov	r0, r4
}
90009aac:	b003      	add	sp, #12
90009aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
90009ab2:	f7ff ba0f 	b.w	90008ed4 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
90009ab6:	f000 fb25 	bl	9000a104 <HAL_MDMA_Abort_IT>
90009aba:	e7a9      	b.n	90009a10 <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009abc:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009abe:	4620      	mov	r0, r4
90009ac0:	69e1      	ldr	r1, [r4, #28]
90009ac2:	f7f7 fe73 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
90009ac6:	2300      	movs	r3, #0
90009ac8:	6263      	str	r3, [r4, #36]	; 0x24
90009aca:	e7b0      	b.n	90009a2e <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
90009acc:	f7f7 feb8 	bl	90001840 <HAL_JPEG_DecodeCpltCallback>
90009ad0:	e779      	b.n	900099c6 <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
90009ad2:	6a62      	ldr	r2, [r4, #36]	; 0x24
90009ad4:	4620      	mov	r0, r4
90009ad6:	69e1      	ldr	r1, [r4, #28]
90009ad8:	f7f7 fe68 	bl	900017ac <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
90009adc:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
90009ade:	6265      	str	r5, [r4, #36]	; 0x24
90009ae0:	e7ad      	b.n	90009a3e <HAL_JPEG_IRQHandler+0x9e>
90009ae2:	bf00      	nop

90009ae4 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
90009ae4:	2800      	cmp	r0, #0
90009ae6:	d067      	beq.n	90009bb8 <HAL_LTDC_Init+0xd4>
{
90009ae8:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
90009aea:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
90009aee:	4604      	mov	r4, r0
90009af0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009af4:	2b00      	cmp	r3, #0
90009af6:	d05a      	beq.n	90009bae <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009af8:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009afa:	2102      	movs	r1, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009afc:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009b00:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009b04:	4302      	orrs	r2, r0
90009b06:	68e1      	ldr	r1, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009b08:	6998      	ldr	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009b0a:	430a      	orrs	r2, r1
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90009b0c:	6921      	ldr	r1, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009b0e:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
90009b12:	430a      	orrs	r2, r1

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90009b14:	4929      	ldr	r1, [pc, #164]	; (90009bbc <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
90009b16:	6198      	str	r0, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009b18:	6998      	ldr	r0, [r3, #24]
90009b1a:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
90009b1c:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
90009b1e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
90009b20:	689a      	ldr	r2, [r3, #8]
90009b22:	400a      	ands	r2, r1
90009b24:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90009b26:	689a      	ldr	r2, [r3, #8]
90009b28:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009b2c:	69a0      	ldr	r0, [r4, #24]
90009b2e:	4302      	orrs	r2, r0

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
90009b30:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
90009b32:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
90009b34:	68da      	ldr	r2, [r3, #12]
90009b36:	400a      	ands	r2, r1
90009b38:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90009b3a:	68da      	ldr	r2, [r3, #12]
90009b3c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009b40:	6a20      	ldr	r0, [r4, #32]
90009b42:	4302      	orrs	r2, r0

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
90009b44:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
90009b46:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
90009b48:	691a      	ldr	r2, [r3, #16]
90009b4a:	400a      	ands	r2, r1
90009b4c:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90009b4e:	691a      	ldr	r2, [r3, #16]
90009b50:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009b54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90009b56:	4302      	orrs	r2, r0

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
90009b58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
90009b5a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
90009b5c:	695a      	ldr	r2, [r3, #20]
90009b5e:	400a      	ands	r2, r1
90009b60:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
90009b62:	695a      	ldr	r2, [r3, #20]
90009b64:	6b21      	ldr	r1, [r4, #48]	; 0x30
90009b66:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
90009b6a:	430a      	orrs	r2, r1
90009b6c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
90009b70:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009b74:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
90009b78:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
90009b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90009b7e:	6add      	ldr	r5, [r3, #44]	; 0x2c
90009b80:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
90009b84:	432a      	orrs	r2, r5
90009b86:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90009b8a:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
90009b8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
90009b90:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
90009b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009b94:	f042 0206 	orr.w	r2, r2, #6
90009b98:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
90009b9a:	699a      	ldr	r2, [r3, #24]
90009b9c:	f042 0201 	orr.w	r2, r2, #1
90009ba0:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
90009ba2:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
90009ba4:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
90009ba8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
90009bac:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
90009bae:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
90009bb2:	f7fa fea3 	bl	900048fc <HAL_LTDC_MspInit>
90009bb6:	e79f      	b.n	90009af8 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
90009bb8:	2001      	movs	r0, #1
}
90009bba:	4770      	bx	lr
90009bbc:	f000f800 	.word	0xf000f800

90009bc0 <HAL_LTDC_ErrorCallback>:
90009bc0:	4770      	bx	lr
90009bc2:	bf00      	nop

90009bc4 <HAL_LTDC_ReloadEventCallback>:
90009bc4:	4770      	bx	lr
90009bc6:	bf00      	nop

90009bc8 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90009bc8:	6803      	ldr	r3, [r0, #0]
{
90009bca:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
90009bcc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
90009bce:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
90009bd0:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
90009bd2:	076a      	lsls	r2, r5, #29
90009bd4:	d501      	bpl.n	90009bda <HAL_LTDC_IRQHandler+0x12>
90009bd6:	0771      	lsls	r1, r6, #29
90009bd8:	d41d      	bmi.n	90009c16 <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
90009bda:	07aa      	lsls	r2, r5, #30
90009bdc:	d501      	bpl.n	90009be2 <HAL_LTDC_IRQHandler+0x1a>
90009bde:	07b3      	lsls	r3, r6, #30
90009be0:	d42d      	bmi.n	90009c3e <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
90009be2:	07e8      	lsls	r0, r5, #31
90009be4:	d501      	bpl.n	90009bea <HAL_LTDC_IRQHandler+0x22>
90009be6:	07f1      	lsls	r1, r6, #31
90009be8:	d440      	bmi.n	90009c6c <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
90009bea:	072a      	lsls	r2, r5, #28
90009bec:	d501      	bpl.n	90009bf2 <HAL_LTDC_IRQHandler+0x2a>
90009bee:	0733      	lsls	r3, r6, #28
90009bf0:	d400      	bmi.n	90009bf4 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
90009bf2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90009bf4:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90009bf6:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
90009bf8:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
90009bfa:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
90009bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009bfe:	f022 0208 	bic.w	r2, r2, #8
90009c02:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
90009c04:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
90009c06:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
90009c08:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009c0c:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
90009c10:	f7ff ffd8 	bl	90009bc4 <HAL_LTDC_ReloadEventCallback>
}
90009c14:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
90009c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009c18:	f022 0204 	bic.w	r2, r2, #4
90009c1c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
90009c1e:	2204      	movs	r2, #4
90009c20:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
90009c22:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
90009c26:	f043 0301 	orr.w	r3, r3, #1
90009c2a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
90009c2e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009c30:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009c34:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
90009c38:	f7ff ffc2 	bl	90009bc0 <HAL_LTDC_ErrorCallback>
90009c3c:	e7cd      	b.n	90009bda <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90009c3e:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
90009c40:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
90009c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009c44:	f022 0202 	bic.w	r2, r2, #2
90009c48:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
90009c4a:	2202      	movs	r2, #2
90009c4c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009c4e:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
90009c50:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
90009c54:	f043 0302 	orr.w	r3, r3, #2
90009c58:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
90009c5c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
90009c5e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009c62:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
90009c66:	f7ff ffab 	bl	90009bc0 <HAL_LTDC_ErrorCallback>
90009c6a:	e7ba      	b.n	90009be2 <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009c6c:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
90009c6e:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009c70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90009c72:	f022 0201 	bic.w	r2, r2, #1
90009c76:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
90009c78:	2201      	movs	r2, #1
90009c7a:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
90009c7c:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
90009c7e:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
90009c82:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
90009c86:	f7f8 fdb7 	bl	900027f8 <HAL_LTDC_LineEventCallback>
90009c8a:	e7ae      	b.n	90009bea <HAL_LTDC_IRQHandler+0x22>

90009c8c <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
90009c8c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
90009c90:	2b01      	cmp	r3, #1
90009c92:	f000 80c0 	beq.w	90009e16 <HAL_LTDC_ConfigLayer+0x18a>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009c96:	2302      	movs	r3, #2
{
90009c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009c9c:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009ca0:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009ca4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
90009ca8:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009caa:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009cae:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009cb0:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009cb4:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009cb6:	f102 0684 	add.w	r6, r2, #132	; 0x84
90009cba:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009cbc:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
90009cc0:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009cc2:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009cc6:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009cca:	f8df a160 	ldr.w	sl, [pc, #352]	; 90009e2c <HAL_LTDC_ConfigLayer+0x1a0>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009cce:	f8dc 3004 	ldr.w	r3, [ip, #4]
90009cd2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
90009cd6:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90009cda:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009ce0:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009ce2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
90009ce8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
90009cec:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
90009cee:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
90009cf0:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009cf4:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90009cf6:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
90009cf8:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009cfc:	f8d9 300c 	ldr.w	r3, [r9, #12]
90009d00:	1c51      	adds	r1, r2, #1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009d02:	68e8      	ldr	r0, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009d04:	f3c3 430b 	ubfx	r3, r3, #16, #12
  tmp2 = (pLayerCfg->Alpha0 << 24U);
90009d08:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
90009d0c:	440b      	add	r3, r1
90009d0e:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
90009d12:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009d16:	f8d9 100c 	ldr.w	r1, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90009d1a:	f8dc 3008 	ldr.w	r3, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009d1e:	f3c1 010a 	ubfx	r1, r1, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90009d22:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
90009d26:	4401      	add	r1, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
90009d28:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90009d2c:	68ab      	ldr	r3, [r5, #8]
90009d2e:	f8d9 000c 	ldr.w	r0, [r9, #12]
90009d32:	3301      	adds	r3, #1
90009d34:	f3c0 000a 	ubfx	r0, r0, #0, #11
90009d38:	4403      	add	r3, r0
90009d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90009d3e:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
90009d40:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
90009d44:	f8dc 3010 	ldr.w	r3, [ip, #16]
90009d48:	f023 0307 	bic.w	r3, r3, #7
90009d4c:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
90009d50:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
90009d54:	f8dc 3018 	ldr.w	r3, [ip, #24]
90009d58:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
90009d5a:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
90009d5e:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
90009d62:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
90009d66:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
90009d6a:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
90009d6e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
90009d72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
90009d76:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
90009d7a:	f8dc 3014 	ldr.w	r3, [ip, #20]
90009d7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
90009d82:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
90009d86:	696b      	ldr	r3, [r5, #20]
90009d88:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009d8c:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009d90:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009d92:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009d96:	6a28      	ldr	r0, [r5, #32]
90009d98:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
90009d9a:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
90009d9e:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
90009da2:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
90009da6:	2300      	movs	r3, #0
90009da8:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
90009dac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
90009dae:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90009db2:	bb59      	cbnz	r1, 90009e0c <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
90009db4:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009db6:	1abf      	subs	r7, r7, r2
90009db8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
90009dba:	fb03 f707 	mul.w	r7, r3, r7
90009dbe:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009dc2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009dc4:	3707      	adds	r7, #7
90009dc6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
90009dca:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
90009dce:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
90009dd2:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
90009dd6:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
90009dda:	4b12      	ldr	r3, [pc, #72]	; (90009e24 <HAL_LTDC_ConfigLayer+0x198>)
90009ddc:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
90009de0:	400b      	ands	r3, r1
90009de2:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
90009de6:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90009dea:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
90009dec:	f859 3006 	ldr.w	r3, [r9, r6]
90009df0:	4313      	orrs	r3, r2
90009df2:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
90009df6:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
90009df8:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
90009dfc:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
90009dfe:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
90009e02:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
90009e06:	b003      	add	sp, #12
90009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
90009e0c:	3901      	subs	r1, #1
90009e0e:	2906      	cmp	r1, #6
90009e10:	d903      	bls.n	90009e1a <HAL_LTDC_ConfigLayer+0x18e>
  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
90009e12:	2301      	movs	r3, #1
90009e14:	e7cf      	b.n	90009db6 <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
90009e16:	2002      	movs	r0, #2
}
90009e18:	4770      	bx	lr
90009e1a:	4b03      	ldr	r3, [pc, #12]	; (90009e28 <HAL_LTDC_ConfigLayer+0x19c>)
90009e1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
90009e20:	e7c9      	b.n	90009db6 <HAL_LTDC_ConfigLayer+0x12a>
90009e22:	bf00      	nop
90009e24:	fffff800 	.word	0xfffff800
90009e28:	90026fe4 	.word	0x90026fe4
90009e2c:	fffff8f8 	.word	0xfffff8f8

90009e30 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
90009e30:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
90009e34:	2a01      	cmp	r2, #1
90009e36:	d019      	beq.n	90009e6c <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009e38:	6802      	ldr	r2, [r0, #0]
90009e3a:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009e3c:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
90009e3e:	f04f 0c00 	mov.w	ip, #0
{
90009e42:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
90009e44:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009e48:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
90009e4a:	4c09      	ldr	r4, [pc, #36]	; (90009e70 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
90009e4c:	f020 0001 	bic.w	r0, r0, #1
90009e50:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
90009e52:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
90009e54:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
90009e56:	6b51      	ldr	r1, [r2, #52]	; 0x34
90009e58:	4301      	orrs	r1, r0
90009e5a:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
90009e5c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
90009e60:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
90009e62:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
90009e66:	f85d 4b04 	ldr.w	r4, [sp], #4
90009e6a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
90009e6c:	2002      	movs	r0, #2
}
90009e6e:	4770      	bx	lr
90009e70:	50001000 	.word	0x50001000

90009e74 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
90009e74:	b538      	push	{r3, r4, r5, lr}
90009e76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
90009e78:	f7fd f976 	bl	90007168 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
90009e7c:	2c00      	cmp	r4, #0
90009e7e:	d05a      	beq.n	90009f36 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
90009e80:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009e82:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
90009e84:	2100      	movs	r1, #0
90009e86:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
90009e88:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
90009e8c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
90009e90:	68da      	ldr	r2, [r3, #12]
90009e92:	f022 0201 	bic.w	r2, r2, #1
90009e96:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009e98:	e005      	b.n	90009ea6 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
90009e9a:	f7fd f965 	bl	90007168 <HAL_GetTick>
90009e9e:	1b43      	subs	r3, r0, r5
90009ea0:	2b05      	cmp	r3, #5
90009ea2:	d841      	bhi.n	90009f28 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
90009ea4:	6823      	ldr	r3, [r4, #0]
90009ea6:	68da      	ldr	r2, [r3, #12]
90009ea8:	07d2      	lsls	r2, r2, #31
90009eaa:	d4f6      	bmi.n	90009e9a <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009eac:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
90009eb0:	69e0      	ldr	r0, [r4, #28]
90009eb2:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009eb4:	68e1      	ldr	r1, [r4, #12]
90009eb6:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009eb8:	4302      	orrs	r2, r0
90009eba:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009ebc:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
90009ebe:	4302      	orrs	r2, r0
90009ec0:	6a60      	ldr	r0, [r4, #36]	; 0x24
90009ec2:	4302      	orrs	r2, r0
90009ec4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90009ec6:	4302      	orrs	r2, r0
90009ec8:	6b20      	ldr	r0, [r4, #48]	; 0x30
90009eca:	4302      	orrs	r2, r0
90009ecc:	68a0      	ldr	r0, [r4, #8]
90009ece:	4302      	orrs	r2, r0
90009ed0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
90009ed2:	3801      	subs	r0, #1
90009ed4:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009ed8:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
90009eda:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009edc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
90009ee0:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
90009ee2:	d103      	bne.n	90009eec <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
90009ee4:	691a      	ldr	r2, [r3, #16]
90009ee6:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
90009eea:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
90009eec:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009eee:	6b62      	ldr	r2, [r4, #52]	; 0x34
90009ef0:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
90009ef2:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
90009ef4:	db30      	blt.n	90009f58 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
90009ef6:	b292      	uxth	r2, r2
90009ef8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
90009efa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
90009efc:	2a00      	cmp	r2, #0
90009efe:	db1c      	blt.n	90009f3a <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009f00:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009f02:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009f06:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
90009f0a:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009f0c:	d021      	beq.n	90009f52 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
90009f0e:	b2c0      	uxtb	r0, r0
90009f10:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
90009f12:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
90009f14:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
90009f16:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
90009f18:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009f1a:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
90009f1c:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
90009f1e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
90009f22:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
90009f26:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90009f28:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009f2a:	2303      	movs	r3, #3
      return HAL_ERROR;
90009f2c:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
90009f2e:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
90009f30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
90009f34:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90009f36:	2001      	movs	r0, #1
}
90009f38:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90009f3a:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
90009f3c:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009f3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
90009f42:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
90009f46:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
90009f48:	6a19      	ldr	r1, [r3, #32]
90009f4a:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
90009f4e:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
90009f50:	d1dd      	bne.n	90009f0e <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
90009f52:	2200      	movs	r2, #0
90009f54:	629a      	str	r2, [r3, #40]	; 0x28
90009f56:	e7dc      	b.n	90009f12 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009f58:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
90009f5a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009f5c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90009f60:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
90009f62:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
90009f64:	621a      	str	r2, [r3, #32]
90009f66:	e7c8      	b.n	90009efa <HAL_MDMA_Init+0x86>

90009f68 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
90009f68:	b1f8      	cbz	r0, 90009faa <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
90009f6a:	6802      	ldr	r2, [r0, #0]
90009f6c:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
90009f6e:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
90009f70:	68d0      	ldr	r0, [r2, #12]
{
90009f72:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
90009f74:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009f78:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
90009f7a:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
90009f7c:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
90009f7e:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
90009f80:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
90009f82:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
90009f84:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
90009f86:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
90009f88:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
90009f8a:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
90009f8c:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
90009f8e:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
90009f90:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
90009f92:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
90009f94:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
90009f96:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
90009f9a:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
90009f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
90009fa2:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
90009fa4:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
90009fa8:	4770      	bx	lr
    return HAL_ERROR;
90009faa:	2001      	movs	r0, #1
}
90009fac:	4770      	bx	lr
90009fae:	bf00      	nop

90009fb0 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
90009fb0:	b310      	cbz	r0, 90009ff8 <HAL_MDMA_ConfigPostRequestMask+0x48>
90009fb2:	4603      	mov	r3, r0
  __HAL_LOCK(hmdma);
90009fb4:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
90009fb8:	2801      	cmp	r0, #1
90009fba:	d01f      	beq.n	90009ffc <HAL_MDMA_ConfigPostRequestMask+0x4c>
{
90009fbc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
90009fbe:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009fc2:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
90009fc6:	45f4      	cmp	ip, lr
90009fc8:	fa5f f08c 	uxtb.w	r0, ip
  __HAL_LOCK(hmdma);
90009fcc:	f883 e03c 	strb.w	lr, [r3, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
90009fd0:	d004      	beq.n	90009fdc <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
90009fd2:	4670      	mov	r0, lr
  __HAL_UNLOCK(hmdma);
90009fd4:	2200      	movs	r2, #0
90009fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
90009fda:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
90009fdc:	681d      	ldr	r5, [r3, #0]
90009fde:	692c      	ldr	r4, [r5, #16]
90009fe0:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
90009fe4:	d1f6      	bne.n	90009fd4 <HAL_MDMA_ConfigPostRequestMask+0x24>
      hmdma->Instance->CMAR = MaskAddress;
90009fe6:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
90009fe8:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009fea:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
90009fec:	b941      	cbnz	r1, 9000a000 <HAL_MDMA_ConfigPostRequestMask+0x50>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009fee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
90009ff2:	4608      	mov	r0, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
90009ff4:	612a      	str	r2, [r5, #16]
90009ff6:	e7ed      	b.n	90009fd4 <HAL_MDMA_ConfigPostRequestMask+0x24>
    return HAL_ERROR;
90009ff8:	2001      	movs	r0, #1
90009ffa:	4770      	bx	lr
  __HAL_LOCK(hmdma);
90009ffc:	2002      	movs	r0, #2
}
90009ffe:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000a000:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000a004:	4620      	mov	r0, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000a006:	612a      	str	r2, [r5, #16]
9000a008:	e7e4      	b.n	90009fd4 <HAL_MDMA_ConfigPostRequestMask+0x24>
9000a00a:	bf00      	nop

9000a00c <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000a00c:	2800      	cmp	r0, #0
9000a00e:	d06f      	beq.n	9000a0f0 <HAL_MDMA_Start_IT+0xe4>
9000a010:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000a012:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000a016:	2801      	cmp	r0, #1
9000a018:	d072      	beq.n	9000a100 <HAL_MDMA_Start_IT+0xf4>
9000a01a:	2001      	movs	r0, #1
9000a01c:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000a020:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000a024:	2801      	cmp	r0, #1
9000a026:	d004      	beq.n	9000a032 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000a028:	2300      	movs	r3, #0
    return HAL_BUSY;
9000a02a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000a02c:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000a030:	4770      	bx	lr
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000a032:	2002      	movs	r0, #2
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a034:	f3c3 0310 	ubfx	r3, r3, #0, #17
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a038:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
{
9000a03c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a03e:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000a040:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a044:	f04f 0000 	mov.w	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
9000a048:	f8dc 4000 	ldr.w	r4, [ip]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a04c:	f105 3eff 	add.w	lr, r5, #4294967295
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000a050:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a054:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
    __HAL_MDMA_DISABLE(hmdma);
9000a058:	68e5      	ldr	r5, [r4, #12]
9000a05a:	f025 0501 	bic.w	r5, r5, #1
9000a05e:	60e5      	str	r5, [r4, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000a060:	6965      	ldr	r5, [r4, #20]
9000a062:	ea00 0005 	and.w	r0, r0, r5
9000a066:	ea40 0003 	orr.w	r0, r0, r3
9000a06a:	6160      	str	r0, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000a06c:	6963      	ldr	r3, [r4, #20]
9000a06e:	f3c3 0313 	ubfx	r3, r3, #0, #20
9000a072:	ea43 530e 	orr.w	r3, r3, lr, lsl #20
9000a076:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000a078:	f04f 031f 	mov.w	r3, #31
9000a07c:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
9000a07e:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000a080:	61a1      	str	r1, [r4, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000a082:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a084:	bf0c      	ite	eq
9000a086:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a08a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000a08e:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    if(hmdma->XferBlockCpltCallback != NULL)
9000a092:	f8dc 204c 	ldr.w	r2, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000a096:	62a3      	str	r3, [r4, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000a098:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000a09a:	bf0c      	ite	eq
9000a09c:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000a0a0:	f423 3300 	bicne.w	r3, r3, #131072	; 0x20000
9000a0a4:	62a3      	str	r3, [r4, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000a0a6:	f8dc 305c 	ldr.w	r3, [ip, #92]	; 0x5c
9000a0aa:	6263      	str	r3, [r4, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000a0ac:	68e3      	ldr	r3, [r4, #12]
9000a0ae:	f043 0306 	orr.w	r3, r3, #6
9000a0b2:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000a0b4:	b11a      	cbz	r2, 9000a0be <HAL_MDMA_Start_IT+0xb2>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000a0b6:	68e3      	ldr	r3, [r4, #12]
9000a0b8:	f043 0310 	orr.w	r3, r3, #16
9000a0bc:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a0be:	f8dc 3050 	ldr.w	r3, [ip, #80]	; 0x50
9000a0c2:	b11b      	cbz	r3, 9000a0cc <HAL_MDMA_Start_IT+0xc0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000a0c4:	68e3      	ldr	r3, [r4, #12]
9000a0c6:	f043 0308 	orr.w	r3, r3, #8
9000a0ca:	60e3      	str	r3, [r4, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000a0cc:	f8dc 3048 	ldr.w	r3, [ip, #72]	; 0x48
9000a0d0:	b11b      	cbz	r3, 9000a0da <HAL_MDMA_Start_IT+0xce>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000a0d2:	68e3      	ldr	r3, [r4, #12]
9000a0d4:	f043 0320 	orr.w	r3, r3, #32
9000a0d8:	60e3      	str	r3, [r4, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000a0da:	68e3      	ldr	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a0dc:	f8dc 2004 	ldr.w	r2, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000a0e0:	f043 0301 	orr.w	r3, r3, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a0e4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000a0e8:	60e3      	str	r3, [r4, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000a0ea:	d003      	beq.n	9000a0f4 <HAL_MDMA_Start_IT+0xe8>
  return HAL_OK;
9000a0ec:	2000      	movs	r0, #0
}
9000a0ee:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000a0f0:	2001      	movs	r0, #1
9000a0f2:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000a0f4:	68e3      	ldr	r3, [r4, #12]
  return HAL_OK;
9000a0f6:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000a0f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a0fc:	60e3      	str	r3, [r4, #12]
}
9000a0fe:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000a100:	2002      	movs	r0, #2
}
9000a102:	4770      	bx	lr

9000a104 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000a104:	4603      	mov	r3, r0
9000a106:	b188      	cbz	r0, 9000a12c <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000a108:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000a10c:	2a02      	cmp	r2, #2
9000a10e:	d003      	beq.n	9000a118 <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000a110:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000a112:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000a114:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000a116:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000a118:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a11a:	2104      	movs	r1, #4
  return HAL_OK;
9000a11c:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a11e:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000a122:	68d3      	ldr	r3, [r2, #12]
9000a124:	f023 0301 	bic.w	r3, r3, #1
9000a128:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000a12a:	4770      	bx	lr
    return HAL_ERROR;
9000a12c:	2001      	movs	r0, #1
}
9000a12e:	4770      	bx	lr

9000a130 <HAL_MDMA_IRQHandler>:
{
9000a130:	b530      	push	{r4, r5, lr}
  __IO uint32_t count = 0;
9000a132:	2300      	movs	r3, #0
{
9000a134:	b083      	sub	sp, #12
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a136:	f04f 45a4 	mov.w	r5, #1375731712	; 0x52000000
{
9000a13a:	4604      	mov	r4, r0
  __IO uint32_t count = 0;
9000a13c:	9301      	str	r3, [sp, #4]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000a13e:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000a140:	4b57      	ldr	r3, [pc, #348]	; (9000a2a0 <HAL_MDMA_IRQHandler+0x170>)
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a142:	6828      	ldr	r0, [r5, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000a144:	4a57      	ldr	r2, [pc, #348]	; (9000a2a4 <HAL_MDMA_IRQHandler+0x174>)
  uint32_t timeout = SystemCoreClock / 9600U;
9000a146:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000a148:	6823      	ldr	r3, [r4, #0]
9000a14a:	441a      	add	r2, r3
9000a14c:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000a150:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000a154:	4202      	tst	r2, r0
9000a156:	f000 80a0 	beq.w	9000a29a <HAL_MDMA_IRQHandler+0x16a>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000a15a:	681a      	ldr	r2, [r3, #0]
9000a15c:	07d1      	lsls	r1, r2, #31
9000a15e:	d529      	bpl.n	9000a1b4 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000a160:	68da      	ldr	r2, [r3, #12]
9000a162:	0792      	lsls	r2, r2, #30
9000a164:	d526      	bpl.n	9000a1b4 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000a166:	68da      	ldr	r2, [r3, #12]
9000a168:	f022 0202 	bic.w	r2, r2, #2
9000a16c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000a16e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000a170:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000a172:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000a174:	bf54      	ite	pl
9000a176:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000a17a:	f041 0102 	orrmi.w	r1, r1, #2
9000a17e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000a180:	0591      	lsls	r1, r2, #22
9000a182:	d503      	bpl.n	9000a18c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000a184:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000a186:	f041 0104 	orr.w	r1, r1, #4
9000a18a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000a18c:	05d0      	lsls	r0, r2, #23
9000a18e:	d503      	bpl.n	9000a198 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000a190:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000a192:	f041 0108 	orr.w	r1, r1, #8
9000a196:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000a198:	0551      	lsls	r1, r2, #21
9000a19a:	d503      	bpl.n	9000a1a4 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000a19c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000a19e:	f041 0110 	orr.w	r1, r1, #16
9000a1a2:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000a1a4:	0510      	lsls	r0, r2, #20
9000a1a6:	d503      	bpl.n	9000a1b0 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000a1a8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000a1aa:	f042 0220 	orr.w	r2, r2, #32
9000a1ae:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000a1b0:	2201      	movs	r2, #1
9000a1b2:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000a1b4:	681a      	ldr	r2, [r3, #0]
9000a1b6:	06d1      	lsls	r1, r2, #27
9000a1b8:	d509      	bpl.n	9000a1ce <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000a1ba:	68da      	ldr	r2, [r3, #12]
9000a1bc:	0692      	lsls	r2, r2, #26
9000a1be:	d506      	bpl.n	9000a1ce <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000a1c0:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000a1c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000a1c4:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000a1c6:	b112      	cbz	r2, 9000a1ce <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000a1c8:	4620      	mov	r0, r4
9000a1ca:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000a1cc:	6823      	ldr	r3, [r4, #0]
9000a1ce:	681a      	ldr	r2, [r3, #0]
9000a1d0:	0710      	lsls	r0, r2, #28
9000a1d2:	d509      	bpl.n	9000a1e8 <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000a1d4:	68da      	ldr	r2, [r3, #12]
9000a1d6:	06d1      	lsls	r1, r2, #27
9000a1d8:	d506      	bpl.n	9000a1e8 <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000a1da:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000a1dc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000a1de:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000a1e0:	b112      	cbz	r2, 9000a1e8 <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000a1e2:	4620      	mov	r0, r4
9000a1e4:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000a1e6:	6823      	ldr	r3, [r4, #0]
9000a1e8:	681a      	ldr	r2, [r3, #0]
9000a1ea:	0752      	lsls	r2, r2, #29
9000a1ec:	d509      	bpl.n	9000a202 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000a1ee:	68da      	ldr	r2, [r3, #12]
9000a1f0:	0710      	lsls	r0, r2, #28
9000a1f2:	d506      	bpl.n	9000a202 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000a1f4:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a1f6:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000a1f8:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000a1fa:	b112      	cbz	r2, 9000a202 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000a1fc:	4620      	mov	r0, r4
9000a1fe:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000a200:	6823      	ldr	r3, [r4, #0]
9000a202:	681a      	ldr	r2, [r3, #0]
9000a204:	0791      	lsls	r1, r2, #30
9000a206:	d516      	bpl.n	9000a236 <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000a208:	68da      	ldr	r2, [r3, #12]
9000a20a:	0752      	lsls	r2, r2, #29
9000a20c:	d513      	bpl.n	9000a236 <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000a20e:	68da      	ldr	r2, [r3, #12]
9000a210:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000a214:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000a216:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000a21a:	2a04      	cmp	r2, #4
9000a21c:	d034      	beq.n	9000a288 <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000a21e:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000a220:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000a222:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000a224:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000a226:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000a228:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000a22c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000a230:	b10b      	cbz	r3, 9000a236 <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000a232:	4620      	mov	r0, r4
9000a234:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000a236:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000a238:	2b00      	cmp	r3, #0
9000a23a:	d02e      	beq.n	9000a29a <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000a23c:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a23e:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000a240:	4b19      	ldr	r3, [pc, #100]	; (9000a2a8 <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000a242:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  uint32_t timeout = SystemCoreClock / 9600U;
9000a246:	fba3 3205 	umull	r3, r2, r3, r5
    __HAL_MDMA_DISABLE(hmdma);
9000a24a:	68cb      	ldr	r3, [r1, #12]
9000a24c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000a250:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000a252:	60cb      	str	r3, [r1, #12]
9000a254:	e002      	b.n	9000a25c <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000a256:	68cb      	ldr	r3, [r1, #12]
9000a258:	07d8      	lsls	r0, r3, #31
9000a25a:	d504      	bpl.n	9000a266 <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000a25c:	9b01      	ldr	r3, [sp, #4]
9000a25e:	3301      	adds	r3, #1
9000a260:	4293      	cmp	r3, r2
9000a262:	9301      	str	r3, [sp, #4]
9000a264:	d9f7      	bls.n	9000a256 <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000a266:	2300      	movs	r3, #0
9000a268:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000a26c:	68cb      	ldr	r3, [r1, #12]
9000a26e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000a270:	bf4c      	ite	mi
9000a272:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000a274:	2301      	movpl	r3, #1
9000a276:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000a27a:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000a27c:	b16b      	cbz	r3, 9000a29a <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000a27e:	4620      	mov	r0, r4
}
9000a280:	b003      	add	sp, #12
9000a282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000a286:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000a288:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000a28a:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000a28c:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000a28e:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000a292:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000a296:	2b00      	cmp	r3, #0
9000a298:	d1f1      	bne.n	9000a27e <HAL_MDMA_IRQHandler+0x14e>
}
9000a29a:	b003      	add	sp, #12
9000a29c:	bd30      	pop	{r4, r5, pc}
9000a29e:	bf00      	nop
9000a2a0:	24000058 	.word	0x24000058
9000a2a4:	adffffc0 	.word	0xadffffc0
9000a2a8:	1b4e81b5 	.word	0x1b4e81b5

9000a2ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000a2ac:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000a2ae:	4c10      	ldr	r4, [pc, #64]	; (9000a2f0 <HAL_PWREx_ConfigSupply+0x44>)
9000a2b0:	68e3      	ldr	r3, [r4, #12]
9000a2b2:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000a2b6:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000a2b8:	d105      	bne.n	9000a2c6 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000a2ba:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000a2be:	1a18      	subs	r0, r3, r0
9000a2c0:	bf18      	it	ne
9000a2c2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000a2c4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000a2c6:	f023 0307 	bic.w	r3, r3, #7
9000a2ca:	4303      	orrs	r3, r0
9000a2cc:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
9000a2ce:	f7fc ff4b 	bl	90007168 <HAL_GetTick>
9000a2d2:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000a2d4:	e005      	b.n	9000a2e2 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000a2d6:	f7fc ff47 	bl	90007168 <HAL_GetTick>
9000a2da:	1b40      	subs	r0, r0, r5
9000a2dc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000a2e0:	d804      	bhi.n	9000a2ec <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000a2e2:	6863      	ldr	r3, [r4, #4]
9000a2e4:	049b      	lsls	r3, r3, #18
9000a2e6:	d5f6      	bpl.n	9000a2d6 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000a2e8:	2000      	movs	r0, #0
}
9000a2ea:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000a2ec:	2001      	movs	r0, #1
}
9000a2ee:	bd38      	pop	{r3, r4, r5, pc}
9000a2f0:	58024800 	.word	0x58024800

9000a2f4 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a2f4:	4b3b      	ldr	r3, [pc, #236]	; (9000a3e4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000a2f6:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a2f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a2fa:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a2fc:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000a2fe:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a302:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000a304:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000a308:	d038      	beq.n	9000a37c <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a30a:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000a30e:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000a312:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000a316:	fb05 f101 	mul.w	r1, r5, r1
9000a31a:	2a01      	cmp	r2, #1
9000a31c:	ee07 1a90 	vmov	s15, r1
9000a320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000a324:	d002      	beq.n	9000a32c <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000a326:	2a02      	cmp	r2, #2
9000a328:	d04e      	beq.n	9000a3c8 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000a32a:	b34a      	cbz	r2, 9000a380 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a32c:	ee07 0a90 	vmov	s15, r0
9000a330:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 9000a3e8 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
9000a334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000a33a:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000a33e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 9000a3ec <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000a342:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000a346:	ee07 3a90 	vmov	s15, r3
9000a34a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000a34e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a352:	eee7 7a25 	vfma.f32	s15, s14, s11
9000a356:	ee77 7a86 	vadd.f32	s15, s15, s12
9000a35a:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000a35e:	4b21      	ldr	r3, [pc, #132]	; (9000a3e4 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
9000a360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000a362:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000a366:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000a368:	ee07 3a90 	vmov	s15, r3
9000a36c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000a370:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000a374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000a378:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000a37c:	bc30      	pop	{r4, r5}
9000a37e:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a380:	681a      	ldr	r2, [r3, #0]
9000a382:	0692      	lsls	r2, r2, #26
9000a384:	d527      	bpl.n	9000a3d6 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a386:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a388:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a38c:	4a18      	ldr	r2, [pc, #96]	; (9000a3f0 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a38e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000a392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a394:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a39c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000a3ec <HAL_RCC_GetSysClockFreq.part.0+0xf8>
9000a3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000a3a4:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a3a6:	ee06 3a90 	vmov	s13, r3
9000a3aa:	ee06 2a10 	vmov	s12, r2
9000a3ae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000a3b2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000a3b6:	eee7 6a05 	vfma.f32	s13, s14, s10
9000a3ba:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000a3be:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000a3c2:	ee66 6a87 	vmul.f32	s13, s13, s14
9000a3c6:	e7ca      	b.n	9000a35e <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a3c8:	ee07 0a90 	vmov	s15, r0
9000a3cc:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000a3f4 <HAL_RCC_GetSysClockFreq.part.0+0x100>
9000a3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a3d4:	e7b0      	b.n	9000a338 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000a3d6:	ee07 0a90 	vmov	s15, r0
9000a3da:	ed9f 5a07 	vldr	s10, [pc, #28]	; 9000a3f8 <HAL_RCC_GetSysClockFreq.part.0+0x104>
9000a3de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000a3e2:	e7a9      	b.n	9000a338 <HAL_RCC_GetSysClockFreq.part.0+0x44>
9000a3e4:	58024400 	.word	0x58024400
9000a3e8:	4a742400 	.word	0x4a742400
9000a3ec:	39000000 	.word	0x39000000
9000a3f0:	03d09000 	.word	0x03d09000
9000a3f4:	4bbebc20 	.word	0x4bbebc20
9000a3f8:	4c742400 	.word	0x4c742400

9000a3fc <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000a3fc:	2800      	cmp	r0, #0
9000a3fe:	f000 81e8 	beq.w	9000a7d2 <HAL_RCC_OscConfig+0x3d6>
{
9000a402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000a404:	6803      	ldr	r3, [r0, #0]
9000a406:	4604      	mov	r4, r0
9000a408:	07d9      	lsls	r1, r3, #31
9000a40a:	d52e      	bpl.n	9000a46a <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a40c:	49a4      	ldr	r1, [pc, #656]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a40e:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a410:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a412:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000a416:	2a10      	cmp	r2, #16
9000a418:	f000 8107 	beq.w	9000a62a <HAL_RCC_OscConfig+0x22e>
9000a41c:	2a18      	cmp	r2, #24
9000a41e:	f000 80ff 	beq.w	9000a620 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a422:	6863      	ldr	r3, [r4, #4]
9000a424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000a428:	f000 812a 	beq.w	9000a680 <HAL_RCC_OscConfig+0x284>
9000a42c:	2b00      	cmp	r3, #0
9000a42e:	f000 8168 	beq.w	9000a702 <HAL_RCC_OscConfig+0x306>
9000a432:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000a436:	4b9a      	ldr	r3, [pc, #616]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a438:	681a      	ldr	r2, [r3, #0]
9000a43a:	f000 8289 	beq.w	9000a950 <HAL_RCC_OscConfig+0x554>
9000a43e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000a442:	601a      	str	r2, [r3, #0]
9000a444:	681a      	ldr	r2, [r3, #0]
9000a446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000a44a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000a44c:	f7fc fe8c 	bl	90007168 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a450:	4e93      	ldr	r6, [pc, #588]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000a452:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a454:	e005      	b.n	9000a462 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000a456:	f7fc fe87 	bl	90007168 <HAL_GetTick>
9000a45a:	1b40      	subs	r0, r0, r5
9000a45c:	2864      	cmp	r0, #100	; 0x64
9000a45e:	f200 814e 	bhi.w	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000a462:	6833      	ldr	r3, [r6, #0]
9000a464:	039b      	lsls	r3, r3, #14
9000a466:	d5f6      	bpl.n	9000a456 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000a468:	6823      	ldr	r3, [r4, #0]
9000a46a:	079d      	lsls	r5, r3, #30
9000a46c:	f100 808a 	bmi.w	9000a584 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a470:	06d9      	lsls	r1, r3, #27
9000a472:	d533      	bpl.n	9000a4dc <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a474:	4a8a      	ldr	r2, [pc, #552]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a476:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a478:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a47a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000a47e:	2b08      	cmp	r3, #8
9000a480:	f000 80e3 	beq.w	9000a64a <HAL_RCC_OscConfig+0x24e>
9000a484:	2b18      	cmp	r3, #24
9000a486:	f000 80db 	beq.w	9000a640 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000a48a:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000a48c:	4d84      	ldr	r5, [pc, #528]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000a48e:	2b00      	cmp	r3, #0
9000a490:	f000 816f 	beq.w	9000a772 <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000a494:	682b      	ldr	r3, [r5, #0]
9000a496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000a49a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a49c:	f7fc fe64 	bl	90007168 <HAL_GetTick>
9000a4a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a4a2:	e005      	b.n	9000a4b0 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000a4a4:	f7fc fe60 	bl	90007168 <HAL_GetTick>
9000a4a8:	1b80      	subs	r0, r0, r6
9000a4aa:	2802      	cmp	r0, #2
9000a4ac:	f200 8127 	bhi.w	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000a4b0:	682b      	ldr	r3, [r5, #0]
9000a4b2:	05db      	lsls	r3, r3, #23
9000a4b4:	d5f6      	bpl.n	9000a4a4 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a4b6:	f7fc fe5d 	bl	90007174 <HAL_GetREVID>
9000a4ba:	f241 0303 	movw	r3, #4099	; 0x1003
9000a4be:	4298      	cmp	r0, r3
9000a4c0:	f200 826d 	bhi.w	9000a99e <HAL_RCC_OscConfig+0x5a2>
9000a4c4:	6a22      	ldr	r2, [r4, #32]
9000a4c6:	686b      	ldr	r3, [r5, #4]
9000a4c8:	2a20      	cmp	r2, #32
9000a4ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a4ce:	bf0c      	ite	eq
9000a4d0:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000a4d4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000a4d8:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a4da:	6823      	ldr	r3, [r4, #0]
9000a4dc:	071d      	lsls	r5, r3, #28
9000a4de:	d516      	bpl.n	9000a50e <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000a4e0:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000a4e2:	4d6f      	ldr	r5, [pc, #444]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000a4e4:	2b00      	cmp	r3, #0
9000a4e6:	f000 8122 	beq.w	9000a72e <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000a4ea:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a4ec:	f043 0301 	orr.w	r3, r3, #1
9000a4f0:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000a4f2:	f7fc fe39 	bl	90007168 <HAL_GetTick>
9000a4f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000a4f8:	e005      	b.n	9000a506 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000a4fa:	f7fc fe35 	bl	90007168 <HAL_GetTick>
9000a4fe:	1b80      	subs	r0, r0, r6
9000a500:	2802      	cmp	r0, #2
9000a502:	f200 80fc 	bhi.w	9000a6fe <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000a506:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a508:	0798      	lsls	r0, r3, #30
9000a50a:	d5f6      	bpl.n	9000a4fa <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000a50c:	6823      	ldr	r3, [r4, #0]
9000a50e:	069a      	lsls	r2, r3, #26
9000a510:	d516      	bpl.n	9000a540 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000a512:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000a514:	4d62      	ldr	r5, [pc, #392]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000a516:	2b00      	cmp	r3, #0
9000a518:	f000 811a 	beq.w	9000a750 <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000a51c:	682b      	ldr	r3, [r5, #0]
9000a51e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000a522:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000a524:	f7fc fe20 	bl	90007168 <HAL_GetTick>
9000a528:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000a52a:	e005      	b.n	9000a538 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000a52c:	f7fc fe1c 	bl	90007168 <HAL_GetTick>
9000a530:	1b80      	subs	r0, r0, r6
9000a532:	2802      	cmp	r0, #2
9000a534:	f200 80e3 	bhi.w	9000a6fe <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000a538:	682b      	ldr	r3, [r5, #0]
9000a53a:	049f      	lsls	r7, r3, #18
9000a53c:	d5f6      	bpl.n	9000a52c <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000a53e:	6823      	ldr	r3, [r4, #0]
9000a540:	0759      	lsls	r1, r3, #29
9000a542:	f100 80a3 	bmi.w	9000a68c <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000a546:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000a548:	b1d0      	cbz	r0, 9000a580 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000a54a:	4d55      	ldr	r5, [pc, #340]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a54c:	692b      	ldr	r3, [r5, #16]
9000a54e:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a552:	2b18      	cmp	r3, #24
9000a554:	f000 81ae 	beq.w	9000a8b4 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000a558:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000a55a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000a55c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000a560:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000a562:	f000 8142 	beq.w	9000a7ea <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000a566:	f7fc fdff 	bl	90007168 <HAL_GetTick>
9000a56a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a56c:	e005      	b.n	9000a57a <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a56e:	f7fc fdfb 	bl	90007168 <HAL_GetTick>
9000a572:	1b00      	subs	r0, r0, r4
9000a574:	2802      	cmp	r0, #2
9000a576:	f200 80c2 	bhi.w	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a57a:	682b      	ldr	r3, [r5, #0]
9000a57c:	019b      	lsls	r3, r3, #6
9000a57e:	d4f6      	bmi.n	9000a56e <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000a580:	2000      	movs	r0, #0
}
9000a582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000a584:	4a46      	ldr	r2, [pc, #280]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a586:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000a588:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a58a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000a58e:	d12d      	bne.n	9000a5ec <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000a590:	4b43      	ldr	r3, [pc, #268]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a592:	68e2      	ldr	r2, [r4, #12]
9000a594:	681b      	ldr	r3, [r3, #0]
9000a596:	0759      	lsls	r1, r3, #29
9000a598:	d501      	bpl.n	9000a59e <HAL_RCC_OscConfig+0x1a2>
9000a59a:	2a00      	cmp	r2, #0
9000a59c:	d04e      	beq.n	9000a63c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a59e:	4d40      	ldr	r5, [pc, #256]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a5a0:	682b      	ldr	r3, [r5, #0]
9000a5a2:	f023 0319 	bic.w	r3, r3, #25
9000a5a6:	4313      	orrs	r3, r2
9000a5a8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a5aa:	f7fc fddd 	bl	90007168 <HAL_GetTick>
9000a5ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a5b0:	e005      	b.n	9000a5be <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a5b2:	f7fc fdd9 	bl	90007168 <HAL_GetTick>
9000a5b6:	1b80      	subs	r0, r0, r6
9000a5b8:	2802      	cmp	r0, #2
9000a5ba:	f200 80a0 	bhi.w	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a5be:	682b      	ldr	r3, [r5, #0]
9000a5c0:	075b      	lsls	r3, r3, #29
9000a5c2:	d5f6      	bpl.n	9000a5b2 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000a5c4:	f7fc fdd6 	bl	90007174 <HAL_GetREVID>
9000a5c8:	f241 0303 	movw	r3, #4099	; 0x1003
9000a5cc:	4298      	cmp	r0, r3
9000a5ce:	f200 80f7 	bhi.w	9000a7c0 <HAL_RCC_OscConfig+0x3c4>
9000a5d2:	6922      	ldr	r2, [r4, #16]
9000a5d4:	686b      	ldr	r3, [r5, #4]
9000a5d6:	2a40      	cmp	r2, #64	; 0x40
9000a5d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000a5dc:	bf0c      	ite	eq
9000a5de:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000a5e2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000a5e6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a5e8:	6823      	ldr	r3, [r4, #0]
9000a5ea:	e741      	b.n	9000a470 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a5ec:	2b18      	cmp	r3, #24
9000a5ee:	f000 80e3 	beq.w	9000a7b8 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a5f2:	4d2b      	ldr	r5, [pc, #172]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a5f4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a5f6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000a5f8:	2a00      	cmp	r2, #0
9000a5fa:	f000 80cc 	beq.w	9000a796 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000a5fe:	f023 0319 	bic.w	r3, r3, #25
9000a602:	4313      	orrs	r3, r2
9000a604:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a606:	f7fc fdaf 	bl	90007168 <HAL_GetTick>
9000a60a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a60c:	e004      	b.n	9000a618 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a60e:	f7fc fdab 	bl	90007168 <HAL_GetTick>
9000a612:	1b80      	subs	r0, r0, r6
9000a614:	2802      	cmp	r0, #2
9000a616:	d872      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000a618:	682b      	ldr	r3, [r5, #0]
9000a61a:	075f      	lsls	r7, r3, #29
9000a61c:	d5f7      	bpl.n	9000a60e <HAL_RCC_OscConfig+0x212>
9000a61e:	e7d1      	b.n	9000a5c4 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000a620:	f001 0103 	and.w	r1, r1, #3
9000a624:	2902      	cmp	r1, #2
9000a626:	f47f aefc 	bne.w	9000a422 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000a62a:	4a1d      	ldr	r2, [pc, #116]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a62c:	6812      	ldr	r2, [r2, #0]
9000a62e:	0392      	lsls	r2, r2, #14
9000a630:	f57f af1b 	bpl.w	9000a46a <HAL_RCC_OscConfig+0x6e>
9000a634:	6862      	ldr	r2, [r4, #4]
9000a636:	2a00      	cmp	r2, #0
9000a638:	f47f af17 	bne.w	9000a46a <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000a63c:	2001      	movs	r0, #1
}
9000a63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000a640:	f002 0203 	and.w	r2, r2, #3
9000a644:	2a01      	cmp	r2, #1
9000a646:	f47f af20 	bne.w	9000a48a <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000a64a:	4b15      	ldr	r3, [pc, #84]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a64c:	681b      	ldr	r3, [r3, #0]
9000a64e:	05da      	lsls	r2, r3, #23
9000a650:	d502      	bpl.n	9000a658 <HAL_RCC_OscConfig+0x25c>
9000a652:	69e3      	ldr	r3, [r4, #28]
9000a654:	2b80      	cmp	r3, #128	; 0x80
9000a656:	d1f1      	bne.n	9000a63c <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a658:	f7fc fd8c 	bl	90007174 <HAL_GetREVID>
9000a65c:	f241 0303 	movw	r3, #4099	; 0x1003
9000a660:	4298      	cmp	r0, r3
9000a662:	f200 80b8 	bhi.w	9000a7d6 <HAL_RCC_OscConfig+0x3da>
9000a666:	6a22      	ldr	r2, [r4, #32]
9000a668:	2a20      	cmp	r2, #32
9000a66a:	f000 81a7 	beq.w	9000a9bc <HAL_RCC_OscConfig+0x5c0>
9000a66e:	490c      	ldr	r1, [pc, #48]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a670:	684b      	ldr	r3, [r1, #4]
9000a672:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a676:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000a67a:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a67c:	6823      	ldr	r3, [r4, #0]
9000a67e:	e72d      	b.n	9000a4dc <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a680:	4a07      	ldr	r2, [pc, #28]	; (9000a6a0 <HAL_RCC_OscConfig+0x2a4>)
9000a682:	6813      	ldr	r3, [r2, #0]
9000a684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a688:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000a68a:	e6df      	b.n	9000a44c <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000a68c:	4d05      	ldr	r5, [pc, #20]	; (9000a6a4 <HAL_RCC_OscConfig+0x2a8>)
9000a68e:	682b      	ldr	r3, [r5, #0]
9000a690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000a694:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000a696:	f7fc fd67 	bl	90007168 <HAL_GetTick>
9000a69a:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000a69c:	e009      	b.n	9000a6b2 <HAL_RCC_OscConfig+0x2b6>
9000a69e:	bf00      	nop
9000a6a0:	58024400 	.word	0x58024400
9000a6a4:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000a6a8:	f7fc fd5e 	bl	90007168 <HAL_GetTick>
9000a6ac:	1b80      	subs	r0, r0, r6
9000a6ae:	2864      	cmp	r0, #100	; 0x64
9000a6b0:	d825      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000a6b2:	682b      	ldr	r3, [r5, #0]
9000a6b4:	05da      	lsls	r2, r3, #23
9000a6b6:	d5f7      	bpl.n	9000a6a8 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a6b8:	68a3      	ldr	r3, [r4, #8]
9000a6ba:	2b01      	cmp	r3, #1
9000a6bc:	f000 8178 	beq.w	9000a9b0 <HAL_RCC_OscConfig+0x5b4>
9000a6c0:	2b00      	cmp	r3, #0
9000a6c2:	f000 8153 	beq.w	9000a96c <HAL_RCC_OscConfig+0x570>
9000a6c6:	2b05      	cmp	r3, #5
9000a6c8:	4ba5      	ldr	r3, [pc, #660]	; (9000a960 <HAL_RCC_OscConfig+0x564>)
9000a6ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a6cc:	f000 817f 	beq.w	9000a9ce <HAL_RCC_OscConfig+0x5d2>
9000a6d0:	f022 0201 	bic.w	r2, r2, #1
9000a6d4:	671a      	str	r2, [r3, #112]	; 0x70
9000a6d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a6d8:	f022 0204 	bic.w	r2, r2, #4
9000a6dc:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000a6de:	f7fc fd43 	bl	90007168 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a6e2:	4e9f      	ldr	r6, [pc, #636]	; (9000a960 <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a6e4:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000a6e8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a6ea:	e004      	b.n	9000a6f6 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a6ec:	f7fc fd3c 	bl	90007168 <HAL_GetTick>
9000a6f0:	1b40      	subs	r0, r0, r5
9000a6f2:	42b8      	cmp	r0, r7
9000a6f4:	d803      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000a6f6:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000a6f8:	079b      	lsls	r3, r3, #30
9000a6fa:	d5f7      	bpl.n	9000a6ec <HAL_RCC_OscConfig+0x2f0>
9000a6fc:	e723      	b.n	9000a546 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000a6fe:	2003      	movs	r0, #3
}
9000a700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a702:	4d97      	ldr	r5, [pc, #604]	; (9000a960 <HAL_RCC_OscConfig+0x564>)
9000a704:	682b      	ldr	r3, [r5, #0]
9000a706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000a70a:	602b      	str	r3, [r5, #0]
9000a70c:	682b      	ldr	r3, [r5, #0]
9000a70e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000a712:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a714:	f7fc fd28 	bl	90007168 <HAL_GetTick>
9000a718:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000a71a:	e004      	b.n	9000a726 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000a71c:	f7fc fd24 	bl	90007168 <HAL_GetTick>
9000a720:	1b80      	subs	r0, r0, r6
9000a722:	2864      	cmp	r0, #100	; 0x64
9000a724:	d8eb      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000a726:	682b      	ldr	r3, [r5, #0]
9000a728:	039f      	lsls	r7, r3, #14
9000a72a:	d4f7      	bmi.n	9000a71c <HAL_RCC_OscConfig+0x320>
9000a72c:	e69c      	b.n	9000a468 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000a72e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a730:	f023 0301 	bic.w	r3, r3, #1
9000a734:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000a736:	f7fc fd17 	bl	90007168 <HAL_GetTick>
9000a73a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000a73c:	e004      	b.n	9000a748 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000a73e:	f7fc fd13 	bl	90007168 <HAL_GetTick>
9000a742:	1b80      	subs	r0, r0, r6
9000a744:	2802      	cmp	r0, #2
9000a746:	d8da      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000a748:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000a74a:	0799      	lsls	r1, r3, #30
9000a74c:	d4f7      	bmi.n	9000a73e <HAL_RCC_OscConfig+0x342>
9000a74e:	e6dd      	b.n	9000a50c <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000a750:	682b      	ldr	r3, [r5, #0]
9000a752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000a756:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000a758:	f7fc fd06 	bl	90007168 <HAL_GetTick>
9000a75c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000a75e:	e004      	b.n	9000a76a <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000a760:	f7fc fd02 	bl	90007168 <HAL_GetTick>
9000a764:	1b80      	subs	r0, r0, r6
9000a766:	2802      	cmp	r0, #2
9000a768:	d8c9      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000a76a:	682b      	ldr	r3, [r5, #0]
9000a76c:	0498      	lsls	r0, r3, #18
9000a76e:	d4f7      	bmi.n	9000a760 <HAL_RCC_OscConfig+0x364>
9000a770:	e6e5      	b.n	9000a53e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000a772:	682b      	ldr	r3, [r5, #0]
9000a774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000a778:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a77a:	f7fc fcf5 	bl	90007168 <HAL_GetTick>
9000a77e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000a780:	e004      	b.n	9000a78c <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000a782:	f7fc fcf1 	bl	90007168 <HAL_GetTick>
9000a786:	1b80      	subs	r0, r0, r6
9000a788:	2802      	cmp	r0, #2
9000a78a:	d8b8      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000a78c:	682b      	ldr	r3, [r5, #0]
9000a78e:	05df      	lsls	r7, r3, #23
9000a790:	d4f7      	bmi.n	9000a782 <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a792:	6823      	ldr	r3, [r4, #0]
9000a794:	e6a2      	b.n	9000a4dc <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000a796:	f023 0301 	bic.w	r3, r3, #1
9000a79a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a79c:	f7fc fce4 	bl	90007168 <HAL_GetTick>
9000a7a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000a7a2:	e004      	b.n	9000a7ae <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000a7a4:	f7fc fce0 	bl	90007168 <HAL_GetTick>
9000a7a8:	1b80      	subs	r0, r0, r6
9000a7aa:	2802      	cmp	r0, #2
9000a7ac:	d8a7      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000a7ae:	682b      	ldr	r3, [r5, #0]
9000a7b0:	0758      	lsls	r0, r3, #29
9000a7b2:	d4f7      	bmi.n	9000a7a4 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a7b4:	6823      	ldr	r3, [r4, #0]
9000a7b6:	e65b      	b.n	9000a470 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000a7b8:	0790      	lsls	r0, r2, #30
9000a7ba:	f47f af1a 	bne.w	9000a5f2 <HAL_RCC_OscConfig+0x1f6>
9000a7be:	e6e7      	b.n	9000a590 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000a7c0:	686b      	ldr	r3, [r5, #4]
9000a7c2:	6922      	ldr	r2, [r4, #16]
9000a7c4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000a7c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a7cc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000a7ce:	6823      	ldr	r3, [r4, #0]
9000a7d0:	e64e      	b.n	9000a470 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000a7d2:	2001      	movs	r0, #1
}
9000a7d4:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a7d6:	4a62      	ldr	r2, [pc, #392]	; (9000a960 <HAL_RCC_OscConfig+0x564>)
9000a7d8:	6a21      	ldr	r1, [r4, #32]
9000a7da:	68d3      	ldr	r3, [r2, #12]
9000a7dc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000a7e0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000a7e4:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a7e6:	6823      	ldr	r3, [r4, #0]
9000a7e8:	e678      	b.n	9000a4dc <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000a7ea:	f7fc fcbd 	bl	90007168 <HAL_GetTick>
9000a7ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a7f0:	e004      	b.n	9000a7fc <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a7f2:	f7fc fcb9 	bl	90007168 <HAL_GetTick>
9000a7f6:	1b80      	subs	r0, r0, r6
9000a7f8:	2802      	cmp	r0, #2
9000a7fa:	d880      	bhi.n	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000a7fc:	682b      	ldr	r3, [r5, #0]
9000a7fe:	0199      	lsls	r1, r3, #6
9000a800:	d4f7      	bmi.n	9000a7f2 <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000a802:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000a804:	4b57      	ldr	r3, [pc, #348]	; (9000a964 <HAL_RCC_OscConfig+0x568>)
9000a806:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000a808:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a80a:	4957      	ldr	r1, [pc, #348]	; (9000a968 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a80c:	4e54      	ldr	r6, [pc, #336]	; (9000a960 <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000a80e:	4313      	orrs	r3, r2
9000a810:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000a812:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000a816:	62ab      	str	r3, [r5, #40]	; 0x28
9000a818:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000a81c:	3b01      	subs	r3, #1
9000a81e:	3a01      	subs	r2, #1
9000a820:	025b      	lsls	r3, r3, #9
9000a822:	0412      	lsls	r2, r2, #16
9000a824:	b29b      	uxth	r3, r3
9000a826:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000a82a:	4313      	orrs	r3, r2
9000a82c:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000a82e:	3a01      	subs	r2, #1
9000a830:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000a834:	4313      	orrs	r3, r2
9000a836:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000a838:	3a01      	subs	r2, #1
9000a83a:	0612      	lsls	r2, r2, #24
9000a83c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000a840:	4313      	orrs	r3, r2
9000a842:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000a844:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a846:	f023 0301 	bic.w	r3, r3, #1
9000a84a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a84c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000a84e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000a850:	4011      	ands	r1, r2
9000a852:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000a856:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000a858:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a85a:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000a85c:	f023 030c 	bic.w	r3, r3, #12
9000a860:	4313      	orrs	r3, r2
9000a862:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000a864:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a866:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000a868:	f023 0302 	bic.w	r3, r3, #2
9000a86c:	4313      	orrs	r3, r2
9000a86e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000a870:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000a876:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000a878:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a87a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000a87e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000a880:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a882:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000a886:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000a888:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000a88a:	f043 0301 	orr.w	r3, r3, #1
9000a88e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000a890:	682b      	ldr	r3, [r5, #0]
9000a892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000a896:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000a898:	f7fc fc66 	bl	90007168 <HAL_GetTick>
9000a89c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a89e:	e005      	b.n	9000a8ac <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000a8a0:	f7fc fc62 	bl	90007168 <HAL_GetTick>
9000a8a4:	1b00      	subs	r0, r0, r4
9000a8a6:	2802      	cmp	r0, #2
9000a8a8:	f63f af29 	bhi.w	9000a6fe <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000a8ac:	6833      	ldr	r3, [r6, #0]
9000a8ae:	019a      	lsls	r2, r3, #6
9000a8b0:	d5f6      	bpl.n	9000a8a0 <HAL_RCC_OscConfig+0x4a4>
9000a8b2:	e665      	b.n	9000a580 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a8b4:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000a8b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000a8b8:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a8ba:	f43f ae62 	beq.w	9000a582 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a8be:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000a8c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000a8c4:	428b      	cmp	r3, r1
9000a8c6:	f47f aeb9 	bne.w	9000a63c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a8ca:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000a8ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000a8d0:	429a      	cmp	r2, r3
9000a8d2:	f47f aeb3 	bne.w	9000a63c <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a8d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000a8d8:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000a8dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000a8de:	429a      	cmp	r2, r3
9000a8e0:	f47f aeac 	bne.w	9000a63c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a8e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000a8e6:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000a8ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000a8ec:	429a      	cmp	r2, r3
9000a8ee:	f47f aea5 	bne.w	9000a63c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a8f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000a8f4:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000a8f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000a8fa:	429a      	cmp	r2, r3
9000a8fc:	f47f ae9e 	bne.w	9000a63c <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000a900:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000a902:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000a906:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000a908:	429e      	cmp	r6, r3
9000a90a:	f47f ae97 	bne.w	9000a63c <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a90e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a910:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000a912:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000a916:	429a      	cmp	r2, r3
9000a918:	f43f ae32 	beq.w	9000a580 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000a91c:	4a10      	ldr	r2, [pc, #64]	; (9000a960 <HAL_RCC_OscConfig+0x564>)
9000a91e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000a920:	f023 0301 	bic.w	r3, r3, #1
9000a924:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000a926:	f7fc fc1f 	bl	90007168 <HAL_GetTick>
9000a92a:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000a92c:	f7fc fc1c 	bl	90007168 <HAL_GetTick>
9000a930:	42a8      	cmp	r0, r5
9000a932:	d0fb      	beq.n	9000a92c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a934:	4a0a      	ldr	r2, [pc, #40]	; (9000a960 <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000a936:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000a938:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000a93a:	4b0b      	ldr	r3, [pc, #44]	; (9000a968 <HAL_RCC_OscConfig+0x56c>)
9000a93c:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000a93e:	4023      	ands	r3, r4
9000a940:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000a944:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000a946:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000a948:	f043 0301 	orr.w	r3, r3, #1
9000a94c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000a94e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000a950:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000a954:	601a      	str	r2, [r3, #0]
9000a956:	681a      	ldr	r2, [r3, #0]
9000a958:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000a95c:	601a      	str	r2, [r3, #0]
9000a95e:	e575      	b.n	9000a44c <HAL_RCC_OscConfig+0x50>
9000a960:	58024400 	.word	0x58024400
9000a964:	fffffc0c 	.word	0xfffffc0c
9000a968:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a96c:	4d1c      	ldr	r5, [pc, #112]	; (9000a9e0 <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a96e:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a972:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a974:	f023 0301 	bic.w	r3, r3, #1
9000a978:	672b      	str	r3, [r5, #112]	; 0x70
9000a97a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a97c:	f023 0304 	bic.w	r3, r3, #4
9000a980:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000a982:	f7fc fbf1 	bl	90007168 <HAL_GetTick>
9000a986:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a988:	e005      	b.n	9000a996 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000a98a:	f7fc fbed 	bl	90007168 <HAL_GetTick>
9000a98e:	1b80      	subs	r0, r0, r6
9000a990:	42b8      	cmp	r0, r7
9000a992:	f63f aeb4 	bhi.w	9000a6fe <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000a996:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000a998:	0798      	lsls	r0, r3, #30
9000a99a:	d4f6      	bmi.n	9000a98a <HAL_RCC_OscConfig+0x58e>
9000a99c:	e5d3      	b.n	9000a546 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a99e:	68eb      	ldr	r3, [r5, #12]
9000a9a0:	6a22      	ldr	r2, [r4, #32]
9000a9a2:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000a9a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000a9aa:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a9ac:	6823      	ldr	r3, [r4, #0]
9000a9ae:	e595      	b.n	9000a4dc <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a9b0:	4a0b      	ldr	r2, [pc, #44]	; (9000a9e0 <HAL_RCC_OscConfig+0x5e4>)
9000a9b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000a9b4:	f043 0301 	orr.w	r3, r3, #1
9000a9b8:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000a9ba:	e690      	b.n	9000a6de <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000a9bc:	4a08      	ldr	r2, [pc, #32]	; (9000a9e0 <HAL_RCC_OscConfig+0x5e4>)
9000a9be:	6853      	ldr	r3, [r2, #4]
9000a9c0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000a9c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000a9c8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000a9ca:	6823      	ldr	r3, [r4, #0]
9000a9cc:	e586      	b.n	9000a4dc <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000a9ce:	f042 0204 	orr.w	r2, r2, #4
9000a9d2:	671a      	str	r2, [r3, #112]	; 0x70
9000a9d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000a9d6:	f042 0201 	orr.w	r2, r2, #1
9000a9da:	671a      	str	r2, [r3, #112]	; 0x70
9000a9dc:	e67f      	b.n	9000a6de <HAL_RCC_OscConfig+0x2e2>
9000a9de:	bf00      	nop
9000a9e0:	58024400 	.word	0x58024400

9000a9e4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a9e4:	4a47      	ldr	r2, [pc, #284]	; (9000ab04 <HAL_RCC_GetSysClockFreq+0x120>)
9000a9e6:	6913      	ldr	r3, [r2, #16]
9000a9e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000a9ec:	2b10      	cmp	r3, #16
9000a9ee:	d004      	beq.n	9000a9fa <HAL_RCC_GetSysClockFreq+0x16>
9000a9f0:	2b18      	cmp	r3, #24
9000a9f2:	d00d      	beq.n	9000aa10 <HAL_RCC_GetSysClockFreq+0x2c>
9000a9f4:	b11b      	cbz	r3, 9000a9fe <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000a9f6:	4844      	ldr	r0, [pc, #272]	; (9000ab08 <HAL_RCC_GetSysClockFreq+0x124>)
9000a9f8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000a9fa:	4844      	ldr	r0, [pc, #272]	; (9000ab0c <HAL_RCC_GetSysClockFreq+0x128>)
9000a9fc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000a9fe:	6813      	ldr	r3, [r2, #0]
9000aa00:	0699      	lsls	r1, r3, #26
9000aa02:	d54a      	bpl.n	9000aa9a <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000aa04:	6813      	ldr	r3, [r2, #0]
9000aa06:	4842      	ldr	r0, [pc, #264]	; (9000ab10 <HAL_RCC_GetSysClockFreq+0x12c>)
9000aa08:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000aa0c:	40d8      	lsrs	r0, r3
9000aa0e:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000aa10:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000aa12:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000aa14:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000aa16:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000aa18:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000aa1c:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000aa1e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000aa22:	d038      	beq.n	9000aa96 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000aa24:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000aa28:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000aa2c:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000aa30:	fb05 f101 	mul.w	r1, r5, r1
9000aa34:	2b01      	cmp	r3, #1
9000aa36:	ee07 1a90 	vmov	s15, r1
9000aa3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000aa3e:	d002      	beq.n	9000aa46 <HAL_RCC_GetSysClockFreq+0x62>
9000aa40:	2b02      	cmp	r3, #2
9000aa42:	d02c      	beq.n	9000aa9e <HAL_RCC_GetSysClockFreq+0xba>
9000aa44:	b393      	cbz	r3, 9000aaac <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aa46:	ee07 0a90 	vmov	s15, r0
9000aa4a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000ab14 <HAL_RCC_GetSysClockFreq+0x130>
9000aa4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000aa52:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000aa54:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000aa58:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000ab18 <HAL_RCC_GetSysClockFreq+0x134>
9000aa5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000aa60:	ee07 3a90 	vmov	s15, r3
9000aa64:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000aa68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000aa6c:	eee7 7a25 	vfma.f32	s15, s14, s11
9000aa70:	ee77 7a86 	vadd.f32	s15, s15, s12
9000aa74:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000aa78:	4b22      	ldr	r3, [pc, #136]	; (9000ab04 <HAL_RCC_GetSysClockFreq+0x120>)
9000aa7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000aa7c:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000aa80:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000aa82:	ee07 3a90 	vmov	s15, r3
9000aa86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000aa8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000aa8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000aa92:	ee17 0a90 	vmov	r0, s15
}
9000aa96:	bc30      	pop	{r4, r5}
9000aa98:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000aa9a:	481d      	ldr	r0, [pc, #116]	; (9000ab10 <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000aa9c:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aa9e:	ee07 0a90 	vmov	s15, r0
9000aaa2:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000ab1c <HAL_RCC_GetSysClockFreq+0x138>
9000aaa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000aaaa:	e7d2      	b.n	9000aa52 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000aaac:	6813      	ldr	r3, [r2, #0]
9000aaae:	069b      	lsls	r3, r3, #26
9000aab0:	d520      	bpl.n	9000aaf4 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000aab2:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aab4:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000aab8:	4915      	ldr	r1, [pc, #84]	; (9000ab10 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aaba:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000aabe:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000aac0:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000aac8:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000ab18 <HAL_RCC_GetSysClockFreq+0x134>
9000aacc:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000aad0:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aad2:	ee06 3a90 	vmov	s13, r3
9000aad6:	ee06 1a10 	vmov	s12, r1
9000aada:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000aade:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000aae2:	eee7 6a05 	vfma.f32	s13, s14, s10
9000aae6:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000aaea:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000aaee:	ee66 6a87 	vmul.f32	s13, s13, s14
9000aaf2:	e7c1      	b.n	9000aa78 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000aaf4:	ee07 0a90 	vmov	s15, r0
9000aaf8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000ab20 <HAL_RCC_GetSysClockFreq+0x13c>
9000aafc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ab00:	e7a7      	b.n	9000aa52 <HAL_RCC_GetSysClockFreq+0x6e>
9000ab02:	bf00      	nop
9000ab04:	58024400 	.word	0x58024400
9000ab08:	003d0900 	.word	0x003d0900
9000ab0c:	017d7840 	.word	0x017d7840
9000ab10:	03d09000 	.word	0x03d09000
9000ab14:	4a742400 	.word	0x4a742400
9000ab18:	39000000 	.word	0x39000000
9000ab1c:	4bbebc20 	.word	0x4bbebc20
9000ab20:	4c742400 	.word	0x4c742400

9000ab24 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000ab24:	2800      	cmp	r0, #0
9000ab26:	f000 810c 	beq.w	9000ad42 <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000ab2a:	4a8c      	ldr	r2, [pc, #560]	; (9000ad5c <HAL_RCC_ClockConfig+0x238>)
9000ab2c:	6813      	ldr	r3, [r2, #0]
9000ab2e:	f003 030f 	and.w	r3, r3, #15
9000ab32:	428b      	cmp	r3, r1
{
9000ab34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ab38:	4604      	mov	r4, r0
9000ab3a:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000ab3c:	d20c      	bcs.n	9000ab58 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000ab3e:	6813      	ldr	r3, [r2, #0]
9000ab40:	f023 030f 	bic.w	r3, r3, #15
9000ab44:	430b      	orrs	r3, r1
9000ab46:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000ab48:	6813      	ldr	r3, [r2, #0]
9000ab4a:	f003 030f 	and.w	r3, r3, #15
9000ab4e:	428b      	cmp	r3, r1
9000ab50:	d002      	beq.n	9000ab58 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000ab52:	2001      	movs	r0, #1
}
9000ab54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000ab58:	6823      	ldr	r3, [r4, #0]
9000ab5a:	075f      	lsls	r7, r3, #29
9000ab5c:	d50b      	bpl.n	9000ab76 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000ab5e:	4980      	ldr	r1, [pc, #512]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000ab60:	6920      	ldr	r0, [r4, #16]
9000ab62:	698a      	ldr	r2, [r1, #24]
9000ab64:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000ab68:	4290      	cmp	r0, r2
9000ab6a:	d904      	bls.n	9000ab76 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000ab6c:	698a      	ldr	r2, [r1, #24]
9000ab6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000ab72:	4302      	orrs	r2, r0
9000ab74:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000ab76:	071e      	lsls	r6, r3, #28
9000ab78:	d50b      	bpl.n	9000ab92 <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000ab7a:	4979      	ldr	r1, [pc, #484]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000ab7c:	6960      	ldr	r0, [r4, #20]
9000ab7e:	69ca      	ldr	r2, [r1, #28]
9000ab80:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000ab84:	4290      	cmp	r0, r2
9000ab86:	d904      	bls.n	9000ab92 <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000ab88:	69ca      	ldr	r2, [r1, #28]
9000ab8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000ab8e:	4302      	orrs	r2, r0
9000ab90:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000ab92:	06d8      	lsls	r0, r3, #27
9000ab94:	d50b      	bpl.n	9000abae <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000ab96:	4972      	ldr	r1, [pc, #456]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000ab98:	69a0      	ldr	r0, [r4, #24]
9000ab9a:	69ca      	ldr	r2, [r1, #28]
9000ab9c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000aba0:	4290      	cmp	r0, r2
9000aba2:	d904      	bls.n	9000abae <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000aba4:	69ca      	ldr	r2, [r1, #28]
9000aba6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000abaa:	4302      	orrs	r2, r0
9000abac:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000abae:	0699      	lsls	r1, r3, #26
9000abb0:	d50b      	bpl.n	9000abca <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000abb2:	496b      	ldr	r1, [pc, #428]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000abb4:	69e0      	ldr	r0, [r4, #28]
9000abb6:	6a0a      	ldr	r2, [r1, #32]
9000abb8:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000abbc:	4290      	cmp	r0, r2
9000abbe:	d904      	bls.n	9000abca <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000abc0:	6a0a      	ldr	r2, [r1, #32]
9000abc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000abc6:	4302      	orrs	r2, r0
9000abc8:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000abca:	079a      	lsls	r2, r3, #30
9000abcc:	f140 80ab 	bpl.w	9000ad26 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000abd0:	4863      	ldr	r0, [pc, #396]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000abd2:	68e1      	ldr	r1, [r4, #12]
9000abd4:	6982      	ldr	r2, [r0, #24]
9000abd6:	f002 020f 	and.w	r2, r2, #15
9000abda:	4291      	cmp	r1, r2
9000abdc:	d904      	bls.n	9000abe8 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000abde:	6982      	ldr	r2, [r0, #24]
9000abe0:	f022 020f 	bic.w	r2, r2, #15
9000abe4:	430a      	orrs	r2, r1
9000abe6:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000abe8:	07d8      	lsls	r0, r3, #31
9000abea:	d530      	bpl.n	9000ac4e <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000abec:	4a5c      	ldr	r2, [pc, #368]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000abee:	68a1      	ldr	r1, [r4, #8]
9000abf0:	6993      	ldr	r3, [r2, #24]
9000abf2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000abf6:	430b      	orrs	r3, r1
9000abf8:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000abfa:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000abfc:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000abfe:	2902      	cmp	r1, #2
9000ac00:	f000 80a1 	beq.w	9000ad46 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000ac04:	2903      	cmp	r1, #3
9000ac06:	f000 8098 	beq.w	9000ad3a <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000ac0a:	2901      	cmp	r1, #1
9000ac0c:	f000 80a1 	beq.w	9000ad52 <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000ac10:	0758      	lsls	r0, r3, #29
9000ac12:	d59e      	bpl.n	9000ab52 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000ac14:	4e52      	ldr	r6, [pc, #328]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000ac16:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000ac1a:	6933      	ldr	r3, [r6, #16]
9000ac1c:	f023 0307 	bic.w	r3, r3, #7
9000ac20:	430b      	orrs	r3, r1
9000ac22:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000ac24:	f7fc faa0 	bl	90007168 <HAL_GetTick>
9000ac28:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000ac2a:	e005      	b.n	9000ac38 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000ac2c:	f7fc fa9c 	bl	90007168 <HAL_GetTick>
9000ac30:	1bc0      	subs	r0, r0, r7
9000ac32:	4540      	cmp	r0, r8
9000ac34:	f200 808b 	bhi.w	9000ad4e <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000ac38:	6933      	ldr	r3, [r6, #16]
9000ac3a:	6862      	ldr	r2, [r4, #4]
9000ac3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ac40:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000ac44:	d1f2      	bne.n	9000ac2c <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000ac46:	6823      	ldr	r3, [r4, #0]
9000ac48:	0799      	lsls	r1, r3, #30
9000ac4a:	d506      	bpl.n	9000ac5a <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000ac4c:	68e1      	ldr	r1, [r4, #12]
9000ac4e:	4844      	ldr	r0, [pc, #272]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000ac50:	6982      	ldr	r2, [r0, #24]
9000ac52:	f002 020f 	and.w	r2, r2, #15
9000ac56:	428a      	cmp	r2, r1
9000ac58:	d869      	bhi.n	9000ad2e <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000ac5a:	4940      	ldr	r1, [pc, #256]	; (9000ad5c <HAL_RCC_ClockConfig+0x238>)
9000ac5c:	680a      	ldr	r2, [r1, #0]
9000ac5e:	f002 020f 	and.w	r2, r2, #15
9000ac62:	42aa      	cmp	r2, r5
9000ac64:	d90a      	bls.n	9000ac7c <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000ac66:	680a      	ldr	r2, [r1, #0]
9000ac68:	f022 020f 	bic.w	r2, r2, #15
9000ac6c:	432a      	orrs	r2, r5
9000ac6e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000ac70:	680a      	ldr	r2, [r1, #0]
9000ac72:	f002 020f 	and.w	r2, r2, #15
9000ac76:	42aa      	cmp	r2, r5
9000ac78:	f47f af6b 	bne.w	9000ab52 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000ac7c:	075a      	lsls	r2, r3, #29
9000ac7e:	d50b      	bpl.n	9000ac98 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000ac80:	4937      	ldr	r1, [pc, #220]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000ac82:	6920      	ldr	r0, [r4, #16]
9000ac84:	698a      	ldr	r2, [r1, #24]
9000ac86:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000ac8a:	4290      	cmp	r0, r2
9000ac8c:	d204      	bcs.n	9000ac98 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000ac8e:	698a      	ldr	r2, [r1, #24]
9000ac90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000ac94:	4302      	orrs	r2, r0
9000ac96:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000ac98:	071f      	lsls	r7, r3, #28
9000ac9a:	d50b      	bpl.n	9000acb4 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000ac9c:	4930      	ldr	r1, [pc, #192]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000ac9e:	6960      	ldr	r0, [r4, #20]
9000aca0:	69ca      	ldr	r2, [r1, #28]
9000aca2:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000aca6:	4290      	cmp	r0, r2
9000aca8:	d204      	bcs.n	9000acb4 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000acaa:	69ca      	ldr	r2, [r1, #28]
9000acac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000acb0:	4302      	orrs	r2, r0
9000acb2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000acb4:	06de      	lsls	r6, r3, #27
9000acb6:	d50b      	bpl.n	9000acd0 <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000acb8:	4929      	ldr	r1, [pc, #164]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000acba:	69a0      	ldr	r0, [r4, #24]
9000acbc:	69ca      	ldr	r2, [r1, #28]
9000acbe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000acc2:	4290      	cmp	r0, r2
9000acc4:	d204      	bcs.n	9000acd0 <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000acc6:	69ca      	ldr	r2, [r1, #28]
9000acc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000accc:	4302      	orrs	r2, r0
9000acce:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000acd0:	069d      	lsls	r5, r3, #26
9000acd2:	d50b      	bpl.n	9000acec <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000acd4:	4a22      	ldr	r2, [pc, #136]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000acd6:	69e1      	ldr	r1, [r4, #28]
9000acd8:	6a13      	ldr	r3, [r2, #32]
9000acda:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000acde:	4299      	cmp	r1, r3
9000ace0:	d204      	bcs.n	9000acec <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000ace2:	6a13      	ldr	r3, [r2, #32]
9000ace4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000ace8:	430b      	orrs	r3, r1
9000acea:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000acec:	f7ff fe7a 	bl	9000a9e4 <HAL_RCC_GetSysClockFreq>
9000acf0:	4a1b      	ldr	r2, [pc, #108]	; (9000ad60 <HAL_RCC_ClockConfig+0x23c>)
9000acf2:	4603      	mov	r3, r0
9000acf4:	481b      	ldr	r0, [pc, #108]	; (9000ad64 <HAL_RCC_ClockConfig+0x240>)
9000acf6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000acf8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000acfa:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000acfe:	4d1a      	ldr	r5, [pc, #104]	; (9000ad68 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ad00:	f002 020f 	and.w	r2, r2, #15
9000ad04:	4c19      	ldr	r4, [pc, #100]	; (9000ad6c <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000ad06:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ad08:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000ad0a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000ad0e:	4818      	ldr	r0, [pc, #96]	; (9000ad70 <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ad10:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000ad14:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000ad16:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000ad18:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ad1a:	40d3      	lsrs	r3, r2
9000ad1c:	6023      	str	r3, [r4, #0]
}
9000ad1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000ad22:	f7f9 bf4b 	b.w	90004bbc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000ad26:	07da      	lsls	r2, r3, #31
9000ad28:	f53f af60 	bmi.w	9000abec <HAL_RCC_ClockConfig+0xc8>
9000ad2c:	e795      	b.n	9000ac5a <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000ad2e:	6982      	ldr	r2, [r0, #24]
9000ad30:	f022 020f 	bic.w	r2, r2, #15
9000ad34:	430a      	orrs	r2, r1
9000ad36:	6182      	str	r2, [r0, #24]
9000ad38:	e78f      	b.n	9000ac5a <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000ad3a:	019f      	lsls	r7, r3, #6
9000ad3c:	f53f af6a 	bmi.w	9000ac14 <HAL_RCC_ClockConfig+0xf0>
9000ad40:	e707      	b.n	9000ab52 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000ad42:	2001      	movs	r0, #1
}
9000ad44:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000ad46:	039b      	lsls	r3, r3, #14
9000ad48:	f53f af64 	bmi.w	9000ac14 <HAL_RCC_ClockConfig+0xf0>
9000ad4c:	e701      	b.n	9000ab52 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000ad4e:	2003      	movs	r0, #3
9000ad50:	e700      	b.n	9000ab54 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000ad52:	05de      	lsls	r6, r3, #23
9000ad54:	f53f af5e 	bmi.w	9000ac14 <HAL_RCC_ClockConfig+0xf0>
9000ad58:	e6fb      	b.n	9000ab52 <HAL_RCC_ClockConfig+0x2e>
9000ad5a:	bf00      	nop
9000ad5c:	52002000 	.word	0x52002000
9000ad60:	58024400 	.word	0x58024400
9000ad64:	90026d74 	.word	0x90026d74
9000ad68:	24000058 	.word	0x24000058
9000ad6c:	2400005c 	.word	0x2400005c
9000ad70:	24000064 	.word	0x24000064

9000ad74 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ad74:	4a1c      	ldr	r2, [pc, #112]	; (9000ade8 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000ad76:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ad78:	6913      	ldr	r3, [r2, #16]
9000ad7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ad7e:	2b10      	cmp	r3, #16
9000ad80:	d021      	beq.n	9000adc6 <HAL_RCC_GetPCLK1Freq+0x52>
9000ad82:	2b18      	cmp	r3, #24
9000ad84:	d02a      	beq.n	9000addc <HAL_RCC_GetPCLK1Freq+0x68>
9000ad86:	b303      	cbz	r3, 9000adca <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000ad88:	4818      	ldr	r0, [pc, #96]	; (9000adec <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ad8a:	4a17      	ldr	r2, [pc, #92]	; (9000ade8 <HAL_RCC_GetPCLK1Freq+0x74>)
9000ad8c:	4918      	ldr	r1, [pc, #96]	; (9000adf0 <HAL_RCC_GetPCLK1Freq+0x7c>)
9000ad8e:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ad90:	4c18      	ldr	r4, [pc, #96]	; (9000adf4 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ad92:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000ad96:	4d18      	ldr	r5, [pc, #96]	; (9000adf8 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ad98:	5ccb      	ldrb	r3, [r1, r3]
9000ad9a:	f003 031f 	and.w	r3, r3, #31
9000ad9e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ada0:	6993      	ldr	r3, [r2, #24]
9000ada2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000ada6:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ada8:	5ccb      	ldrb	r3, [r1, r3]
9000adaa:	f003 031f 	and.w	r3, r3, #31
9000adae:	fa20 f303 	lsr.w	r3, r0, r3
9000adb2:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000adb4:	69d2      	ldr	r2, [r2, #28]
9000adb6:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000adba:	5c88      	ldrb	r0, [r1, r2]
9000adbc:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000adc0:	fa23 f000 	lsr.w	r0, r3, r0
9000adc4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000adc6:	480d      	ldr	r0, [pc, #52]	; (9000adfc <HAL_RCC_GetPCLK1Freq+0x88>)
9000adc8:	e7df      	b.n	9000ad8a <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000adca:	6813      	ldr	r3, [r2, #0]
9000adcc:	069b      	lsls	r3, r3, #26
9000adce:	d508      	bpl.n	9000ade2 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000add0:	6813      	ldr	r3, [r2, #0]
9000add2:	480b      	ldr	r0, [pc, #44]	; (9000ae00 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000add4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000add8:	40d8      	lsrs	r0, r3
9000adda:	e7d6      	b.n	9000ad8a <HAL_RCC_GetPCLK1Freq+0x16>
9000addc:	f7ff fa8a 	bl	9000a2f4 <HAL_RCC_GetSysClockFreq.part.0>
9000ade0:	e7d3      	b.n	9000ad8a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000ade2:	4807      	ldr	r0, [pc, #28]	; (9000ae00 <HAL_RCC_GetPCLK1Freq+0x8c>)
9000ade4:	e7d1      	b.n	9000ad8a <HAL_RCC_GetPCLK1Freq+0x16>
9000ade6:	bf00      	nop
9000ade8:	58024400 	.word	0x58024400
9000adec:	003d0900 	.word	0x003d0900
9000adf0:	90026d74 	.word	0x90026d74
9000adf4:	2400005c 	.word	0x2400005c
9000adf8:	24000058 	.word	0x24000058
9000adfc:	017d7840 	.word	0x017d7840
9000ae00:	03d09000 	.word	0x03d09000

9000ae04 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ae04:	4a1c      	ldr	r2, [pc, #112]	; (9000ae78 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000ae06:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ae08:	6913      	ldr	r3, [r2, #16]
9000ae0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000ae0e:	2b10      	cmp	r3, #16
9000ae10:	d021      	beq.n	9000ae56 <HAL_RCC_GetPCLK2Freq+0x52>
9000ae12:	2b18      	cmp	r3, #24
9000ae14:	d02a      	beq.n	9000ae6c <HAL_RCC_GetPCLK2Freq+0x68>
9000ae16:	b303      	cbz	r3, 9000ae5a <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000ae18:	4818      	ldr	r0, [pc, #96]	; (9000ae7c <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ae1a:	4a17      	ldr	r2, [pc, #92]	; (9000ae78 <HAL_RCC_GetPCLK2Freq+0x74>)
9000ae1c:	4918      	ldr	r1, [pc, #96]	; (9000ae80 <HAL_RCC_GetPCLK2Freq+0x7c>)
9000ae1e:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ae20:	4c18      	ldr	r4, [pc, #96]	; (9000ae84 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ae22:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
9000ae26:	4d18      	ldr	r5, [pc, #96]	; (9000ae88 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000ae28:	5ccb      	ldrb	r3, [r1, r3]
9000ae2a:	f003 031f 	and.w	r3, r3, #31
9000ae2e:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ae30:	6993      	ldr	r3, [r2, #24]
9000ae32:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
9000ae36:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000ae38:	5ccb      	ldrb	r3, [r1, r3]
9000ae3a:	f003 031f 	and.w	r3, r3, #31
9000ae3e:	fa20 f303 	lsr.w	r3, r0, r3
9000ae42:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000ae44:	69d2      	ldr	r2, [r2, #28]
9000ae46:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000ae4a:	5c88      	ldrb	r0, [r1, r2]
9000ae4c:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000ae50:	fa23 f000 	lsr.w	r0, r3, r0
9000ae54:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000ae56:	480d      	ldr	r0, [pc, #52]	; (9000ae8c <HAL_RCC_GetPCLK2Freq+0x88>)
9000ae58:	e7df      	b.n	9000ae1a <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ae5a:	6813      	ldr	r3, [r2, #0]
9000ae5c:	069b      	lsls	r3, r3, #26
9000ae5e:	d508      	bpl.n	9000ae72 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ae60:	6813      	ldr	r3, [r2, #0]
9000ae62:	480b      	ldr	r0, [pc, #44]	; (9000ae90 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000ae64:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000ae68:	40d8      	lsrs	r0, r3
9000ae6a:	e7d6      	b.n	9000ae1a <HAL_RCC_GetPCLK2Freq+0x16>
9000ae6c:	f7ff fa42 	bl	9000a2f4 <HAL_RCC_GetSysClockFreq.part.0>
9000ae70:	e7d3      	b.n	9000ae1a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000ae72:	4807      	ldr	r0, [pc, #28]	; (9000ae90 <HAL_RCC_GetPCLK2Freq+0x8c>)
9000ae74:	e7d1      	b.n	9000ae1a <HAL_RCC_GetPCLK2Freq+0x16>
9000ae76:	bf00      	nop
9000ae78:	58024400 	.word	0x58024400
9000ae7c:	003d0900 	.word	0x003d0900
9000ae80:	90026d74 	.word	0x90026d74
9000ae84:	2400005c 	.word	0x2400005c
9000ae88:	24000058 	.word	0x24000058
9000ae8c:	017d7840 	.word	0x017d7840
9000ae90:	03d09000 	.word	0x03d09000

9000ae94 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000ae94:	4b13      	ldr	r3, [pc, #76]	; (9000aee4 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000ae96:	223f      	movs	r2, #63	; 0x3f
9000ae98:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000ae9a:	691a      	ldr	r2, [r3, #16]
9000ae9c:	f002 0207 	and.w	r2, r2, #7
9000aea0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000aea2:	699a      	ldr	r2, [r3, #24]
9000aea4:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000aea8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000aeaa:	699a      	ldr	r2, [r3, #24]
9000aeac:	f002 020f 	and.w	r2, r2, #15
9000aeb0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000aeb2:	699a      	ldr	r2, [r3, #24]
9000aeb4:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000aeb8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000aeba:	69da      	ldr	r2, [r3, #28]
9000aebc:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000aec0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000aec2:	69da      	ldr	r2, [r3, #28]
9000aec4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000aec8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aeca:	6a1b      	ldr	r3, [r3, #32]
{
9000aecc:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aece:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000aed2:	4c05      	ldr	r4, [pc, #20]	; (9000aee8 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000aed4:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000aed6:	6823      	ldr	r3, [r4, #0]
}
9000aed8:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000aedc:	f003 030f 	and.w	r3, r3, #15
9000aee0:	600b      	str	r3, [r1, #0]
}
9000aee2:	4770      	bx	lr
9000aee4:	58024400 	.word	0x58024400
9000aee8:	52002000 	.word	0x52002000

9000aeec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000aeee:	4c3a      	ldr	r4, [pc, #232]	; (9000afd8 <RCCEx_PLL2_Config+0xec>)
9000aef0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000aef2:	f003 0303 	and.w	r3, r3, #3
9000aef6:	2b03      	cmp	r3, #3
9000aef8:	d067      	beq.n	9000afca <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000aefa:	6823      	ldr	r3, [r4, #0]
9000aefc:	4606      	mov	r6, r0
9000aefe:	460f      	mov	r7, r1
9000af00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000af04:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000af06:	f7fc f92f 	bl	90007168 <HAL_GetTick>
9000af0a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000af0c:	e004      	b.n	9000af18 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000af0e:	f7fc f92b 	bl	90007168 <HAL_GetTick>
9000af12:	1b43      	subs	r3, r0, r5
9000af14:	2b02      	cmp	r3, #2
9000af16:	d856      	bhi.n	9000afc6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000af18:	6823      	ldr	r3, [r4, #0]
9000af1a:	011a      	lsls	r2, r3, #4
9000af1c:	d4f7      	bmi.n	9000af0e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000af1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000af20:	6832      	ldr	r2, [r6, #0]
9000af22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000af26:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000af2a:	62a3      	str	r3, [r4, #40]	; 0x28
9000af2c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000af30:	3b01      	subs	r3, #1
9000af32:	3a01      	subs	r2, #1
9000af34:	025b      	lsls	r3, r3, #9
9000af36:	0412      	lsls	r2, r2, #16
9000af38:	b29b      	uxth	r3, r3
9000af3a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000af3e:	4313      	orrs	r3, r2
9000af40:	6872      	ldr	r2, [r6, #4]
9000af42:	3a01      	subs	r2, #1
9000af44:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000af48:	4313      	orrs	r3, r2
9000af4a:	6932      	ldr	r2, [r6, #16]
9000af4c:	3a01      	subs	r2, #1
9000af4e:	0612      	lsls	r2, r2, #24
9000af50:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000af54:	4313      	orrs	r3, r2
9000af56:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000af58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000af5a:	6972      	ldr	r2, [r6, #20]
9000af5c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000af60:	4313      	orrs	r3, r2
9000af62:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000af64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000af66:	69b3      	ldr	r3, [r6, #24]
9000af68:	f022 0220 	bic.w	r2, r2, #32
9000af6c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000af6e:	4b1b      	ldr	r3, [pc, #108]	; (9000afdc <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000af70:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000af72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000af74:	f022 0210 	bic.w	r2, r2, #16
9000af78:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000af7a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000af7c:	69f2      	ldr	r2, [r6, #28]
9000af7e:	400b      	ands	r3, r1
9000af80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000af84:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000af86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000af88:	f043 0310 	orr.w	r3, r3, #16
9000af8c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000af8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000af90:	b1ef      	cbz	r7, 9000afce <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000af92:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000af94:	bf0c      	ite	eq
9000af96:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000af9a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000af9e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000afa0:	4c0d      	ldr	r4, [pc, #52]	; (9000afd8 <RCCEx_PLL2_Config+0xec>)
9000afa2:	6823      	ldr	r3, [r4, #0]
9000afa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000afa8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000afaa:	f7fc f8dd 	bl	90007168 <HAL_GetTick>
9000afae:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000afb0:	e004      	b.n	9000afbc <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000afb2:	f7fc f8d9 	bl	90007168 <HAL_GetTick>
9000afb6:	1b40      	subs	r0, r0, r5
9000afb8:	2802      	cmp	r0, #2
9000afba:	d804      	bhi.n	9000afc6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000afbc:	6823      	ldr	r3, [r4, #0]
9000afbe:	011b      	lsls	r3, r3, #4
9000afc0:	d5f7      	bpl.n	9000afb2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000afc2:	2000      	movs	r0, #0
}
9000afc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000afc6:	2003      	movs	r0, #3
}
9000afc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000afca:	2001      	movs	r0, #1
}
9000afcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000afce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000afd2:	62e3      	str	r3, [r4, #44]	; 0x2c
9000afd4:	e7e4      	b.n	9000afa0 <RCCEx_PLL2_Config+0xb4>
9000afd6:	bf00      	nop
9000afd8:	58024400 	.word	0x58024400
9000afdc:	ffff0007 	.word	0xffff0007

9000afe0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000afe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000afe2:	4c3a      	ldr	r4, [pc, #232]	; (9000b0cc <RCCEx_PLL3_Config+0xec>)
9000afe4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000afe6:	f003 0303 	and.w	r3, r3, #3
9000afea:	2b03      	cmp	r3, #3
9000afec:	d067      	beq.n	9000b0be <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000afee:	6823      	ldr	r3, [r4, #0]
9000aff0:	4606      	mov	r6, r0
9000aff2:	460f      	mov	r7, r1
9000aff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000aff8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000affa:	f7fc f8b5 	bl	90007168 <HAL_GetTick>
9000affe:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b000:	e004      	b.n	9000b00c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000b002:	f7fc f8b1 	bl	90007168 <HAL_GetTick>
9000b006:	1b43      	subs	r3, r0, r5
9000b008:	2b02      	cmp	r3, #2
9000b00a:	d856      	bhi.n	9000b0ba <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000b00c:	6823      	ldr	r3, [r4, #0]
9000b00e:	009a      	lsls	r2, r3, #2
9000b010:	d4f7      	bmi.n	9000b002 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000b012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b014:	6832      	ldr	r2, [r6, #0]
9000b016:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000b01a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000b01e:	62a3      	str	r3, [r4, #40]	; 0x28
9000b020:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000b024:	3b01      	subs	r3, #1
9000b026:	3a01      	subs	r2, #1
9000b028:	025b      	lsls	r3, r3, #9
9000b02a:	0412      	lsls	r2, r2, #16
9000b02c:	b29b      	uxth	r3, r3
9000b02e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000b032:	4313      	orrs	r3, r2
9000b034:	6872      	ldr	r2, [r6, #4]
9000b036:	3a01      	subs	r2, #1
9000b038:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000b03c:	4313      	orrs	r3, r2
9000b03e:	6932      	ldr	r2, [r6, #16]
9000b040:	3a01      	subs	r2, #1
9000b042:	0612      	lsls	r2, r2, #24
9000b044:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000b048:	4313      	orrs	r3, r2
9000b04a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000b04c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b04e:	6972      	ldr	r2, [r6, #20]
9000b050:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000b054:	4313      	orrs	r3, r2
9000b056:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000b058:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b05a:	69b3      	ldr	r3, [r6, #24]
9000b05c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000b060:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000b062:	4b1b      	ldr	r3, [pc, #108]	; (9000b0d0 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000b064:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000b066:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000b068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000b06c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000b06e:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000b070:	69f2      	ldr	r2, [r6, #28]
9000b072:	400b      	ands	r3, r1
9000b074:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000b078:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000b07a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000b07c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b080:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000b082:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000b084:	b1ef      	cbz	r7, 9000b0c2 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000b086:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000b088:	bf0c      	ite	eq
9000b08a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000b08e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000b092:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000b094:	4c0d      	ldr	r4, [pc, #52]	; (9000b0cc <RCCEx_PLL3_Config+0xec>)
9000b096:	6823      	ldr	r3, [r4, #0]
9000b098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000b09c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000b09e:	f7fc f863 	bl	90007168 <HAL_GetTick>
9000b0a2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000b0a4:	e004      	b.n	9000b0b0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000b0a6:	f7fc f85f 	bl	90007168 <HAL_GetTick>
9000b0aa:	1b40      	subs	r0, r0, r5
9000b0ac:	2802      	cmp	r0, #2
9000b0ae:	d804      	bhi.n	9000b0ba <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000b0b0:	6823      	ldr	r3, [r4, #0]
9000b0b2:	009b      	lsls	r3, r3, #2
9000b0b4:	d5f7      	bpl.n	9000b0a6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000b0b6:	2000      	movs	r0, #0
}
9000b0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000b0ba:	2003      	movs	r0, #3
}
9000b0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b0be:	2001      	movs	r0, #1
}
9000b0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000b0c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000b0c6:	62e3      	str	r3, [r4, #44]	; 0x2c
9000b0c8:	e7e4      	b.n	9000b094 <RCCEx_PLL3_Config+0xb4>
9000b0ca:	bf00      	nop
9000b0cc:	58024400 	.word	0x58024400
9000b0d0:	ffff0007 	.word	0xffff0007

9000b0d4 <HAL_RCCEx_PeriphCLKConfig>:
{
9000b0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000b0d8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000b0dc:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000b0de:	011d      	lsls	r5, r3, #4
9000b0e0:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000b0e4:	d523      	bpl.n	9000b12e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000b0e6:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000b0e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000b0ec:	f000 8553 	beq.w	9000bb96 <HAL_RCCEx_PeriphCLKConfig+0xac2>
9000b0f0:	d812      	bhi.n	9000b118 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000b0f2:	2900      	cmp	r1, #0
9000b0f4:	f000 85a9 	beq.w	9000bc4a <HAL_RCCEx_PeriphCLKConfig+0xb76>
9000b0f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000b0fc:	f040 85a2 	bne.w	9000bc44 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b100:	2102      	movs	r1, #2
9000b102:	3008      	adds	r0, #8
9000b104:	f7ff fef2 	bl	9000aeec <RCCEx_PLL2_Config>
9000b108:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000b10a:	2e00      	cmp	r6, #0
9000b10c:	f040 8522 	bne.w	9000bb54 <HAL_RCCEx_PeriphCLKConfig+0xa80>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000b110:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000b112:	e9d4 3200 	ldrd	r3, r2, [r4]
9000b116:	e003      	b.n	9000b120 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000b118:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000b11c:	f040 8592 	bne.w	9000bc44 <HAL_RCCEx_PeriphCLKConfig+0xb70>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000b120:	4dae      	ldr	r5, [pc, #696]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b122:	2600      	movs	r6, #0
9000b124:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000b126:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000b12a:	4301      	orrs	r1, r0
9000b12c:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000b12e:	05d8      	lsls	r0, r3, #23
9000b130:	d50a      	bpl.n	9000b148 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000b132:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000b134:	2904      	cmp	r1, #4
9000b136:	d806      	bhi.n	9000b146 <HAL_RCCEx_PeriphCLKConfig+0x72>
9000b138:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b13c:	053d0536 	.word	0x053d0536
9000b140:	0323051a 	.word	0x0323051a
9000b144:	0323      	.short	0x0323
9000b146:	2601      	movs	r6, #1
9000b148:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000b14a:	0599      	lsls	r1, r3, #22
9000b14c:	d51d      	bpl.n	9000b18a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000b14e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000b150:	2980      	cmp	r1, #128	; 0x80
9000b152:	f000 8516 	beq.w	9000bb82 <HAL_RCCEx_PeriphCLKConfig+0xaae>
9000b156:	f200 80f9 	bhi.w	9000b34c <HAL_RCCEx_PeriphCLKConfig+0x278>
9000b15a:	2900      	cmp	r1, #0
9000b15c:	f000 8433 	beq.w	9000b9c6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000b160:	2940      	cmp	r1, #64	; 0x40
9000b162:	f040 80fa 	bne.w	9000b35a <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b166:	2100      	movs	r1, #0
9000b168:	f104 0008 	add.w	r0, r4, #8
9000b16c:	f7ff febe 	bl	9000aeec <RCCEx_PLL2_Config>
9000b170:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000b172:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b176:	2d00      	cmp	r5, #0
9000b178:	f040 83fe 	bne.w	9000b978 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000b17c:	4f97      	ldr	r7, [pc, #604]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b17e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000b180:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b182:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000b186:	4301      	orrs	r1, r0
9000b188:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000b18a:	055f      	lsls	r7, r3, #21
9000b18c:	d521      	bpl.n	9000b1d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000b18e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000b192:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000b196:	f000 8521 	beq.w	9000bbdc <HAL_RCCEx_PeriphCLKConfig+0xb08>
9000b19a:	f200 80e1 	bhi.w	9000b360 <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000b19e:	2900      	cmp	r1, #0
9000b1a0:	f000 8418 	beq.w	9000b9d4 <HAL_RCCEx_PeriphCLKConfig+0x900>
9000b1a4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000b1a8:	f040 80e2 	bne.w	9000b370 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b1ac:	2100      	movs	r1, #0
9000b1ae:	f104 0008 	add.w	r0, r4, #8
9000b1b2:	f7ff fe9b 	bl	9000aeec <RCCEx_PLL2_Config>
9000b1b6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000b1b8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b1bc:	2d00      	cmp	r5, #0
9000b1be:	f040 83e2 	bne.w	9000b986 <HAL_RCCEx_PeriphCLKConfig+0x8b2>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000b1c2:	4f86      	ldr	r7, [pc, #536]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b1c4:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000b1c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b1ca:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000b1ce:	4301      	orrs	r1, r0
9000b1d0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000b1d2:	0518      	lsls	r0, r3, #20
9000b1d4:	d521      	bpl.n	9000b21a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000b1d6:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000b1da:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000b1de:	f000 84bd 	beq.w	9000bb5c <HAL_RCCEx_PeriphCLKConfig+0xa88>
9000b1e2:	f200 80c8 	bhi.w	9000b376 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000b1e6:	2900      	cmp	r1, #0
9000b1e8:	f000 83e7 	beq.w	9000b9ba <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000b1ec:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000b1f0:	f040 80c9 	bne.w	9000b386 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b1f4:	2100      	movs	r1, #0
9000b1f6:	f104 0008 	add.w	r0, r4, #8
9000b1fa:	f7ff fe77 	bl	9000aeec <RCCEx_PLL2_Config>
9000b1fe:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000b200:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b204:	2d00      	cmp	r5, #0
9000b206:	f040 83b5 	bne.w	9000b974 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000b20a:	4f74      	ldr	r7, [pc, #464]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b20c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000b210:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b212:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000b216:	4301      	orrs	r1, r0
9000b218:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000b21a:	0199      	lsls	r1, r3, #6
9000b21c:	d518      	bpl.n	9000b250 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000b21e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000b220:	2920      	cmp	r1, #32
9000b222:	f000 841f 	beq.w	9000ba64 <HAL_RCCEx_PeriphCLKConfig+0x990>
9000b226:	f200 80b1 	bhi.w	9000b38c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000b22a:	b139      	cbz	r1, 9000b23c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000b22c:	2910      	cmp	r1, #16
9000b22e:	f040 80b0 	bne.w	9000b392 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b232:	486a      	ldr	r0, [pc, #424]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b234:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b236:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b23a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b23c:	2d00      	cmp	r5, #0
9000b23e:	f040 83d8 	bne.w	9000b9f2 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000b242:	4f66      	ldr	r7, [pc, #408]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b244:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000b246:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b248:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000b24c:	4301      	orrs	r1, r0
9000b24e:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000b250:	04df      	lsls	r7, r3, #19
9000b252:	d51f      	bpl.n	9000b294 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000b254:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000b256:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000b25a:	f000 84b5 	beq.w	9000bbc8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
9000b25e:	f200 809b 	bhi.w	9000b398 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000b262:	2900      	cmp	r1, #0
9000b264:	f000 83a3 	beq.w	9000b9ae <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000b268:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000b26c:	f040 809c 	bne.w	9000b3a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b270:	2100      	movs	r1, #0
9000b272:	f104 0008 	add.w	r0, r4, #8
9000b276:	f7ff fe39 	bl	9000aeec <RCCEx_PLL2_Config>
9000b27a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000b27c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b280:	2d00      	cmp	r5, #0
9000b282:	f040 837b 	bne.w	9000b97c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000b286:	4f55      	ldr	r7, [pc, #340]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b288:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000b28a:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b28c:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000b290:	4301      	orrs	r1, r0
9000b292:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000b294:	0498      	lsls	r0, r3, #18
9000b296:	d51d      	bpl.n	9000b2d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000b298:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000b29a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000b29e:	f000 8410 	beq.w	9000bac2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
9000b2a2:	f200 8084 	bhi.w	9000b3ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000b2a6:	b159      	cbz	r1, 9000b2c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000b2a8:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000b2ac:	f040 8087 	bne.w	9000b3be <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b2b0:	2101      	movs	r1, #1
9000b2b2:	f104 0008 	add.w	r0, r4, #8
9000b2b6:	f7ff fe19 	bl	9000aeec <RCCEx_PLL2_Config>
9000b2ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000b2bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b2c0:	2d00      	cmp	r5, #0
9000b2c2:	f040 839a 	bne.w	9000b9fa <HAL_RCCEx_PeriphCLKConfig+0x926>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000b2c6:	4f45      	ldr	r7, [pc, #276]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b2c8:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000b2ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b2cc:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000b2d0:	4301      	orrs	r1, r0
9000b2d2:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000b2d4:	0459      	lsls	r1, r3, #17
9000b2d6:	d51d      	bpl.n	9000b314 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000b2d8:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000b2dc:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000b2e0:	f000 83fb 	beq.w	9000bada <HAL_RCCEx_PeriphCLKConfig+0xa06>
9000b2e4:	d86e      	bhi.n	9000b3c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000b2e6:	b151      	cbz	r1, 9000b2fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000b2e8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000b2ec:	d172      	bne.n	9000b3d4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b2ee:	2101      	movs	r1, #1
9000b2f0:	f104 0008 	add.w	r0, r4, #8
9000b2f4:	f7ff fdfa 	bl	9000aeec <RCCEx_PLL2_Config>
9000b2f8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000b2fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b2fe:	2d00      	cmp	r5, #0
9000b300:	f040 837f 	bne.w	9000ba02 <HAL_RCCEx_PeriphCLKConfig+0x92e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000b304:	4f35      	ldr	r7, [pc, #212]	; (9000b3dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000b306:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000b30a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b30c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000b310:	4301      	orrs	r1, r0
9000b312:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000b314:	041f      	lsls	r7, r3, #16
9000b316:	d50d      	bpl.n	9000b334 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000b318:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000b31a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000b31e:	f000 83c8 	beq.w	9000bab2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
9000b322:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000b326:	f000 823b 	beq.w	9000b7a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000b32a:	2900      	cmp	r1, #0
9000b32c:	f000 8240 	beq.w	9000b7b0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000b330:	2601      	movs	r6, #1
9000b332:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000b334:	01d8      	lsls	r0, r3, #7
9000b336:	d562      	bpl.n	9000b3fe <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->FmcClockSelection)
9000b338:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000b33a:	2903      	cmp	r1, #3
9000b33c:	f200 84bf 	bhi.w	9000bcbe <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000b340:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b344:	004e0053 	.word	0x004e0053
9000b348:	005303e2 	.word	0x005303e2
    switch (PeriphClkInit->Sai23ClockSelection)
9000b34c:	29c0      	cmp	r1, #192	; 0xc0
9000b34e:	f43f af12 	beq.w	9000b176 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000b352:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000b356:	f43f af0e 	beq.w	9000b176 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000b35a:	2601      	movs	r6, #1
9000b35c:	4635      	mov	r5, r6
9000b35e:	e714      	b.n	9000b18a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000b360:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000b364:	f43f af2a 	beq.w	9000b1bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000b368:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000b36c:	f43f af26 	beq.w	9000b1bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000b370:	2601      	movs	r6, #1
9000b372:	4635      	mov	r5, r6
9000b374:	e72d      	b.n	9000b1d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000b376:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000b37a:	f43f af43 	beq.w	9000b204 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000b37e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000b382:	f43f af3f 	beq.w	9000b204 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000b386:	2601      	movs	r6, #1
9000b388:	4635      	mov	r5, r6
9000b38a:	e746      	b.n	9000b21a <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000b38c:	2930      	cmp	r1, #48	; 0x30
9000b38e:	f43f af55 	beq.w	9000b23c <HAL_RCCEx_PeriphCLKConfig+0x168>
9000b392:	2601      	movs	r6, #1
9000b394:	4635      	mov	r5, r6
9000b396:	e75b      	b.n	9000b250 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000b398:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000b39c:	f43f af70 	beq.w	9000b280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000b3a0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000b3a4:	f43f af6c 	beq.w	9000b280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000b3a8:	2601      	movs	r6, #1
9000b3aa:	4635      	mov	r5, r6
9000b3ac:	e772      	b.n	9000b294 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000b3ae:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000b3b2:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000b3b6:	d083      	beq.n	9000b2c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000b3b8:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000b3bc:	d080      	beq.n	9000b2c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000b3be:	2601      	movs	r6, #1
9000b3c0:	4635      	mov	r5, r6
9000b3c2:	e787      	b.n	9000b2d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000b3c4:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000b3c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000b3cc:	d097      	beq.n	9000b2fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000b3ce:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000b3d2:	d094      	beq.n	9000b2fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000b3d4:	2601      	movs	r6, #1
9000b3d6:	4635      	mov	r5, r6
9000b3d8:	e79c      	b.n	9000b314 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000b3da:	bf00      	nop
9000b3dc:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b3e0:	4839      	ldr	r0, [pc, #228]	; (9000b4c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b3e2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b3e4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b3e8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000b3ea:	2d00      	cmp	r5, #0
9000b3ec:	f040 8303 	bne.w	9000b9f6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000b3f0:	4f35      	ldr	r7, [pc, #212]	; (9000b4c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b3f2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000b3f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b3f6:	f021 0103 	bic.w	r1, r1, #3
9000b3fa:	4301      	orrs	r1, r0
9000b3fc:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000b3fe:	0259      	lsls	r1, r3, #9
9000b400:	f100 826a 	bmi.w	9000b8d8 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b404:	07d8      	lsls	r0, r3, #31
9000b406:	d52f      	bpl.n	9000b468 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch (PeriphClkInit->Usart16ClockSelection)
9000b408:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000b40a:	2928      	cmp	r1, #40	; 0x28
9000b40c:	d82a      	bhi.n	9000b464 <HAL_RCCEx_PeriphCLKConfig+0x390>
9000b40e:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b412:	020a      	.short	0x020a
9000b414:	00290029 	.word	0x00290029
9000b418:	00290029 	.word	0x00290029
9000b41c:	00290029 	.word	0x00290029
9000b420:	02020029 	.word	0x02020029
9000b424:	00290029 	.word	0x00290029
9000b428:	00290029 	.word	0x00290029
9000b42c:	00290029 	.word	0x00290029
9000b430:	04070029 	.word	0x04070029
9000b434:	00290029 	.word	0x00290029
9000b438:	00290029 	.word	0x00290029
9000b43c:	00290029 	.word	0x00290029
9000b440:	020a0029 	.word	0x020a0029
9000b444:	00290029 	.word	0x00290029
9000b448:	00290029 	.word	0x00290029
9000b44c:	00290029 	.word	0x00290029
9000b450:	020a0029 	.word	0x020a0029
9000b454:	00290029 	.word	0x00290029
9000b458:	00290029 	.word	0x00290029
9000b45c:	00290029 	.word	0x00290029
9000b460:	020a0029 	.word	0x020a0029
9000b464:	2601      	movs	r6, #1
9000b466:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b468:	0799      	lsls	r1, r3, #30
9000b46a:	d51d      	bpl.n	9000b4a8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000b46c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000b46e:	2905      	cmp	r1, #5
9000b470:	f200 8421 	bhi.w	9000bcb6 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000b474:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b478:	0006000e 	.word	0x0006000e
9000b47c:	000e03c8 	.word	0x000e03c8
9000b480:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b484:	2101      	movs	r1, #1
9000b486:	f104 0008 	add.w	r0, r4, #8
9000b48a:	f7ff fd2f 	bl	9000aeec <RCCEx_PLL2_Config>
9000b48e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b490:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b494:	2d00      	cmp	r5, #0
9000b496:	f040 82b8 	bne.w	9000ba0a <HAL_RCCEx_PeriphCLKConfig+0x936>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000b49a:	4f0b      	ldr	r7, [pc, #44]	; (9000b4c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
9000b49c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000b49e:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b4a0:	f021 0107 	bic.w	r1, r1, #7
9000b4a4:	4301      	orrs	r1, r0
9000b4a6:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000b4a8:	075f      	lsls	r7, r3, #29
9000b4aa:	d522      	bpl.n	9000b4f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000b4ac:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000b4b0:	2905      	cmp	r1, #5
9000b4b2:	f200 8408 	bhi.w	9000bcc6 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
9000b4b6:	e8df f011 	tbh	[pc, r1, lsl #1]
9000b4ba:	0011      	.short	0x0011
9000b4bc:	039b0009 	.word	0x039b0009
9000b4c0:	00110011 	.word	0x00110011
9000b4c4:	0011      	.short	0x0011
9000b4c6:	bf00      	nop
9000b4c8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b4cc:	2101      	movs	r1, #1
9000b4ce:	f104 0008 	add.w	r0, r4, #8
9000b4d2:	f7ff fd0b 	bl	9000aeec <RCCEx_PLL2_Config>
9000b4d6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b4d8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b4dc:	2d00      	cmp	r5, #0
9000b4de:	f040 8286 	bne.w	9000b9ee <HAL_RCCEx_PeriphCLKConfig+0x91a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000b4e2:	4fae      	ldr	r7, [pc, #696]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b4e4:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000b4e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b4ea:	f021 0107 	bic.w	r1, r1, #7
9000b4ee:	4301      	orrs	r1, r0
9000b4f0:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000b4f2:	0698      	lsls	r0, r3, #26
9000b4f4:	d51f      	bpl.n	9000b536 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000b4f6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000b4fa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000b4fe:	f000 82f7 	beq.w	9000baf0 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
9000b502:	f200 810b 	bhi.w	9000b71c <HAL_RCCEx_PeriphCLKConfig+0x648>
9000b506:	b159      	cbz	r1, 9000b520 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b508:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000b50c:	f040 8110 	bne.w	9000b730 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b510:	2100      	movs	r1, #0
9000b512:	f104 0008 	add.w	r0, r4, #8
9000b516:	f7ff fce9 	bl	9000aeec <RCCEx_PLL2_Config>
9000b51a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b51c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b520:	2d00      	cmp	r5, #0
9000b522:	f040 8260 	bne.w	9000b9e6 <HAL_RCCEx_PeriphCLKConfig+0x912>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000b526:	4f9d      	ldr	r7, [pc, #628]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b528:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000b52c:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b52e:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000b532:	4301      	orrs	r1, r0
9000b534:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000b536:	0659      	lsls	r1, r3, #25
9000b538:	d51f      	bpl.n	9000b57a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000b53a:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000b53e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000b542:	f000 829b 	beq.w	9000ba7c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
9000b546:	f200 80f6 	bhi.w	9000b736 <HAL_RCCEx_PeriphCLKConfig+0x662>
9000b54a:	b159      	cbz	r1, 9000b564 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b54c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000b550:	f040 80fb 	bne.w	9000b74a <HAL_RCCEx_PeriphCLKConfig+0x676>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b554:	2100      	movs	r1, #0
9000b556:	f104 0008 	add.w	r0, r4, #8
9000b55a:	f7ff fcc7 	bl	9000aeec <RCCEx_PLL2_Config>
9000b55e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b560:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b564:	2d00      	cmp	r5, #0
9000b566:	f040 824e 	bne.w	9000ba06 <HAL_RCCEx_PeriphCLKConfig+0x932>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000b56a:	4f8c      	ldr	r7, [pc, #560]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b56c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000b570:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b572:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000b576:	4301      	orrs	r1, r0
9000b578:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000b57a:	061f      	lsls	r7, r3, #24
9000b57c:	d51f      	bpl.n	9000b5be <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b57e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000b582:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000b586:	f000 8289 	beq.w	9000ba9c <HAL_RCCEx_PeriphCLKConfig+0x9c8>
9000b58a:	f200 80e1 	bhi.w	9000b750 <HAL_RCCEx_PeriphCLKConfig+0x67c>
9000b58e:	b159      	cbz	r1, 9000b5a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b590:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000b594:	f040 80e6 	bne.w	9000b764 <HAL_RCCEx_PeriphCLKConfig+0x690>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b598:	2100      	movs	r1, #0
9000b59a:	f104 0008 	add.w	r0, r4, #8
9000b59e:	f7ff fca5 	bl	9000aeec <RCCEx_PLL2_Config>
9000b5a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b5a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b5a8:	2d00      	cmp	r5, #0
9000b5aa:	f040 8228 	bne.w	9000b9fe <HAL_RCCEx_PeriphCLKConfig+0x92a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000b5ae:	4f7b      	ldr	r7, [pc, #492]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b5b0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000b5b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b5b6:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000b5ba:	4301      	orrs	r1, r0
9000b5bc:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000b5be:	0718      	lsls	r0, r3, #28
9000b5c0:	d50b      	bpl.n	9000b5da <HAL_RCCEx_PeriphCLKConfig+0x506>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000b5c2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000b5c6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000b5ca:	f000 82a9 	beq.w	9000bb20 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000b5ce:	4f73      	ldr	r7, [pc, #460]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b5d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b5d2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000b5d6:	4301      	orrs	r1, r0
9000b5d8:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000b5da:	06d9      	lsls	r1, r3, #27
9000b5dc:	d50b      	bpl.n	9000b5f6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000b5de:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000b5e2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000b5e6:	f000 82a8 	beq.w	9000bb3a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000b5ea:	4f6c      	ldr	r7, [pc, #432]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b5ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b5ee:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000b5f2:	4301      	orrs	r1, r0
9000b5f4:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000b5f6:	031f      	lsls	r7, r3, #12
9000b5f8:	d50e      	bpl.n	9000b618 <HAL_RCCEx_PeriphCLKConfig+0x544>
    switch (PeriphClkInit->AdcClockSelection)
9000b5fa:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000b5fe:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000b602:	f000 80f4 	beq.w	9000b7ee <HAL_RCCEx_PeriphCLKConfig+0x71a>
9000b606:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000b60a:	f000 80f8 	beq.w	9000b7fe <HAL_RCCEx_PeriphCLKConfig+0x72a>
9000b60e:	2900      	cmp	r1, #0
9000b610:	f000 821c 	beq.w	9000ba4c <HAL_RCCEx_PeriphCLKConfig+0x978>
9000b614:	2601      	movs	r6, #1
9000b616:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b618:	0358      	lsls	r0, r3, #13
9000b61a:	d50f      	bpl.n	9000b63c <HAL_RCCEx_PeriphCLKConfig+0x568>
    switch (PeriphClkInit->UsbClockSelection)
9000b61c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000b620:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000b624:	f000 80cf 	beq.w	9000b7c6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
9000b628:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000b62c:	f000 80d3 	beq.w	9000b7d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
9000b630:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000b634:	f000 8202 	beq.w	9000ba3c <HAL_RCCEx_PeriphCLKConfig+0x968>
9000b638:	2601      	movs	r6, #1
9000b63a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000b63c:	03d9      	lsls	r1, r3, #15
9000b63e:	d509      	bpl.n	9000b654 <HAL_RCCEx_PeriphCLKConfig+0x580>
    switch (PeriphClkInit->SdmmcClockSelection)
9000b640:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000b642:	2900      	cmp	r1, #0
9000b644:	f000 81f1 	beq.w	9000ba2a <HAL_RCCEx_PeriphCLKConfig+0x956>
9000b648:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000b64c:	f000 819d 	beq.w	9000b98a <HAL_RCCEx_PeriphCLKConfig+0x8b6>
9000b650:	2601      	movs	r6, #1
9000b652:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b654:	009f      	lsls	r7, r3, #2
9000b656:	f100 80f1 	bmi.w	9000b83c <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b65a:	0398      	lsls	r0, r3, #14
9000b65c:	d50c      	bpl.n	9000b678 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->RngClockSelection)
9000b65e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000b662:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000b666:	f000 81d8 	beq.w	9000ba1a <HAL_RCCEx_PeriphCLKConfig+0x946>
9000b66a:	d97e      	bls.n	9000b76a <HAL_RCCEx_PeriphCLKConfig+0x696>
9000b66c:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000b670:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000b674:	d07b      	beq.n	9000b76e <HAL_RCCEx_PeriphCLKConfig+0x69a>
9000b676:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000b678:	02d9      	lsls	r1, r3, #11
9000b67a:	d506      	bpl.n	9000b68a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000b67c:	4847      	ldr	r0, [pc, #284]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b67e:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000b680:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000b682:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000b686:	4329      	orrs	r1, r5
9000b688:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000b68a:	00df      	lsls	r7, r3, #3
9000b68c:	d507      	bpl.n	9000b69e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000b68e:	4843      	ldr	r0, [pc, #268]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b690:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000b694:	6901      	ldr	r1, [r0, #16]
9000b696:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000b69a:	4329      	orrs	r1, r5
9000b69c:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000b69e:	029d      	lsls	r5, r3, #10
9000b6a0:	d506      	bpl.n	9000b6b0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000b6a2:	483e      	ldr	r0, [pc, #248]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b6a4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000b6a6:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000b6a8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000b6ac:	4329      	orrs	r1, r5
9000b6ae:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000b6b0:	0058      	lsls	r0, r3, #1
9000b6b2:	d509      	bpl.n	9000b6c8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000b6b4:	4939      	ldr	r1, [pc, #228]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b6b6:	6908      	ldr	r0, [r1, #16]
9000b6b8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000b6bc:	6108      	str	r0, [r1, #16]
9000b6be:	6908      	ldr	r0, [r1, #16]
9000b6c0:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000b6c4:	4328      	orrs	r0, r5
9000b6c6:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000b6c8:	2b00      	cmp	r3, #0
9000b6ca:	da06      	bge.n	9000b6da <HAL_RCCEx_PeriphCLKConfig+0x606>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000b6cc:	4833      	ldr	r0, [pc, #204]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b6ce:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000b6d0:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000b6d2:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000b6d6:	4329      	orrs	r1, r5
9000b6d8:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000b6da:	0219      	lsls	r1, r3, #8
9000b6dc:	d507      	bpl.n	9000b6ee <HAL_RCCEx_PeriphCLKConfig+0x61a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000b6de:	492f      	ldr	r1, [pc, #188]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b6e0:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000b6e4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000b6e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000b6ea:	4303      	orrs	r3, r0
9000b6ec:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000b6ee:	07d3      	lsls	r3, r2, #31
9000b6f0:	f100 80b0 	bmi.w	9000b854 <HAL_RCCEx_PeriphCLKConfig+0x780>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b6f4:	0797      	lsls	r7, r2, #30
9000b6f6:	f100 80ba 	bmi.w	9000b86e <HAL_RCCEx_PeriphCLKConfig+0x79a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b6fa:	0755      	lsls	r5, r2, #29
9000b6fc:	f100 80c4 	bmi.w	9000b888 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b700:	0710      	lsls	r0, r2, #28
9000b702:	f100 80ce 	bmi.w	9000b8a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b706:	06d1      	lsls	r1, r2, #27
9000b708:	f100 80d8 	bmi.w	9000b8bc <HAL_RCCEx_PeriphCLKConfig+0x7e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b70c:	0692      	lsls	r2, r2, #26
9000b70e:	f100 8125 	bmi.w	9000b95c <HAL_RCCEx_PeriphCLKConfig+0x888>
    return HAL_OK;
9000b712:	1e30      	subs	r0, r6, #0
9000b714:	bf18      	it	ne
9000b716:	2001      	movne	r0, #1
}
9000b718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000b71c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000b720:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000b724:	f43f aefc 	beq.w	9000b520 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b728:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000b72c:	f43f aef8 	beq.w	9000b520 <HAL_RCCEx_PeriphCLKConfig+0x44c>
9000b730:	2601      	movs	r6, #1
9000b732:	4635      	mov	r5, r6
9000b734:	e6ff      	b.n	9000b536 <HAL_RCCEx_PeriphCLKConfig+0x462>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000b736:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000b73a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000b73e:	f43f af11 	beq.w	9000b564 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b742:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000b746:	f43f af0d 	beq.w	9000b564 <HAL_RCCEx_PeriphCLKConfig+0x490>
9000b74a:	2601      	movs	r6, #1
9000b74c:	4635      	mov	r5, r6
9000b74e:	e714      	b.n	9000b57a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000b750:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000b754:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000b758:	f43f af26 	beq.w	9000b5a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b75c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000b760:	f43f af22 	beq.w	9000b5a8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
9000b764:	2601      	movs	r6, #1
9000b766:	4635      	mov	r5, r6
9000b768:	e729      	b.n	9000b5be <HAL_RCCEx_PeriphCLKConfig+0x4ea>
    switch (PeriphClkInit->RngClockSelection)
9000b76a:	2900      	cmp	r1, #0
9000b76c:	d183      	bne.n	9000b676 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    if (ret == HAL_OK)
9000b76e:	2d00      	cmp	r5, #0
9000b770:	f040 8151 	bne.w	9000ba16 <HAL_RCCEx_PeriphCLKConfig+0x942>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000b774:	4d09      	ldr	r5, [pc, #36]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b776:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000b778:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000b77c:	4301      	orrs	r1, r0
9000b77e:	6569      	str	r1, [r5, #84]	; 0x54
9000b780:	e77a      	b.n	9000b678 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch (PeriphClkInit->Sai1ClockSelection)
9000b782:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000b784:	2d00      	cmp	r5, #0
9000b786:	f040 80fb 	bne.w	9000b980 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000b78a:	4f04      	ldr	r7, [pc, #16]	; (9000b79c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000b78c:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000b78e:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b790:	f021 0107 	bic.w	r1, r1, #7
9000b794:	4301      	orrs	r1, r0
9000b796:	6539      	str	r1, [r7, #80]	; 0x50
9000b798:	e4d7      	b.n	9000b14a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000b79a:	bf00      	nop
9000b79c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b7a0:	2101      	movs	r1, #1
9000b7a2:	f104 0008 	add.w	r0, r4, #8
9000b7a6:	f7ff fba1 	bl	9000aeec <RCCEx_PLL2_Config>
9000b7aa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000b7ac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b7b0:	2d00      	cmp	r5, #0
9000b7b2:	f040 811a 	bne.w	9000b9ea <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000b7b6:	4fb7      	ldr	r7, [pc, #732]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b7b8:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000b7ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000b7bc:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000b7c0:	4301      	orrs	r1, r0
9000b7c2:	6539      	str	r1, [r7, #80]	; 0x50
9000b7c4:	e5b6      	b.n	9000b334 <HAL_RCCEx_PeriphCLKConfig+0x260>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b7c6:	2101      	movs	r1, #1
9000b7c8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b7cc:	f7ff fc08 	bl	9000afe0 <RCCEx_PLL3_Config>
9000b7d0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000b7d2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b7d6:	2d00      	cmp	r5, #0
9000b7d8:	f040 811b 	bne.w	9000ba12 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000b7dc:	4fad      	ldr	r7, [pc, #692]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b7de:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000b7e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b7e4:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000b7e8:	4301      	orrs	r1, r0
9000b7ea:	6579      	str	r1, [r7, #84]	; 0x54
9000b7ec:	e726      	b.n	9000b63c <HAL_RCCEx_PeriphCLKConfig+0x568>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b7ee:	2102      	movs	r1, #2
9000b7f0:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b7f4:	f7ff fbf4 	bl	9000afe0 <RCCEx_PLL3_Config>
9000b7f8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000b7fa:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b7fe:	2d00      	cmp	r5, #0
9000b800:	f040 8105 	bne.w	9000ba0e <HAL_RCCEx_PeriphCLKConfig+0x93a>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000b804:	4fa3      	ldr	r7, [pc, #652]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b806:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000b80a:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000b80c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000b810:	4301      	orrs	r1, r0
9000b812:	65b9      	str	r1, [r7, #88]	; 0x58
9000b814:	e700      	b.n	9000b618 <HAL_RCCEx_PeriphCLKConfig+0x544>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b816:	2101      	movs	r1, #1
9000b818:	f104 0008 	add.w	r0, r4, #8
9000b81c:	f7ff fb66 	bl	9000aeec <RCCEx_PLL2_Config>
9000b820:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000b822:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b826:	2d00      	cmp	r5, #0
9000b828:	f040 80db 	bne.w	9000b9e2 <HAL_RCCEx_PeriphCLKConfig+0x90e>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000b82c:	4f99      	ldr	r7, [pc, #612]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b82e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000b830:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000b832:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000b836:	4301      	orrs	r1, r0
9000b838:	6579      	str	r1, [r7, #84]	; 0x54
9000b83a:	e615      	b.n	9000b468 <HAL_RCCEx_PeriphCLKConfig+0x394>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b83c:	2102      	movs	r1, #2
9000b83e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b842:	f7ff fbcd 	bl	9000afe0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000b846:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000b84a:	2800      	cmp	r0, #0
9000b84c:	f43f af05 	beq.w	9000b65a <HAL_RCCEx_PeriphCLKConfig+0x586>
      status = HAL_ERROR;
9000b850:	2601      	movs	r6, #1
9000b852:	e702      	b.n	9000b65a <HAL_RCCEx_PeriphCLKConfig+0x586>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000b854:	2100      	movs	r1, #0
9000b856:	f104 0008 	add.w	r0, r4, #8
9000b85a:	f7ff fb47 	bl	9000aeec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b85e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b860:	2800      	cmp	r0, #0
9000b862:	f43f af47 	beq.w	9000b6f4 <HAL_RCCEx_PeriphCLKConfig+0x620>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000b866:	0797      	lsls	r7, r2, #30
9000b868:	4606      	mov	r6, r0
9000b86a:	f57f af46 	bpl.w	9000b6fa <HAL_RCCEx_PeriphCLKConfig+0x626>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000b86e:	2101      	movs	r1, #1
9000b870:	f104 0008 	add.w	r0, r4, #8
9000b874:	f7ff fb3a 	bl	9000aeec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b878:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b87a:	2800      	cmp	r0, #0
9000b87c:	f43f af3d 	beq.w	9000b6fa <HAL_RCCEx_PeriphCLKConfig+0x626>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000b880:	0755      	lsls	r5, r2, #29
9000b882:	4606      	mov	r6, r0
9000b884:	f57f af3c 	bpl.w	9000b700 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b888:	2102      	movs	r1, #2
9000b88a:	f104 0008 	add.w	r0, r4, #8
9000b88e:	f7ff fb2d 	bl	9000aeec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b892:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b894:	2800      	cmp	r0, #0
9000b896:	f43f af33 	beq.w	9000b700 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000b89a:	4606      	mov	r6, r0
9000b89c:	0710      	lsls	r0, r2, #28
9000b89e:	f57f af32 	bpl.w	9000b706 <HAL_RCCEx_PeriphCLKConfig+0x632>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000b8a2:	2100      	movs	r1, #0
9000b8a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000b8a8:	f7ff fb9a 	bl	9000afe0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b8ac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000b8ae:	2800      	cmp	r0, #0
9000b8b0:	f43f af29 	beq.w	9000b706 <HAL_RCCEx_PeriphCLKConfig+0x632>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000b8b4:	06d1      	lsls	r1, r2, #27
9000b8b6:	4606      	mov	r6, r0
9000b8b8:	f57f af28 	bpl.w	9000b70c <HAL_RCCEx_PeriphCLKConfig+0x638>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000b8bc:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000b8c0:	2101      	movs	r1, #1
9000b8c2:	4628      	mov	r0, r5
9000b8c4:	f7ff fb8c 	bl	9000afe0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000b8c8:	2800      	cmp	r0, #0
9000b8ca:	f000 80c9 	beq.w	9000ba60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000b8ce:	6863      	ldr	r3, [r4, #4]
9000b8d0:	069b      	lsls	r3, r3, #26
9000b8d2:	d54c      	bpl.n	9000b96e <HAL_RCCEx_PeriphCLKConfig+0x89a>
9000b8d4:	4606      	mov	r6, r0
9000b8d6:	e043      	b.n	9000b960 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000b8d8:	4f6f      	ldr	r7, [pc, #444]	; (9000ba98 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
9000b8da:	683b      	ldr	r3, [r7, #0]
9000b8dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b8e0:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000b8e2:	f7fb fc41 	bl	90007168 <HAL_GetTick>
9000b8e6:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b8e8:	e006      	b.n	9000b8f8 <HAL_RCCEx_PeriphCLKConfig+0x824>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000b8ea:	f7fb fc3d 	bl	90007168 <HAL_GetTick>
9000b8ee:	eba0 0008 	sub.w	r0, r0, r8
9000b8f2:	2864      	cmp	r0, #100	; 0x64
9000b8f4:	f200 81a0 	bhi.w	9000bc38 <HAL_RCCEx_PeriphCLKConfig+0xb64>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000b8f8:	683b      	ldr	r3, [r7, #0]
9000b8fa:	05da      	lsls	r2, r3, #23
9000b8fc:	d5f5      	bpl.n	9000b8ea <HAL_RCCEx_PeriphCLKConfig+0x816>
    if (ret == HAL_OK)
9000b8fe:	2d00      	cmp	r5, #0
9000b900:	f040 81d4 	bne.w	9000bcac <HAL_RCCEx_PeriphCLKConfig+0xbd8>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000b904:	4a63      	ldr	r2, [pc, #396]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b906:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000b90a:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000b90c:	4059      	eors	r1, r3
9000b90e:	f411 7f40 	tst.w	r1, #768	; 0x300
9000b912:	d00b      	beq.n	9000b92c <HAL_RCCEx_PeriphCLKConfig+0x858>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b914:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000b916:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000b918:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000b91c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000b920:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000b922:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000b924:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000b928:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000b92a:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000b92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000b930:	f000 819e 	beq.w	9000bc70 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b934:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000b938:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000b93c:	f000 81ac 	beq.w	9000bc98 <HAL_RCCEx_PeriphCLKConfig+0xbc4>
9000b940:	4954      	ldr	r1, [pc, #336]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b942:	690a      	ldr	r2, [r1, #16]
9000b944:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000b948:	610a      	str	r2, [r1, #16]
9000b94a:	4852      	ldr	r0, [pc, #328]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b94c:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000b950:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000b952:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000b954:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000b958:	6701      	str	r1, [r0, #112]	; 0x70
9000b95a:	e553      	b.n	9000b404 <HAL_RCCEx_PeriphCLKConfig+0x330>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b95c:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000b960:	2102      	movs	r1, #2
9000b962:	4628      	mov	r0, r5
9000b964:	f7ff fb3c 	bl	9000afe0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000b968:	2800      	cmp	r0, #0
9000b96a:	f43f aed2 	beq.w	9000b712 <HAL_RCCEx_PeriphCLKConfig+0x63e>
  return HAL_ERROR;
9000b96e:	2001      	movs	r0, #1
}
9000b970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000b974:	462e      	mov	r6, r5
9000b976:	e450      	b.n	9000b21a <HAL_RCCEx_PeriphCLKConfig+0x146>
9000b978:	462e      	mov	r6, r5
9000b97a:	e406      	b.n	9000b18a <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000b97c:	462e      	mov	r6, r5
9000b97e:	e489      	b.n	9000b294 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000b980:	462e      	mov	r6, r5
9000b982:	f7ff bbe2 	b.w	9000b14a <HAL_RCCEx_PeriphCLKConfig+0x76>
9000b986:	462e      	mov	r6, r5
9000b988:	e423      	b.n	9000b1d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000b98a:	2102      	movs	r1, #2
9000b98c:	f104 0008 	add.w	r0, r4, #8
9000b990:	f7ff faac 	bl	9000aeec <RCCEx_PLL2_Config>
9000b994:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000b996:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000b99a:	2d00      	cmp	r5, #0
9000b99c:	d14c      	bne.n	9000ba38 <HAL_RCCEx_PeriphCLKConfig+0x964>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000b99e:	4f3d      	ldr	r7, [pc, #244]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b9a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000b9a2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000b9a4:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000b9a8:	4301      	orrs	r1, r0
9000b9aa:	64f9      	str	r1, [r7, #76]	; 0x4c
9000b9ac:	e652      	b.n	9000b654 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b9ae:	4839      	ldr	r0, [pc, #228]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b9b0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b9b2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b9b6:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b9b8:	e462      	b.n	9000b280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b9ba:	4836      	ldr	r0, [pc, #216]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b9bc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b9be:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b9c2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b9c4:	e41e      	b.n	9000b204 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b9c6:	4833      	ldr	r0, [pc, #204]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b9c8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b9ca:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b9ce:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b9d0:	f7ff bbd1 	b.w	9000b176 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000b9d4:	482f      	ldr	r0, [pc, #188]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000b9d6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000b9d8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000b9dc:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000b9de:	f7ff bbed 	b.w	9000b1bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000b9e2:	462e      	mov	r6, r5
9000b9e4:	e540      	b.n	9000b468 <HAL_RCCEx_PeriphCLKConfig+0x394>
9000b9e6:	462e      	mov	r6, r5
9000b9e8:	e5a5      	b.n	9000b536 <HAL_RCCEx_PeriphCLKConfig+0x462>
9000b9ea:	462e      	mov	r6, r5
9000b9ec:	e4a2      	b.n	9000b334 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000b9ee:	462e      	mov	r6, r5
9000b9f0:	e57f      	b.n	9000b4f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000b9f2:	462e      	mov	r6, r5
9000b9f4:	e42c      	b.n	9000b250 <HAL_RCCEx_PeriphCLKConfig+0x17c>
9000b9f6:	462e      	mov	r6, r5
9000b9f8:	e501      	b.n	9000b3fe <HAL_RCCEx_PeriphCLKConfig+0x32a>
9000b9fa:	462e      	mov	r6, r5
9000b9fc:	e46a      	b.n	9000b2d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000b9fe:	462e      	mov	r6, r5
9000ba00:	e5dd      	b.n	9000b5be <HAL_RCCEx_PeriphCLKConfig+0x4ea>
9000ba02:	462e      	mov	r6, r5
9000ba04:	e486      	b.n	9000b314 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000ba06:	462e      	mov	r6, r5
9000ba08:	e5b7      	b.n	9000b57a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
9000ba0a:	462e      	mov	r6, r5
9000ba0c:	e54c      	b.n	9000b4a8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
9000ba0e:	462e      	mov	r6, r5
9000ba10:	e602      	b.n	9000b618 <HAL_RCCEx_PeriphCLKConfig+0x544>
9000ba12:	462e      	mov	r6, r5
9000ba14:	e612      	b.n	9000b63c <HAL_RCCEx_PeriphCLKConfig+0x568>
9000ba16:	462e      	mov	r6, r5
9000ba18:	e62e      	b.n	9000b678 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000ba1a:	4f1e      	ldr	r7, [pc, #120]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000ba1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000ba1e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000ba22:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000ba24:	2d00      	cmp	r5, #0
9000ba26:	d1f6      	bne.n	9000ba16 <HAL_RCCEx_PeriphCLKConfig+0x942>
9000ba28:	e6a4      	b.n	9000b774 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000ba2a:	481a      	ldr	r0, [pc, #104]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000ba2c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000ba2e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000ba32:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000ba34:	2d00      	cmp	r5, #0
9000ba36:	d0b2      	beq.n	9000b99e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
9000ba38:	462e      	mov	r6, r5
9000ba3a:	e60b      	b.n	9000b654 <HAL_RCCEx_PeriphCLKConfig+0x580>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000ba3c:	4815      	ldr	r0, [pc, #84]	; (9000ba94 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
9000ba3e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000ba40:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000ba44:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000ba46:	2d00      	cmp	r5, #0
9000ba48:	d1e3      	bne.n	9000ba12 <HAL_RCCEx_PeriphCLKConfig+0x93e>
9000ba4a:	e6c7      	b.n	9000b7dc <HAL_RCCEx_PeriphCLKConfig+0x708>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000ba4c:	f104 0008 	add.w	r0, r4, #8
9000ba50:	f7ff fa4c 	bl	9000aeec <RCCEx_PLL2_Config>
9000ba54:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000ba56:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ba5a:	2d00      	cmp	r5, #0
9000ba5c:	d1d7      	bne.n	9000ba0e <HAL_RCCEx_PeriphCLKConfig+0x93a>
9000ba5e:	e6d1      	b.n	9000b804 <HAL_RCCEx_PeriphCLKConfig+0x730>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000ba60:	6862      	ldr	r2, [r4, #4]
9000ba62:	e653      	b.n	9000b70c <HAL_RCCEx_PeriphCLKConfig+0x638>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000ba64:	2102      	movs	r1, #2
9000ba66:	f104 0008 	add.w	r0, r4, #8
9000ba6a:	f7ff fa3f 	bl	9000aeec <RCCEx_PLL2_Config>
9000ba6e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000ba70:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ba74:	2d00      	cmp	r5, #0
9000ba76:	d1bc      	bne.n	9000b9f2 <HAL_RCCEx_PeriphCLKConfig+0x91e>
9000ba78:	f7ff bbe3 	b.w	9000b242 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000ba7c:	2102      	movs	r1, #2
9000ba7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000ba82:	f7ff faad 	bl	9000afe0 <RCCEx_PLL3_Config>
9000ba86:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000ba88:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ba8c:	2d00      	cmp	r5, #0
9000ba8e:	d1ba      	bne.n	9000ba06 <HAL_RCCEx_PeriphCLKConfig+0x932>
9000ba90:	e56b      	b.n	9000b56a <HAL_RCCEx_PeriphCLKConfig+0x496>
9000ba92:	bf00      	nop
9000ba94:	58024400 	.word	0x58024400
9000ba98:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000ba9c:	2102      	movs	r1, #2
9000ba9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000baa2:	f7ff fa9d 	bl	9000afe0 <RCCEx_PLL3_Config>
9000baa6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000baa8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000baac:	2d00      	cmp	r5, #0
9000baae:	d1a6      	bne.n	9000b9fe <HAL_RCCEx_PeriphCLKConfig+0x92a>
9000bab0:	e57d      	b.n	9000b5ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bab2:	4886      	ldr	r0, [pc, #536]	; (9000bccc <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000bab4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000bab6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000baba:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000babc:	2d00      	cmp	r5, #0
9000babe:	d194      	bne.n	9000b9ea <HAL_RCCEx_PeriphCLKConfig+0x916>
9000bac0:	e679      	b.n	9000b7b6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000bac2:	2101      	movs	r1, #1
9000bac4:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bac8:	f7ff fa8a 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bacc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000bace:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bad2:	2d00      	cmp	r5, #0
9000bad4:	d191      	bne.n	9000b9fa <HAL_RCCEx_PeriphCLKConfig+0x926>
9000bad6:	f7ff bbf6 	b.w	9000b2c6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000bada:	2101      	movs	r1, #1
9000badc:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bae0:	f7ff fa7e 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bae4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000bae6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000baea:	2d00      	cmp	r5, #0
9000baec:	d189      	bne.n	9000ba02 <HAL_RCCEx_PeriphCLKConfig+0x92e>
9000baee:	e409      	b.n	9000b304 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000baf0:	2102      	movs	r1, #2
9000baf2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000baf6:	f7ff fa73 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bafa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000bafc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb00:	2d00      	cmp	r5, #0
9000bb02:	f47f af70 	bne.w	9000b9e6 <HAL_RCCEx_PeriphCLKConfig+0x912>
9000bb06:	e50e      	b.n	9000b526 <HAL_RCCEx_PeriphCLKConfig+0x452>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000bb08:	2102      	movs	r1, #2
9000bb0a:	f104 0008 	add.w	r0, r4, #8
9000bb0e:	f7ff f9ed 	bl	9000aeec <RCCEx_PLL2_Config>
9000bb12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000bb14:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bb18:	2d00      	cmp	r5, #0
9000bb1a:	f47f af6c 	bne.w	9000b9f6 <HAL_RCCEx_PeriphCLKConfig+0x922>
9000bb1e:	e467      	b.n	9000b3f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000bb20:	2102      	movs	r1, #2
9000bb22:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bb26:	f7ff fa5b 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bb2a:	2800      	cmp	r0, #0
9000bb2c:	f040 8094 	bne.w	9000bc58 <HAL_RCCEx_PeriphCLKConfig+0xb84>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000bb30:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000bb34:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bb38:	e549      	b.n	9000b5ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000bb3a:	2102      	movs	r1, #2
9000bb3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bb40:	f7ff fa4e 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bb44:	2800      	cmp	r0, #0
9000bb46:	f040 808d 	bne.w	9000bc64 <HAL_RCCEx_PeriphCLKConfig+0xb90>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000bb4a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000bb4e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bb52:	e54a      	b.n	9000b5ea <HAL_RCCEx_PeriphCLKConfig+0x516>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000bb54:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bb58:	f7ff bae9 	b.w	9000b12e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000bb5c:	2100      	movs	r1, #0
9000bb5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bb62:	f7ff fa3d 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bb66:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000bb68:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000bb6c:	f7ff bb4a 	b.w	9000b204 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000bb70:	2100      	movs	r1, #0
9000bb72:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bb76:	f7ff fa33 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bb7a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000bb7c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000bb80:	e600      	b.n	9000b784 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000bb82:	2100      	movs	r1, #0
9000bb84:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bb88:	f7ff fa2a 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bb8c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000bb8e:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000bb92:	f7ff baf0 	b.w	9000b176 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000bb96:	2102      	movs	r1, #2
9000bb98:	3028      	adds	r0, #40	; 0x28
9000bb9a:	f7ff fa21 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bb9e:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000bba0:	2e00      	cmp	r6, #0
9000bba2:	f43f aab5 	beq.w	9000b110 <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000bba6:	e7d5      	b.n	9000bb54 <HAL_RCCEx_PeriphCLKConfig+0xa80>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bba8:	4848      	ldr	r0, [pc, #288]	; (9000bccc <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
        break;
9000bbaa:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bbac:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000bbae:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000bbb2:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000bbb4:	e5e6      	b.n	9000b784 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000bbb6:	2100      	movs	r1, #0
9000bbb8:	f104 0008 	add.w	r0, r4, #8
9000bbbc:	f7ff f996 	bl	9000aeec <RCCEx_PLL2_Config>
9000bbc0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000bbc2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000bbc6:	e5dd      	b.n	9000b784 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000bbc8:	2100      	movs	r1, #0
9000bbca:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bbce:	f7ff fa07 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bbd2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000bbd4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000bbd8:	f7ff bb52 	b.w	9000b280 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000bbdc:	2100      	movs	r1, #0
9000bbde:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bbe2:	f7ff f9fd 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bbe6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000bbe8:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000bbec:	f7ff bae6 	b.w	9000b1bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000bbf0:	2101      	movs	r1, #1
9000bbf2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bbf6:	f7ff f9f3 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bbfa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000bbfc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc00:	2d00      	cmp	r5, #0
9000bc02:	f47f aef4 	bne.w	9000b9ee <HAL_RCCEx_PeriphCLKConfig+0x91a>
9000bc06:	e46c      	b.n	9000b4e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000bc08:	2101      	movs	r1, #1
9000bc0a:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bc0e:	f7ff f9e7 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bc12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000bc14:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc18:	2d00      	cmp	r5, #0
9000bc1a:	f47f aef6 	bne.w	9000ba0a <HAL_RCCEx_PeriphCLKConfig+0x936>
9000bc1e:	e43c      	b.n	9000b49a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000bc20:	2101      	movs	r1, #1
9000bc22:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000bc26:	f7ff f9db 	bl	9000afe0 <RCCEx_PLL3_Config>
9000bc2a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000bc2c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000bc30:	2d00      	cmp	r5, #0
9000bc32:	f47f aed6 	bne.w	9000b9e2 <HAL_RCCEx_PeriphCLKConfig+0x90e>
9000bc36:	e5f9      	b.n	9000b82c <HAL_RCCEx_PeriphCLKConfig+0x758>
        status = ret;
9000bc38:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000bc3a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bc3e:	4635      	mov	r5, r6
9000bc40:	f7ff bbe0 	b.w	9000b404 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000bc44:	2601      	movs	r6, #1
9000bc46:	f7ff ba72 	b.w	9000b12e <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000bc4a:	4d20      	ldr	r5, [pc, #128]	; (9000bccc <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000bc4c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000bc4e:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000bc52:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000bc54:	f7ff ba64 	b.w	9000b120 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000bc58:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000bc5c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000bc5e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bc62:	e4b4      	b.n	9000b5ce <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000bc64:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000bc68:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000bc6a:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bc6e:	e4bc      	b.n	9000b5ea <HAL_RCCEx_PeriphCLKConfig+0x516>
        tickstart = HAL_GetTick();
9000bc70:	f7fb fa7a 	bl	90007168 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000bc74:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000bccc <HAL_RCCEx_PeriphCLKConfig+0xbf8>
        tickstart = HAL_GetTick();
9000bc78:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000bc7a:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000bc7e:	e004      	b.n	9000bc8a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000bc80:	f7fb fa72 	bl	90007168 <HAL_GetTick>
9000bc84:	1bc0      	subs	r0, r0, r7
9000bc86:	4548      	cmp	r0, r9
9000bc88:	d8d6      	bhi.n	9000bc38 <HAL_RCCEx_PeriphCLKConfig+0xb64>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000bc8a:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000bc8e:	079b      	lsls	r3, r3, #30
9000bc90:	d5f6      	bpl.n	9000bc80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000bc92:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000bc96:	e64d      	b.n	9000b934 <HAL_RCCEx_PeriphCLKConfig+0x860>
9000bc98:	480c      	ldr	r0, [pc, #48]	; (9000bccc <HAL_RCCEx_PeriphCLKConfig+0xbf8>)
9000bc9a:	4a0d      	ldr	r2, [pc, #52]	; (9000bcd0 <HAL_RCCEx_PeriphCLKConfig+0xbfc>)
9000bc9c:	6901      	ldr	r1, [r0, #16]
9000bc9e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000bca2:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000bca6:	430a      	orrs	r2, r1
9000bca8:	6102      	str	r2, [r0, #16]
9000bcaa:	e64e      	b.n	9000b94a <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000bcac:	e9d4 3200 	ldrd	r3, r2, [r4]
9000bcb0:	462e      	mov	r6, r5
9000bcb2:	f7ff bba7 	b.w	9000b404 <HAL_RCCEx_PeriphCLKConfig+0x330>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000bcb6:	2601      	movs	r6, #1
9000bcb8:	4635      	mov	r5, r6
9000bcba:	f7ff bbf5 	b.w	9000b4a8 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    switch (PeriphClkInit->FmcClockSelection)
9000bcbe:	2601      	movs	r6, #1
9000bcc0:	4635      	mov	r5, r6
9000bcc2:	f7ff bb9c 	b.w	9000b3fe <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000bcc6:	2601      	movs	r6, #1
9000bcc8:	4635      	mov	r5, r6
9000bcca:	e412      	b.n	9000b4f2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
9000bccc:	58024400 	.word	0x58024400
9000bcd0:	00ffffcf 	.word	0x00ffffcf

9000bcd4 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000bcd4:	b318      	cbz	r0, 9000bd1e <HAL_SDRAM_Init+0x4a>
{
9000bcd6:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000bcd8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000bcdc:	4604      	mov	r4, r0
9000bcde:	460d      	mov	r5, r1
9000bce0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000bce4:	b1b3      	cbz	r3, 9000bd14 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000bce6:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bce8:	2302      	movs	r3, #2
9000bcea:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000bcee:	f851 0b04 	ldr.w	r0, [r1], #4
9000bcf2:	f000 fd4b 	bl	9000c78c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000bcf6:	6862      	ldr	r2, [r4, #4]
9000bcf8:	4629      	mov	r1, r5
9000bcfa:	6820      	ldr	r0, [r4, #0]
9000bcfc:	f000 fd84 	bl	9000c808 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000bd00:	4a08      	ldr	r2, [pc, #32]	; (9000bd24 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000bd02:	2101      	movs	r1, #1

  return HAL_OK;
9000bd04:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000bd06:	6813      	ldr	r3, [r2, #0]
9000bd08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000bd0c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000bd0e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000bd12:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000bd14:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000bd18:	f7f8 fe9e 	bl	90004a58 <HAL_SDRAM_MspInit>
9000bd1c:	e7e3      	b.n	9000bce6 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000bd1e:	2001      	movs	r0, #1
}
9000bd20:	4770      	bx	lr
9000bd22:	bf00      	nop
9000bd24:	52004000 	.word	0x52004000

9000bd28 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000bd28:	b510      	push	{r4, lr}
9000bd2a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000bd2c:	f7f8 ff10 	bl	90004b50 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000bd30:	e9d4 0100 	ldrd	r0, r1, [r4]
9000bd34:	f000 fdb6 	bl	9000c8a4 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000bd38:	2000      	movs	r0, #0
9000bd3a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000bd3e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000bd42:	bd10      	pop	{r4, pc}

9000bd44 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000bd44:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000bd46:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000bd4a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000bd4c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000bd4e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000bd50:	d004      	beq.n	9000bd5c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000bd52:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000bd56:	2e01      	cmp	r6, #1
9000bd58:	d001      	beq.n	9000bd5e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000bd5a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000bd5c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bd5e:	2302      	movs	r3, #2
9000bd60:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000bd62:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bd64:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000bd68:	f000 fdb0 	bl	9000c8cc <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000bd6c:	682b      	ldr	r3, [r5, #0]
9000bd6e:	2b02      	cmp	r3, #2
9000bd70:	d003      	beq.n	9000bd7a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000bd72:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000bd74:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000bd78:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000bd7a:	2305      	movs	r3, #5
  return HAL_OK;
9000bd7c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000bd7e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000bd82:	bd70      	pop	{r4, r5, r6, pc}

9000bd84 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000bd84:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000bd86:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000bd8a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000bd8c:	2b02      	cmp	r3, #2
9000bd8e:	b2d8      	uxtb	r0, r3
9000bd90:	d005      	beq.n	9000bd9e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000bd92:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000bd96:	2b01      	cmp	r3, #1
9000bd98:	b2dd      	uxtb	r5, r3
9000bd9a:	d001      	beq.n	9000bda0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000bd9c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000bd9e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bda0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000bda2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000bda4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000bda8:	f000 fda8 	bl	9000c8fc <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000bdac:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000bdae:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000bdb2:	bd38      	pop	{r3, r4, r5, pc}

9000bdb4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
9000bdb4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
9000bdb6:	4a1b      	ldr	r2, [pc, #108]	; (9000be24 <TIM_OC1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
9000bdb8:	f023 0301 	bic.w	r3, r3, #1
{
9000bdbc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
9000bdbe:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
9000bdc0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
9000bdc2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
9000bdc4:	6985      	ldr	r5, [r0, #24]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
9000bdc6:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
9000bdca:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
9000bdcc:	680d      	ldr	r5, [r1, #0]
9000bdce:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
9000bdd0:	688d      	ldr	r5, [r1, #8]
9000bdd2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
9000bdd4:	4d14      	ldr	r5, [pc, #80]	; (9000be28 <TIM_OC1_SetConfig+0x74>)
9000bdd6:	42a8      	cmp	r0, r5
9000bdd8:	d00e      	beq.n	9000bdf8 <TIM_OC1_SetConfig+0x44>
9000bdda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000bdde:	42a8      	cmp	r0, r5
9000bde0:	d00a      	beq.n	9000bdf8 <TIM_OC1_SetConfig+0x44>
9000bde2:	4e12      	ldr	r6, [pc, #72]	; (9000be2c <TIM_OC1_SetConfig+0x78>)
9000bde4:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
9000bde8:	42a8      	cmp	r0, r5
9000bdea:	bf18      	it	ne
9000bdec:	42b0      	cmpne	r0, r6
9000bdee:	d003      	beq.n	9000bdf8 <TIM_OC1_SetConfig+0x44>
9000bdf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000bdf4:	42a8      	cmp	r0, r5
9000bdf6:	d10d      	bne.n	9000be14 <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
9000bdf8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
9000bdfa:	f023 0308 	bic.w	r3, r3, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
9000bdfe:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
9000be02:	432b      	orrs	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
9000be04:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpccer &= ~TIM_CCER_CC1NE;
9000be08:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
9000be0c:	ea46 0c05 	orr.w	ip, r6, r5
9000be10:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
9000be14:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
9000be16:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
9000be18:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
9000be1a:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
9000be1c:	6203      	str	r3, [r0, #32]
}
9000be1e:	bc70      	pop	{r4, r5, r6}
9000be20:	4770      	bx	lr
9000be22:	bf00      	nop
9000be24:	fffeff8c 	.word	0xfffeff8c
9000be28:	40010000 	.word	0x40010000
9000be2c:	40014000 	.word	0x40014000

9000be30 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
9000be30:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
9000be32:	4a1c      	ldr	r2, [pc, #112]	; (9000bea4 <TIM_OC3_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
9000be34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
9000be38:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
9000be3a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
9000be3c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
9000be3e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
9000be40:	69c5      	ldr	r5, [r0, #28]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
9000be42:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
9000be46:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
9000be48:	680d      	ldr	r5, [r1, #0]
9000be4a:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
9000be4c:	688d      	ldr	r5, [r1, #8]
9000be4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
9000be52:	4d15      	ldr	r5, [pc, #84]	; (9000bea8 <TIM_OC3_SetConfig+0x78>)
9000be54:	42a8      	cmp	r0, r5
9000be56:	d00e      	beq.n	9000be76 <TIM_OC3_SetConfig+0x46>
9000be58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000be5c:	42a8      	cmp	r0, r5
9000be5e:	d00a      	beq.n	9000be76 <TIM_OC3_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000be60:	4e12      	ldr	r6, [pc, #72]	; (9000beac <TIM_OC3_SetConfig+0x7c>)
9000be62:	4d13      	ldr	r5, [pc, #76]	; (9000beb0 <TIM_OC3_SetConfig+0x80>)
9000be64:	42a8      	cmp	r0, r5
9000be66:	bf18      	it	ne
9000be68:	42b0      	cmpne	r0, r6
9000be6a:	d00b      	beq.n	9000be84 <TIM_OC3_SetConfig+0x54>
9000be6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000be70:	42a8      	cmp	r0, r5
9000be72:	d10f      	bne.n	9000be94 <TIM_OC3_SetConfig+0x64>
9000be74:	e006      	b.n	9000be84 <TIM_OC3_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC3NP;
9000be76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
9000be7a:	68cd      	ldr	r5, [r1, #12]
9000be7c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
9000be80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
9000be84:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
9000be88:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
9000be8c:	ea46 0c05 	orr.w	ip, r6, r5
9000be90:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
9000be94:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
9000be96:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
9000be98:	61c2      	str	r2, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
9000be9a:	63c1      	str	r1, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
9000be9c:	6203      	str	r3, [r0, #32]
}
9000be9e:	bc70      	pop	{r4, r5, r6}
9000bea0:	4770      	bx	lr
9000bea2:	bf00      	nop
9000bea4:	fffeff8c 	.word	0xfffeff8c
9000bea8:	40010000 	.word	0x40010000
9000beac:	40014000 	.word	0x40014000
9000beb0:	40014400 	.word	0x40014400

9000beb4 <HAL_TIM_Base_MspInit>:
}
9000beb4:	4770      	bx	lr
9000beb6:	bf00      	nop

9000beb8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000beb8:	2800      	cmp	r0, #0
9000beba:	f000 80a5 	beq.w	9000c008 <HAL_TIM_Base_Init+0x150>
{
9000bebe:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000bec0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000bec4:	4604      	mov	r4, r0
9000bec6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000beca:	2b00      	cmp	r3, #0
9000becc:	d076      	beq.n	9000bfbc <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000bece:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000bed0:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bed2:	494e      	ldr	r1, [pc, #312]	; (9000c00c <HAL_TIM_Base_Init+0x154>)
9000bed4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000bed8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bedc:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000bee0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bee2:	fab1 f181 	clz	r1, r1
9000bee6:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000beea:	d027      	beq.n	9000bf3c <HAL_TIM_Base_Init+0x84>
9000beec:	bb31      	cbnz	r1, 9000bf3c <HAL_TIM_Base_Init+0x84>
9000beee:	4848      	ldr	r0, [pc, #288]	; (9000c010 <HAL_TIM_Base_Init+0x158>)
9000bef0:	4d48      	ldr	r5, [pc, #288]	; (9000c014 <HAL_TIM_Base_Init+0x15c>)
9000bef2:	4282      	cmp	r2, r0
9000bef4:	d067      	beq.n	9000bfc6 <HAL_TIM_Base_Init+0x10e>
9000bef6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000befa:	4282      	cmp	r2, r0
9000befc:	d063      	beq.n	9000bfc6 <HAL_TIM_Base_Init+0x10e>
9000befe:	1b55      	subs	r5, r2, r5
9000bf00:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000bf04:	fab5 f585 	clz	r5, r5
9000bf08:	4282      	cmp	r2, r0
9000bf0a:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000bf0e:	d063      	beq.n	9000bfd8 <HAL_TIM_Base_Init+0x120>
9000bf10:	2d00      	cmp	r5, #0
9000bf12:	d161      	bne.n	9000bfd8 <HAL_TIM_Base_Init+0x120>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bf14:	4840      	ldr	r0, [pc, #256]	; (9000c018 <HAL_TIM_Base_Init+0x160>)
9000bf16:	4941      	ldr	r1, [pc, #260]	; (9000c01c <HAL_TIM_Base_Init+0x164>)
9000bf18:	428a      	cmp	r2, r1
9000bf1a:	bf18      	it	ne
9000bf1c:	4282      	cmpne	r2, r0
9000bf1e:	d065      	beq.n	9000bfec <HAL_TIM_Base_Init+0x134>
9000bf20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000bf24:	428a      	cmp	r2, r1
9000bf26:	d061      	beq.n	9000bfec <HAL_TIM_Base_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bf28:	69a0      	ldr	r0, [r4, #24]
9000bf2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bf2e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bf30:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000bf32:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
9000bf34:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bf36:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000bf38:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000bf3a:	e023      	b.n	9000bf84 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bf3c:	4d35      	ldr	r5, [pc, #212]	; (9000c014 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000bf3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000bf42:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bf44:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000bf46:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bf48:	fab5 f585 	clz	r5, r5
9000bf4c:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bf4e:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000bf50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bf54:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bf56:	69a0      	ldr	r0, [r4, #24]
9000bf58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000bf5c:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000bf5e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bf60:	68e3      	ldr	r3, [r4, #12]
9000bf62:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000bf64:	6863      	ldr	r3, [r4, #4]
9000bf66:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000bf68:	b951      	cbnz	r1, 9000bf80 <HAL_TIM_Base_Init+0xc8>
9000bf6a:	b94d      	cbnz	r5, 9000bf80 <HAL_TIM_Base_Init+0xc8>
9000bf6c:	492a      	ldr	r1, [pc, #168]	; (9000c018 <HAL_TIM_Base_Init+0x160>)
9000bf6e:	4b2b      	ldr	r3, [pc, #172]	; (9000c01c <HAL_TIM_Base_Init+0x164>)
9000bf70:	429a      	cmp	r2, r3
9000bf72:	bf18      	it	ne
9000bf74:	428a      	cmpne	r2, r1
9000bf76:	d003      	beq.n	9000bf80 <HAL_TIM_Base_Init+0xc8>
9000bf78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000bf7c:	429a      	cmp	r2, r3
9000bf7e:	d101      	bne.n	9000bf84 <HAL_TIM_Base_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
9000bf80:	6963      	ldr	r3, [r4, #20]
9000bf82:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
9000bf84:	2301      	movs	r3, #1
  return HAL_OK;
9000bf86:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000bf88:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000bf8a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000bf8e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000bf92:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000bf96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000bf9a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000bf9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000bfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000bfa6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000bfaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000bfae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000bfb2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000bfb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000bfba:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000bfbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000bfc0:	f7ff ff78 	bl	9000beb4 <HAL_TIM_Base_MspInit>
9000bfc4:	e783      	b.n	9000bece <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfc6:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000bfc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000bfcc:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfce:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000bfd2:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfd4:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bfd6:	e7ba      	b.n	9000bf4e <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000bfd8:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000bfda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000bfde:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000bfe0:	480f      	ldr	r0, [pc, #60]	; (9000c020 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000bfe2:	4282      	cmp	r2, r0
9000bfe4:	d0b3      	beq.n	9000bf4e <HAL_TIM_Base_Init+0x96>
9000bfe6:	2d00      	cmp	r5, #0
9000bfe8:	d1b1      	bne.n	9000bf4e <HAL_TIM_Base_Init+0x96>
9000bfea:	e793      	b.n	9000bf14 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bfec:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000bfee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bff2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000bff4:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000bff6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000bff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000bffc:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000bffe:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000c000:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c002:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000c004:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c006:	e7b1      	b.n	9000bf6c <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000c008:	2001      	movs	r0, #1
}
9000c00a:	4770      	bx	lr
9000c00c:	40010000 	.word	0x40010000
9000c010:	40000400 	.word	0x40000400
9000c014:	40010400 	.word	0x40010400
9000c018:	40014000 	.word	0x40014000
9000c01c:	40014400 	.word	0x40014400
9000c020:	40000c00 	.word	0x40000c00

9000c024 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000c024:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000c028:	2b01      	cmp	r3, #1
9000c02a:	d141      	bne.n	9000c0b0 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000c02c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000c02e:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c030:	4b24      	ldr	r3, [pc, #144]	; (9000c0c4 <HAL_TIM_Base_Start_IT+0xa0>)
9000c032:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000c036:	bf18      	it	ne
9000c038:	429a      	cmpne	r2, r3
{
9000c03a:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c03c:	bf0c      	ite	eq
9000c03e:	2301      	moveq	r3, #1
9000c040:	2300      	movne	r3, #0
9000c042:	4d21      	ldr	r5, [pc, #132]	; (9000c0c8 <HAL_TIM_Base_Start_IT+0xa4>)
9000c044:	4c21      	ldr	r4, [pc, #132]	; (9000c0cc <HAL_TIM_Base_Start_IT+0xa8>)
9000c046:	42aa      	cmp	r2, r5
9000c048:	bf08      	it	eq
9000c04a:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000c04e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000c052:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c054:	42a2      	cmp	r2, r4
9000c056:	bf08      	it	eq
9000c058:	f043 0301 	orreq.w	r3, r3, #1
9000c05c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000c060:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c064:	481a      	ldr	r0, [pc, #104]	; (9000c0d0 <HAL_TIM_Base_Start_IT+0xac>)
9000c066:	42a2      	cmp	r2, r4
9000c068:	bf08      	it	eq
9000c06a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000c06e:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c070:	4282      	cmp	r2, r0
9000c072:	bf08      	it	eq
9000c074:	f043 0301 	orreq.w	r3, r3, #1
9000c078:	4916      	ldr	r1, [pc, #88]	; (9000c0d4 <HAL_TIM_Base_Start_IT+0xb0>)
9000c07a:	428a      	cmp	r2, r1
9000c07c:	bf08      	it	eq
9000c07e:	f043 0301 	orreq.w	r3, r3, #1
9000c082:	b933      	cbnz	r3, 9000c092 <HAL_TIM_Base_Start_IT+0x6e>
9000c084:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000c088:	1a10      	subs	r0, r2, r0
9000c08a:	fab0 f080 	clz	r0, r0
9000c08e:	0940      	lsrs	r0, r0, #5
9000c090:	b198      	cbz	r0, 9000c0ba <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000c092:	6891      	ldr	r1, [r2, #8]
9000c094:	4b10      	ldr	r3, [pc, #64]	; (9000c0d8 <HAL_TIM_Base_Start_IT+0xb4>)
9000c096:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000c098:	2b06      	cmp	r3, #6
9000c09a:	d00b      	beq.n	9000c0b4 <HAL_TIM_Base_Start_IT+0x90>
9000c09c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000c0a0:	d008      	beq.n	9000c0b4 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000c0a2:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000c0a4:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000c0a6:	f043 0301 	orr.w	r3, r3, #1
9000c0aa:	6013      	str	r3, [r2, #0]
}
9000c0ac:	bc30      	pop	{r4, r5}
9000c0ae:	4770      	bx	lr
    return HAL_ERROR;
9000c0b0:	2001      	movs	r0, #1
}
9000c0b2:	4770      	bx	lr
  return HAL_OK;
9000c0b4:	2000      	movs	r0, #0
}
9000c0b6:	bc30      	pop	{r4, r5}
9000c0b8:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000c0ba:	6813      	ldr	r3, [r2, #0]
9000c0bc:	f043 0301 	orr.w	r3, r3, #1
9000c0c0:	6013      	str	r3, [r2, #0]
9000c0c2:	e7f3      	b.n	9000c0ac <HAL_TIM_Base_Start_IT+0x88>
9000c0c4:	40010000 	.word	0x40010000
9000c0c8:	40000400 	.word	0x40000400
9000c0cc:	40000800 	.word	0x40000800
9000c0d0:	40010400 	.word	0x40010400
9000c0d4:	40001800 	.word	0x40001800
9000c0d8:	00010007 	.word	0x00010007

9000c0dc <HAL_TIM_OC_Init>:
  if (htim == NULL)
9000c0dc:	2800      	cmp	r0, #0
9000c0de:	f000 80a5 	beq.w	9000c22c <HAL_TIM_OC_Init+0x150>
{
9000c0e2:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000c0e4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000c0e8:	4604      	mov	r4, r0
9000c0ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000c0ee:	2b00      	cmp	r3, #0
9000c0f0:	d076      	beq.n	9000c1e0 <HAL_TIM_OC_Init+0x104>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
9000c0f2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000c0f4:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c0f6:	494e      	ldr	r1, [pc, #312]	; (9000c230 <HAL_TIM_OC_Init+0x154>)
9000c0f8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000c0fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c100:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000c104:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c106:	fab1 f181 	clz	r1, r1
9000c10a:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000c10e:	d027      	beq.n	9000c160 <HAL_TIM_OC_Init+0x84>
9000c110:	bb31      	cbnz	r1, 9000c160 <HAL_TIM_OC_Init+0x84>
9000c112:	4848      	ldr	r0, [pc, #288]	; (9000c234 <HAL_TIM_OC_Init+0x158>)
9000c114:	4d48      	ldr	r5, [pc, #288]	; (9000c238 <HAL_TIM_OC_Init+0x15c>)
9000c116:	4282      	cmp	r2, r0
9000c118:	d067      	beq.n	9000c1ea <HAL_TIM_OC_Init+0x10e>
9000c11a:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000c11e:	4282      	cmp	r2, r0
9000c120:	d063      	beq.n	9000c1ea <HAL_TIM_OC_Init+0x10e>
9000c122:	1b55      	subs	r5, r2, r5
9000c124:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000c128:	fab5 f585 	clz	r5, r5
9000c12c:	4282      	cmp	r2, r0
9000c12e:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000c132:	d063      	beq.n	9000c1fc <HAL_TIM_OC_Init+0x120>
9000c134:	2d00      	cmp	r5, #0
9000c136:	d161      	bne.n	9000c1fc <HAL_TIM_OC_Init+0x120>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000c138:	4840      	ldr	r0, [pc, #256]	; (9000c23c <HAL_TIM_OC_Init+0x160>)
9000c13a:	4941      	ldr	r1, [pc, #260]	; (9000c240 <HAL_TIM_OC_Init+0x164>)
9000c13c:	428a      	cmp	r2, r1
9000c13e:	bf18      	it	ne
9000c140:	4282      	cmpne	r2, r0
9000c142:	d065      	beq.n	9000c210 <HAL_TIM_OC_Init+0x134>
9000c144:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000c148:	428a      	cmp	r2, r1
9000c14a:	d061      	beq.n	9000c210 <HAL_TIM_OC_Init+0x134>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000c14c:	69a0      	ldr	r0, [r4, #24]
9000c14e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c152:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000c154:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000c156:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
9000c158:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c15a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000c15c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c15e:	e023      	b.n	9000c1a8 <HAL_TIM_OC_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c160:	4d35      	ldr	r5, [pc, #212]	; (9000c238 <HAL_TIM_OC_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000c162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000c166:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c168:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000c16a:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c16c:	fab5 f585 	clz	r5, r5
9000c170:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000c172:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000c174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000c178:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000c17a:	69a0      	ldr	r0, [r4, #24]
9000c17c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000c180:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000c182:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c184:	68e3      	ldr	r3, [r4, #12]
9000c186:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000c188:	6863      	ldr	r3, [r4, #4]
9000c18a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c18c:	b951      	cbnz	r1, 9000c1a4 <HAL_TIM_OC_Init+0xc8>
9000c18e:	b94d      	cbnz	r5, 9000c1a4 <HAL_TIM_OC_Init+0xc8>
9000c190:	492a      	ldr	r1, [pc, #168]	; (9000c23c <HAL_TIM_OC_Init+0x160>)
9000c192:	4b2b      	ldr	r3, [pc, #172]	; (9000c240 <HAL_TIM_OC_Init+0x164>)
9000c194:	429a      	cmp	r2, r3
9000c196:	bf18      	it	ne
9000c198:	428a      	cmpne	r2, r1
9000c19a:	d003      	beq.n	9000c1a4 <HAL_TIM_OC_Init+0xc8>
9000c19c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000c1a0:	429a      	cmp	r2, r3
9000c1a2:	d101      	bne.n	9000c1a8 <HAL_TIM_OC_Init+0xcc>
    TIMx->RCR = Structure->RepetitionCounter;
9000c1a4:	6963      	ldr	r3, [r4, #20]
9000c1a6:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
9000c1a8:	2301      	movs	r3, #1
  return HAL_OK;
9000c1aa:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000c1ac:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000c1ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000c1b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000c1b6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000c1ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000c1be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000c1c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000c1c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000c1ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000c1ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000c1d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000c1d6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000c1da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000c1de:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000c1e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
9000c1e4:	f7f8 fa4c 	bl	90004680 <HAL_TIM_OC_MspInit>
9000c1e8:	e783      	b.n	9000c0f2 <HAL_TIM_OC_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c1ea:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000c1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000c1f0:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c1f2:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000c1f6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c1f8:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000c1fa:	e7ba      	b.n	9000c172 <HAL_TIM_OC_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000c1fc:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000c1fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000c202:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000c204:	480f      	ldr	r0, [pc, #60]	; (9000c244 <HAL_TIM_OC_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000c206:	4282      	cmp	r2, r0
9000c208:	d0b3      	beq.n	9000c172 <HAL_TIM_OC_Init+0x96>
9000c20a:	2d00      	cmp	r5, #0
9000c20c:	d1b1      	bne.n	9000c172 <HAL_TIM_OC_Init+0x96>
9000c20e:	e793      	b.n	9000c138 <HAL_TIM_OC_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000c210:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000c212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000c216:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000c218:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c21a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000c21c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000c220:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000c222:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000c224:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000c226:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000c228:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000c22a:	e7b1      	b.n	9000c190 <HAL_TIM_OC_Init+0xb4>
    return HAL_ERROR;
9000c22c:	2001      	movs	r0, #1
}
9000c22e:	4770      	bx	lr
9000c230:	40010000 	.word	0x40010000
9000c234:	40000400 	.word	0x40000400
9000c238:	40010400 	.word	0x40010400
9000c23c:	40014000 	.word	0x40014000
9000c240:	40014400 	.word	0x40014400
9000c244:	40000c00 	.word	0x40000c00

9000c248 <HAL_TIM_OC_Start_IT>:
{
9000c248:	4602      	mov	r2, r0
9000c24a:	2910      	cmp	r1, #16
9000c24c:	d80a      	bhi.n	9000c264 <HAL_TIM_OC_Start_IT+0x1c>
9000c24e:	e8df f001 	tbb	[pc, r1]
9000c252:	0928      	.short	0x0928
9000c254:	09820909 	.word	0x09820909
9000c258:	099c0909 	.word	0x099c0909
9000c25c:	098f0909 	.word	0x098f0909
9000c260:	0909      	.short	0x0909
9000c262:	96          	.byte	0x96
9000c263:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
9000c264:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
9000c268:	2b01      	cmp	r3, #1
9000c26a:	f040 8086 	bne.w	9000c37a <HAL_TIM_OC_Start_IT+0x132>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000c26e:	2910      	cmp	r1, #16
9000c270:	d80a      	bhi.n	9000c288 <HAL_TIM_OC_Start_IT+0x40>
9000c272:	e8df f001 	tbb	[pc, r1]
9000c276:	091a      	.short	0x091a
9000c278:	09740909 	.word	0x09740909
9000c27c:	098e0909 	.word	0x098e0909
9000c280:	09970909 	.word	0x09970909
9000c284:	0909      	.short	0x0909
9000c286:	a0          	.byte	0xa0
9000c287:	00          	.byte	0x00
9000c288:	2002      	movs	r0, #2
  switch (Channel)
9000c28a:	1f0b      	subs	r3, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000c28c:	f882 0043 	strb.w	r0, [r2, #67]	; 0x43
  switch (Channel)
9000c290:	2b08      	cmp	r3, #8
9000c292:	d872      	bhi.n	9000c37a <HAL_TIM_OC_Start_IT+0x132>
9000c294:	e8df f003 	tbb	[pc, r3]
9000c298:	71717166 	.word	0x71717166
9000c29c:	71717180 	.word	0x71717180
9000c2a0:	89          	.byte	0x89
9000c2a1:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
9000c2a2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
9000c2a6:	2b01      	cmp	r3, #1
9000c2a8:	d167      	bne.n	9000c37a <HAL_TIM_OC_Start_IT+0x132>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
9000c2aa:	6813      	ldr	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000c2ac:	2002      	movs	r0, #2
9000c2ae:	f882 003e 	strb.w	r0, [r2, #62]	; 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
9000c2b2:	68da      	ldr	r2, [r3, #12]
9000c2b4:	4302      	orrs	r2, r0
9000c2b6:	60da      	str	r2, [r3, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
9000c2b8:	2201      	movs	r2, #1
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
9000c2ba:	4846      	ldr	r0, [pc, #280]	; (9000c3d4 <HAL_TIM_OC_Start_IT+0x18c>)
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
9000c2bc:	408a      	lsls	r2, r1
{
9000c2be:	b410      	push	{r4}

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
9000c2c0:	6a1c      	ldr	r4, [r3, #32]
9000c2c2:	ea24 0402 	bic.w	r4, r4, r2
9000c2c6:	621c      	str	r4, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
9000c2c8:	4c43      	ldr	r4, [pc, #268]	; (9000c3d8 <HAL_TIM_OC_Start_IT+0x190>)

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
9000c2ca:	6a19      	ldr	r1, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
9000c2cc:	42a3      	cmp	r3, r4
9000c2ce:	bf18      	it	ne
9000c2d0:	4283      	cmpne	r3, r0
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
9000c2d2:	ea42 0201 	orr.w	r2, r2, r1
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
9000c2d6:	4941      	ldr	r1, [pc, #260]	; (9000c3dc <HAL_TIM_OC_Start_IT+0x194>)
9000c2d8:	bf0c      	ite	eq
9000c2da:	2001      	moveq	r0, #1
9000c2dc:	2000      	movne	r0, #0
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
9000c2de:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
9000c2e0:	428b      	cmp	r3, r1
9000c2e2:	bf08      	it	eq
9000c2e4:	f040 0001 	orreq.w	r0, r0, #1
9000c2e8:	4a3d      	ldr	r2, [pc, #244]	; (9000c3e0 <HAL_TIM_OC_Start_IT+0x198>)
9000c2ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000c2ee:	4293      	cmp	r3, r2
9000c2f0:	bf18      	it	ne
9000c2f2:	428b      	cmpne	r3, r1
9000c2f4:	d000      	beq.n	9000c2f8 <HAL_TIM_OC_Start_IT+0xb0>
9000c2f6:	b118      	cbz	r0, 9000c300 <HAL_TIM_OC_Start_IT+0xb8>
      __HAL_TIM_MOE_ENABLE(htim);
9000c2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
9000c2fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000c2fe:	645a      	str	r2, [r3, #68]	; 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000c300:	4a38      	ldr	r2, [pc, #224]	; (9000c3e4 <HAL_TIM_OC_Start_IT+0x19c>)
9000c302:	4c39      	ldr	r4, [pc, #228]	; (9000c3e8 <HAL_TIM_OC_Start_IT+0x1a0>)
9000c304:	4293      	cmp	r3, r2
9000c306:	bf18      	it	ne
9000c308:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
9000c30c:	4937      	ldr	r1, [pc, #220]	; (9000c3ec <HAL_TIM_OC_Start_IT+0x1a4>)
9000c30e:	bf0c      	ite	eq
9000c310:	2201      	moveq	r2, #1
9000c312:	2200      	movne	r2, #0
9000c314:	42a3      	cmp	r3, r4
9000c316:	bf08      	it	eq
9000c318:	f042 0201 	orreq.w	r2, r2, #1
9000c31c:	428b      	cmp	r3, r1
9000c31e:	bf08      	it	eq
9000c320:	f042 0201 	orreq.w	r2, r2, #1
9000c324:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
9000c328:	428b      	cmp	r3, r1
9000c32a:	bf08      	it	eq
9000c32c:	f042 0201 	orreq.w	r2, r2, #1
9000c330:	b90a      	cbnz	r2, 9000c336 <HAL_TIM_OC_Start_IT+0xee>
9000c332:	2800      	cmp	r0, #0
9000c334:	d048      	beq.n	9000c3c8 <HAL_TIM_OC_Start_IT+0x180>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000c336:	6899      	ldr	r1, [r3, #8]
9000c338:	4a2d      	ldr	r2, [pc, #180]	; (9000c3f0 <HAL_TIM_OC_Start_IT+0x1a8>)
9000c33a:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000c33c:	2a06      	cmp	r2, #6
9000c33e:	d03f      	beq.n	9000c3c0 <HAL_TIM_OC_Start_IT+0x178>
9000c340:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
9000c344:	d03c      	beq.n	9000c3c0 <HAL_TIM_OC_Start_IT+0x178>
        __HAL_TIM_ENABLE(htim);
9000c346:	681a      	ldr	r2, [r3, #0]
9000c348:	2000      	movs	r0, #0
9000c34a:	f042 0201 	orr.w	r2, r2, #1
9000c34e:	601a      	str	r2, [r3, #0]
}
9000c350:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c354:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
9000c356:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
9000c35a:	2b01      	cmp	r3, #1
9000c35c:	d10d      	bne.n	9000c37a <HAL_TIM_OC_Start_IT+0x132>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000c35e:	2302      	movs	r3, #2
9000c360:	f882 303f 	strb.w	r3, [r2, #63]	; 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
9000c364:	6813      	ldr	r3, [r2, #0]
9000c366:	68da      	ldr	r2, [r3, #12]
9000c368:	f042 0204 	orr.w	r2, r2, #4
9000c36c:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
9000c36e:	e7a3      	b.n	9000c2b8 <HAL_TIM_OC_Start_IT+0x70>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
9000c370:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000c374:	2b01      	cmp	r3, #1
9000c376:	f43f af7a 	beq.w	9000c26e <HAL_TIM_OC_Start_IT+0x26>
  switch (Channel)
9000c37a:	2001      	movs	r0, #1
}
9000c37c:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
9000c37e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
9000c382:	2b01      	cmp	r3, #1
9000c384:	f43f af73 	beq.w	9000c26e <HAL_TIM_OC_Start_IT+0x26>
9000c388:	e7f7      	b.n	9000c37a <HAL_TIM_OC_Start_IT+0x132>
9000c38a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000c38e:	2b01      	cmp	r3, #1
9000c390:	d1f3      	bne.n	9000c37a <HAL_TIM_OC_Start_IT+0x132>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000c392:	2302      	movs	r3, #2
9000c394:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
9000c398:	6813      	ldr	r3, [r2, #0]
9000c39a:	68da      	ldr	r2, [r3, #12]
9000c39c:	f042 0208 	orr.w	r2, r2, #8
9000c3a0:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
9000c3a2:	e789      	b.n	9000c2b8 <HAL_TIM_OC_Start_IT+0x70>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000c3a4:	2302      	movs	r3, #2
9000c3a6:	f882 3041 	strb.w	r3, [r2, #65]	; 0x41
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
9000c3aa:	6813      	ldr	r3, [r2, #0]
9000c3ac:	68da      	ldr	r2, [r3, #12]
9000c3ae:	f042 0210 	orr.w	r2, r2, #16
9000c3b2:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
9000c3b4:	e780      	b.n	9000c2b8 <HAL_TIM_OC_Start_IT+0x70>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000c3b6:	2302      	movs	r3, #2
      status = HAL_ERROR;
9000c3b8:	2001      	movs	r0, #1
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
9000c3ba:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
  switch (Channel)
9000c3be:	4770      	bx	lr
9000c3c0:	2000      	movs	r0, #0
}
9000c3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
9000c3c6:	4770      	bx	lr
      __HAL_TIM_ENABLE(htim);
9000c3c8:	681a      	ldr	r2, [r3, #0]
9000c3ca:	f042 0201 	orr.w	r2, r2, #1
9000c3ce:	601a      	str	r2, [r3, #0]
9000c3d0:	e7be      	b.n	9000c350 <HAL_TIM_OC_Start_IT+0x108>
9000c3d2:	bf00      	nop
9000c3d4:	40010000 	.word	0x40010000
9000c3d8:	40010400 	.word	0x40010400
9000c3dc:	40014000 	.word	0x40014000
9000c3e0:	40014800 	.word	0x40014800
9000c3e4:	40000400 	.word	0x40000400
9000c3e8:	40000800 	.word	0x40000800
9000c3ec:	40000c00 	.word	0x40000c00
9000c3f0:	00010007 	.word	0x00010007

9000c3f4 <HAL_TIM_IC_CaptureCallback>:
9000c3f4:	4770      	bx	lr
9000c3f6:	bf00      	nop

9000c3f8 <HAL_TIM_PWM_PulseFinishedCallback>:
9000c3f8:	4770      	bx	lr
9000c3fa:	bf00      	nop

9000c3fc <HAL_TIM_TriggerCallback>:
9000c3fc:	4770      	bx	lr
9000c3fe:	bf00      	nop

9000c400 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000c400:	6803      	ldr	r3, [r0, #0]
9000c402:	691a      	ldr	r2, [r3, #16]
9000c404:	0791      	lsls	r1, r2, #30
{
9000c406:	b510      	push	{r4, lr}
9000c408:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000c40a:	d502      	bpl.n	9000c412 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000c40c:	68da      	ldr	r2, [r3, #12]
9000c40e:	0792      	lsls	r2, r2, #30
9000c410:	d468      	bmi.n	9000c4e4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000c412:	691a      	ldr	r2, [r3, #16]
9000c414:	0752      	lsls	r2, r2, #29
9000c416:	d502      	bpl.n	9000c41e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000c418:	68da      	ldr	r2, [r3, #12]
9000c41a:	0750      	lsls	r0, r2, #29
9000c41c:	d44f      	bmi.n	9000c4be <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000c41e:	691a      	ldr	r2, [r3, #16]
9000c420:	0711      	lsls	r1, r2, #28
9000c422:	d502      	bpl.n	9000c42a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000c424:	68da      	ldr	r2, [r3, #12]
9000c426:	0712      	lsls	r2, r2, #28
9000c428:	d437      	bmi.n	9000c49a <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000c42a:	691a      	ldr	r2, [r3, #16]
9000c42c:	06d0      	lsls	r0, r2, #27
9000c42e:	d502      	bpl.n	9000c436 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000c430:	68da      	ldr	r2, [r3, #12]
9000c432:	06d1      	lsls	r1, r2, #27
9000c434:	d41e      	bmi.n	9000c474 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000c436:	691a      	ldr	r2, [r3, #16]
9000c438:	07d2      	lsls	r2, r2, #31
9000c43a:	d502      	bpl.n	9000c442 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000c43c:	68da      	ldr	r2, [r3, #12]
9000c43e:	07d0      	lsls	r0, r2, #31
9000c440:	d469      	bmi.n	9000c516 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000c442:	691a      	ldr	r2, [r3, #16]
9000c444:	0611      	lsls	r1, r2, #24
9000c446:	d502      	bpl.n	9000c44e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000c448:	68da      	ldr	r2, [r3, #12]
9000c44a:	0612      	lsls	r2, r2, #24
9000c44c:	d46b      	bmi.n	9000c526 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000c44e:	691a      	ldr	r2, [r3, #16]
9000c450:	05d0      	lsls	r0, r2, #23
9000c452:	d502      	bpl.n	9000c45a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000c454:	68da      	ldr	r2, [r3, #12]
9000c456:	0611      	lsls	r1, r2, #24
9000c458:	d46d      	bmi.n	9000c536 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000c45a:	691a      	ldr	r2, [r3, #16]
9000c45c:	0652      	lsls	r2, r2, #25
9000c45e:	d502      	bpl.n	9000c466 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000c460:	68da      	ldr	r2, [r3, #12]
9000c462:	0650      	lsls	r0, r2, #25
9000c464:	d46f      	bmi.n	9000c546 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000c466:	691a      	ldr	r2, [r3, #16]
9000c468:	0691      	lsls	r1, r2, #26
9000c46a:	d502      	bpl.n	9000c472 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000c46c:	68da      	ldr	r2, [r3, #12]
9000c46e:	0692      	lsls	r2, r2, #26
9000c470:	d449      	bmi.n	9000c506 <HAL_TIM_IRQHandler+0x106>
}
9000c472:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000c474:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000c478:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000c47a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000c47c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000c47e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000c480:	69db      	ldr	r3, [r3, #28]
9000c482:	f413 7f40 	tst.w	r3, #768	; 0x300
9000c486:	d16f      	bne.n	9000c568 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000c488:	f7f8 f930 	bl	900046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000c48c:	4620      	mov	r0, r4
9000c48e:	f7ff ffb3 	bl	9000c3f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c492:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000c494:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c496:	7722      	strb	r2, [r4, #28]
9000c498:	e7cd      	b.n	9000c436 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000c49a:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000c49e:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000c4a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000c4a2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000c4a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000c4a6:	69db      	ldr	r3, [r3, #28]
9000c4a8:	079b      	lsls	r3, r3, #30
9000c4aa:	d15a      	bne.n	9000c562 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000c4ac:	f7f8 f91e 	bl	900046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000c4b0:	4620      	mov	r0, r4
9000c4b2:	f7ff ffa1 	bl	9000c3f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c4b6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000c4b8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c4ba:	7722      	strb	r2, [r4, #28]
9000c4bc:	e7b5      	b.n	9000c42a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000c4be:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000c4c2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000c4c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000c4c6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000c4c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000c4ca:	699b      	ldr	r3, [r3, #24]
9000c4cc:	f413 7f40 	tst.w	r3, #768	; 0x300
9000c4d0:	d144      	bne.n	9000c55c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000c4d2:	f7f8 f90b 	bl	900046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000c4d6:	4620      	mov	r0, r4
9000c4d8:	f7ff ff8e 	bl	9000c3f8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c4dc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000c4de:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c4e0:	7722      	strb	r2, [r4, #28]
9000c4e2:	e79c      	b.n	9000c41e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000c4e4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000c4e8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000c4ea:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000c4ec:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000c4ee:	699b      	ldr	r3, [r3, #24]
9000c4f0:	0799      	lsls	r1, r3, #30
9000c4f2:	d130      	bne.n	9000c556 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000c4f4:	f7f8 f8fa 	bl	900046ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000c4f8:	4620      	mov	r0, r4
9000c4fa:	f7ff ff7d 	bl	9000c3f8 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c4fe:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000c500:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000c502:	7722      	strb	r2, [r4, #28]
9000c504:	e785      	b.n	9000c412 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000c506:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000c50a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000c50c:	611a      	str	r2, [r3, #16]
}
9000c50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000c512:	f000 b935 	b.w	9000c780 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000c516:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000c51a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000c51c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000c51e:	f7f8 f8ff 	bl	90004720 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000c522:	6823      	ldr	r3, [r4, #0]
9000c524:	e78d      	b.n	9000c442 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000c526:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000c52a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000c52c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000c52e:	f000 f929 	bl	9000c784 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000c532:	6823      	ldr	r3, [r4, #0]
9000c534:	e78b      	b.n	9000c44e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000c536:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000c53a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000c53c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000c53e:	f000 f923 	bl	9000c788 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000c542:	6823      	ldr	r3, [r4, #0]
9000c544:	e789      	b.n	9000c45a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000c546:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000c54a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000c54c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000c54e:	f7ff ff55 	bl	9000c3fc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000c552:	6823      	ldr	r3, [r4, #0]
9000c554:	e787      	b.n	9000c466 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000c556:	f7ff ff4d 	bl	9000c3f4 <HAL_TIM_IC_CaptureCallback>
9000c55a:	e7d0      	b.n	9000c4fe <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000c55c:	f7ff ff4a 	bl	9000c3f4 <HAL_TIM_IC_CaptureCallback>
9000c560:	e7bc      	b.n	9000c4dc <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000c562:	f7ff ff47 	bl	9000c3f4 <HAL_TIM_IC_CaptureCallback>
9000c566:	e7a6      	b.n	9000c4b6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000c568:	f7ff ff44 	bl	9000c3f4 <HAL_TIM_IC_CaptureCallback>
9000c56c:	e791      	b.n	9000c492 <HAL_TIM_IRQHandler+0x92>
9000c56e:	bf00      	nop

9000c570 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
9000c570:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
9000c572:	4a1c      	ldr	r2, [pc, #112]	; (9000c5e4 <TIM_OC2_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
9000c574:	f023 0310 	bic.w	r3, r3, #16
{
9000c578:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
9000c57a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
9000c57c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
9000c57e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
9000c580:	6985      	ldr	r5, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
9000c582:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
9000c586:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
9000c588:	680d      	ldr	r5, [r1, #0]
9000c58a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
9000c58e:	688d      	ldr	r5, [r1, #8]
9000c590:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
9000c594:	4d14      	ldr	r5, [pc, #80]	; (9000c5e8 <TIM_OC2_SetConfig+0x78>)
9000c596:	42a8      	cmp	r0, r5
9000c598:	d00e      	beq.n	9000c5b8 <TIM_OC2_SetConfig+0x48>
9000c59a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000c59e:	42a8      	cmp	r0, r5
9000c5a0:	d00a      	beq.n	9000c5b8 <TIM_OC2_SetConfig+0x48>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000c5a2:	4e12      	ldr	r6, [pc, #72]	; (9000c5ec <TIM_OC2_SetConfig+0x7c>)
9000c5a4:	4d12      	ldr	r5, [pc, #72]	; (9000c5f0 <TIM_OC2_SetConfig+0x80>)
9000c5a6:	42a8      	cmp	r0, r5
9000c5a8:	bf18      	it	ne
9000c5aa:	42b0      	cmpne	r0, r6
9000c5ac:	d00b      	beq.n	9000c5c6 <TIM_OC2_SetConfig+0x56>
9000c5ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
9000c5b2:	42a8      	cmp	r0, r5
9000c5b4:	d10f      	bne.n	9000c5d6 <TIM_OC2_SetConfig+0x66>
9000c5b6:	e006      	b.n	9000c5c6 <TIM_OC2_SetConfig+0x56>
    tmpccer &= ~TIM_CCER_CC2NP;
9000c5b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
9000c5bc:	68cd      	ldr	r5, [r1, #12]
9000c5be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
9000c5c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
9000c5c6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
9000c5ca:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
9000c5ce:	ea46 0c05 	orr.w	ip, r6, r5
9000c5d2:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
9000c5d6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
9000c5d8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
9000c5da:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
9000c5dc:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
9000c5de:	6203      	str	r3, [r0, #32]
}
9000c5e0:	bc70      	pop	{r4, r5, r6}
9000c5e2:	4770      	bx	lr
9000c5e4:	feff8cff 	.word	0xfeff8cff
9000c5e8:	40010000 	.word	0x40010000
9000c5ec:	40014000 	.word	0x40014000
9000c5f0:	40014400 	.word	0x40014400

9000c5f4 <HAL_TIM_OC_ConfigChannel>:
{
9000c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
9000c5f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
9000c5fa:	2b01      	cmp	r3, #1
9000c5fc:	f000 80b3 	beq.w	9000c766 <HAL_TIM_OC_ConfigChannel+0x172>
9000c600:	4604      	mov	r4, r0
  switch (Channel)
9000c602:	2a14      	cmp	r2, #20
9000c604:	d80c      	bhi.n	9000c620 <HAL_TIM_OC_ConfigChannel+0x2c>
9000c606:	e8df f002 	tbb	[pc, r2]
9000c60a:	0b40      	.short	0x0b40
9000c60c:	0b450b0b 	.word	0x0b450b0b
9000c610:	0b4a0b0b 	.word	0x0b4a0b0b
9000c614:	0b4f0b0b 	.word	0x0b4f0b0b
9000c618:	0b7f0b0b 	.word	0x0b7f0b0b
9000c61c:	0b0b      	.short	0x0b0b
9000c61e:	10          	.byte	0x10
9000c61f:	00          	.byte	0x00
9000c620:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
9000c622:	2300      	movs	r3, #0
9000c624:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
9000c628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
9000c62a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
9000c62c:	484f      	ldr	r0, [pc, #316]	; (9000c76c <HAL_TIM_OC_ConfigChannel+0x178>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
9000c62e:	6a1a      	ldr	r2, [r3, #32]
9000c630:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
9000c634:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
9000c636:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
9000c638:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
9000c63a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
9000c63c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
9000c640:	4030      	ands	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
9000c642:	680e      	ldr	r6, [r1, #0]
9000c644:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
9000c648:	688e      	ldr	r6, [r1, #8]
9000c64a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000c64e:	4e48      	ldr	r6, [pc, #288]	; (9000c770 <HAL_TIM_OC_ConfigChannel+0x17c>)
9000c650:	42b3      	cmp	r3, r6
9000c652:	d00e      	beq.n	9000c672 <HAL_TIM_OC_ConfigChannel+0x7e>
9000c654:	f506 6680 	add.w	r6, r6, #1024	; 0x400
9000c658:	42b3      	cmp	r3, r6
9000c65a:	d00a      	beq.n	9000c672 <HAL_TIM_OC_ConfigChannel+0x7e>
9000c65c:	4f45      	ldr	r7, [pc, #276]	; (9000c774 <HAL_TIM_OC_ConfigChannel+0x180>)
9000c65e:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
9000c662:	42b3      	cmp	r3, r6
9000c664:	bf18      	it	ne
9000c666:	42bb      	cmpne	r3, r7
9000c668:	d003      	beq.n	9000c672 <HAL_TIM_OC_ConfigChannel+0x7e>
9000c66a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
9000c66e:	42b3      	cmp	r3, r6
9000c670:	d104      	bne.n	9000c67c <HAL_TIM_OC_ConfigChannel+0x88>
    tmpcr2 &= ~TIM_CR2_OIS6;
9000c672:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
9000c676:	694e      	ldr	r6, [r1, #20]
9000c678:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
  TIMx->CCR6 = OC_Config->Pulse;
9000c67c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
9000c67e:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
9000c680:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
9000c682:	2000      	movs	r0, #0
  TIMx->CCR6 = OC_Config->Pulse;
9000c684:	65d9      	str	r1, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
9000c686:	621a      	str	r2, [r3, #32]
}
9000c688:	e7cb      	b.n	9000c622 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
9000c68a:	6800      	ldr	r0, [r0, #0]
9000c68c:	f7ff fb92 	bl	9000bdb4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
9000c690:	2000      	movs	r0, #0
      break;
9000c692:	e7c6      	b.n	9000c622 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
9000c694:	6800      	ldr	r0, [r0, #0]
9000c696:	f7ff ff6b 	bl	9000c570 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
9000c69a:	2000      	movs	r0, #0
      break;
9000c69c:	e7c1      	b.n	9000c622 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
9000c69e:	6800      	ldr	r0, [r0, #0]
9000c6a0:	f7ff fbc6 	bl	9000be30 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
9000c6a4:	2000      	movs	r0, #0
      break;
9000c6a6:	e7bc      	b.n	9000c622 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
9000c6a8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
9000c6aa:	4833      	ldr	r0, [pc, #204]	; (9000c778 <HAL_TIM_OC_ConfigChannel+0x184>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
9000c6ac:	6a1a      	ldr	r2, [r3, #32]
9000c6ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
9000c6b2:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
9000c6b4:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
9000c6b6:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
9000c6b8:	69de      	ldr	r6, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
9000c6ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
9000c6be:	4030      	ands	r0, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
9000c6c0:	680e      	ldr	r6, [r1, #0]
9000c6c2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
9000c6c6:	688e      	ldr	r6, [r1, #8]
9000c6c8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000c6cc:	4e28      	ldr	r6, [pc, #160]	; (9000c770 <HAL_TIM_OC_ConfigChannel+0x17c>)
9000c6ce:	42b3      	cmp	r3, r6
9000c6d0:	d00e      	beq.n	9000c6f0 <HAL_TIM_OC_ConfigChannel+0xfc>
9000c6d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
9000c6d6:	42b3      	cmp	r3, r6
9000c6d8:	d00a      	beq.n	9000c6f0 <HAL_TIM_OC_ConfigChannel+0xfc>
9000c6da:	4f26      	ldr	r7, [pc, #152]	; (9000c774 <HAL_TIM_OC_ConfigChannel+0x180>)
9000c6dc:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
9000c6e0:	42b3      	cmp	r3, r6
9000c6e2:	bf18      	it	ne
9000c6e4:	42bb      	cmpne	r3, r7
9000c6e6:	d003      	beq.n	9000c6f0 <HAL_TIM_OC_ConfigChannel+0xfc>
9000c6e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
9000c6ec:	42b3      	cmp	r3, r6
9000c6ee:	d104      	bne.n	9000c6fa <HAL_TIM_OC_ConfigChannel+0x106>
    tmpcr2 &= ~TIM_CR2_OIS4;
9000c6f0:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
9000c6f4:	694e      	ldr	r6, [r1, #20]
9000c6f6:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
9000c6fa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
9000c6fc:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
9000c6fe:	61d8      	str	r0, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
9000c700:	2000      	movs	r0, #0
  TIMx->CCR4 = OC_Config->Pulse;
9000c702:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
9000c704:	621a      	str	r2, [r3, #32]
}
9000c706:	e78c      	b.n	9000c622 <HAL_TIM_OC_ConfigChannel+0x2e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
9000c708:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
9000c70a:	481c      	ldr	r0, [pc, #112]	; (9000c77c <HAL_TIM_OC_ConfigChannel+0x188>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
9000c70c:	6a1a      	ldr	r2, [r3, #32]
9000c70e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000c712:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
9000c714:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
9000c716:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
9000c718:	6d5e      	ldr	r6, [r3, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
9000c71a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
9000c71e:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
9000c720:	680e      	ldr	r6, [r1, #0]
9000c722:	4330      	orrs	r0, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
9000c724:	688e      	ldr	r6, [r1, #8]
9000c726:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
9000c72a:	4e11      	ldr	r6, [pc, #68]	; (9000c770 <HAL_TIM_OC_ConfigChannel+0x17c>)
9000c72c:	42b3      	cmp	r3, r6
9000c72e:	d00e      	beq.n	9000c74e <HAL_TIM_OC_ConfigChannel+0x15a>
9000c730:	f506 6680 	add.w	r6, r6, #1024	; 0x400
9000c734:	42b3      	cmp	r3, r6
9000c736:	d00a      	beq.n	9000c74e <HAL_TIM_OC_ConfigChannel+0x15a>
9000c738:	4f0e      	ldr	r7, [pc, #56]	; (9000c774 <HAL_TIM_OC_ConfigChannel+0x180>)
9000c73a:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
9000c73e:	42b3      	cmp	r3, r6
9000c740:	bf18      	it	ne
9000c742:	42bb      	cmpne	r3, r7
9000c744:	d003      	beq.n	9000c74e <HAL_TIM_OC_ConfigChannel+0x15a>
9000c746:	f506 6680 	add.w	r6, r6, #1024	; 0x400
9000c74a:	42b3      	cmp	r3, r6
9000c74c:	d104      	bne.n	9000c758 <HAL_TIM_OC_ConfigChannel+0x164>
    tmpcr2 &= ~TIM_CR2_OIS5;
9000c74e:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
9000c752:	694e      	ldr	r6, [r1, #20]
9000c754:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
9000c758:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
9000c75a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
9000c75c:	6558      	str	r0, [r3, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
9000c75e:	2000      	movs	r0, #0
  TIMx->CCR5 = OC_Config->Pulse;
9000c760:	6599      	str	r1, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
9000c762:	621a      	str	r2, [r3, #32]
}
9000c764:	e75d      	b.n	9000c622 <HAL_TIM_OC_ConfigChannel+0x2e>
  __HAL_LOCK(htim);
9000c766:	2002      	movs	r0, #2
}
9000c768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000c76a:	bf00      	nop
9000c76c:	feff8fff 	.word	0xfeff8fff
9000c770:	40010000 	.word	0x40010000
9000c774:	40014000 	.word	0x40014000
9000c778:	feff8cff 	.word	0xfeff8cff
9000c77c:	fffeff8f 	.word	0xfffeff8f

9000c780 <HAL_TIMEx_CommutCallback>:
9000c780:	4770      	bx	lr
9000c782:	bf00      	nop

9000c784 <HAL_TIMEx_BreakCallback>:
9000c784:	4770      	bx	lr
9000c786:	bf00      	nop

9000c788 <HAL_TIMEx_Break2Callback>:
9000c788:	4770      	bx	lr
9000c78a:	bf00      	nop

9000c78c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000c78c:	680b      	ldr	r3, [r1, #0]
{
9000c78e:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
9000c790:	b9d3      	cbnz	r3, 9000c7c8 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000c792:	6804      	ldr	r4, [r0, #0]
9000c794:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9000c798:	684a      	ldr	r2, [r1, #4]
9000c79a:	4023      	ands	r3, r4
9000c79c:	4313      	orrs	r3, r2
9000c79e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000c7a2:	4323      	orrs	r3, r4
9000c7a4:	4313      	orrs	r3, r2
9000c7a6:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9000c7aa:	4323      	orrs	r3, r4
9000c7ac:	4313      	orrs	r3, r2
9000c7ae:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
9000c7b2:	4323      	orrs	r3, r4
9000c7b4:	4313      	orrs	r3, r2
9000c7b6:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9000c7ba:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
9000c7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000c7c0:	4313      	orrs	r3, r2
9000c7c2:	6003      	str	r3, [r0, #0]
}
9000c7c4:	2000      	movs	r0, #0
9000c7c6:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000c7c8:	6802      	ldr	r2, [r0, #0]
9000c7ca:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
9000c7ce:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
9000c7d2:	4322      	orrs	r2, r4
9000c7d4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
9000c7d6:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000c7d8:	4b0a      	ldr	r3, [pc, #40]	; (9000c804 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
9000c7da:	4322      	orrs	r2, r4
9000c7dc:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000c7de:	6842      	ldr	r2, [r0, #4]
9000c7e0:	4013      	ands	r3, r2
9000c7e2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
9000c7e6:	4323      	orrs	r3, r4
9000c7e8:	4313      	orrs	r3, r2
9000c7ea:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
9000c7ee:	4323      	orrs	r3, r4
9000c7f0:	4313      	orrs	r3, r2
9000c7f2:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
9000c7f6:	4323      	orrs	r3, r4
}
9000c7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
9000c7fc:	4313      	orrs	r3, r2
9000c7fe:	6043      	str	r3, [r0, #4]
}
9000c800:	2000      	movs	r0, #0
9000c802:	4770      	bx	lr
9000c804:	ffff8000 	.word	0xffff8000

9000c808 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
9000c808:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
9000c80a:	bb0a      	cbnz	r2, 9000c850 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c80c:	6883      	ldr	r3, [r0, #8]
9000c80e:	e9d1 2400 	ldrd	r2, r4, [r1]
9000c812:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000c816:	3c01      	subs	r4, #1
9000c818:	3a01      	subs	r2, #1
9000c81a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000c81e:	4313      	orrs	r3, r2
9000c820:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
9000c824:	3c01      	subs	r4, #1
9000c826:	3a01      	subs	r2, #1
9000c828:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000c82c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
9000c830:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000c834:	698a      	ldr	r2, [r1, #24]
9000c836:	3d01      	subs	r5, #1
9000c838:	1e61      	subs	r1, r4, #1
9000c83a:	3a01      	subs	r2, #1
9000c83c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
9000c840:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
9000c844:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9000c848:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c84a:	6083      	str	r3, [r0, #8]
}
9000c84c:	2000      	movs	r0, #0
9000c84e:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c850:	6885      	ldr	r5, [r0, #8]
9000c852:	68ca      	ldr	r2, [r1, #12]
9000c854:	4b12      	ldr	r3, [pc, #72]	; (9000c8a0 <FMC_SDRAM_Timing_Init+0x98>)
9000c856:	1e54      	subs	r4, r2, #1
9000c858:	694a      	ldr	r2, [r1, #20]
9000c85a:	402b      	ands	r3, r5
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000c85c:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c85e:	3a01      	subs	r2, #1
9000c860:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000c864:	f105 3cff 	add.w	ip, r5, #4294967295
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c868:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000c86c:	e9d1 2400 	ldrd	r2, r4, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9000c870:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000c872:	68c3      	ldr	r3, [r0, #12]
9000c874:	3c01      	subs	r4, #1
9000c876:	3a01      	subs	r2, #1
9000c878:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9000c87c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9000c880:	690c      	ldr	r4, [r1, #16]
9000c882:	4313      	orrs	r3, r2
9000c884:	698a      	ldr	r2, [r1, #24]
9000c886:	1e61      	subs	r1, r4, #1
9000c888:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
9000c88c:	3a01      	subs	r2, #1
9000c88e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000c892:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
}
9000c896:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9000c898:	60c3      	str	r3, [r0, #12]
}
9000c89a:	2000      	movs	r0, #0
9000c89c:	4770      	bx	lr
9000c89e:	bf00      	nop
9000c8a0:	ff0f0fff 	.word	0xff0f0fff

9000c8a4 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
9000c8a4:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
9000c8a6:	2200      	movs	r2, #0
{
9000c8a8:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9000c8aa:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000c8ae:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
9000c8b2:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
9000c8b6:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9000c8ba:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9000c8bc:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
9000c8c0:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
9000c8c2:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
9000c8c4:	619a      	str	r2, [r3, #24]
}
9000c8c6:	bc30      	pop	{r4, r5}
9000c8c8:	4770      	bx	lr
9000c8ca:	bf00      	nop

9000c8cc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
9000c8cc:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000c8ce:	e9d1 3400 	ldrd	r3, r4, [r1]
{
9000c8d2:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000c8d4:	6900      	ldr	r0, [r0, #16]
9000c8d6:	4323      	orrs	r3, r4
9000c8d8:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
9000c8dc:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
9000c8e0:	4c05      	ldr	r4, [pc, #20]	; (9000c8f8 <FMC_SDRAM_SendCommand+0x2c>)
9000c8e2:	3901      	subs	r1, #1
9000c8e4:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
9000c8e6:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000c8e8:	4323      	orrs	r3, r4
}
9000c8ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
9000c8ee:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
9000c8f2:	6113      	str	r3, [r2, #16]
}
9000c8f4:	4770      	bx	lr
9000c8f6:	bf00      	nop
9000c8f8:	ffc00000 	.word	0xffc00000

9000c8fc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
9000c8fc:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000c8fe:	4b05      	ldr	r3, [pc, #20]	; (9000c914 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
9000c900:	2000      	movs	r0, #0
{
9000c902:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000c904:	6954      	ldr	r4, [r2, #20]
9000c906:	4023      	ands	r3, r4
}
9000c908:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
9000c90c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
9000c910:	6151      	str	r1, [r2, #20]
}
9000c912:	4770      	bx	lr
9000c914:	ffffc001 	.word	0xffffc001

9000c918 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
9000c918:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
9000c91a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000c91e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
9000c920:	f002 fcda 	bl	9000f2d8 <xTaskGetSchedulerState>
9000c924:	2801      	cmp	r0, #1
9000c926:	d100      	bne.n	9000c92a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
9000c928:	bd08      	pop	{r3, pc}
9000c92a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
9000c92e:	f000 bcd9 	b.w	9000d2e4 <xPortSysTickHandler>
9000c932:	bf00      	nop

9000c934 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
9000c934:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
9000c938:	b92b      	cbnz	r3, 9000c946 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
9000c93a:	4b06      	ldr	r3, [pc, #24]	; (9000c954 <osKernelInitialize+0x20>)
9000c93c:	6818      	ldr	r0, [r3, #0]
9000c93e:	b928      	cbnz	r0, 9000c94c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
9000c940:	2201      	movs	r2, #1
9000c942:	601a      	str	r2, [r3, #0]
      stat = osOK;
9000c944:	4770      	bx	lr
    stat = osErrorISR;
9000c946:	f06f 0005 	mvn.w	r0, #5
9000c94a:	4770      	bx	lr
    } else {
      stat = osError;
9000c94c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
9000c950:	4770      	bx	lr
9000c952:	bf00      	nop
9000c954:	2400c27c 	.word	0x2400c27c

9000c958 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
9000c958:	b510      	push	{r4, lr}
9000c95a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000c95e:	b974      	cbnz	r4, 9000c97e <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
9000c960:	4b08      	ldr	r3, [pc, #32]	; (9000c984 <osKernelStart+0x2c>)
9000c962:	681a      	ldr	r2, [r3, #0]
9000c964:	2a01      	cmp	r2, #1
9000c966:	d107      	bne.n	9000c978 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
9000c968:	4907      	ldr	r1, [pc, #28]	; (9000c988 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
9000c96a:	2202      	movs	r2, #2
9000c96c:	77cc      	strb	r4, [r1, #31]
9000c96e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
9000c970:	f002 fa40 	bl	9000edf4 <vTaskStartScheduler>
      stat = osOK;
9000c974:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
9000c976:	bd10      	pop	{r4, pc}
      stat = osError;
9000c978:	f04f 30ff 	mov.w	r0, #4294967295
}
9000c97c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000c97e:	f06f 0005 	mvn.w	r0, #5
}
9000c982:	bd10      	pop	{r4, pc}
9000c984:	2400c27c 	.word	0x2400c27c
9000c988:	e000ed00 	.word	0xe000ed00

9000c98c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000c98c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
9000c98e:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
9000c990:	b087      	sub	sp, #28
9000c992:	4614      	mov	r4, r2
  hTask = NULL;
9000c994:	9505      	str	r5, [sp, #20]
9000c996:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
9000c99a:	bb5a      	cbnz	r2, 9000c9f4 <osThreadNew+0x68>
9000c99c:	4606      	mov	r6, r0
9000c99e:	b348      	cbz	r0, 9000c9f4 <osThreadNew+0x68>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
9000c9a0:	b1e4      	cbz	r4, 9000c9dc <osThreadNew+0x50>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
9000c9a2:	69a7      	ldr	r7, [r4, #24]
9000c9a4:	bb4f      	cbnz	r7, 9000c9fa <osThreadNew+0x6e>
9000c9a6:	2718      	movs	r7, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000c9a8:	6863      	ldr	r3, [r4, #4]
9000c9aa:	07db      	lsls	r3, r3, #31
9000c9ac:	d422      	bmi.n	9000c9f4 <osThreadNew+0x68>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
9000c9ae:	6963      	ldr	r3, [r4, #20]
9000c9b0:	b33b      	cbz	r3, 9000ca02 <osThreadNew+0x76>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
9000c9b2:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000c9b6:	68a0      	ldr	r0, [r4, #8]
      if (attr->name != NULL) {
9000c9b8:	6825      	ldr	r5, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
9000c9ba:	b338      	cbz	r0, 9000ca0c <osThreadNew+0x80>
9000c9bc:	68e2      	ldr	r2, [r4, #12]
9000c9be:	2a5f      	cmp	r2, #95	; 0x5f
9000c9c0:	d918      	bls.n	9000c9f4 <osThreadNew+0x68>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
9000c9c2:	6924      	ldr	r4, [r4, #16]
9000c9c4:	b1b3      	cbz	r3, 9000c9f4 <osThreadNew+0x68>
9000c9c6:	b1ac      	cbz	r4, 9000c9f4 <osThreadNew+0x68>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
9000c9c8:	460b      	mov	r3, r1
9000c9ca:	4662      	mov	r2, ip
9000c9cc:	4629      	mov	r1, r5
9000c9ce:	9700      	str	r7, [sp, #0]
9000c9d0:	e9cd 4001 	strd	r4, r0, [sp, #4]
9000c9d4:	4630      	mov	r0, r6
9000c9d6:	f002 f871 	bl	9000eabc <xTaskCreateStatic>
9000c9da:	e00c      	b.n	9000c9f6 <osThreadNew+0x6a>
9000c9dc:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
9000c9de:	2718      	movs	r7, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000c9e0:	460b      	mov	r3, r1
9000c9e2:	4621      	mov	r1, r4
9000c9e4:	ac05      	add	r4, sp, #20
9000c9e6:	4630      	mov	r0, r6
9000c9e8:	9700      	str	r7, [sp, #0]
9000c9ea:	9401      	str	r4, [sp, #4]
9000c9ec:	f002 f910 	bl	9000ec10 <xTaskCreate>
9000c9f0:	2801      	cmp	r0, #1
9000c9f2:	d009      	beq.n	9000ca08 <osThreadNew+0x7c>
        return (NULL);
9000c9f4:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
9000c9f6:	b007      	add	sp, #28
9000c9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
9000c9fa:	1e7a      	subs	r2, r7, #1
9000c9fc:	2a37      	cmp	r2, #55	; 0x37
9000c9fe:	d9d3      	bls.n	9000c9a8 <osThreadNew+0x1c>
9000ca00:	e7f8      	b.n	9000c9f4 <osThreadNew+0x68>
    stack = configMINIMAL_STACK_SIZE;
9000ca02:	f04f 0c80 	mov.w	ip, #128	; 0x80
9000ca06:	e7d6      	b.n	9000c9b6 <osThreadNew+0x2a>
  return ((osThreadId_t)hTask);
9000ca08:	9805      	ldr	r0, [sp, #20]
9000ca0a:	e7f4      	b.n	9000c9f6 <osThreadNew+0x6a>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
9000ca0c:	68e3      	ldr	r3, [r4, #12]
9000ca0e:	2b00      	cmp	r3, #0
9000ca10:	d1f1      	bne.n	9000c9f6 <osThreadNew+0x6a>
9000ca12:	6923      	ldr	r3, [r4, #16]
9000ca14:	2b00      	cmp	r3, #0
9000ca16:	d1ee      	bne.n	9000c9f6 <osThreadNew+0x6a>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
9000ca18:	fa1f f28c 	uxth.w	r2, ip
9000ca1c:	462c      	mov	r4, r5
9000ca1e:	e7df      	b.n	9000c9e0 <osThreadNew+0x54>

9000ca20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
9000ca20:	b510      	push	{r4, lr}
9000ca22:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
9000ca26:	b92c      	cbnz	r4, 9000ca34 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
9000ca28:	b900      	cbnz	r0, 9000ca2c <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
9000ca2a:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
9000ca2c:	f002 f98c 	bl	9000ed48 <vTaskDelay>
    stat = osOK;
9000ca30:	4620      	mov	r0, r4
}
9000ca32:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000ca34:	f06f 0005 	mvn.w	r0, #5
}
9000ca38:	bd10      	pop	{r4, pc}
9000ca3a:	bf00      	nop

9000ca3c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
9000ca3c:	b570      	push	{r4, r5, r6, lr}
9000ca3e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
9000ca42:	b9db      	cbnz	r3, 9000ca7c <osMutexNew+0x40>
    if (attr != NULL) {
9000ca44:	4604      	mov	r4, r0
9000ca46:	b1e0      	cbz	r0, 9000ca82 <osMutexNew+0x46>
      type = attr->attr_bits;
9000ca48:	6846      	ldr	r6, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
9000ca4a:	0733      	lsls	r3, r6, #28
9000ca4c:	d416      	bmi.n	9000ca7c <osMutexNew+0x40>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000ca4e:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
9000ca50:	f006 0601 	and.w	r6, r6, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000ca54:	68c3      	ldr	r3, [r0, #12]
9000ca56:	b181      	cbz	r1, 9000ca7a <osMutexNew+0x3e>
9000ca58:	2b4f      	cmp	r3, #79	; 0x4f
9000ca5a:	d90f      	bls.n	9000ca7c <osMutexNew+0x40>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
9000ca5c:	b31e      	cbz	r6, 9000caa6 <osMutexNew+0x6a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
9000ca5e:	2004      	movs	r0, #4
9000ca60:	f001 f852 	bl	9000db08 <xQueueCreateMutexStatic>
9000ca64:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
9000ca66:	b14d      	cbz	r5, 9000ca7c <osMutexNew+0x40>
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
9000ca68:	6821      	ldr	r1, [r4, #0]
9000ca6a:	4628      	mov	r0, r5
9000ca6c:	f001 fd82 	bl	9000e574 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
9000ca70:	b12e      	cbz	r6, 9000ca7e <osMutexNew+0x42>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
9000ca72:	f045 0501 	orr.w	r5, r5, #1
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
9000ca76:	4628      	mov	r0, r5
9000ca78:	bd70      	pop	{r4, r5, r6, pc}
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000ca7a:	b163      	cbz	r3, 9000ca96 <osMutexNew+0x5a>
  hMutex = NULL;
9000ca7c:	2500      	movs	r5, #0
}
9000ca7e:	4628      	mov	r0, r5
9000ca80:	bd70      	pop	{r4, r5, r6, pc}
              hMutex = xSemaphoreCreateMutex ();
9000ca82:	2001      	movs	r0, #1
9000ca84:	f001 f8b0 	bl	9000dbe8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000ca88:	4605      	mov	r5, r0
9000ca8a:	2800      	cmp	r0, #0
9000ca8c:	d0f6      	beq.n	9000ca7c <osMutexNew+0x40>
        vQueueAddToRegistry (hMutex, name);
9000ca8e:	4621      	mov	r1, r4
9000ca90:	f001 fd70 	bl	9000e574 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
9000ca94:	e7f3      	b.n	9000ca7e <osMutexNew+0x42>
            if (rmtx != 0U) {
9000ca96:	b15e      	cbz	r6, 9000cab0 <osMutexNew+0x74>
              hMutex = xSemaphoreCreateRecursiveMutex ();
9000ca98:	2004      	movs	r0, #4
9000ca9a:	f001 f8a5 	bl	9000dbe8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000ca9e:	4605      	mov	r5, r0
9000caa0:	2800      	cmp	r0, #0
9000caa2:	d1e1      	bne.n	9000ca68 <osMutexNew+0x2c>
9000caa4:	e7ea      	b.n	9000ca7c <osMutexNew+0x40>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
9000caa6:	2001      	movs	r0, #1
9000caa8:	f001 f82e 	bl	9000db08 <xQueueCreateMutexStatic>
9000caac:	4605      	mov	r5, r0
9000caae:	e7da      	b.n	9000ca66 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateMutex ();
9000cab0:	2001      	movs	r0, #1
9000cab2:	f001 f899 	bl	9000dbe8 <xQueueCreateMutex>
      if (hMutex != NULL) {
9000cab6:	4605      	mov	r5, r0
9000cab8:	e7d5      	b.n	9000ca66 <osMutexNew+0x2a>
9000caba:	bf00      	nop

9000cabc <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
9000cabc:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
9000cac0:	f000 0301 	and.w	r3, r0, #1
9000cac4:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
9000cac8:	b9a8      	cbnz	r0, 9000caf6 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000caca:	b1ba      	cbz	r2, 9000cafc <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000cacc:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
9000cace:	b510      	push	{r4, lr}
9000cad0:	460c      	mov	r4, r1
    if (rmtx != 0U) {
9000cad2:	b953      	cbnz	r3, 9000caea <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
9000cad4:	f001 fb00 	bl	9000e0d8 <xQueueSemaphoreTake>
9000cad8:	2801      	cmp	r0, #1
9000cada:	d00a      	beq.n	9000caf2 <osMutexAcquire+0x36>
          stat = osErrorResource;
9000cadc:	2c00      	cmp	r4, #0
9000cade:	bf14      	ite	ne
9000cae0:	f06f 0001 	mvnne.w	r0, #1
9000cae4:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
9000cae8:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
9000caea:	f001 fc7d 	bl	9000e3e8 <xQueueTakeMutexRecursive>
9000caee:	2801      	cmp	r0, #1
9000caf0:	d1f4      	bne.n	9000cadc <osMutexAcquire+0x20>
  stat = osOK;
9000caf2:	2000      	movs	r0, #0
}
9000caf4:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000caf6:	f06f 0005 	mvn.w	r0, #5
9000cafa:	4770      	bx	lr
    stat = osErrorParameter;
9000cafc:	f06f 0003 	mvn.w	r0, #3
}
9000cb00:	4770      	bx	lr
9000cb02:	bf00      	nop

9000cb04 <osMutexRelease>:
9000cb04:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
9000cb08:	b9ba      	cbnz	r2, 9000cb3a <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
9000cb0a:	b510      	push	{r4, lr}
9000cb0c:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
9000cb10:	b1b4      	cbz	r4, 9000cb40 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
9000cb12:	f000 0301 	and.w	r3, r0, #1
9000cb16:	b943      	cbnz	r3, 9000cb2a <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
9000cb18:	461a      	mov	r2, r3
9000cb1a:	4619      	mov	r1, r3
9000cb1c:	4620      	mov	r0, r4
9000cb1e:	f000 fe71 	bl	9000d804 <xQueueGenericSend>
9000cb22:	2801      	cmp	r0, #1
9000cb24:	d106      	bne.n	9000cb34 <osMutexRelease+0x30>
  stat = osOK;
9000cb26:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000cb28:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
9000cb2a:	4620      	mov	r0, r4
9000cb2c:	f001 f83c 	bl	9000dba8 <xQueueGiveMutexRecursive>
9000cb30:	2801      	cmp	r0, #1
9000cb32:	d0f8      	beq.n	9000cb26 <osMutexRelease+0x22>
        stat = osErrorResource;
9000cb34:	f06f 0002 	mvn.w	r0, #2
}
9000cb38:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
9000cb3a:	f06f 0005 	mvn.w	r0, #5
}
9000cb3e:	4770      	bx	lr
    stat = osErrorParameter;
9000cb40:	f06f 0003 	mvn.w	r0, #3
}
9000cb44:	bd10      	pop	{r4, pc}
9000cb46:	bf00      	nop

9000cb48 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
9000cb48:	b5f0      	push	{r4, r5, r6, r7, lr}
9000cb4a:	b083      	sub	sp, #12
9000cb4c:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
9000cb50:	b98e      	cbnz	r6, 9000cb76 <osSemaphoreNew+0x2e>
9000cb52:	4605      	mov	r5, r0
9000cb54:	b178      	cbz	r0, 9000cb76 <osSemaphoreNew+0x2e>
9000cb56:	4288      	cmp	r0, r1
9000cb58:	460f      	mov	r7, r1
9000cb5a:	d30c      	bcc.n	9000cb76 <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
9000cb5c:	4614      	mov	r4, r2
9000cb5e:	b182      	cbz	r2, 9000cb82 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
9000cb60:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
9000cb64:	b15a      	cbz	r2, 9000cb7e <osSemaphoreNew+0x36>
9000cb66:	2b4f      	cmp	r3, #79	; 0x4f
9000cb68:	d905      	bls.n	9000cb76 <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
9000cb6a:	2801      	cmp	r0, #1
9000cb6c:	d032      	beq.n	9000cbd4 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
9000cb6e:	f000 fda1 	bl	9000d6b4 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
9000cb72:	4605      	mov	r5, r0
9000cb74:	b978      	cbnz	r0, 9000cb96 <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
9000cb76:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
9000cb78:	4628      	mov	r0, r5
9000cb7a:	b003      	add	sp, #12
9000cb7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
9000cb7e:	2b00      	cmp	r3, #0
9000cb80:	d1f9      	bne.n	9000cb76 <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
9000cb82:	2d01      	cmp	r5, #1
9000cb84:	d00f      	beq.n	9000cba6 <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
9000cb86:	4628      	mov	r0, r5
9000cb88:	4639      	mov	r1, r7
9000cb8a:	f000 fdf5 	bl	9000d778 <xQueueCreateCountingSemaphore>
9000cb8e:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
9000cb90:	2d00      	cmp	r5, #0
9000cb92:	d0f0      	beq.n	9000cb76 <osSemaphoreNew+0x2e>
        if (attr != NULL) {
9000cb94:	b104      	cbz	r4, 9000cb98 <osSemaphoreNew+0x50>
          name = attr->name;
9000cb96:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
9000cb98:	4628      	mov	r0, r5
9000cb9a:	4621      	mov	r1, r4
9000cb9c:	f001 fcea 	bl	9000e574 <vQueueAddToRegistry>
}
9000cba0:	4628      	mov	r0, r5
9000cba2:	b003      	add	sp, #12
9000cba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
9000cba6:	4628      	mov	r0, r5
9000cba8:	2203      	movs	r2, #3
9000cbaa:	2100      	movs	r1, #0
9000cbac:	f000 fd40 	bl	9000d630 <xQueueGenericCreate>
9000cbb0:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
9000cbb2:	2d00      	cmp	r5, #0
9000cbb4:	d0df      	beq.n	9000cb76 <osSemaphoreNew+0x2e>
9000cbb6:	2f00      	cmp	r7, #0
9000cbb8:	d0ea      	beq.n	9000cb90 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000cbba:	2300      	movs	r3, #0
9000cbbc:	4628      	mov	r0, r5
9000cbbe:	461a      	mov	r2, r3
9000cbc0:	4619      	mov	r1, r3
9000cbc2:	f000 fe1f 	bl	9000d804 <xQueueGenericSend>
9000cbc6:	2801      	cmp	r0, #1
9000cbc8:	d0e4      	beq.n	9000cb94 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
9000cbca:	4628      	mov	r0, r5
            hSemaphore = NULL;
9000cbcc:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
9000cbce:	f001 fc8b 	bl	9000e4e8 <vQueueDelete>
      if (hSemaphore != NULL) {
9000cbd2:	e7d1      	b.n	9000cb78 <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
9000cbd4:	4613      	mov	r3, r2
9000cbd6:	2203      	movs	r2, #3
9000cbd8:	4631      	mov	r1, r6
9000cbda:	9200      	str	r2, [sp, #0]
9000cbdc:	4632      	mov	r2, r6
9000cbde:	f000 fcbb 	bl	9000d558 <xQueueGenericCreateStatic>
9000cbe2:	4605      	mov	r5, r0
9000cbe4:	e7e5      	b.n	9000cbb2 <osSemaphoreNew+0x6a>
9000cbe6:	bf00      	nop

9000cbe8 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000cbe8:	b370      	cbz	r0, 9000cc48 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
9000cbea:	b510      	push	{r4, lr}
9000cbec:	460c      	mov	r4, r1
9000cbee:	b082      	sub	sp, #8
9000cbf0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000cbf4:	b1c3      	cbz	r3, 9000cc28 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
9000cbf6:	bb21      	cbnz	r1, 9000cc42 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000cbf8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000cbfa:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
9000cbfc:	f001 fc14 	bl	9000e428 <xQueueReceiveFromISR>
9000cc00:	2801      	cmp	r0, #1
9000cc02:	d11a      	bne.n	9000cc3a <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000cc04:	9b01      	ldr	r3, [sp, #4]
9000cc06:	b913      	cbnz	r3, 9000cc0e <osSemaphoreAcquire+0x26>
  stat = osOK;
9000cc08:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
9000cc0a:	b002      	add	sp, #8
9000cc0c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
9000cc0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000cc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000cc16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000cc1a:	f3bf 8f4f 	dsb	sy
9000cc1e:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000cc22:	4620      	mov	r0, r4
}
9000cc24:	b002      	add	sp, #8
9000cc26:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
9000cc28:	f001 fa56 	bl	9000e0d8 <xQueueSemaphoreTake>
9000cc2c:	2801      	cmp	r0, #1
9000cc2e:	d0eb      	beq.n	9000cc08 <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
9000cc30:	b11c      	cbz	r4, 9000cc3a <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
9000cc32:	f06f 0001 	mvn.w	r0, #1
}
9000cc36:	b002      	add	sp, #8
9000cc38:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
9000cc3a:	f06f 0002 	mvn.w	r0, #2
}
9000cc3e:	b002      	add	sp, #8
9000cc40:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
9000cc42:	f06f 0003 	mvn.w	r0, #3
9000cc46:	e7e0      	b.n	9000cc0a <osSemaphoreAcquire+0x22>
9000cc48:	f06f 0003 	mvn.w	r0, #3
}
9000cc4c:	4770      	bx	lr
9000cc4e:	bf00      	nop

9000cc50 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
9000cc50:	b330      	cbz	r0, 9000cca0 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
9000cc52:	b510      	push	{r4, lr}
9000cc54:	b082      	sub	sp, #8
9000cc56:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
9000cc5a:	b1ab      	cbz	r3, 9000cc88 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
9000cc5c:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000cc5e:	a901      	add	r1, sp, #4
    yield = pdFALSE;
9000cc60:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
9000cc62:	f001 f863 	bl	9000dd2c <xQueueGiveFromISR>
9000cc66:	2801      	cmp	r0, #1
9000cc68:	d117      	bne.n	9000cc9a <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
9000cc6a:	9b01      	ldr	r3, [sp, #4]
9000cc6c:	b193      	cbz	r3, 9000cc94 <osSemaphoreRelease+0x44>
9000cc6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000cc72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000cc76:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000cc7a:	f3bf 8f4f 	dsb	sy
9000cc7e:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000cc82:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
9000cc84:	b002      	add	sp, #8
9000cc86:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
9000cc88:	461a      	mov	r2, r3
9000cc8a:	4619      	mov	r1, r3
9000cc8c:	f000 fdba 	bl	9000d804 <xQueueGenericSend>
9000cc90:	2801      	cmp	r0, #1
9000cc92:	d102      	bne.n	9000cc9a <osSemaphoreRelease+0x4a>
  stat = osOK;
9000cc94:	2000      	movs	r0, #0
}
9000cc96:	b002      	add	sp, #8
9000cc98:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
9000cc9a:	f06f 0002 	mvn.w	r0, #2
9000cc9e:	e7fa      	b.n	9000cc96 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
9000cca0:	f06f 0003 	mvn.w	r0, #3
}
9000cca4:	4770      	bx	lr
9000cca6:	bf00      	nop

9000cca8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
9000cca8:	b5f0      	push	{r4, r5, r6, r7, lr}
9000ccaa:	b083      	sub	sp, #12
9000ccac:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
9000ccb0:	b987      	cbnz	r7, 9000ccd4 <osMessageQueueNew+0x2c>
9000ccb2:	4605      	mov	r5, r0
9000ccb4:	b170      	cbz	r0, 9000ccd4 <osMessageQueueNew+0x2c>
9000ccb6:	b169      	cbz	r1, 9000ccd4 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
9000ccb8:	4614      	mov	r4, r2
9000ccba:	b17a      	cbz	r2, 9000ccdc <osMessageQueueNew+0x34>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000ccbc:	6893      	ldr	r3, [r2, #8]
9000ccbe:	b1cb      	cbz	r3, 9000ccf4 <osMessageQueueNew+0x4c>
9000ccc0:	68d2      	ldr	r2, [r2, #12]
9000ccc2:	2a4f      	cmp	r2, #79	; 0x4f
9000ccc4:	d906      	bls.n	9000ccd4 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000ccc6:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
9000ccc8:	b122      	cbz	r2, 9000ccd4 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
9000ccca:	fb01 f505 	mul.w	r5, r1, r5
9000ccce:	6966      	ldr	r6, [r4, #20]
9000ccd0:	42ae      	cmp	r6, r5
9000ccd2:	d21f      	bcs.n	9000cd14 <osMessageQueueNew+0x6c>
  hQueue = NULL;
9000ccd4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
9000ccd6:	4628      	mov	r0, r5
9000ccd8:	b003      	add	sp, #12
9000ccda:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
9000ccdc:	f000 fca8 	bl	9000d630 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000cce0:	4605      	mov	r5, r0
9000cce2:	2800      	cmp	r0, #0
9000cce4:	d0f6      	beq.n	9000ccd4 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
9000cce6:	4628      	mov	r0, r5
9000cce8:	4621      	mov	r1, r4
9000ccea:	f001 fc43 	bl	9000e574 <vQueueAddToRegistry>
}
9000ccee:	4628      	mov	r0, r5
9000ccf0:	b003      	add	sp, #12
9000ccf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
9000ccf4:	68d3      	ldr	r3, [r2, #12]
9000ccf6:	2b00      	cmp	r3, #0
9000ccf8:	d1ec      	bne.n	9000ccd4 <osMessageQueueNew+0x2c>
9000ccfa:	6913      	ldr	r3, [r2, #16]
9000ccfc:	2b00      	cmp	r3, #0
9000ccfe:	d1e9      	bne.n	9000ccd4 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
9000cd00:	6952      	ldr	r2, [r2, #20]
9000cd02:	2a00      	cmp	r2, #0
9000cd04:	d1e6      	bne.n	9000ccd4 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
9000cd06:	f000 fc93 	bl	9000d630 <xQueueGenericCreate>
    if (hQueue != NULL) {
9000cd0a:	4605      	mov	r5, r0
9000cd0c:	2800      	cmp	r0, #0
9000cd0e:	d0e1      	beq.n	9000ccd4 <osMessageQueueNew+0x2c>
        name = attr->name;
9000cd10:	6824      	ldr	r4, [r4, #0]
9000cd12:	e7e8      	b.n	9000cce6 <osMessageQueueNew+0x3e>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
9000cd14:	9700      	str	r7, [sp, #0]
9000cd16:	f000 fc1f 	bl	9000d558 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
9000cd1a:	4605      	mov	r5, r0
9000cd1c:	2800      	cmp	r0, #0
9000cd1e:	d1f7      	bne.n	9000cd10 <osMessageQueueNew+0x68>
9000cd20:	e7d8      	b.n	9000ccd4 <osMessageQueueNew+0x2c>
9000cd22:	bf00      	nop

9000cd24 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
9000cd24:	b530      	push	{r4, r5, lr}
9000cd26:	461c      	mov	r4, r3
9000cd28:	b083      	sub	sp, #12
9000cd2a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000cd2e:	b30b      	cbz	r3, 9000cd74 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000cd30:	3c00      	subs	r4, #0
9000cd32:	bf18      	it	ne
9000cd34:	2401      	movne	r4, #1
9000cd36:	2900      	cmp	r1, #0
9000cd38:	bf08      	it	eq
9000cd3a:	f044 0401 	orreq.w	r4, r4, #1
9000cd3e:	bb7c      	cbnz	r4, 9000cda0 <osMessageQueuePut+0x7c>
9000cd40:	fab0 f480 	clz	r4, r0
9000cd44:	0964      	lsrs	r4, r4, #5
9000cd46:	b358      	cbz	r0, 9000cda0 <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000cd48:	4623      	mov	r3, r4
9000cd4a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000cd4c:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
9000cd4e:	f000 ff83 	bl	9000dc58 <xQueueGenericSendFromISR>
9000cd52:	2801      	cmp	r0, #1
9000cd54:	d120      	bne.n	9000cd98 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000cd56:	9b01      	ldr	r3, [sp, #4]
9000cd58:	b1db      	cbz	r3, 9000cd92 <osMessageQueuePut+0x6e>
9000cd5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000cd5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000cd62:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000cd66:	f3bf 8f4f 	dsb	sy
9000cd6a:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000cd6e:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000cd70:	b003      	add	sp, #12
9000cd72:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000cd74:	b1a0      	cbz	r0, 9000cda0 <osMessageQueuePut+0x7c>
9000cd76:	fab1 f381 	clz	r3, r1
9000cd7a:	095b      	lsrs	r3, r3, #5
9000cd7c:	b181      	cbz	r1, 9000cda0 <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000cd7e:	4622      	mov	r2, r4
9000cd80:	f000 fd40 	bl	9000d804 <xQueueGenericSend>
9000cd84:	2801      	cmp	r0, #1
9000cd86:	d004      	beq.n	9000cd92 <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
9000cd88:	b134      	cbz	r4, 9000cd98 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
9000cd8a:	f06f 0001 	mvn.w	r0, #1
}
9000cd8e:	b003      	add	sp, #12
9000cd90:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000cd92:	2000      	movs	r0, #0
}
9000cd94:	b003      	add	sp, #12
9000cd96:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000cd98:	f06f 0002 	mvn.w	r0, #2
}
9000cd9c:	b003      	add	sp, #12
9000cd9e:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000cda0:	f06f 0003 	mvn.w	r0, #3
9000cda4:	e7e4      	b.n	9000cd70 <osMessageQueuePut+0x4c>
9000cda6:	bf00      	nop

9000cda8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
9000cda8:	b530      	push	{r4, r5, lr}
9000cdaa:	461c      	mov	r4, r3
9000cdac:	b083      	sub	sp, #12
9000cdae:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
9000cdb2:	b303      	cbz	r3, 9000cdf6 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
9000cdb4:	3c00      	subs	r4, #0
9000cdb6:	bf18      	it	ne
9000cdb8:	2401      	movne	r4, #1
9000cdba:	2900      	cmp	r1, #0
9000cdbc:	bf08      	it	eq
9000cdbe:	f044 0401 	orreq.w	r4, r4, #1
9000cdc2:	bb5c      	cbnz	r4, 9000ce1c <osMessageQueueGet+0x74>
9000cdc4:	fab0 f480 	clz	r4, r0
9000cdc8:	0964      	lsrs	r4, r4, #5
9000cdca:	b338      	cbz	r0, 9000ce1c <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000cdcc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
9000cdce:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
9000cdd0:	f001 fb2a 	bl	9000e428 <xQueueReceiveFromISR>
9000cdd4:	2801      	cmp	r0, #1
9000cdd6:	d11d      	bne.n	9000ce14 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
9000cdd8:	9b01      	ldr	r3, [sp, #4]
9000cdda:	b1c3      	cbz	r3, 9000ce0e <osMessageQueueGet+0x66>
9000cddc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000cde0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000cde4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000cde8:	f3bf 8f4f 	dsb	sy
9000cdec:	f3bf 8f6f 	isb	sy
  stat = osOK;
9000cdf0:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
9000cdf2:	b003      	add	sp, #12
9000cdf4:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
9000cdf6:	b188      	cbz	r0, 9000ce1c <osMessageQueueGet+0x74>
9000cdf8:	b181      	cbz	r1, 9000ce1c <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
9000cdfa:	4622      	mov	r2, r4
9000cdfc:	f000 ffee 	bl	9000dddc <xQueueReceive>
9000ce00:	2801      	cmp	r0, #1
9000ce02:	d004      	beq.n	9000ce0e <osMessageQueueGet+0x66>
        if (timeout != 0U) {
9000ce04:	b134      	cbz	r4, 9000ce14 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
9000ce06:	f06f 0001 	mvn.w	r0, #1
}
9000ce0a:	b003      	add	sp, #12
9000ce0c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
9000ce0e:	2000      	movs	r0, #0
}
9000ce10:	b003      	add	sp, #12
9000ce12:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
9000ce14:	f06f 0002 	mvn.w	r0, #2
}
9000ce18:	b003      	add	sp, #12
9000ce1a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
9000ce1c:	f06f 0003 	mvn.w	r0, #3
9000ce20:	e7e7      	b.n	9000cdf2 <osMessageQueueGet+0x4a>
9000ce22:	bf00      	nop

9000ce24 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000ce24:	4b04      	ldr	r3, [pc, #16]	; (9000ce38 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
9000ce26:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
9000ce28:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000ce2a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
9000ce2c:	4c03      	ldr	r4, [pc, #12]	; (9000ce3c <vApplicationGetIdleTaskMemory+0x18>)
9000ce2e:	600c      	str	r4, [r1, #0]
}
9000ce30:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
9000ce34:	6013      	str	r3, [r2, #0]
}
9000ce36:	4770      	bx	lr
9000ce38:	2400c21c 	.word	0x2400c21c
9000ce3c:	2400c01c 	.word	0x2400c01c

9000ce40 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000ce40:	4b05      	ldr	r3, [pc, #20]	; (9000ce58 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
9000ce42:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
9000ce44:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000ce46:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
9000ce4a:	4c04      	ldr	r4, [pc, #16]	; (9000ce5c <vApplicationGetTimerTaskMemory+0x1c>)
9000ce4c:	600c      	str	r4, [r1, #0]
}
9000ce4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
9000ce52:	6013      	str	r3, [r2, #0]
}
9000ce54:	4770      	bx	lr
9000ce56:	bf00      	nop
9000ce58:	2400c680 	.word	0x2400c680
9000ce5c:	2400c280 	.word	0x2400c280

9000ce60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
9000ce60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000ce64:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
9000ce66:	f002 f861 	bl	9000ef2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
9000ce6a:	4a54      	ldr	r2, [pc, #336]	; (9000cfbc <pvPortMalloc+0x15c>)
9000ce6c:	6816      	ldr	r6, [r2, #0]
9000ce6e:	2e00      	cmp	r6, #0
9000ce70:	d06f      	beq.n	9000cf52 <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
9000ce72:	4b53      	ldr	r3, [pc, #332]	; (9000cfc0 <pvPortMalloc+0x160>)
9000ce74:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
9000ce76:	423d      	tst	r5, r7
9000ce78:	d12e      	bne.n	9000ced8 <pvPortMalloc+0x78>
9000ce7a:	b36d      	cbz	r5, 9000ced8 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
9000ce7c:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
9000ce80:	076d      	lsls	r5, r5, #29
9000ce82:	d002      	beq.n	9000ce8a <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
9000ce84:	f024 0407 	bic.w	r4, r4, #7
9000ce88:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
9000ce8a:	b32c      	cbz	r4, 9000ced8 <pvPortMalloc+0x78>
9000ce8c:	f8df c148 	ldr.w	ip, [pc, #328]	; 9000cfd8 <pvPortMalloc+0x178>
9000ce90:	f8dc 5000 	ldr.w	r5, [ip]
9000ce94:	42a5      	cmp	r5, r4
9000ce96:	d31f      	bcc.n	9000ced8 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
9000ce98:	484a      	ldr	r0, [pc, #296]	; (9000cfc4 <pvPortMalloc+0x164>)
9000ce9a:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
9000ce9c:	e003      	b.n	9000cea6 <pvPortMalloc+0x46>
9000ce9e:	681a      	ldr	r2, [r3, #0]
9000cea0:	b122      	cbz	r2, 9000ceac <pvPortMalloc+0x4c>
9000cea2:	4618      	mov	r0, r3
9000cea4:	4613      	mov	r3, r2
9000cea6:	6859      	ldr	r1, [r3, #4]
9000cea8:	42a1      	cmp	r1, r4
9000ceaa:	d3f8      	bcc.n	9000ce9e <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
9000ceac:	42b3      	cmp	r3, r6
9000ceae:	d013      	beq.n	9000ced8 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
9000ceb0:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000ceb2:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000ceb4:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000ceb8:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
9000ceba:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
9000cebe:	d929      	bls.n	9000cf14 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
9000cec0:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
9000cec2:	0748      	lsls	r0, r1, #29
9000cec4:	d00f      	beq.n	9000cee6 <pvPortMalloc+0x86>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
9000cec6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ceca:	f383 8811 	msr	BASEPRI, r3
9000cece:	f3bf 8f6f 	isb	sy
9000ced2:	f3bf 8f4f 	dsb	sy
9000ced6:	e7fe      	b.n	9000ced6 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
9000ced8:	f04f 0800 	mov.w	r8, #0
9000cedc:	f002 f82e 	bl	9000ef3c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
9000cee0:	4640      	mov	r0, r8
9000cee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
9000cee6:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000cee8:	4a36      	ldr	r2, [pc, #216]	; (9000cfc4 <pvPortMalloc+0x164>)
						pxBlock->xBlockSize = xWantedSize;
9000ceea:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000ceec:	4614      	mov	r4, r2
9000ceee:	6812      	ldr	r2, [r2, #0]
9000cef0:	4291      	cmp	r1, r2
9000cef2:	d8fb      	bhi.n	9000ceec <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000cef4:	6860      	ldr	r0, [r4, #4]
9000cef6:	eb04 0e00 	add.w	lr, r4, r0
9000cefa:	4571      	cmp	r1, lr
9000cefc:	d04a      	beq.n	9000cf94 <pvPortMalloc+0x134>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000cefe:	f8d1 e004 	ldr.w	lr, [r1, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000cf02:	eb01 000e 	add.w	r0, r1, lr
9000cf06:	4282      	cmp	r2, r0
9000cf08:	d050      	beq.n	9000cfac <pvPortMalloc+0x14c>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9000cf0a:	428c      	cmp	r4, r1
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000cf0c:	600a      	str	r2, [r1, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000cf0e:	bf18      	it	ne
9000cf10:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000cf12:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000cf14:	4a2c      	ldr	r2, [pc, #176]	; (9000cfc8 <pvPortMalloc+0x168>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000cf16:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
9000cf18:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000cf1a:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9000cf1c:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9000cf20:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
9000cf22:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
9000cf26:	bf38      	it	cc
9000cf28:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9000cf2a:	4a28      	ldr	r2, [pc, #160]	; (9000cfcc <pvPortMalloc+0x16c>)
					pxBlock->pxNextFreeBlock = NULL;
9000cf2c:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
9000cf30:	6813      	ldr	r3, [r2, #0]
9000cf32:	3301      	adds	r3, #1
9000cf34:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
9000cf36:	f002 f801 	bl	9000ef3c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9000cf3a:	f018 0f07 	tst.w	r8, #7
9000cf3e:	d0cf      	beq.n	9000cee0 <pvPortMalloc+0x80>
9000cf40:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cf44:	f383 8811 	msr	BASEPRI, r3
9000cf48:	f3bf 8f6f 	isb	sy
9000cf4c:	f3bf 8f4f 	dsb	sy
9000cf50:	e7fe      	b.n	9000cf50 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
9000cf52:	4b1f      	ldr	r3, [pc, #124]	; (9000cfd0 <pvPortMalloc+0x170>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
9000cf54:	075e      	lsls	r6, r3, #29
9000cf56:	d117      	bne.n	9000cf88 <pvPortMalloc+0x128>
9000cf58:	4e1e      	ldr	r6, [pc, #120]	; (9000cfd4 <pvPortMalloc+0x174>)
9000cf5a:	4619      	mov	r1, r3
	uxAddress -= xHeapStructSize;
9000cf5c:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000cf5e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000cf62:	4818      	ldr	r0, [pc, #96]	; (9000cfc4 <pvPortMalloc+0x164>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000cf64:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
9000cf68:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9000cf6a:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000cf6c:	4a16      	ldr	r2, [pc, #88]	; (9000cfc8 <pvPortMalloc+0x168>)
9000cf6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9000cf70:	4a19      	ldr	r2, [pc, #100]	; (9000cfd8 <pvPortMalloc+0x178>)
9000cf72:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9000cf74:	4a12      	ldr	r2, [pc, #72]	; (9000cfc0 <pvPortMalloc+0x160>)
9000cf76:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
9000cf78:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9000cf7a:	e9c0 1200 	strd	r1, r2, [r0]
	pxEnd->pxNextFreeBlock = NULL;
9000cf7e:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
9000cf82:	e9c1 6300 	strd	r6, r3, [r1]
}
9000cf86:	e776      	b.n	9000ce76 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
9000cf88:	3307      	adds	r3, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
9000cf8a:	4e12      	ldr	r6, [pc, #72]	; (9000cfd4 <pvPortMalloc+0x174>)
	pucAlignedHeap = ( uint8_t * ) uxAddress;
9000cf8c:	f023 0107 	bic.w	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9000cf90:	460b      	mov	r3, r1
9000cf92:	e7e3      	b.n	9000cf5c <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000cf94:	6849      	ldr	r1, [r1, #4]
9000cf96:	eb00 0e01 	add.w	lr, r0, r1
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000cf9a:	eb04 010e 	add.w	r1, r4, lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000cf9e:	f8c4 e004 	str.w	lr, [r4, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000cfa2:	428a      	cmp	r2, r1
9000cfa4:	d001      	beq.n	9000cfaa <pvPortMalloc+0x14a>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000cfa6:	6022      	str	r2, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9000cfa8:	e7b3      	b.n	9000cf12 <pvPortMalloc+0xb2>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000cfaa:	4621      	mov	r1, r4
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000cfac:	42b2      	cmp	r2, r6
9000cfae:	d0ac      	beq.n	9000cf0a <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000cfb0:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000cfb2:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000cfb4:	4470      	add	r0, lr
9000cfb6:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000cfb8:	e7a7      	b.n	9000cf0a <pvPortMalloc+0xaa>
9000cfba:	bf00      	nop
9000cfbc:	2400c6e0 	.word	0x2400c6e0
9000cfc0:	24024d84 	.word	0x24024d84
9000cfc4:	24024d98 	.word	0x24024d98
9000cfc8:	24024d8c 	.word	0x24024d8c
9000cfcc:	24024d90 	.word	0x24024d90
9000cfd0:	2400c6e4 	.word	0x2400c6e4
9000cfd4:	24024d84 	.word	0x24024d84
9000cfd8:	24024d88 	.word	0x24024d88

9000cfdc <vPortFree>:
	if( pv != NULL )
9000cfdc:	b1d0      	cbz	r0, 9000d014 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000cfde:	4a2c      	ldr	r2, [pc, #176]	; (9000d090 <vPortFree+0xb4>)
9000cfe0:	f850 3c04 	ldr.w	r3, [r0, #-4]
9000cfe4:	6812      	ldr	r2, [r2, #0]
9000cfe6:	4213      	tst	r3, r2
9000cfe8:	d00b      	beq.n	9000d002 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
9000cfea:	f850 1c08 	ldr.w	r1, [r0, #-8]
9000cfee:	b191      	cbz	r1, 9000d016 <vPortFree+0x3a>
9000cff0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000cff4:	f383 8811 	msr	BASEPRI, r3
9000cff8:	f3bf 8f6f 	isb	sy
9000cffc:	f3bf 8f4f 	dsb	sy
9000d000:	e7fe      	b.n	9000d000 <vPortFree+0x24>
9000d002:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d006:	f383 8811 	msr	BASEPRI, r3
9000d00a:	f3bf 8f6f 	isb	sy
9000d00e:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9000d012:	e7fe      	b.n	9000d012 <vPortFree+0x36>
9000d014:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000d016:	ea23 0302 	bic.w	r3, r3, r2
{
9000d01a:	b530      	push	{r4, r5, lr}
9000d01c:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000d01e:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9000d022:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9000d026:	4d1b      	ldr	r5, [pc, #108]	; (9000d094 <vPortFree+0xb8>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9000d028:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
9000d02a:	f001 ff7f 	bl	9000ef2c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
9000d02e:	9801      	ldr	r0, [sp, #4]
9000d030:	682a      	ldr	r2, [r5, #0]
9000d032:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000d036:	4b18      	ldr	r3, [pc, #96]	; (9000d098 <vPortFree+0xbc>)
					xFreeBytesRemaining += pxLink->xBlockSize;
9000d038:	440a      	add	r2, r1
9000d03a:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9000d03c:	461a      	mov	r2, r3
9000d03e:	681b      	ldr	r3, [r3, #0]
9000d040:	429c      	cmp	r4, r3
9000d042:	d8fb      	bhi.n	9000d03c <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9000d044:	6850      	ldr	r0, [r2, #4]
9000d046:	eb02 0c00 	add.w	ip, r2, r0
9000d04a:	4564      	cmp	r4, ip
9000d04c:	d00f      	beq.n	9000d06e <vPortFree+0x92>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000d04e:	1860      	adds	r0, r4, r1
9000d050:	4283      	cmp	r3, r0
9000d052:	d014      	beq.n	9000d07e <vPortFree+0xa2>
	if( pxIterator != pxBlockToInsert )
9000d054:	42a2      	cmp	r2, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000d056:	6023      	str	r3, [r4, #0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9000d058:	bf18      	it	ne
9000d05a:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
9000d05c:	4a0f      	ldr	r2, [pc, #60]	; (9000d09c <vPortFree+0xc0>)
9000d05e:	6813      	ldr	r3, [r2, #0]
9000d060:	3301      	adds	r3, #1
9000d062:	6013      	str	r3, [r2, #0]
}
9000d064:	b003      	add	sp, #12
9000d066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
9000d06a:	f001 bf67 	b.w	9000ef3c <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000d06e:	4401      	add	r1, r0
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000d070:	1850      	adds	r0, r2, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9000d072:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000d074:	4283      	cmp	r3, r0
9000d076:	d001      	beq.n	9000d07c <vPortFree+0xa0>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000d078:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
9000d07a:	e7ef      	b.n	9000d05c <vPortFree+0x80>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9000d07c:	4614      	mov	r4, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
9000d07e:	4808      	ldr	r0, [pc, #32]	; (9000d0a0 <vPortFree+0xc4>)
9000d080:	6800      	ldr	r0, [r0, #0]
9000d082:	4283      	cmp	r3, r0
9000d084:	d0e6      	beq.n	9000d054 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000d086:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
9000d08a:	4401      	add	r1, r0
9000d08c:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9000d08e:	e7e1      	b.n	9000d054 <vPortFree+0x78>
9000d090:	24024d84 	.word	0x24024d84
9000d094:	24024d88 	.word	0x24024d88
9000d098:	24024d98 	.word	0x24024d98
9000d09c:	24024d94 	.word	0x24024d94
9000d0a0:	2400c6e0 	.word	0x2400c6e0

9000d0a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000d0a4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000d0a8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000d0ac:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
9000d0ae:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
9000d0b0:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000d0b2:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
9000d0b4:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
9000d0b8:	4770      	bx	lr
9000d0ba:	bf00      	nop

9000d0bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
9000d0bc:	2300      	movs	r3, #0
9000d0be:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
9000d0c0:	4770      	bx	lr
9000d0c2:	bf00      	nop

9000d0c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
9000d0c4:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000d0c6:	6802      	ldr	r2, [r0, #0]
{
9000d0c8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000d0ca:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
9000d0cc:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
9000d0ce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
9000d0d0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
9000d0d2:	689c      	ldr	r4, [r3, #8]
9000d0d4:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
9000d0d6:	6099      	str	r1, [r3, #8]
}
9000d0d8:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
9000d0dc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000d0de:	6002      	str	r2, [r0, #0]
}
9000d0e0:	4770      	bx	lr
9000d0e2:	bf00      	nop

9000d0e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
9000d0e4:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
9000d0e6:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
9000d0e8:	1c6b      	adds	r3, r5, #1
9000d0ea:	d010      	beq.n	9000d10e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
9000d0ec:	f100 0308 	add.w	r3, r0, #8
9000d0f0:	461c      	mov	r4, r3
9000d0f2:	685b      	ldr	r3, [r3, #4]
9000d0f4:	681a      	ldr	r2, [r3, #0]
9000d0f6:	42aa      	cmp	r2, r5
9000d0f8:	d9fa      	bls.n	9000d0f0 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
9000d0fa:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000d0fc:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
9000d0fe:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
9000d100:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
9000d102:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
9000d104:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9000d106:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9000d108:	6002      	str	r2, [r0, #0]
}
9000d10a:	bc30      	pop	{r4, r5}
9000d10c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
9000d10e:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
9000d110:	6863      	ldr	r3, [r4, #4]
9000d112:	e7f2      	b.n	9000d0fa <vListInsert+0x16>

9000d114 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
9000d114:	6903      	ldr	r3, [r0, #16]
{
9000d116:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9000d118:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000d11a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
9000d11e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
9000d120:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9000d124:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9000d126:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9000d128:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
9000d12c:	bf08      	it	eq
9000d12e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
9000d130:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
9000d132:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
9000d134:	3a01      	subs	r2, #1
9000d136:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9000d138:	6818      	ldr	r0, [r3, #0]
}
9000d13a:	4770      	bx	lr

9000d13c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
9000d13c:	4808      	ldr	r0, [pc, #32]	; (9000d160 <prvPortStartFirstTask+0x24>)
9000d13e:	6800      	ldr	r0, [r0, #0]
9000d140:	6800      	ldr	r0, [r0, #0]
9000d142:	f380 8808 	msr	MSP, r0
9000d146:	f04f 0000 	mov.w	r0, #0
9000d14a:	f380 8814 	msr	CONTROL, r0
9000d14e:	b662      	cpsie	i
9000d150:	b661      	cpsie	f
9000d152:	f3bf 8f4f 	dsb	sy
9000d156:	f3bf 8f6f 	isb	sy
9000d15a:	df00      	svc	0
9000d15c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
9000d15e:	0000      	.short	0x0000
9000d160:	e000ed08 	.word	0xe000ed08

9000d164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
9000d164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 9000d174 <vPortEnableVFP+0x10>
9000d168:	6801      	ldr	r1, [r0, #0]
9000d16a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
9000d16e:	6001      	str	r1, [r0, #0]
9000d170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
9000d172:	0000      	.short	0x0000
9000d174:	e000ed88 	.word	0xe000ed88

9000d178 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9000d178:	4b0e      	ldr	r3, [pc, #56]	; (9000d1b4 <prvTaskExitError+0x3c>)
{
9000d17a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
9000d17c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
9000d17e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
9000d180:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
9000d182:	3301      	adds	r3, #1
9000d184:	d008      	beq.n	9000d198 <prvTaskExitError+0x20>
9000d186:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d18a:	f383 8811 	msr	BASEPRI, r3
9000d18e:	f3bf 8f6f 	isb	sy
9000d192:	f3bf 8f4f 	dsb	sy
9000d196:	e7fe      	b.n	9000d196 <prvTaskExitError+0x1e>
9000d198:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d19c:	f383 8811 	msr	BASEPRI, r3
9000d1a0:	f3bf 8f6f 	isb	sy
9000d1a4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000d1a8:	9b01      	ldr	r3, [sp, #4]
9000d1aa:	2b00      	cmp	r3, #0
9000d1ac:	d0fc      	beq.n	9000d1a8 <prvTaskExitError+0x30>
}
9000d1ae:	b002      	add	sp, #8
9000d1b0:	4770      	bx	lr
9000d1b2:	bf00      	nop
9000d1b4:	24000068 	.word	0x24000068

9000d1b8 <pxPortInitialiseStack>:
{
9000d1b8:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000d1ba:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000d1be:	4809      	ldr	r0, [pc, #36]	; (9000d1e4 <pxPortInitialiseStack+0x2c>)
{
9000d1c0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
9000d1c2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
9000d1c6:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
9000d1ca:	f843 2c20 	str.w	r2, [r3, #-32]
}
9000d1ce:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
9000d1d2:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000d1d6:	f06f 0102 	mvn.w	r1, #2
}
9000d1da:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
9000d1de:	f843 1c24 	str.w	r1, [r3, #-36]
}
9000d1e2:	4770      	bx	lr
9000d1e4:	9000d179 	.word	0x9000d179
	...

9000d1f0 <SVC_Handler>:
	__asm volatile (
9000d1f0:	4b07      	ldr	r3, [pc, #28]	; (9000d210 <pxCurrentTCBConst2>)
9000d1f2:	6819      	ldr	r1, [r3, #0]
9000d1f4:	6808      	ldr	r0, [r1, #0]
9000d1f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000d1fa:	f380 8809 	msr	PSP, r0
9000d1fe:	f3bf 8f6f 	isb	sy
9000d202:	f04f 0000 	mov.w	r0, #0
9000d206:	f380 8811 	msr	BASEPRI, r0
9000d20a:	4770      	bx	lr
9000d20c:	f3af 8000 	nop.w

9000d210 <pxCurrentTCBConst2>:
9000d210:	24024de8 	.word	0x24024de8

9000d214 <vPortEnterCritical>:
9000d214:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d218:	f383 8811 	msr	BASEPRI, r3
9000d21c:	f3bf 8f6f 	isb	sy
9000d220:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
9000d224:	4a0b      	ldr	r2, [pc, #44]	; (9000d254 <vPortEnterCritical+0x40>)
9000d226:	6813      	ldr	r3, [r2, #0]
9000d228:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9000d22a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9000d22c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9000d22e:	d000      	beq.n	9000d232 <vPortEnterCritical+0x1e>
}
9000d230:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
9000d232:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d236:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9000d23a:	b2db      	uxtb	r3, r3
9000d23c:	2b00      	cmp	r3, #0
9000d23e:	d0f7      	beq.n	9000d230 <vPortEnterCritical+0x1c>
9000d240:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d244:	f383 8811 	msr	BASEPRI, r3
9000d248:	f3bf 8f6f 	isb	sy
9000d24c:	f3bf 8f4f 	dsb	sy
9000d250:	e7fe      	b.n	9000d250 <vPortEnterCritical+0x3c>
9000d252:	bf00      	nop
9000d254:	24000068 	.word	0x24000068

9000d258 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
9000d258:	4a08      	ldr	r2, [pc, #32]	; (9000d27c <vPortExitCritical+0x24>)
9000d25a:	6813      	ldr	r3, [r2, #0]
9000d25c:	b943      	cbnz	r3, 9000d270 <vPortExitCritical+0x18>
9000d25e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d262:	f383 8811 	msr	BASEPRI, r3
9000d266:	f3bf 8f6f 	isb	sy
9000d26a:	f3bf 8f4f 	dsb	sy
9000d26e:	e7fe      	b.n	9000d26e <vPortExitCritical+0x16>
	uxCriticalNesting--;
9000d270:	3b01      	subs	r3, #1
9000d272:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
9000d274:	b90b      	cbnz	r3, 9000d27a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
9000d276:	f383 8811 	msr	BASEPRI, r3
}
9000d27a:	4770      	bx	lr
9000d27c:	24000068 	.word	0x24000068

9000d280 <PendSV_Handler>:
	__asm volatile
9000d280:	f3ef 8009 	mrs	r0, PSP
9000d284:	f3bf 8f6f 	isb	sy
9000d288:	4b15      	ldr	r3, [pc, #84]	; (9000d2e0 <pxCurrentTCBConst>)
9000d28a:	681a      	ldr	r2, [r3, #0]
9000d28c:	f01e 0f10 	tst.w	lr, #16
9000d290:	bf08      	it	eq
9000d292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
9000d296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000d29a:	6010      	str	r0, [r2, #0]
9000d29c:	e92d 0009 	stmdb	sp!, {r0, r3}
9000d2a0:	f04f 0050 	mov.w	r0, #80	; 0x50
9000d2a4:	f380 8811 	msr	BASEPRI, r0
9000d2a8:	f3bf 8f4f 	dsb	sy
9000d2ac:	f3bf 8f6f 	isb	sy
9000d2b0:	f001 fe80 	bl	9000efb4 <vTaskSwitchContext>
9000d2b4:	f04f 0000 	mov.w	r0, #0
9000d2b8:	f380 8811 	msr	BASEPRI, r0
9000d2bc:	bc09      	pop	{r0, r3}
9000d2be:	6819      	ldr	r1, [r3, #0]
9000d2c0:	6808      	ldr	r0, [r1, #0]
9000d2c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000d2c6:	f01e 0f10 	tst.w	lr, #16
9000d2ca:	bf08      	it	eq
9000d2cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
9000d2d0:	f380 8809 	msr	PSP, r0
9000d2d4:	f3bf 8f6f 	isb	sy
9000d2d8:	4770      	bx	lr
9000d2da:	bf00      	nop
9000d2dc:	f3af 8000 	nop.w

9000d2e0 <pxCurrentTCBConst>:
9000d2e0:	24024de8 	.word	0x24024de8

9000d2e4 <xPortSysTickHandler>:
{
9000d2e4:	b508      	push	{r3, lr}
	__asm volatile
9000d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d2ea:	f383 8811 	msr	BASEPRI, r3
9000d2ee:	f3bf 8f6f 	isb	sy
9000d2f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
9000d2f6:	f001 fe37 	bl	9000ef68 <xTaskIncrementTick>
9000d2fa:	b128      	cbz	r0, 9000d308 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
9000d2fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000d304:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
9000d308:	2300      	movs	r3, #0
9000d30a:	f383 8811 	msr	BASEPRI, r3
}
9000d30e:	bd08      	pop	{r3, pc}

9000d310 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000d310:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
9000d314:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000d316:	4806      	ldr	r0, [pc, #24]	; (9000d330 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
9000d318:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000d31a:	4906      	ldr	r1, [pc, #24]	; (9000d334 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9000d31c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000d31e:	6803      	ldr	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000d320:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9000d322:	fba1 1303 	umull	r1, r3, r1, r3
9000d326:	099b      	lsrs	r3, r3, #6
9000d328:	3b01      	subs	r3, #1
9000d32a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9000d32c:	6110      	str	r0, [r2, #16]
}
9000d32e:	4770      	bx	lr
9000d330:	24000058 	.word	0x24000058
9000d334:	10624dd3 	.word	0x10624dd3

9000d338 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000d338:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d33c:	4a48      	ldr	r2, [pc, #288]	; (9000d460 <xPortStartScheduler+0x128>)
9000d33e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
9000d342:	4291      	cmp	r1, r2
9000d344:	d041      	beq.n	9000d3ca <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000d346:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9000d34a:	4b46      	ldr	r3, [pc, #280]	; (9000d464 <xPortStartScheduler+0x12c>)
9000d34c:	429a      	cmp	r2, r3
9000d34e:	d033      	beq.n	9000d3b8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000d350:	4b45      	ldr	r3, [pc, #276]	; (9000d468 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000d352:	20ff      	movs	r0, #255	; 0xff
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000d354:	4945      	ldr	r1, [pc, #276]	; (9000d46c <xPortStartScheduler+0x134>)
{
9000d356:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000d358:	781a      	ldrb	r2, [r3, #0]
{
9000d35a:	b084      	sub	sp, #16
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000d35c:	4c44      	ldr	r4, [pc, #272]	; (9000d470 <xPortStartScheduler+0x138>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9000d35e:	b2d2      	uxtb	r2, r2
9000d360:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000d362:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
9000d364:	7018      	strb	r0, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000d366:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9000d368:	6022      	str	r2, [r4, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9000d36a:	b2db      	uxtb	r3, r3
9000d36c:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000d370:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000d374:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000d378:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000d37c:	0610      	lsls	r0, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9000d37e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000d380:	d511      	bpl.n	9000d3a6 <xPortStartScheduler+0x6e>
9000d382:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000d384:	f89d 3007 	ldrb.w	r3, [sp, #7]
9000d388:	4610      	mov	r0, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000d38a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
9000d38c:	005b      	lsls	r3, r3, #1
9000d38e:	b2db      	uxtb	r3, r3
9000d390:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9000d394:	f89d 1007 	ldrb.w	r1, [sp, #7]
9000d398:	0609      	lsls	r1, r1, #24
9000d39a:	d4f3      	bmi.n	9000d384 <xPortStartScheduler+0x4c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
9000d39c:	2803      	cmp	r0, #3
9000d39e:	6020      	str	r0, [r4, #0]
9000d3a0:	f88d 3007 	strb.w	r3, [sp, #7]
9000d3a4:	d01a      	beq.n	9000d3dc <xPortStartScheduler+0xa4>
	__asm volatile
9000d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d3aa:	f383 8811 	msr	BASEPRI, r3
9000d3ae:	f3bf 8f6f 	isb	sy
9000d3b2:	f3bf 8f4f 	dsb	sy
9000d3b6:	e7fe      	b.n	9000d3b6 <xPortStartScheduler+0x7e>
9000d3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d3bc:	f383 8811 	msr	BASEPRI, r3
9000d3c0:	f3bf 8f6f 	isb	sy
9000d3c4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
9000d3c8:	e7fe      	b.n	9000d3c8 <xPortStartScheduler+0x90>
9000d3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d3ce:	f383 8811 	msr	BASEPRI, r3
9000d3d2:	f3bf 8f6f 	isb	sy
9000d3d6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
9000d3da:	e7fe      	b.n	9000d3da <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000d3dc:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000d3de:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000d3e2:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000d3e6:	4a20      	ldr	r2, [pc, #128]	; (9000d468 <xPortStartScheduler+0x130>)
9000d3e8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
9000d3ea:	4e22      	ldr	r6, [pc, #136]	; (9000d474 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
9000d3ec:	6021      	str	r1, [r4, #0]
	uxCriticalNesting = 0;
9000d3ee:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
9000d3f0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
9000d3f2:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000d3f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
9000d3fa:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
9000d3fe:	f8d5 3d20 	ldr.w	r3, [r5, #3360]	; 0xd20
9000d402:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
9000d406:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9000d40a:	f7ff ff81 	bl	9000d310 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9000d40e:	6034      	str	r4, [r6, #0]
	vPortEnableVFP();
9000d410:	f7ff fea8 	bl	9000d164 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
9000d414:	f8d5 3f34 	ldr.w	r3, [r5, #3892]	; 0xf34
9000d418:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9000d41c:	f8c5 3f34 	str.w	r3, [r5, #3892]	; 0xf34
	prvPortStartFirstTask();
9000d420:	f7ff fe8c 	bl	9000d13c <prvPortStartFirstTask>
	vTaskSwitchContext();
9000d424:	f001 fdc6 	bl	9000efb4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
9000d428:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9000d42a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9000d42c:	3301      	adds	r3, #1
9000d42e:	d008      	beq.n	9000d442 <xPortStartScheduler+0x10a>
9000d430:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d434:	f383 8811 	msr	BASEPRI, r3
9000d438:	f3bf 8f6f 	isb	sy
9000d43c:	f3bf 8f4f 	dsb	sy
9000d440:	e7fe      	b.n	9000d440 <xPortStartScheduler+0x108>
9000d442:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d446:	f383 8811 	msr	BASEPRI, r3
9000d44a:	f3bf 8f6f 	isb	sy
9000d44e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
9000d452:	9b03      	ldr	r3, [sp, #12]
9000d454:	2b00      	cmp	r3, #0
9000d456:	d0fc      	beq.n	9000d452 <xPortStartScheduler+0x11a>
}
9000d458:	2000      	movs	r0, #0
9000d45a:	b004      	add	sp, #16
9000d45c:	bd70      	pop	{r4, r5, r6, pc}
9000d45e:	bf00      	nop
9000d460:	410fc271 	.word	0x410fc271
9000d464:	410fc270 	.word	0x410fc270
9000d468:	e000e400 	.word	0xe000e400
9000d46c:	24024da0 	.word	0x24024da0
9000d470:	24024da4 	.word	0x24024da4
9000d474:	24000068 	.word	0x24000068

9000d478 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
9000d478:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9000d47c:	2b0f      	cmp	r3, #15
9000d47e:	d90e      	bls.n	9000d49e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000d480:	4911      	ldr	r1, [pc, #68]	; (9000d4c8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000d482:	4a12      	ldr	r2, [pc, #72]	; (9000d4cc <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
9000d484:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
9000d486:	7812      	ldrb	r2, [r2, #0]
9000d488:	429a      	cmp	r2, r3
9000d48a:	d908      	bls.n	9000d49e <vPortValidateInterruptPriority+0x26>
9000d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d490:	f383 8811 	msr	BASEPRI, r3
9000d494:	f3bf 8f6f 	isb	sy
9000d498:	f3bf 8f4f 	dsb	sy
9000d49c:	e7fe      	b.n	9000d49c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9000d49e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d4a2:	4a0b      	ldr	r2, [pc, #44]	; (9000d4d0 <vPortValidateInterruptPriority+0x58>)
9000d4a4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
9000d4a8:	6812      	ldr	r2, [r2, #0]
9000d4aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
9000d4ae:	4293      	cmp	r3, r2
9000d4b0:	d908      	bls.n	9000d4c4 <vPortValidateInterruptPriority+0x4c>
9000d4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d4b6:	f383 8811 	msr	BASEPRI, r3
9000d4ba:	f3bf 8f6f 	isb	sy
9000d4be:	f3bf 8f4f 	dsb	sy
9000d4c2:	e7fe      	b.n	9000d4c2 <vPortValidateInterruptPriority+0x4a>
	}
9000d4c4:	4770      	bx	lr
9000d4c6:	bf00      	nop
9000d4c8:	e000e3f0 	.word	0xe000e3f0
9000d4cc:	24024da0 	.word	0x24024da0
9000d4d0:	24024da4 	.word	0x24024da4

9000d4d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
9000d4d4:	b570      	push	{r4, r5, r6, lr}
9000d4d6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000d4d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
9000d4da:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000d4dc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
9000d4de:	b92a      	cbnz	r2, 9000d4ec <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000d4e0:	6805      	ldr	r5, [r0, #0]
9000d4e2:	b365      	cbz	r5, 9000d53e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d4e4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000d4e6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d4e8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
9000d4ea:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
9000d4ec:	b97d      	cbnz	r5, 9000d50e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000d4ee:	6840      	ldr	r0, [r0, #4]
9000d4f0:	f016 fc35 	bl	90023d5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d4f4:	6863      	ldr	r3, [r4, #4]
9000d4f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000d4f8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000d4fa:	68a2      	ldr	r2, [r4, #8]
9000d4fc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000d4fe:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000d500:	d319      	bcc.n	9000d536 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000d502:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d504:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000d506:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
9000d508:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d50a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000d50c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9000d50e:	68c0      	ldr	r0, [r0, #12]
9000d510:	f016 fc25 	bl	90023d5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000d514:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000d516:	68e3      	ldr	r3, [r4, #12]
9000d518:	4251      	negs	r1, r2
9000d51a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000d51c:	6822      	ldr	r2, [r4, #0]
9000d51e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
9000d520:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9000d522:	d202      	bcs.n	9000d52a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
9000d524:	68a3      	ldr	r3, [r4, #8]
9000d526:	440b      	add	r3, r1
9000d528:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9000d52a:	2d02      	cmp	r5, #2
9000d52c:	d00d      	beq.n	9000d54a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d52e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000d530:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d532:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000d534:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d536:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
9000d538:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d53a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9000d53c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000d53e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000d540:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9000d542:	f001 ff1f 	bl	9000f384 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
9000d546:	60a5      	str	r5, [r4, #8]
9000d548:	e7ce      	b.n	9000d4e8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000d54a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9000d54c:	f04f 0000 	mov.w	r0, #0
9000d550:	bf38      	it	cc
9000d552:	2601      	movcc	r6, #1
9000d554:	e7c8      	b.n	9000d4e8 <prvCopyDataToQueue+0x14>
9000d556:	bf00      	nop

9000d558 <xQueueGenericCreateStatic>:
	{
9000d558:	b530      	push	{r4, r5, lr}
9000d55a:	b083      	sub	sp, #12
9000d55c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000d560:	b940      	cbnz	r0, 9000d574 <xQueueGenericCreateStatic+0x1c>
9000d562:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d566:	f383 8811 	msr	BASEPRI, r3
9000d56a:	f3bf 8f6f 	isb	sy
9000d56e:	f3bf 8f4f 	dsb	sy
9000d572:	e7fe      	b.n	9000d572 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
9000d574:	461d      	mov	r5, r3
9000d576:	b153      	cbz	r3, 9000d58e <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
9000d578:	b30a      	cbz	r2, 9000d5be <xQueueGenericCreateStatic+0x66>
9000d57a:	b989      	cbnz	r1, 9000d5a0 <xQueueGenericCreateStatic+0x48>
9000d57c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d580:	f383 8811 	msr	BASEPRI, r3
9000d584:	f3bf 8f6f 	isb	sy
9000d588:	f3bf 8f4f 	dsb	sy
9000d58c:	e7fe      	b.n	9000d58c <xQueueGenericCreateStatic+0x34>
9000d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d592:	f383 8811 	msr	BASEPRI, r3
9000d596:	f3bf 8f6f 	isb	sy
9000d59a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000d59e:	e7fe      	b.n	9000d59e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000d5a0:	b16a      	cbz	r2, 9000d5be <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000d5a2:	2350      	movs	r3, #80	; 0x50
9000d5a4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000d5a6:	9b01      	ldr	r3, [sp, #4]
9000d5a8:	2b50      	cmp	r3, #80	; 0x50
9000d5aa:	d013      	beq.n	9000d5d4 <xQueueGenericCreateStatic+0x7c>
9000d5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d5b0:	f383 8811 	msr	BASEPRI, r3
9000d5b4:	f3bf 8f6f 	isb	sy
9000d5b8:	f3bf 8f4f 	dsb	sy
9000d5bc:	e7fe      	b.n	9000d5bc <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
9000d5be:	2900      	cmp	r1, #0
9000d5c0:	d0ef      	beq.n	9000d5a2 <xQueueGenericCreateStatic+0x4a>
9000d5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d5c6:	f383 8811 	msr	BASEPRI, r3
9000d5ca:	f3bf 8f6f 	isb	sy
9000d5ce:	f3bf 8f4f 	dsb	sy
9000d5d2:	e7fe      	b.n	9000d5d2 <xQueueGenericCreateStatic+0x7a>
	if( uxItemSize == ( UBaseType_t ) 0 )
9000d5d4:	2900      	cmp	r1, #0
9000d5d6:	bf08      	it	eq
9000d5d8:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
9000d5da:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
9000d5dc:	6429      	str	r1, [r5, #64]	; 0x40
9000d5de:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000d5e0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d5e2:	2201      	movs	r2, #1
9000d5e4:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
9000d5e8:	f7ff fe14 	bl	9000d214 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d5ec:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d5ee:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d5f0:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d5f2:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d5f4:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
9000d5f8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d5fc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d5fe:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d600:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d602:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000d604:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d606:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d60a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000d60c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d610:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d614:	f7ff fd46 	bl	9000d0a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d618:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000d61c:	f7ff fd42 	bl	9000d0a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000d620:	f7ff fe1a 	bl	9000d258 <vPortExitCritical>
	}
9000d624:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000d626:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9000d62a:	b003      	add	sp, #12
9000d62c:	bd30      	pop	{r4, r5, pc}
9000d62e:	bf00      	nop

9000d630 <xQueueGenericCreate>:
	{
9000d630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
9000d632:	b940      	cbnz	r0, 9000d646 <xQueueGenericCreate+0x16>
9000d634:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d638:	f383 8811 	msr	BASEPRI, r3
9000d63c:	f3bf 8f6f 	isb	sy
9000d640:	f3bf 8f4f 	dsb	sy
9000d644:	e7fe      	b.n	9000d644 <xQueueGenericCreate+0x14>
9000d646:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000d648:	fb01 f000 	mul.w	r0, r1, r0
9000d64c:	460e      	mov	r6, r1
9000d64e:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000d650:	3050      	adds	r0, #80	; 0x50
9000d652:	f7ff fc05 	bl	9000ce60 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000d656:	4604      	mov	r4, r0
9000d658:	b340      	cbz	r0, 9000d6ac <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d65a:	2300      	movs	r3, #0
9000d65c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
9000d660:	b336      	cbz	r6, 9000d6b0 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d662:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
9000d666:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
9000d668:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9000d66c:	f7ff fdd2 	bl	9000d214 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d670:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d672:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d676:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d678:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9000d67c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d680:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d682:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d684:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d686:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d688:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9000d68a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d68c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d68e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
9000d690:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d694:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d698:	f7ff fd04 	bl	9000d0a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d69c:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000d6a0:	f7ff fd00 	bl	9000d0a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000d6a4:	f7ff fdd8 	bl	9000d258 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000d6a8:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
9000d6ac:	4620      	mov	r0, r4
9000d6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000d6b0:	4603      	mov	r3, r0
9000d6b2:	e7d8      	b.n	9000d666 <xQueueGenericCreate+0x36>

9000d6b4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
9000d6b4:	b940      	cbnz	r0, 9000d6c8 <xQueueCreateCountingSemaphoreStatic+0x14>
9000d6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d6ba:	f383 8811 	msr	BASEPRI, r3
9000d6be:	f3bf 8f6f 	isb	sy
9000d6c2:	f3bf 8f4f 	dsb	sy
9000d6c6:	e7fe      	b.n	9000d6c6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
9000d6c8:	4288      	cmp	r0, r1
9000d6ca:	d208      	bcs.n	9000d6de <xQueueCreateCountingSemaphoreStatic+0x2a>
9000d6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d6d0:	f383 8811 	msr	BASEPRI, r3
9000d6d4:	f3bf 8f6f 	isb	sy
9000d6d8:	f3bf 8f4f 	dsb	sy
9000d6dc:	e7fe      	b.n	9000d6dc <xQueueCreateCountingSemaphoreStatic+0x28>
	{
9000d6de:	b530      	push	{r4, r5, lr}
9000d6e0:	4615      	mov	r5, r2
9000d6e2:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
9000d6e4:	2a00      	cmp	r2, #0
9000d6e6:	d03d      	beq.n	9000d764 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000d6e8:	2350      	movs	r3, #80	; 0x50
9000d6ea:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
9000d6ec:	9b03      	ldr	r3, [sp, #12]
9000d6ee:	2b50      	cmp	r3, #80	; 0x50
9000d6f0:	d008      	beq.n	9000d704 <xQueueCreateCountingSemaphoreStatic+0x50>
9000d6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d6f6:	f383 8811 	msr	BASEPRI, r3
9000d6fa:	f3bf 8f6f 	isb	sy
9000d6fe:	f3bf 8f4f 	dsb	sy
9000d702:	e7fe      	b.n	9000d702 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
9000d704:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d706:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d708:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000d70a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000d70c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000d710:	6414      	str	r4, [r2, #64]	; 0x40
9000d712:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000d714:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
9000d716:	f7ff fd7d 	bl	9000d214 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d71a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d71c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d71e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d720:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
9000d724:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d728:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d72c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d72e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d730:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000d732:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d734:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d738:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000d73c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d740:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d744:	f7ff fcae 	bl	9000d0a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d748:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000d74c:	f7ff fcaa 	bl	9000d0a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000d750:	f7ff fd82 	bl	9000d258 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000d754:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000d756:	9901      	ldr	r1, [sp, #4]
	}
9000d758:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9000d75a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000d75e:	63a9      	str	r1, [r5, #56]	; 0x38
	}
9000d760:	b005      	add	sp, #20
9000d762:	bd30      	pop	{r4, r5, pc}
9000d764:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d768:	f383 8811 	msr	BASEPRI, r3
9000d76c:	f3bf 8f6f 	isb	sy
9000d770:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000d774:	e7fe      	b.n	9000d774 <xQueueCreateCountingSemaphoreStatic+0xc0>
9000d776:	bf00      	nop

9000d778 <xQueueCreateCountingSemaphore>:
	{
9000d778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9000d77a:	b940      	cbnz	r0, 9000d78e <xQueueCreateCountingSemaphore+0x16>
9000d77c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d780:	f383 8811 	msr	BASEPRI, r3
9000d784:	f3bf 8f6f 	isb	sy
9000d788:	f3bf 8f4f 	dsb	sy
9000d78c:	e7fe      	b.n	9000d78c <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9000d78e:	4288      	cmp	r0, r1
9000d790:	4604      	mov	r4, r0
9000d792:	460e      	mov	r6, r1
9000d794:	d208      	bcs.n	9000d7a8 <xQueueCreateCountingSemaphore+0x30>
9000d796:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d79a:	f383 8811 	msr	BASEPRI, r3
9000d79e:	f3bf 8f6f 	isb	sy
9000d7a2:	f3bf 8f4f 	dsb	sy
9000d7a6:	e7fe      	b.n	9000d7a6 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000d7a8:	2050      	movs	r0, #80	; 0x50
9000d7aa:	f7ff fb59 	bl	9000ce60 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000d7ae:	4605      	mov	r5, r0
9000d7b0:	b330      	cbz	r0, 9000d800 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d7b2:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000d7b4:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
9000d7b6:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000d7b8:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000d7bc:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
9000d7be:	f7ff fd29 	bl	9000d214 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d7c2:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000d7c4:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d7c6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000d7ca:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d7cc:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
9000d7d0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d7d4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d7d6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d7d8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d7da:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000d7dc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000d7de:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9000d7e0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000d7e4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000d7e8:	f7ff fc5c 	bl	9000d0a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000d7ec:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000d7f0:	f7ff fc58 	bl	9000d0a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000d7f4:	f7ff fd30 	bl	9000d258 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
9000d7f8:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9000d7fa:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
9000d7fc:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
9000d800:	4628      	mov	r0, r5
9000d802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

9000d804 <xQueueGenericSend>:
{
9000d804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000d808:	b084      	sub	sp, #16
9000d80a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9000d80c:	2800      	cmp	r0, #0
9000d80e:	f000 8103 	beq.w	9000da18 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d812:	4688      	mov	r8, r1
9000d814:	4604      	mov	r4, r0
9000d816:	461f      	mov	r7, r3
9000d818:	2900      	cmp	r1, #0
9000d81a:	f000 8097 	beq.w	9000d94c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000d81e:	2f02      	cmp	r7, #2
9000d820:	d10b      	bne.n	9000d83a <xQueueGenericSend+0x36>
9000d822:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000d824:	2b01      	cmp	r3, #1
9000d826:	d008      	beq.n	9000d83a <xQueueGenericSend+0x36>
9000d828:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d82c:	f383 8811 	msr	BASEPRI, r3
9000d830:	f3bf 8f6f 	isb	sy
9000d834:	f3bf 8f4f 	dsb	sy
9000d838:	e7fe      	b.n	9000d838 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000d83a:	f001 fd4d 	bl	9000f2d8 <xTaskGetSchedulerState>
9000d83e:	2800      	cmp	r0, #0
9000d840:	f000 80f3 	beq.w	9000da2a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d844:	f1a7 0902 	sub.w	r9, r7, #2
9000d848:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d84a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d84e:	fab9 f989 	clz	r9, r9
9000d852:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
9000d856:	f7ff fcdd 	bl	9000d214 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d85a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000d85c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000d85e:	429a      	cmp	r2, r3
9000d860:	f0c0 80f0 	bcc.w	9000da44 <xQueueGenericSend+0x240>
9000d864:	f1b9 0f00 	cmp.w	r9, #0
9000d868:	f040 80ec 	bne.w	9000da44 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9000d86c:	9b01      	ldr	r3, [sp, #4]
9000d86e:	2b00      	cmp	r3, #0
9000d870:	f000 8101 	beq.w	9000da76 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
9000d874:	2d00      	cmp	r5, #0
9000d876:	f000 80cb 	beq.w	9000da10 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9000d87a:	f7ff fced 	bl	9000d258 <vPortExitCritical>
		vTaskSuspendAll();
9000d87e:	f001 fb55 	bl	9000ef2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000d882:	f7ff fcc7 	bl	9000d214 <vPortEnterCritical>
9000d886:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d88a:	2bff      	cmp	r3, #255	; 0xff
9000d88c:	d102      	bne.n	9000d894 <xQueueGenericSend+0x90>
9000d88e:	2300      	movs	r3, #0
9000d890:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000d894:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d898:	2bff      	cmp	r3, #255	; 0xff
9000d89a:	d102      	bne.n	9000d8a2 <xQueueGenericSend+0x9e>
9000d89c:	2300      	movs	r3, #0
9000d89e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000d8a2:	f7ff fcd9 	bl	9000d258 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000d8a6:	a901      	add	r1, sp, #4
9000d8a8:	a802      	add	r0, sp, #8
9000d8aa:	f001 fcc1 	bl	9000f230 <xTaskCheckForTimeOut>
9000d8ae:	2800      	cmp	r0, #0
9000d8b0:	f040 80e5 	bne.w	9000da7e <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
9000d8b4:	f7ff fcae 	bl	9000d214 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
9000d8b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000d8ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000d8bc:	429a      	cmp	r2, r3
9000d8be:	d052      	beq.n	9000d966 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
9000d8c0:	f7ff fcca 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d8c4:	f7ff fca6 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d8c8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
9000d8cc:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d8ce:	2d00      	cmp	r5, #0
9000d8d0:	dc04      	bgt.n	9000d8dc <xQueueGenericSend+0xd8>
9000d8d2:	e011      	b.n	9000d8f8 <xQueueGenericSend+0xf4>
			--cTxLock;
9000d8d4:	1e6a      	subs	r2, r5, #1
9000d8d6:	b2d3      	uxtb	r3, r2
9000d8d8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d8da:	b16b      	cbz	r3, 9000d8f8 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d8dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d8de:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d8e0:	b153      	cbz	r3, 9000d8f8 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d8e2:	f001 fc4f 	bl	9000f184 <xTaskRemoveFromEventList>
9000d8e6:	2800      	cmp	r0, #0
9000d8e8:	d0f4      	beq.n	9000d8d4 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
9000d8ea:	f001 fce9 	bl	9000f2c0 <vTaskMissedYield>
			--cTxLock;
9000d8ee:	1e6a      	subs	r2, r5, #1
9000d8f0:	b2d3      	uxtb	r3, r2
9000d8f2:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d8f4:	2b00      	cmp	r3, #0
9000d8f6:	d1f1      	bne.n	9000d8dc <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
9000d8f8:	23ff      	movs	r3, #255	; 0xff
9000d8fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d8fe:	f7ff fcab 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d902:	f7ff fc87 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d906:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
9000d90a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d90c:	2d00      	cmp	r5, #0
9000d90e:	dd14      	ble.n	9000d93a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d910:	f104 0a10 	add.w	sl, r4, #16
9000d914:	e003      	b.n	9000d91e <xQueueGenericSend+0x11a>
				--cRxLock;
9000d916:	1e6a      	subs	r2, r5, #1
9000d918:	b2d3      	uxtb	r3, r2
9000d91a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d91c:	b16b      	cbz	r3, 9000d93a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d91e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d920:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d922:	b153      	cbz	r3, 9000d93a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d924:	f001 fc2e 	bl	9000f184 <xTaskRemoveFromEventList>
9000d928:	2800      	cmp	r0, #0
9000d92a:	d0f4      	beq.n	9000d916 <xQueueGenericSend+0x112>
					vTaskMissedYield();
9000d92c:	f001 fcc8 	bl	9000f2c0 <vTaskMissedYield>
				--cRxLock;
9000d930:	1e6a      	subs	r2, r5, #1
9000d932:	b2d3      	uxtb	r3, r2
9000d934:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d936:	2b00      	cmp	r3, #0
9000d938:	d1f1      	bne.n	9000d91e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
9000d93a:	23ff      	movs	r3, #255	; 0xff
9000d93c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d940:	f7ff fc8a 	bl	9000d258 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000d944:	f001 fafa 	bl	9000ef3c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000d948:	2501      	movs	r5, #1
9000d94a:	e784      	b.n	9000d856 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000d94c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000d94e:	2b00      	cmp	r3, #0
9000d950:	f43f af65 	beq.w	9000d81e <xQueueGenericSend+0x1a>
9000d954:	f04f 0350 	mov.w	r3, #80	; 0x50
9000d958:	f383 8811 	msr	BASEPRI, r3
9000d95c:	f3bf 8f6f 	isb	sy
9000d960:	f3bf 8f4f 	dsb	sy
9000d964:	e7fe      	b.n	9000d964 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000d966:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
9000d96a:	f7ff fc75 	bl	9000d258 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
9000d96e:	9901      	ldr	r1, [sp, #4]
9000d970:	4650      	mov	r0, sl
9000d972:	f001 fb79 	bl	9000f068 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000d976:	f7ff fc4d 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000d97a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000d97e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d980:	2d00      	cmp	r5, #0
9000d982:	dc04      	bgt.n	9000d98e <xQueueGenericSend+0x18a>
9000d984:	e011      	b.n	9000d9aa <xQueueGenericSend+0x1a6>
			--cTxLock;
9000d986:	1e6b      	subs	r3, r5, #1
9000d988:	b2da      	uxtb	r2, r3
9000d98a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d98c:	b16a      	cbz	r2, 9000d9aa <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d98e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d990:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000d992:	b153      	cbz	r3, 9000d9aa <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000d994:	f001 fbf6 	bl	9000f184 <xTaskRemoveFromEventList>
9000d998:	2800      	cmp	r0, #0
9000d99a:	d0f4      	beq.n	9000d986 <xQueueGenericSend+0x182>
						vTaskMissedYield();
9000d99c:	f001 fc90 	bl	9000f2c0 <vTaskMissedYield>
			--cTxLock;
9000d9a0:	1e6b      	subs	r3, r5, #1
9000d9a2:	b2da      	uxtb	r2, r3
9000d9a4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000d9a6:	2a00      	cmp	r2, #0
9000d9a8:	d1f1      	bne.n	9000d98e <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
9000d9aa:	23ff      	movs	r3, #255	; 0xff
9000d9ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000d9b0:	f7ff fc52 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000d9b4:	f7ff fc2e 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000d9b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000d9bc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d9be:	2d00      	cmp	r5, #0
9000d9c0:	dc04      	bgt.n	9000d9cc <xQueueGenericSend+0x1c8>
9000d9c2:	e011      	b.n	9000d9e8 <xQueueGenericSend+0x1e4>
				--cRxLock;
9000d9c4:	1e6b      	subs	r3, r5, #1
9000d9c6:	b2da      	uxtb	r2, r3
9000d9c8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d9ca:	b16a      	cbz	r2, 9000d9e8 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d9cc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d9ce:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000d9d0:	b153      	cbz	r3, 9000d9e8 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000d9d2:	f001 fbd7 	bl	9000f184 <xTaskRemoveFromEventList>
9000d9d6:	2800      	cmp	r0, #0
9000d9d8:	d0f4      	beq.n	9000d9c4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
9000d9da:	f001 fc71 	bl	9000f2c0 <vTaskMissedYield>
				--cRxLock;
9000d9de:	1e6b      	subs	r3, r5, #1
9000d9e0:	b2da      	uxtb	r2, r3
9000d9e2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000d9e4:	2a00      	cmp	r2, #0
9000d9e6:	d1f1      	bne.n	9000d9cc <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000d9e8:	23ff      	movs	r3, #255	; 0xff
9000d9ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000d9ee:	f7ff fc33 	bl	9000d258 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000d9f2:	f001 faa3 	bl	9000ef3c <xTaskResumeAll>
9000d9f6:	2800      	cmp	r0, #0
9000d9f8:	d1a6      	bne.n	9000d948 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
9000d9fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000d9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000da02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000da06:	f3bf 8f4f 	dsb	sy
9000da0a:	f3bf 8f6f 	isb	sy
9000da0e:	e79b      	b.n	9000d948 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000da10:	a802      	add	r0, sp, #8
9000da12:	f001 fc01 	bl	9000f218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000da16:	e730      	b.n	9000d87a <xQueueGenericSend+0x76>
9000da18:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da1c:	f383 8811 	msr	BASEPRI, r3
9000da20:	f3bf 8f6f 	isb	sy
9000da24:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000da28:	e7fe      	b.n	9000da28 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000da2a:	9b01      	ldr	r3, [sp, #4]
9000da2c:	2b00      	cmp	r3, #0
9000da2e:	f43f af09 	beq.w	9000d844 <xQueueGenericSend+0x40>
9000da32:	f04f 0350 	mov.w	r3, #80	; 0x50
9000da36:	f383 8811 	msr	BASEPRI, r3
9000da3a:	f3bf 8f6f 	isb	sy
9000da3e:	f3bf 8f4f 	dsb	sy
9000da42:	e7fe      	b.n	9000da42 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000da44:	463a      	mov	r2, r7
9000da46:	4641      	mov	r1, r8
9000da48:	4620      	mov	r0, r4
9000da4a:	f7ff fd43 	bl	9000d4d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000da4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000da50:	2b00      	cmp	r3, #0
9000da52:	d152      	bne.n	9000dafa <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
9000da54:	b148      	cbz	r0, 9000da6a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
9000da56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000da5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000da5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000da62:	f3bf 8f4f 	dsb	sy
9000da66:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
9000da6a:	f7ff fbf5 	bl	9000d258 <vPortExitCritical>
				return pdPASS;
9000da6e:	2001      	movs	r0, #1
}
9000da70:	b004      	add	sp, #16
9000da72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
9000da76:	f7ff fbef 	bl	9000d258 <vPortExitCritical>
					return errQUEUE_FULL;
9000da7a:	4648      	mov	r0, r9
9000da7c:	e7f8      	b.n	9000da70 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
9000da7e:	f7ff fbc9 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000da82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000da86:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000da88:	2d00      	cmp	r5, #0
9000da8a:	dd10      	ble.n	9000daae <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000da8c:	f104 0624 	add.w	r6, r4, #36	; 0x24
9000da90:	e003      	b.n	9000da9a <xQueueGenericSend+0x296>
			--cTxLock;
9000da92:	1e6b      	subs	r3, r5, #1
9000da94:	b2da      	uxtb	r2, r3
9000da96:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000da98:	b14a      	cbz	r2, 9000daae <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000da9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000da9c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000da9e:	b133      	cbz	r3, 9000daae <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000daa0:	f001 fb70 	bl	9000f184 <xTaskRemoveFromEventList>
9000daa4:	2800      	cmp	r0, #0
9000daa6:	d0f4      	beq.n	9000da92 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
9000daa8:	f001 fc0a 	bl	9000f2c0 <vTaskMissedYield>
9000daac:	e7f1      	b.n	9000da92 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
9000daae:	23ff      	movs	r3, #255	; 0xff
9000dab0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000dab4:	f7ff fbd0 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000dab8:	f7ff fbac 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000dabc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000dac0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dac2:	2d00      	cmp	r5, #0
9000dac4:	dd10      	ble.n	9000dae8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dac6:	f104 0610 	add.w	r6, r4, #16
9000daca:	e003      	b.n	9000dad4 <xQueueGenericSend+0x2d0>
				--cRxLock;
9000dacc:	1e6b      	subs	r3, r5, #1
9000dace:	b2da      	uxtb	r2, r3
9000dad0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dad2:	b14a      	cbz	r2, 9000dae8 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dad4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dad6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000dad8:	b133      	cbz	r3, 9000dae8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dada:	f001 fb53 	bl	9000f184 <xTaskRemoveFromEventList>
9000dade:	2800      	cmp	r0, #0
9000dae0:	d0f4      	beq.n	9000dacc <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
9000dae2:	f001 fbed 	bl	9000f2c0 <vTaskMissedYield>
9000dae6:	e7f1      	b.n	9000dacc <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
9000dae8:	23ff      	movs	r3, #255	; 0xff
9000daea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000daee:	f7ff fbb3 	bl	9000d258 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000daf2:	f001 fa23 	bl	9000ef3c <xTaskResumeAll>
			return errQUEUE_FULL;
9000daf6:	2000      	movs	r0, #0
9000daf8:	e7ba      	b.n	9000da70 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dafa:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000dafe:	f001 fb41 	bl	9000f184 <xTaskRemoveFromEventList>
9000db02:	2800      	cmp	r0, #0
9000db04:	d0b1      	beq.n	9000da6a <xQueueGenericSend+0x266>
9000db06:	e7a6      	b.n	9000da56 <xQueueGenericSend+0x252>

9000db08 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
9000db08:	b179      	cbz	r1, 9000db2a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
9000db0a:	2350      	movs	r3, #80	; 0x50
	{
9000db0c:	b570      	push	{r4, r5, r6, lr}
9000db0e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
9000db10:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
9000db12:	9b01      	ldr	r3, [sp, #4]
9000db14:	2b50      	cmp	r3, #80	; 0x50
9000db16:	d011      	beq.n	9000db3c <xQueueCreateMutexStatic+0x34>
9000db18:	f04f 0350 	mov.w	r3, #80	; 0x50
9000db1c:	f383 8811 	msr	BASEPRI, r3
9000db20:	f3bf 8f6f 	isb	sy
9000db24:	f3bf 8f4f 	dsb	sy
9000db28:	e7fe      	b.n	9000db28 <xQueueCreateMutexStatic+0x20>
9000db2a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000db2e:	f383 8811 	msr	BASEPRI, r3
9000db32:	f3bf 8f6f 	isb	sy
9000db36:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9000db3a:	e7fe      	b.n	9000db3a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
9000db3c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000db3e:	2301      	movs	r3, #1
9000db40:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000db42:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9000db44:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
9000db48:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
9000db4a:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
9000db4c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
9000db50:	f7ff fb60 	bl	9000d214 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000db54:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
9000db56:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000db58:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000db5a:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
9000db5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000db60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000db64:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
9000db68:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000db6c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000db6e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000db70:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000db72:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000db76:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000db7a:	f7ff fa93 	bl	9000d0a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000db7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000db82:	f7ff fa8f 	bl	9000d0a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000db86:	f7ff fb67 	bl	9000d258 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000db8a:	4633      	mov	r3, r6
9000db8c:	4632      	mov	r2, r6
9000db8e:	4631      	mov	r1, r6
9000db90:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000db92:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000db96:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000db98:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000db9a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000db9c:	f7ff fe32 	bl	9000d804 <xQueueGenericSend>
	}
9000dba0:	4620      	mov	r0, r4
9000dba2:	b002      	add	sp, #8
9000dba4:	bd70      	pop	{r4, r5, r6, pc}
9000dba6:	bf00      	nop

9000dba8 <xQueueGiveMutexRecursive>:
	{
9000dba8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
9000dbaa:	b138      	cbz	r0, 9000dbbc <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000dbac:	6885      	ldr	r5, [r0, #8]
9000dbae:	4604      	mov	r4, r0
9000dbb0:	f001 fb8c 	bl	9000f2cc <xTaskGetCurrentTaskHandle>
9000dbb4:	4285      	cmp	r5, r0
9000dbb6:	d00a      	beq.n	9000dbce <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
9000dbb8:	2000      	movs	r0, #0
	}
9000dbba:	bd38      	pop	{r3, r4, r5, pc}
9000dbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dbc0:	f383 8811 	msr	BASEPRI, r3
9000dbc4:	f3bf 8f6f 	isb	sy
9000dbc8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000dbcc:	e7fe      	b.n	9000dbcc <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
9000dbce:	68e3      	ldr	r3, [r4, #12]
9000dbd0:	3b01      	subs	r3, #1
9000dbd2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
9000dbd4:	b10b      	cbz	r3, 9000dbda <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
9000dbd6:	2001      	movs	r0, #1
	}
9000dbd8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
9000dbda:	461a      	mov	r2, r3
9000dbdc:	4619      	mov	r1, r3
9000dbde:	4620      	mov	r0, r4
9000dbe0:	f7ff fe10 	bl	9000d804 <xQueueGenericSend>
			xReturn = pdPASS;
9000dbe4:	2001      	movs	r0, #1
	}
9000dbe6:	bd38      	pop	{r3, r4, r5, pc}

9000dbe8 <xQueueCreateMutex>:
	{
9000dbe8:	b570      	push	{r4, r5, r6, lr}
9000dbea:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
9000dbec:	2050      	movs	r0, #80	; 0x50
9000dbee:	f7ff f937 	bl	9000ce60 <pvPortMalloc>
		if( pxNewQueue != NULL )
9000dbf2:	4604      	mov	r4, r0
9000dbf4:	b370      	cbz	r0, 9000dc54 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000dbf6:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
9000dbf8:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
9000dbfa:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9000dbfc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
9000dc00:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
9000dc04:	f7ff fb06 	bl	9000d214 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000dc08:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9000dc0a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000dc0c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
9000dc10:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000dc12:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
9000dc16:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000dc1a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000dc1c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000dc1e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
9000dc20:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9000dc22:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
9000dc26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
9000dc2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
9000dc2e:	f7ff fa39 	bl	9000d0a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9000dc32:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000dc36:	f7ff fa35 	bl	9000d0a4 <vListInitialise>
	taskEXIT_CRITICAL();
9000dc3a:	f7ff fb0d 	bl	9000d258 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000dc3e:	4633      	mov	r3, r6
9000dc40:	4632      	mov	r2, r6
9000dc42:	4631      	mov	r1, r6
9000dc44:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
9000dc46:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
9000dc4a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
9000dc4c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
9000dc4e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
9000dc50:	f7ff fdd8 	bl	9000d804 <xQueueGenericSend>
	}
9000dc54:	4620      	mov	r0, r4
9000dc56:	bd70      	pop	{r4, r5, r6, pc}

9000dc58 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
9000dc58:	2800      	cmp	r0, #0
9000dc5a:	d04e      	beq.n	9000dcfa <xQueueGenericSendFromISR+0xa2>
{
9000dc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000dc60:	460e      	mov	r6, r1
9000dc62:	4604      	mov	r4, r0
9000dc64:	4617      	mov	r7, r2
9000dc66:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000dc68:	b339      	cbz	r1, 9000dcba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9000dc6a:	2d02      	cmp	r5, #2
9000dc6c:	d10b      	bne.n	9000dc86 <xQueueGenericSendFromISR+0x2e>
9000dc6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000dc70:	2b01      	cmp	r3, #1
9000dc72:	d008      	beq.n	9000dc86 <xQueueGenericSendFromISR+0x2e>
9000dc74:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dc78:	f383 8811 	msr	BASEPRI, r3
9000dc7c:	f3bf 8f6f 	isb	sy
9000dc80:	f3bf 8f4f 	dsb	sy
9000dc84:	e7fe      	b.n	9000dc84 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000dc86:	f7ff fbf7 	bl	9000d478 <vPortValidateInterruptPriority>
	__asm volatile
9000dc8a:	f3ef 8811 	mrs	r8, BASEPRI
9000dc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dc92:	f383 8811 	msr	BASEPRI, r3
9000dc96:	f3bf 8f6f 	isb	sy
9000dc9a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9000dc9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000dca0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000dca2:	429a      	cmp	r2, r3
9000dca4:	d315      	bcc.n	9000dcd2 <xQueueGenericSendFromISR+0x7a>
9000dca6:	f1a5 0002 	sub.w	r0, r5, #2
9000dcaa:	fab0 f080 	clz	r0, r0
9000dcae:	0940      	lsrs	r0, r0, #5
9000dcb0:	b978      	cbnz	r0, 9000dcd2 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
9000dcb2:	f388 8811 	msr	BASEPRI, r8
}
9000dcb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000dcba:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000dcbc:	2b00      	cmp	r3, #0
9000dcbe:	d0d4      	beq.n	9000dc6a <xQueueGenericSendFromISR+0x12>
	__asm volatile
9000dcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dcc4:	f383 8811 	msr	BASEPRI, r3
9000dcc8:	f3bf 8f6f 	isb	sy
9000dccc:	f3bf 8f4f 	dsb	sy
9000dcd0:	e7fe      	b.n	9000dcd0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000dcd2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
9000dcd4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000dcd8:	4631      	mov	r1, r6
9000dcda:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
9000dcdc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
9000dcde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
9000dce0:	f7ff fbf8 	bl	9000d4d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
9000dce4:	1c6b      	adds	r3, r5, #1
9000dce6:	d011      	beq.n	9000dd0c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000dce8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
9000dcea:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000dcec:	b25b      	sxtb	r3, r3
9000dcee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
9000dcf2:	f388 8811 	msr	BASEPRI, r8
}
9000dcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
9000dcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dcfe:	f383 8811 	msr	BASEPRI, r3
9000dd02:	f3bf 8f6f 	isb	sy
9000dd06:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000dd0a:	e7fe      	b.n	9000dd0a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dd0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000dd0e:	b90b      	cbnz	r3, 9000dd14 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
9000dd10:	2001      	movs	r0, #1
9000dd12:	e7ce      	b.n	9000dcb2 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dd14:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000dd18:	f001 fa34 	bl	9000f184 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000dd1c:	2800      	cmp	r0, #0
9000dd1e:	d0f7      	beq.n	9000dd10 <xQueueGenericSendFromISR+0xb8>
9000dd20:	2f00      	cmp	r7, #0
9000dd22:	d0f5      	beq.n	9000dd10 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000dd24:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000dd26:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000dd28:	603b      	str	r3, [r7, #0]
9000dd2a:	e7c2      	b.n	9000dcb2 <xQueueGenericSendFromISR+0x5a>

9000dd2c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
9000dd2c:	b360      	cbz	r0, 9000dd88 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
9000dd2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
9000dd30:	b570      	push	{r4, r5, r6, lr}
9000dd32:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
9000dd34:	b143      	cbz	r3, 9000dd48 <xQueueGiveFromISR+0x1c>
9000dd36:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd3a:	f383 8811 	msr	BASEPRI, r3
9000dd3e:	f3bf 8f6f 	isb	sy
9000dd42:	f3bf 8f4f 	dsb	sy
9000dd46:	e7fe      	b.n	9000dd46 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000dd48:	6803      	ldr	r3, [r0, #0]
9000dd4a:	460d      	mov	r5, r1
9000dd4c:	b32b      	cbz	r3, 9000dd9a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000dd4e:	f7ff fb93 	bl	9000d478 <vPortValidateInterruptPriority>
	__asm volatile
9000dd52:	f3ef 8611 	mrs	r6, BASEPRI
9000dd56:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd5a:	f383 8811 	msr	BASEPRI, r3
9000dd5e:	f3bf 8f6f 	isb	sy
9000dd62:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000dd66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
9000dd68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000dd6a:	429a      	cmp	r2, r3
9000dd6c:	d921      	bls.n	9000ddb2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
9000dd6e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000dd72:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
9000dd74:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9000dd76:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
9000dd78:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
9000dd7a:	d01e      	beq.n	9000ddba <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000dd7c:	3301      	adds	r3, #1
			xReturn = pdPASS;
9000dd7e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
9000dd80:	b25b      	sxtb	r3, r3
9000dd82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000dd86:	e015      	b.n	9000ddb4 <xQueueGiveFromISR+0x88>
	__asm volatile
9000dd88:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dd8c:	f383 8811 	msr	BASEPRI, r3
9000dd90:	f3bf 8f6f 	isb	sy
9000dd94:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000dd98:	e7fe      	b.n	9000dd98 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
9000dd9a:	6883      	ldr	r3, [r0, #8]
9000dd9c:	2b00      	cmp	r3, #0
9000dd9e:	d0d6      	beq.n	9000dd4e <xQueueGiveFromISR+0x22>
9000dda0:	f04f 0350 	mov.w	r3, #80	; 0x50
9000dda4:	f383 8811 	msr	BASEPRI, r3
9000dda8:	f3bf 8f6f 	isb	sy
9000ddac:	f3bf 8f4f 	dsb	sy
9000ddb0:	e7fe      	b.n	9000ddb0 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
9000ddb2:	2000      	movs	r0, #0
	__asm volatile
9000ddb4:	f386 8811 	msr	BASEPRI, r6
}
9000ddb8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000ddba:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000ddbc:	b90b      	cbnz	r3, 9000ddc2 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
9000ddbe:	2001      	movs	r0, #1
9000ddc0:	e7f8      	b.n	9000ddb4 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000ddc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
9000ddc6:	f001 f9dd 	bl	9000f184 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
9000ddca:	2d00      	cmp	r5, #0
9000ddcc:	d0f7      	beq.n	9000ddbe <xQueueGiveFromISR+0x92>
9000ddce:	2800      	cmp	r0, #0
9000ddd0:	d0f5      	beq.n	9000ddbe <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
9000ddd2:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000ddd4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
9000ddd6:	602b      	str	r3, [r5, #0]
9000ddd8:	e7ec      	b.n	9000ddb4 <xQueueGiveFromISR+0x88>
9000ddda:	bf00      	nop

9000dddc <xQueueReceive>:
{
9000dddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000dde0:	b085      	sub	sp, #20
9000dde2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
9000dde4:	2800      	cmp	r0, #0
9000dde6:	f000 815c 	beq.w	9000e0a2 <xQueueReceive+0x2c6>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000ddea:	460f      	mov	r7, r1
9000ddec:	4604      	mov	r4, r0
9000ddee:	2900      	cmp	r1, #0
9000ddf0:	d079      	beq.n	9000dee6 <xQueueReceive+0x10a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000ddf2:	f001 fa71 	bl	9000f2d8 <xTaskGetSchedulerState>
9000ddf6:	2800      	cmp	r0, #0
9000ddf8:	f000 8081 	beq.w	9000defe <xQueueReceive+0x122>
		taskENTER_CRITICAL();
9000ddfc:	f7ff fa0a 	bl	9000d214 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000de00:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000de02:	2d00      	cmp	r5, #0
9000de04:	f040 8138 	bne.w	9000e078 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000de08:	9b01      	ldr	r3, [sp, #4]
9000de0a:	2b00      	cmp	r3, #0
9000de0c:	f000 80d5 	beq.w	9000dfba <xQueueReceive+0x1de>
		prvLockQueue( pxQueue );
9000de10:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000de12:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
9000de16:	a802      	add	r0, sp, #8
9000de18:	f001 f9fe 	bl	9000f218 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
9000de1c:	f7ff fa1c 	bl	9000d258 <vPortExitCritical>
		vTaskSuspendAll();
9000de20:	f001 f884 	bl	9000ef2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000de24:	f7ff f9f6 	bl	9000d214 <vPortEnterCritical>
9000de28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000de2c:	2bff      	cmp	r3, #255	; 0xff
9000de2e:	d101      	bne.n	9000de34 <xQueueReceive+0x58>
9000de30:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
9000de34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000de38:	2bff      	cmp	r3, #255	; 0xff
9000de3a:	d101      	bne.n	9000de40 <xQueueReceive+0x64>
9000de3c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
9000de40:	f7ff fa0a 	bl	9000d258 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000de44:	a901      	add	r1, sp, #4
9000de46:	a802      	add	r0, sp, #8
9000de48:	f001 f9f2 	bl	9000f230 <xTaskCheckForTimeOut>
9000de4c:	2800      	cmp	r0, #0
9000de4e:	d163      	bne.n	9000df18 <xQueueReceive+0x13c>
	taskENTER_CRITICAL();
9000de50:	f7ff f9e0 	bl	9000d214 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000de54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000de56:	2b00      	cmp	r3, #0
9000de58:	f000 80b5 	beq.w	9000dfc6 <xQueueReceive+0x1ea>
	taskEXIT_CRITICAL();
9000de5c:	f7ff f9fc 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000de60:	f7ff f9d8 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000de64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000de68:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000de6a:	2d00      	cmp	r5, #0
9000de6c:	dc04      	bgt.n	9000de78 <xQueueReceive+0x9c>
9000de6e:	e011      	b.n	9000de94 <xQueueReceive+0xb8>
			--cTxLock;
9000de70:	1e6b      	subs	r3, r5, #1
9000de72:	b2da      	uxtb	r2, r3
9000de74:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000de76:	b16a      	cbz	r2, 9000de94 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000de78:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000de7a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000de7c:	b153      	cbz	r3, 9000de94 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000de7e:	f001 f981 	bl	9000f184 <xTaskRemoveFromEventList>
9000de82:	2800      	cmp	r0, #0
9000de84:	d0f4      	beq.n	9000de70 <xQueueReceive+0x94>
						vTaskMissedYield();
9000de86:	f001 fa1b 	bl	9000f2c0 <vTaskMissedYield>
			--cTxLock;
9000de8a:	1e6b      	subs	r3, r5, #1
9000de8c:	b2da      	uxtb	r2, r3
9000de8e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000de90:	2a00      	cmp	r2, #0
9000de92:	d1f1      	bne.n	9000de78 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
9000de94:	23ff      	movs	r3, #255	; 0xff
9000de96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000de9a:	f7ff f9dd 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000de9e:	f7ff f9b9 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000dea2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000dea6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000dea8:	2d00      	cmp	r5, #0
9000deaa:	dd14      	ble.n	9000ded6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000deac:	f104 0910 	add.w	r9, r4, #16
9000deb0:	e003      	b.n	9000deba <xQueueReceive+0xde>
				--cRxLock;
9000deb2:	1e6b      	subs	r3, r5, #1
9000deb4:	b2da      	uxtb	r2, r3
9000deb6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000deb8:	b16a      	cbz	r2, 9000ded6 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000deba:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000debc:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000debe:	b153      	cbz	r3, 9000ded6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000dec0:	f001 f960 	bl	9000f184 <xTaskRemoveFromEventList>
9000dec4:	2800      	cmp	r0, #0
9000dec6:	d0f4      	beq.n	9000deb2 <xQueueReceive+0xd6>
					vTaskMissedYield();
9000dec8:	f001 f9fa 	bl	9000f2c0 <vTaskMissedYield>
				--cRxLock;
9000decc:	1e6b      	subs	r3, r5, #1
9000dece:	b2da      	uxtb	r2, r3
9000ded0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000ded2:	2a00      	cmp	r2, #0
9000ded4:	d1f1      	bne.n	9000deba <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
9000ded6:	23ff      	movs	r3, #255	; 0xff
9000ded8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000dedc:	f7ff f9bc 	bl	9000d258 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000dee0:	f001 f82c 	bl	9000ef3c <xTaskResumeAll>
		taskENTER_CRITICAL();
9000dee4:	e060      	b.n	9000dfa8 <xQueueReceive+0x1cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000dee6:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000dee8:	2b00      	cmp	r3, #0
9000deea:	d082      	beq.n	9000ddf2 <xQueueReceive+0x16>
	__asm volatile
9000deec:	f04f 0350 	mov.w	r3, #80	; 0x50
9000def0:	f383 8811 	msr	BASEPRI, r3
9000def4:	f3bf 8f6f 	isb	sy
9000def8:	f3bf 8f4f 	dsb	sy
9000defc:	e7fe      	b.n	9000defc <xQueueReceive+0x120>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000defe:	9b01      	ldr	r3, [sp, #4]
9000df00:	2b00      	cmp	r3, #0
9000df02:	f43f af7b 	beq.w	9000ddfc <xQueueReceive+0x20>
9000df06:	f04f 0350 	mov.w	r3, #80	; 0x50
9000df0a:	f383 8811 	msr	BASEPRI, r3
9000df0e:	f3bf 8f6f 	isb	sy
9000df12:	f3bf 8f4f 	dsb	sy
9000df16:	e7fe      	b.n	9000df16 <xQueueReceive+0x13a>
	taskENTER_CRITICAL();
9000df18:	f7ff f97c 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000df1c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000df20:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000df22:	2d00      	cmp	r5, #0
9000df24:	dc04      	bgt.n	9000df30 <xQueueReceive+0x154>
9000df26:	e011      	b.n	9000df4c <xQueueReceive+0x170>
			--cTxLock;
9000df28:	1e6b      	subs	r3, r5, #1
9000df2a:	b2da      	uxtb	r2, r3
9000df2c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000df2e:	b16a      	cbz	r2, 9000df4c <xQueueReceive+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000df30:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000df32:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000df34:	b153      	cbz	r3, 9000df4c <xQueueReceive+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000df36:	f001 f925 	bl	9000f184 <xTaskRemoveFromEventList>
9000df3a:	2800      	cmp	r0, #0
9000df3c:	d0f4      	beq.n	9000df28 <xQueueReceive+0x14c>
						vTaskMissedYield();
9000df3e:	f001 f9bf 	bl	9000f2c0 <vTaskMissedYield>
			--cTxLock;
9000df42:	1e6b      	subs	r3, r5, #1
9000df44:	b2da      	uxtb	r2, r3
9000df46:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000df48:	2a00      	cmp	r2, #0
9000df4a:	d1f1      	bne.n	9000df30 <xQueueReceive+0x154>
		pxQueue->cTxLock = queueUNLOCKED;
9000df4c:	23ff      	movs	r3, #255	; 0xff
9000df4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000df52:	f7ff f981 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000df56:	f7ff f95d 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000df5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000df5e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000df60:	2d00      	cmp	r5, #0
9000df62:	dd14      	ble.n	9000df8e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000df64:	f104 0910 	add.w	r9, r4, #16
9000df68:	e003      	b.n	9000df72 <xQueueReceive+0x196>
				--cRxLock;
9000df6a:	1e6b      	subs	r3, r5, #1
9000df6c:	b2da      	uxtb	r2, r3
9000df6e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000df70:	b16a      	cbz	r2, 9000df8e <xQueueReceive+0x1b2>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000df72:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000df74:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000df76:	b153      	cbz	r3, 9000df8e <xQueueReceive+0x1b2>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000df78:	f001 f904 	bl	9000f184 <xTaskRemoveFromEventList>
9000df7c:	2800      	cmp	r0, #0
9000df7e:	d0f4      	beq.n	9000df6a <xQueueReceive+0x18e>
					vTaskMissedYield();
9000df80:	f001 f99e 	bl	9000f2c0 <vTaskMissedYield>
				--cRxLock;
9000df84:	1e6b      	subs	r3, r5, #1
9000df86:	b2da      	uxtb	r2, r3
9000df88:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000df8a:	2a00      	cmp	r2, #0
9000df8c:	d1f1      	bne.n	9000df72 <xQueueReceive+0x196>
		pxQueue->cRxLock = queueUNLOCKED;
9000df8e:	23ff      	movs	r3, #255	; 0xff
9000df90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000df94:	f7ff f960 	bl	9000d258 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000df98:	f000 ffd0 	bl	9000ef3c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000df9c:	f7ff f93a 	bl	9000d214 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000dfa0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000dfa2:	b153      	cbz	r3, 9000dfba <xQueueReceive+0x1de>
	taskEXIT_CRITICAL();
9000dfa4:	f7ff f958 	bl	9000d258 <vPortExitCritical>
		taskENTER_CRITICAL();
9000dfa8:	f7ff f934 	bl	9000d214 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000dfac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000dfae:	2d00      	cmp	r5, #0
9000dfb0:	d162      	bne.n	9000e078 <xQueueReceive+0x29c>
				if( xTicksToWait == ( TickType_t ) 0 )
9000dfb2:	9b01      	ldr	r3, [sp, #4]
9000dfb4:	2b00      	cmp	r3, #0
9000dfb6:	f47f af31 	bne.w	9000de1c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
9000dfba:	f7ff f94d 	bl	9000d258 <vPortExitCritical>
					return errQUEUE_EMPTY;
9000dfbe:	2000      	movs	r0, #0
}
9000dfc0:	b005      	add	sp, #20
9000dfc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
9000dfc6:	f7ff f947 	bl	9000d258 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000dfca:	9901      	ldr	r1, [sp, #4]
9000dfcc:	4630      	mov	r0, r6
9000dfce:	f001 f84b 	bl	9000f068 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000dfd2:	f7ff f91f 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000dfd6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000dfda:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dfdc:	2d00      	cmp	r5, #0
9000dfde:	dc04      	bgt.n	9000dfea <xQueueReceive+0x20e>
9000dfe0:	e011      	b.n	9000e006 <xQueueReceive+0x22a>
			--cTxLock;
9000dfe2:	1e6b      	subs	r3, r5, #1
9000dfe4:	b2da      	uxtb	r2, r3
9000dfe6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000dfe8:	b16a      	cbz	r2, 9000e006 <xQueueReceive+0x22a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dfea:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dfec:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000dfee:	b153      	cbz	r3, 9000e006 <xQueueReceive+0x22a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000dff0:	f001 f8c8 	bl	9000f184 <xTaskRemoveFromEventList>
9000dff4:	2800      	cmp	r0, #0
9000dff6:	d0f4      	beq.n	9000dfe2 <xQueueReceive+0x206>
						vTaskMissedYield();
9000dff8:	f001 f962 	bl	9000f2c0 <vTaskMissedYield>
			--cTxLock;
9000dffc:	1e6b      	subs	r3, r5, #1
9000dffe:	b2da      	uxtb	r2, r3
9000e000:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e002:	2a00      	cmp	r2, #0
9000e004:	d1f1      	bne.n	9000dfea <xQueueReceive+0x20e>
		pxQueue->cTxLock = queueUNLOCKED;
9000e006:	23ff      	movs	r3, #255	; 0xff
9000e008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e00c:	f7ff f924 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e010:	f7ff f900 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e014:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e018:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e01a:	2d00      	cmp	r5, #0
9000e01c:	dd14      	ble.n	9000e048 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e01e:	f104 0910 	add.w	r9, r4, #16
9000e022:	e003      	b.n	9000e02c <xQueueReceive+0x250>
				--cRxLock;
9000e024:	1e6b      	subs	r3, r5, #1
9000e026:	b2da      	uxtb	r2, r3
9000e028:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e02a:	b16a      	cbz	r2, 9000e048 <xQueueReceive+0x26c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e02c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e02e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e030:	b153      	cbz	r3, 9000e048 <xQueueReceive+0x26c>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e032:	f001 f8a7 	bl	9000f184 <xTaskRemoveFromEventList>
9000e036:	2800      	cmp	r0, #0
9000e038:	d0f4      	beq.n	9000e024 <xQueueReceive+0x248>
					vTaskMissedYield();
9000e03a:	f001 f941 	bl	9000f2c0 <vTaskMissedYield>
				--cRxLock;
9000e03e:	1e6b      	subs	r3, r5, #1
9000e040:	b2da      	uxtb	r2, r3
9000e042:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e044:	2a00      	cmp	r2, #0
9000e046:	d1f1      	bne.n	9000e02c <xQueueReceive+0x250>
		pxQueue->cRxLock = queueUNLOCKED;
9000e048:	23ff      	movs	r3, #255	; 0xff
9000e04a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e04e:	f7ff f903 	bl	9000d258 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000e052:	f000 ff73 	bl	9000ef3c <xTaskResumeAll>
9000e056:	2800      	cmp	r0, #0
9000e058:	d1a6      	bne.n	9000dfa8 <xQueueReceive+0x1cc>
					portYIELD_WITHIN_API();
9000e05a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e062:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e066:	f3bf 8f4f 	dsb	sy
9000e06a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
9000e06e:	f7ff f8d1 	bl	9000d214 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e072:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e074:	2d00      	cmp	r5, #0
9000e076:	d09c      	beq.n	9000dfb2 <xQueueReceive+0x1d6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000e078:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000e07a:	b152      	cbz	r2, 9000e092 <xQueueReceive+0x2b6>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e07c:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e07e:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e080:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e082:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e084:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e086:	d301      	bcc.n	9000e08c <xQueueReceive+0x2b0>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000e088:	6821      	ldr	r1, [r4, #0]
9000e08a:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000e08c:	4638      	mov	r0, r7
9000e08e:	f015 fe66 	bl	90023d5e <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000e092:	3d01      	subs	r5, #1
9000e094:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e096:	6923      	ldr	r3, [r4, #16]
9000e098:	b963      	cbnz	r3, 9000e0b4 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
9000e09a:	f7ff f8dd 	bl	9000d258 <vPortExitCritical>
				return pdPASS;
9000e09e:	2001      	movs	r0, #1
9000e0a0:	e78e      	b.n	9000dfc0 <xQueueReceive+0x1e4>
9000e0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0a6:	f383 8811 	msr	BASEPRI, r3
9000e0aa:	f3bf 8f6f 	isb	sy
9000e0ae:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000e0b2:	e7fe      	b.n	9000e0b2 <xQueueReceive+0x2d6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e0b4:	f104 0010 	add.w	r0, r4, #16
9000e0b8:	f001 f864 	bl	9000f184 <xTaskRemoveFromEventList>
9000e0bc:	2800      	cmp	r0, #0
9000e0be:	d0ec      	beq.n	9000e09a <xQueueReceive+0x2be>
						queueYIELD_IF_USING_PREEMPTION();
9000e0c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e0c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e0cc:	f3bf 8f4f 	dsb	sy
9000e0d0:	f3bf 8f6f 	isb	sy
9000e0d4:	e7e1      	b.n	9000e09a <xQueueReceive+0x2be>
9000e0d6:	bf00      	nop

9000e0d8 <xQueueSemaphoreTake>:
{
9000e0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000e0dc:	b084      	sub	sp, #16
9000e0de:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
9000e0e0:	2800      	cmp	r0, #0
9000e0e2:	d05c      	beq.n	9000e19e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
9000e0e4:	6c07      	ldr	r7, [r0, #64]	; 0x40
9000e0e6:	4604      	mov	r4, r0
9000e0e8:	b147      	cbz	r7, 9000e0fc <xQueueSemaphoreTake+0x24>
9000e0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e0ee:	f383 8811 	msr	BASEPRI, r3
9000e0f2:	f3bf 8f6f 	isb	sy
9000e0f6:	f3bf 8f4f 	dsb	sy
9000e0fa:	e7fe      	b.n	9000e0fa <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e0fc:	f001 f8ec 	bl	9000f2d8 <xTaskGetSchedulerState>
9000e100:	4605      	mov	r5, r0
9000e102:	2800      	cmp	r0, #0
9000e104:	d054      	beq.n	9000e1b0 <xQueueSemaphoreTake+0xd8>
9000e106:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e108:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
9000e10c:	f7ff f882 	bl	9000d214 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
9000e110:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9000e112:	2b00      	cmp	r3, #0
9000e114:	f040 8149 	bne.w	9000e3aa <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
9000e118:	9b01      	ldr	r3, [sp, #4]
9000e11a:	2b00      	cmp	r3, #0
9000e11c:	f000 813a 	beq.w	9000e394 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
9000e120:	2d00      	cmp	r5, #0
9000e122:	f000 809d 	beq.w	9000e260 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9000e126:	f7ff f897 	bl	9000d258 <vPortExitCritical>
		vTaskSuspendAll();
9000e12a:	f000 feff 	bl	9000ef2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
9000e12e:	f7ff f871 	bl	9000d214 <vPortEnterCritical>
9000e132:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e136:	2bff      	cmp	r3, #255	; 0xff
9000e138:	d102      	bne.n	9000e140 <xQueueSemaphoreTake+0x68>
9000e13a:	2300      	movs	r3, #0
9000e13c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000e140:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e144:	2bff      	cmp	r3, #255	; 0xff
9000e146:	d102      	bne.n	9000e14e <xQueueSemaphoreTake+0x76>
9000e148:	2300      	movs	r3, #0
9000e14a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000e14e:	f7ff f883 	bl	9000d258 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9000e152:	a901      	add	r1, sp, #4
9000e154:	a802      	add	r0, sp, #8
9000e156:	f001 f86b 	bl	9000f230 <xTaskCheckForTimeOut>
9000e15a:	2800      	cmp	r0, #0
9000e15c:	d135      	bne.n	9000e1ca <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
9000e15e:	f7ff f859 	bl	9000d214 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000e162:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000e164:	2b00      	cmp	r3, #0
9000e166:	f000 80a4 	beq.w	9000e2b2 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
9000e16a:	f7ff f875 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e16e:	f7ff f851 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e172:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e176:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e178:	2d00      	cmp	r5, #0
9000e17a:	dc05      	bgt.n	9000e188 <xQueueSemaphoreTake+0xb0>
9000e17c:	e074      	b.n	9000e268 <xQueueSemaphoreTake+0x190>
			--cTxLock;
9000e17e:	1e6b      	subs	r3, r5, #1
9000e180:	b2da      	uxtb	r2, r3
9000e182:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e184:	2a00      	cmp	r2, #0
9000e186:	d06f      	beq.n	9000e268 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e188:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e18a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e18c:	2b00      	cmp	r3, #0
9000e18e:	d06b      	beq.n	9000e268 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e190:	f000 fff8 	bl	9000f184 <xTaskRemoveFromEventList>
9000e194:	2800      	cmp	r0, #0
9000e196:	d0f2      	beq.n	9000e17e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
9000e198:	f001 f892 	bl	9000f2c0 <vTaskMissedYield>
9000e19c:	e7ef      	b.n	9000e17e <xQueueSemaphoreTake+0xa6>
9000e19e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1a2:	f383 8811 	msr	BASEPRI, r3
9000e1a6:	f3bf 8f6f 	isb	sy
9000e1aa:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
9000e1ae:	e7fe      	b.n	9000e1ae <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9000e1b0:	9b01      	ldr	r3, [sp, #4]
9000e1b2:	2b00      	cmp	r3, #0
9000e1b4:	f000 80d4 	beq.w	9000e360 <xQueueSemaphoreTake+0x288>
9000e1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e1bc:	f383 8811 	msr	BASEPRI, r3
9000e1c0:	f3bf 8f6f 	isb	sy
9000e1c4:	f3bf 8f4f 	dsb	sy
9000e1c8:	e7fe      	b.n	9000e1c8 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
9000e1ca:	f7ff f823 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e1ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e1d2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e1d4:	2d00      	cmp	r5, #0
9000e1d6:	dc04      	bgt.n	9000e1e2 <xQueueSemaphoreTake+0x10a>
9000e1d8:	e011      	b.n	9000e1fe <xQueueSemaphoreTake+0x126>
			--cTxLock;
9000e1da:	1e6b      	subs	r3, r5, #1
9000e1dc:	b2da      	uxtb	r2, r3
9000e1de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e1e0:	b16a      	cbz	r2, 9000e1fe <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e1e4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e1e6:	b153      	cbz	r3, 9000e1fe <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e1e8:	f000 ffcc 	bl	9000f184 <xTaskRemoveFromEventList>
9000e1ec:	2800      	cmp	r0, #0
9000e1ee:	d0f4      	beq.n	9000e1da <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
9000e1f0:	f001 f866 	bl	9000f2c0 <vTaskMissedYield>
			--cTxLock;
9000e1f4:	1e6b      	subs	r3, r5, #1
9000e1f6:	b2da      	uxtb	r2, r3
9000e1f8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e1fa:	2a00      	cmp	r2, #0
9000e1fc:	d1f1      	bne.n	9000e1e2 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
9000e1fe:	23ff      	movs	r3, #255	; 0xff
9000e200:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e204:	f7ff f828 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e208:	f7ff f804 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e20c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e210:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e212:	2d00      	cmp	r5, #0
9000e214:	dd14      	ble.n	9000e240 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e216:	f104 0810 	add.w	r8, r4, #16
9000e21a:	e003      	b.n	9000e224 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
9000e21c:	1e6b      	subs	r3, r5, #1
9000e21e:	b2da      	uxtb	r2, r3
9000e220:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e222:	b16a      	cbz	r2, 9000e240 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e224:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e226:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e228:	b153      	cbz	r3, 9000e240 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e22a:	f000 ffab 	bl	9000f184 <xTaskRemoveFromEventList>
9000e22e:	2800      	cmp	r0, #0
9000e230:	d0f4      	beq.n	9000e21c <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9000e232:	f001 f845 	bl	9000f2c0 <vTaskMissedYield>
				--cRxLock;
9000e236:	1e6b      	subs	r3, r5, #1
9000e238:	b2da      	uxtb	r2, r3
9000e23a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e23c:	2a00      	cmp	r2, #0
9000e23e:	d1f1      	bne.n	9000e224 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
9000e240:	23ff      	movs	r3, #255	; 0xff
9000e242:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e246:	f7ff f807 	bl	9000d258 <vPortExitCritical>
			( void ) xTaskResumeAll();
9000e24a:	f000 fe77 	bl	9000ef3c <xTaskResumeAll>
	taskENTER_CRITICAL();
9000e24e:	f7fe ffe1 	bl	9000d214 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9000e252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000e254:	2b00      	cmp	r3, #0
9000e256:	d07c      	beq.n	9000e352 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
9000e258:	f7fe fffe 	bl	9000d258 <vPortExitCritical>
	return xReturn;
9000e25c:	2501      	movs	r5, #1
9000e25e:	e755      	b.n	9000e10c <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
9000e260:	a802      	add	r0, sp, #8
9000e262:	f000 ffd9 	bl	9000f218 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9000e266:	e75e      	b.n	9000e126 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000e268:	23ff      	movs	r3, #255	; 0xff
9000e26a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e26e:	f7fe fff3 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e272:	f7fe ffcf 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e276:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e27a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e27c:	2d00      	cmp	r5, #0
9000e27e:	dd10      	ble.n	9000e2a2 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e280:	f104 0810 	add.w	r8, r4, #16
9000e284:	e003      	b.n	9000e28e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9000e286:	1e6b      	subs	r3, r5, #1
9000e288:	b2da      	uxtb	r2, r3
9000e28a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e28c:	b14a      	cbz	r2, 9000e2a2 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e28e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e290:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e292:	b133      	cbz	r3, 9000e2a2 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e294:	f000 ff76 	bl	9000f184 <xTaskRemoveFromEventList>
9000e298:	2800      	cmp	r0, #0
9000e29a:	d0f4      	beq.n	9000e286 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
9000e29c:	f001 f810 	bl	9000f2c0 <vTaskMissedYield>
9000e2a0:	e7f1      	b.n	9000e286 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
9000e2a2:	23ff      	movs	r3, #255	; 0xff
9000e2a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e2a8:	f7fe ffd6 	bl	9000d258 <vPortExitCritical>
				( void ) xTaskResumeAll();
9000e2ac:	f000 fe46 	bl	9000ef3c <xTaskResumeAll>
9000e2b0:	e7d4      	b.n	9000e25c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000e2b2:	f7fe ffd1 	bl	9000d258 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000e2b6:	6823      	ldr	r3, [r4, #0]
9000e2b8:	2b00      	cmp	r3, #0
9000e2ba:	d062      	beq.n	9000e382 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
9000e2bc:	9901      	ldr	r1, [sp, #4]
9000e2be:	4630      	mov	r0, r6
9000e2c0:	f000 fed2 	bl	9000f068 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9000e2c4:	f7fe ffa6 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e2c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9000e2cc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e2ce:	2d00      	cmp	r5, #0
9000e2d0:	dc04      	bgt.n	9000e2dc <xQueueSemaphoreTake+0x204>
9000e2d2:	e00d      	b.n	9000e2f0 <xQueueSemaphoreTake+0x218>
			--cTxLock;
9000e2d4:	1e6b      	subs	r3, r5, #1
9000e2d6:	b2da      	uxtb	r2, r3
9000e2d8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e2da:	b14a      	cbz	r2, 9000e2f0 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e2dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e2de:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e2e0:	b133      	cbz	r3, 9000e2f0 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e2e2:	f000 ff4f 	bl	9000f184 <xTaskRemoveFromEventList>
9000e2e6:	2800      	cmp	r0, #0
9000e2e8:	d0f4      	beq.n	9000e2d4 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
9000e2ea:	f000 ffe9 	bl	9000f2c0 <vTaskMissedYield>
9000e2ee:	e7f1      	b.n	9000e2d4 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
9000e2f0:	23ff      	movs	r3, #255	; 0xff
9000e2f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e2f6:	f7fe ffaf 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e2fa:	f7fe ff8b 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e2fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9000e302:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e304:	2d00      	cmp	r5, #0
9000e306:	dd10      	ble.n	9000e32a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e308:	f104 0810 	add.w	r8, r4, #16
9000e30c:	e003      	b.n	9000e316 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
9000e30e:	1e6b      	subs	r3, r5, #1
9000e310:	b2da      	uxtb	r2, r3
9000e312:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e314:	b14a      	cbz	r2, 9000e32a <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e316:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e318:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e31a:	b133      	cbz	r3, 9000e32a <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e31c:	f000 ff32 	bl	9000f184 <xTaskRemoveFromEventList>
9000e320:	2800      	cmp	r0, #0
9000e322:	d0f4      	beq.n	9000e30e <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
9000e324:	f000 ffcc 	bl	9000f2c0 <vTaskMissedYield>
9000e328:	e7f1      	b.n	9000e30e <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
9000e32a:	23ff      	movs	r3, #255	; 0xff
9000e32c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9000e330:	f7fe ff92 	bl	9000d258 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9000e334:	f000 fe02 	bl	9000ef3c <xTaskResumeAll>
9000e338:	2800      	cmp	r0, #0
9000e33a:	d18f      	bne.n	9000e25c <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
9000e33c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e344:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e348:	f3bf 8f4f 	dsb	sy
9000e34c:	f3bf 8f6f 	isb	sy
9000e350:	e784      	b.n	9000e25c <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9000e352:	f7fe ff81 	bl	9000d258 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9000e356:	b92f      	cbnz	r7, 9000e364 <xQueueSemaphoreTake+0x28c>
}
9000e358:	4638      	mov	r0, r7
9000e35a:	b004      	add	sp, #16
9000e35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9000e360:	4607      	mov	r7, r0
9000e362:	e6d1      	b.n	9000e108 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9000e364:	f7fe ff56 	bl	9000d214 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
9000e368:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000e36a:	b119      	cbz	r1, 9000e374 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
9000e36c:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000e36e:	6819      	ldr	r1, [r3, #0]
9000e370:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000e374:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
9000e376:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9000e378:	f001 f84a 	bl	9000f410 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
9000e37c:	f7fe ff6c 	bl	9000d258 <vPortExitCritical>
9000e380:	e7ea      	b.n	9000e358 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
9000e382:	f7fe ff47 	bl	9000d214 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9000e386:	68a0      	ldr	r0, [r4, #8]
9000e388:	f000 ffb6 	bl	9000f2f8 <xTaskPriorityInherit>
9000e38c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
9000e38e:	f7fe ff63 	bl	9000d258 <vPortExitCritical>
9000e392:	e793      	b.n	9000e2bc <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
9000e394:	2f00      	cmp	r7, #0
9000e396:	d0f1      	beq.n	9000e37c <xQueueSemaphoreTake+0x2a4>
9000e398:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e39c:	f383 8811 	msr	BASEPRI, r3
9000e3a0:	f3bf 8f6f 	isb	sy
9000e3a4:	f3bf 8f4f 	dsb	sy
9000e3a8:	e7fe      	b.n	9000e3a8 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000e3aa:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000e3ac:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
9000e3ae:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
9000e3b0:	b12a      	cbz	r2, 9000e3be <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e3b2:	6923      	ldr	r3, [r4, #16]
9000e3b4:	b93b      	cbnz	r3, 9000e3c6 <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
9000e3b6:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
9000e3b8:	f7fe ff4e 	bl	9000d258 <vPortExitCritical>
				return pdPASS;
9000e3bc:	e7cc      	b.n	9000e358 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
9000e3be:	f001 f87b 	bl	9000f4b8 <pvTaskIncrementMutexHeldCount>
9000e3c2:	60a0      	str	r0, [r4, #8]
9000e3c4:	e7f5      	b.n	9000e3b2 <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e3c6:	f104 0010 	add.w	r0, r4, #16
9000e3ca:	f000 fedb 	bl	9000f184 <xTaskRemoveFromEventList>
9000e3ce:	2800      	cmp	r0, #0
9000e3d0:	d0f1      	beq.n	9000e3b6 <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
9000e3d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e3d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e3da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e3de:	f3bf 8f4f 	dsb	sy
9000e3e2:	f3bf 8f6f 	isb	sy
9000e3e6:	e7e6      	b.n	9000e3b6 <xQueueSemaphoreTake+0x2de>

9000e3e8 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
9000e3e8:	b1a8      	cbz	r0, 9000e416 <xQueueTakeMutexRecursive+0x2e>
	{
9000e3ea:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
9000e3ec:	6886      	ldr	r6, [r0, #8]
9000e3ee:	4604      	mov	r4, r0
9000e3f0:	460d      	mov	r5, r1
9000e3f2:	f000 ff6b 	bl	9000f2cc <xTaskGetCurrentTaskHandle>
9000e3f6:	4286      	cmp	r6, r0
9000e3f8:	d008      	beq.n	9000e40c <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
9000e3fa:	4629      	mov	r1, r5
9000e3fc:	4620      	mov	r0, r4
9000e3fe:	f7ff fe6b 	bl	9000e0d8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9000e402:	b110      	cbz	r0, 9000e40a <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000e404:	68e3      	ldr	r3, [r4, #12]
9000e406:	3301      	adds	r3, #1
9000e408:	60e3      	str	r3, [r4, #12]
	}
9000e40a:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000e40c:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
9000e40e:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9000e410:	4403      	add	r3, r0
9000e412:	60e3      	str	r3, [r4, #12]
	}
9000e414:	bd70      	pop	{r4, r5, r6, pc}
9000e416:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e41a:	f383 8811 	msr	BASEPRI, r3
9000e41e:	f3bf 8f6f 	isb	sy
9000e422:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9000e426:	e7fe      	b.n	9000e426 <xQueueTakeMutexRecursive+0x3e>

9000e428 <xQueueReceiveFromISR>:
{
9000e428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
9000e42c:	b310      	cbz	r0, 9000e474 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e42e:	460e      	mov	r6, r1
9000e430:	4604      	mov	r4, r0
9000e432:	4617      	mov	r7, r2
9000e434:	b191      	cbz	r1, 9000e45c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9000e436:	f7ff f81f 	bl	9000d478 <vPortValidateInterruptPriority>
	__asm volatile
9000e43a:	f3ef 8911 	mrs	r9, BASEPRI
9000e43e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e442:	f383 8811 	msr	BASEPRI, r3
9000e446:	f3bf 8f6f 	isb	sy
9000e44a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
9000e44e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9000e450:	b9cd      	cbnz	r5, 9000e486 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9000e452:	4628      	mov	r0, r5
	__asm volatile
9000e454:	f389 8811 	msr	BASEPRI, r9
}
9000e458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
9000e45c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9000e45e:	2b00      	cmp	r3, #0
9000e460:	d0e9      	beq.n	9000e436 <xQueueReceiveFromISR+0xe>
	__asm volatile
9000e462:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e466:	f383 8811 	msr	BASEPRI, r3
9000e46a:	f3bf 8f6f 	isb	sy
9000e46e:	f3bf 8f4f 	dsb	sy
9000e472:	e7fe      	b.n	9000e472 <xQueueReceiveFromISR+0x4a>
9000e474:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e478:	f383 8811 	msr	BASEPRI, r3
9000e47c:	f3bf 8f6f 	isb	sy
9000e480:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e484:	e7fe      	b.n	9000e484 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9000e486:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000e48a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
9000e48c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
9000e490:	b142      	cbz	r2, 9000e4a4 <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e492:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e494:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e496:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e498:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9000e49a:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9000e49c:	d215      	bcs.n	9000e4ca <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
9000e49e:	4630      	mov	r0, r6
9000e4a0:	f015 fc5d 	bl	90023d5e <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000e4a4:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
9000e4a6:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
9000e4aa:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
9000e4ac:	d009      	beq.n	9000e4c2 <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000e4ae:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
9000e4b2:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
9000e4b4:	b25b      	sxtb	r3, r3
9000e4b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
9000e4ba:	f389 8811 	msr	BASEPRI, r9
}
9000e4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e4c2:	6923      	ldr	r3, [r4, #16]
9000e4c4:	b923      	cbnz	r3, 9000e4d0 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
9000e4c6:	2001      	movs	r0, #1
9000e4c8:	e7c4      	b.n	9000e454 <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
9000e4ca:	6821      	ldr	r1, [r4, #0]
9000e4cc:	60e1      	str	r1, [r4, #12]
9000e4ce:	e7e6      	b.n	9000e49e <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e4d0:	f104 0010 	add.w	r0, r4, #16
9000e4d4:	f000 fe56 	bl	9000f184 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
9000e4d8:	2f00      	cmp	r7, #0
9000e4da:	d0f4      	beq.n	9000e4c6 <xQueueReceiveFromISR+0x9e>
9000e4dc:	2800      	cmp	r0, #0
9000e4de:	d0f2      	beq.n	9000e4c6 <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
9000e4e0:	2301      	movs	r3, #1
			xReturn = pdPASS;
9000e4e2:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
9000e4e4:	603b      	str	r3, [r7, #0]
9000e4e6:	e7b5      	b.n	9000e454 <xQueueReceiveFromISR+0x2c>

9000e4e8 <vQueueDelete>:
	configASSERT( pxQueue );
9000e4e8:	b1e0      	cbz	r0, 9000e524 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9000e4ea:	4b21      	ldr	r3, [pc, #132]	; (9000e570 <vQueueDelete+0x88>)
9000e4ec:	685a      	ldr	r2, [r3, #4]
9000e4ee:	4290      	cmp	r0, r2
9000e4f0:	d02b      	beq.n	9000e54a <vQueueDelete+0x62>
9000e4f2:	68da      	ldr	r2, [r3, #12]
9000e4f4:	4290      	cmp	r0, r2
9000e4f6:	d02a      	beq.n	9000e54e <vQueueDelete+0x66>
9000e4f8:	695a      	ldr	r2, [r3, #20]
9000e4fa:	4290      	cmp	r0, r2
9000e4fc:	d029      	beq.n	9000e552 <vQueueDelete+0x6a>
9000e4fe:	69da      	ldr	r2, [r3, #28]
9000e500:	4290      	cmp	r0, r2
9000e502:	d028      	beq.n	9000e556 <vQueueDelete+0x6e>
9000e504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000e506:	4290      	cmp	r0, r2
9000e508:	d027      	beq.n	9000e55a <vQueueDelete+0x72>
9000e50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000e50c:	4290      	cmp	r0, r2
9000e50e:	d014      	beq.n	9000e53a <vQueueDelete+0x52>
9000e510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000e512:	4290      	cmp	r0, r2
9000e514:	d023      	beq.n	9000e55e <vQueueDelete+0x76>
9000e516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
9000e518:	4290      	cmp	r0, r2
9000e51a:	d022      	beq.n	9000e562 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9000e51c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
9000e520:	b14b      	cbz	r3, 9000e536 <vQueueDelete+0x4e>
}
9000e522:	4770      	bx	lr
	__asm volatile
9000e524:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e528:	f383 8811 	msr	BASEPRI, r3
9000e52c:	f3bf 8f6f 	isb	sy
9000e530:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9000e534:	e7fe      	b.n	9000e534 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
9000e536:	f7fe bd51 	b.w	9000cfdc <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e53a:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
9000e53c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000e540:	ed9f 7b09 	vldr	d7, [pc, #36]	; 9000e568 <vQueueDelete+0x80>
9000e544:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
9000e548:	e7e8      	b.n	9000e51c <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e54a:	2200      	movs	r2, #0
9000e54c:	e7f6      	b.n	9000e53c <vQueueDelete+0x54>
9000e54e:	2201      	movs	r2, #1
9000e550:	e7f4      	b.n	9000e53c <vQueueDelete+0x54>
9000e552:	2202      	movs	r2, #2
9000e554:	e7f2      	b.n	9000e53c <vQueueDelete+0x54>
9000e556:	2203      	movs	r2, #3
9000e558:	e7f0      	b.n	9000e53c <vQueueDelete+0x54>
9000e55a:	2204      	movs	r2, #4
9000e55c:	e7ee      	b.n	9000e53c <vQueueDelete+0x54>
9000e55e:	2206      	movs	r2, #6
9000e560:	e7ec      	b.n	9000e53c <vQueueDelete+0x54>
9000e562:	2207      	movs	r2, #7
9000e564:	e7ea      	b.n	9000e53c <vQueueDelete+0x54>
9000e566:	bf00      	nop
	...
9000e570:	24024da8 	.word	0x24024da8

9000e574 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
9000e574:	4b12      	ldr	r3, [pc, #72]	; (9000e5c0 <vQueueAddToRegistry+0x4c>)
9000e576:	681a      	ldr	r2, [r3, #0]
9000e578:	b17a      	cbz	r2, 9000e59a <vQueueAddToRegistry+0x26>
9000e57a:	689a      	ldr	r2, [r3, #8]
9000e57c:	b162      	cbz	r2, 9000e598 <vQueueAddToRegistry+0x24>
9000e57e:	691a      	ldr	r2, [r3, #16]
9000e580:	b192      	cbz	r2, 9000e5a8 <vQueueAddToRegistry+0x34>
9000e582:	699a      	ldr	r2, [r3, #24]
9000e584:	b192      	cbz	r2, 9000e5ac <vQueueAddToRegistry+0x38>
9000e586:	6a1a      	ldr	r2, [r3, #32]
9000e588:	b192      	cbz	r2, 9000e5b0 <vQueueAddToRegistry+0x3c>
9000e58a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9000e58c:	b192      	cbz	r2, 9000e5b4 <vQueueAddToRegistry+0x40>
9000e58e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000e590:	b192      	cbz	r2, 9000e5b8 <vQueueAddToRegistry+0x44>
9000e592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000e594:	b192      	cbz	r2, 9000e5bc <vQueueAddToRegistry+0x48>
	}
9000e596:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e598:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9000e59a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9000e59e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
9000e5a2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
9000e5a6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
9000e5a8:	2202      	movs	r2, #2
9000e5aa:	e7f6      	b.n	9000e59a <vQueueAddToRegistry+0x26>
9000e5ac:	2203      	movs	r2, #3
9000e5ae:	e7f4      	b.n	9000e59a <vQueueAddToRegistry+0x26>
9000e5b0:	2204      	movs	r2, #4
9000e5b2:	e7f2      	b.n	9000e59a <vQueueAddToRegistry+0x26>
9000e5b4:	2205      	movs	r2, #5
9000e5b6:	e7f0      	b.n	9000e59a <vQueueAddToRegistry+0x26>
9000e5b8:	2206      	movs	r2, #6
9000e5ba:	e7ee      	b.n	9000e59a <vQueueAddToRegistry+0x26>
9000e5bc:	2207      	movs	r2, #7
9000e5be:	e7ec      	b.n	9000e59a <vQueueAddToRegistry+0x26>
9000e5c0:	24024da8 	.word	0x24024da8

9000e5c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
9000e5c4:	b570      	push	{r4, r5, r6, lr}
9000e5c6:	4605      	mov	r5, r0
9000e5c8:	460e      	mov	r6, r1
9000e5ca:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9000e5cc:	f7fe fe22 	bl	9000d214 <vPortEnterCritical>
9000e5d0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000e5d4:	2bff      	cmp	r3, #255	; 0xff
9000e5d6:	d102      	bne.n	9000e5de <vQueueWaitForMessageRestricted+0x1a>
9000e5d8:	2300      	movs	r3, #0
9000e5da:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9000e5de:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000e5e2:	2bff      	cmp	r3, #255	; 0xff
9000e5e4:	d102      	bne.n	9000e5ec <vQueueWaitForMessageRestricted+0x28>
9000e5e6:	2300      	movs	r3, #0
9000e5e8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9000e5ec:	f7fe fe34 	bl	9000d258 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
9000e5f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000e5f2:	2b00      	cmp	r3, #0
9000e5f4:	d043      	beq.n	9000e67e <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
9000e5f6:	f7fe fe0d 	bl	9000d214 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9000e5fa:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9000e5fe:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e600:	2c00      	cmp	r4, #0
9000e602:	dd14      	ble.n	9000e62e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e604:	f105 0624 	add.w	r6, r5, #36	; 0x24
9000e608:	e003      	b.n	9000e612 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9000e60a:	1e63      	subs	r3, r4, #1
9000e60c:	b2da      	uxtb	r2, r3
9000e60e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e610:	b16a      	cbz	r2, 9000e62e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e612:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e614:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9000e616:	b153      	cbz	r3, 9000e62e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9000e618:	f000 fdb4 	bl	9000f184 <xTaskRemoveFromEventList>
9000e61c:	2800      	cmp	r0, #0
9000e61e:	d0f4      	beq.n	9000e60a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
9000e620:	f000 fe4e 	bl	9000f2c0 <vTaskMissedYield>
			--cTxLock;
9000e624:	1e63      	subs	r3, r4, #1
9000e626:	b2da      	uxtb	r2, r3
9000e628:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9000e62a:	2a00      	cmp	r2, #0
9000e62c:	d1f1      	bne.n	9000e612 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
9000e62e:	23ff      	movs	r3, #255	; 0xff
9000e630:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
9000e634:	f7fe fe10 	bl	9000d258 <vPortExitCritical>
	taskENTER_CRITICAL();
9000e638:	f7fe fdec 	bl	9000d214 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9000e63c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
9000e640:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e642:	2c00      	cmp	r4, #0
9000e644:	dd14      	ble.n	9000e670 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e646:	f105 0610 	add.w	r6, r5, #16
9000e64a:	e003      	b.n	9000e654 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
9000e64c:	1e63      	subs	r3, r4, #1
9000e64e:	b2da      	uxtb	r2, r3
9000e650:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e652:	b16a      	cbz	r2, 9000e670 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e654:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e656:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9000e658:	b153      	cbz	r3, 9000e670 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9000e65a:	f000 fd93 	bl	9000f184 <xTaskRemoveFromEventList>
9000e65e:	2800      	cmp	r0, #0
9000e660:	d0f4      	beq.n	9000e64c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
9000e662:	f000 fe2d 	bl	9000f2c0 <vTaskMissedYield>
				--cRxLock;
9000e666:	1e63      	subs	r3, r4, #1
9000e668:	b2da      	uxtb	r2, r3
9000e66a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9000e66c:	2a00      	cmp	r2, #0
9000e66e:	d1f1      	bne.n	9000e654 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
9000e670:	23ff      	movs	r3, #255	; 0xff
9000e672:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
9000e676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
9000e67a:	f7fe bded 	b.w	9000d258 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
9000e67e:	4622      	mov	r2, r4
9000e680:	4631      	mov	r1, r6
9000e682:	f105 0024 	add.w	r0, r5, #36	; 0x24
9000e686:	f000 fd33 	bl	9000f0f0 <vTaskPlaceOnEventListRestricted>
9000e68a:	e7b4      	b.n	9000e5f6 <vQueueWaitForMessageRestricted+0x32>

9000e68c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9000e68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000e690:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
9000e692:	f7fe fdbf 	bl	9000d214 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
9000e696:	4a34      	ldr	r2, [pc, #208]	; (9000e768 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
9000e698:	4e34      	ldr	r6, [pc, #208]	; (9000e76c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9000e69a:	6813      	ldr	r3, [r2, #0]
9000e69c:	3301      	adds	r3, #1
9000e69e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
9000e6a0:	6833      	ldr	r3, [r6, #0]
9000e6a2:	2b00      	cmp	r3, #0
9000e6a4:	d032      	beq.n	9000e70c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
9000e6a6:	4c32      	ldr	r4, [pc, #200]	; (9000e770 <prvAddNewTaskToReadyList+0xe4>)
9000e6a8:	6823      	ldr	r3, [r4, #0]
9000e6aa:	b33b      	cbz	r3, 9000e6fc <prvAddNewTaskToReadyList+0x70>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000e6ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000e6ae:	4f31      	ldr	r7, [pc, #196]	; (9000e774 <prvAddNewTaskToReadyList+0xe8>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
9000e6b0:	4a31      	ldr	r2, [pc, #196]	; (9000e778 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9000e6b2:	4932      	ldr	r1, [pc, #200]	; (9000e77c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
9000e6b4:	6813      	ldr	r3, [r2, #0]
9000e6b6:	3301      	adds	r3, #1
9000e6b8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9000e6ba:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9000e6bc:	680b      	ldr	r3, [r1, #0]
9000e6be:	4283      	cmp	r3, r0
9000e6c0:	d200      	bcs.n	9000e6c4 <prvAddNewTaskToReadyList+0x38>
9000e6c2:	6008      	str	r0, [r1, #0]
9000e6c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000e6c8:	1d29      	adds	r1, r5, #4
9000e6ca:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9000e6ce:	f7fe fcf9 	bl	9000d0c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
9000e6d2:	f7fe fdc1 	bl	9000d258 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
9000e6d6:	6823      	ldr	r3, [r4, #0]
9000e6d8:	b173      	cbz	r3, 9000e6f8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9000e6da:	6832      	ldr	r2, [r6, #0]
9000e6dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000e6de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000e6e0:	429a      	cmp	r2, r3
9000e6e2:	d209      	bcs.n	9000e6f8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
9000e6e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000e6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000e6ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000e6f0:	f3bf 8f4f 	dsb	sy
9000e6f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
9000e6f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000e6fc:	6833      	ldr	r3, [r6, #0]
9000e6fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000e700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e702:	4f1c      	ldr	r7, [pc, #112]	; (9000e774 <prvAddNewTaskToReadyList+0xe8>)
9000e704:	4283      	cmp	r3, r0
9000e706:	d8d3      	bhi.n	9000e6b0 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
9000e708:	6035      	str	r5, [r6, #0]
9000e70a:	e7d1      	b.n	9000e6b0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9000e70c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9000e70e:	6813      	ldr	r3, [r2, #0]
9000e710:	2b01      	cmp	r3, #1
9000e712:	d003      	beq.n	9000e71c <prvAddNewTaskToReadyList+0x90>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9000e714:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000e716:	4f17      	ldr	r7, [pc, #92]	; (9000e774 <prvAddNewTaskToReadyList+0xe8>)
9000e718:	4c15      	ldr	r4, [pc, #84]	; (9000e770 <prvAddNewTaskToReadyList+0xe4>)
9000e71a:	e7c9      	b.n	9000e6b0 <prvAddNewTaskToReadyList+0x24>
9000e71c:	4f15      	ldr	r7, [pc, #84]	; (9000e774 <prvAddNewTaskToReadyList+0xe8>)
9000e71e:	463c      	mov	r4, r7
9000e720:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000e724:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000e726:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
9000e728:	f7fe fcbc 	bl	9000d0a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
9000e72c:	45a0      	cmp	r8, r4
9000e72e:	d1f9      	bne.n	9000e724 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
9000e730:	f8df 9060 	ldr.w	r9, [pc, #96]	; 9000e794 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
9000e734:	f8df 8060 	ldr.w	r8, [pc, #96]	; 9000e798 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
9000e738:	4648      	mov	r0, r9
9000e73a:	4c0d      	ldr	r4, [pc, #52]	; (9000e770 <prvAddNewTaskToReadyList+0xe4>)
9000e73c:	f7fe fcb2 	bl	9000d0a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
9000e740:	4640      	mov	r0, r8
9000e742:	f7fe fcaf 	bl	9000d0a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
9000e746:	480e      	ldr	r0, [pc, #56]	; (9000e780 <prvAddNewTaskToReadyList+0xf4>)
9000e748:	f7fe fcac 	bl	9000d0a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
9000e74c:	480d      	ldr	r0, [pc, #52]	; (9000e784 <prvAddNewTaskToReadyList+0xf8>)
9000e74e:	f7fe fca9 	bl	9000d0a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
9000e752:	480d      	ldr	r0, [pc, #52]	; (9000e788 <prvAddNewTaskToReadyList+0xfc>)
9000e754:	f7fe fca6 	bl	9000d0a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
9000e758:	4b0c      	ldr	r3, [pc, #48]	; (9000e78c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
9000e75a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
9000e75c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
9000e760:	4b0b      	ldr	r3, [pc, #44]	; (9000e790 <prvAddNewTaskToReadyList+0x104>)
9000e762:	f8c3 8000 	str.w	r8, [r3]
}
9000e766:	e7a3      	b.n	9000e6b0 <prvAddNewTaskToReadyList+0x24>
9000e768:	24025254 	.word	0x24025254
9000e76c:	24024de8 	.word	0x24024de8
9000e770:	240252b0 	.word	0x240252b0
9000e774:	24024df4 	.word	0x24024df4
9000e778:	24025260 	.word	0x24025260
9000e77c:	24025264 	.word	0x24025264
9000e780:	2402529c 	.word	0x2402529c
9000e784:	240252c8 	.word	0x240252c8
9000e788:	240252b4 	.word	0x240252b4
9000e78c:	24024dec 	.word	0x24024dec
9000e790:	24024df0 	.word	0x24024df0
9000e794:	24025268 	.word	0x24025268
9000e798:	2402527c 	.word	0x2402527c

9000e79c <prvIdleTask>:
{
9000e79c:	b580      	push	{r7, lr}
9000e79e:	4c22      	ldr	r4, [pc, #136]	; (9000e828 <prvIdleTask+0x8c>)
				taskYIELD();
9000e7a0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000e7a4:	4e21      	ldr	r6, [pc, #132]	; (9000e82c <prvIdleTask+0x90>)
9000e7a6:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
9000e7aa:	4d21      	ldr	r5, [pc, #132]	; (9000e830 <prvIdleTask+0x94>)
9000e7ac:	4f21      	ldr	r7, [pc, #132]	; (9000e834 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000e7ae:	6823      	ldr	r3, [r4, #0]
9000e7b0:	b353      	cbz	r3, 9000e808 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
9000e7b2:	f7fe fd2f 	bl	9000d214 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e7b6:	68f3      	ldr	r3, [r6, #12]
9000e7b8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e7bc:	f10a 0004 	add.w	r0, sl, #4
9000e7c0:	f7fe fca8 	bl	9000d114 <uxListRemove>
				--uxCurrentNumberOfTasks;
9000e7c4:	682b      	ldr	r3, [r5, #0]
9000e7c6:	3b01      	subs	r3, #1
9000e7c8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
9000e7ca:	6823      	ldr	r3, [r4, #0]
9000e7cc:	3b01      	subs	r3, #1
9000e7ce:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
9000e7d0:	f7fe fd42 	bl	9000d258 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
9000e7d4:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
9000e7d8:	b163      	cbz	r3, 9000e7f4 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
9000e7da:	2b01      	cmp	r3, #1
9000e7dc:	d020      	beq.n	9000e820 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
9000e7de:	2b02      	cmp	r3, #2
9000e7e0:	d0e5      	beq.n	9000e7ae <prvIdleTask+0x12>
9000e7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e7e6:	f383 8811 	msr	BASEPRI, r3
9000e7ea:	f3bf 8f6f 	isb	sy
9000e7ee:	f3bf 8f4f 	dsb	sy
9000e7f2:	e7fe      	b.n	9000e7f2 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
9000e7f4:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
9000e7f8:	f7fe fbf0 	bl	9000cfdc <vPortFree>
				vPortFree( pxTCB );
9000e7fc:	4650      	mov	r0, sl
9000e7fe:	f7fe fbed 	bl	9000cfdc <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
9000e802:	6823      	ldr	r3, [r4, #0]
9000e804:	2b00      	cmp	r3, #0
9000e806:	d1d4      	bne.n	9000e7b2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
9000e808:	683b      	ldr	r3, [r7, #0]
9000e80a:	2b01      	cmp	r3, #1
9000e80c:	d905      	bls.n	9000e81a <prvIdleTask+0x7e>
				taskYIELD();
9000e80e:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
9000e812:	f3bf 8f4f 	dsb	sy
9000e816:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
9000e81a:	f7f5 fbc9 	bl	90003fb0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
9000e81e:	e7c6      	b.n	9000e7ae <prvIdleTask+0x12>
				vPortFree( pxTCB );
9000e820:	4650      	mov	r0, sl
9000e822:	f7fe fbdb 	bl	9000cfdc <vPortFree>
9000e826:	e7c2      	b.n	9000e7ae <prvIdleTask+0x12>
9000e828:	24025258 	.word	0x24025258
9000e82c:	240252c8 	.word	0x240252c8
9000e830:	24025254 	.word	0x24025254
9000e834:	24024df4 	.word	0x24024df4

9000e838 <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000e838:	4b4a      	ldr	r3, [pc, #296]	; (9000e964 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
9000e83a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000e83e:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
9000e840:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
9000e842:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
9000e844:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
9000e846:	2e00      	cmp	r6, #0
9000e848:	d040      	beq.n	9000e8cc <xTaskIncrementTick.part.0+0x94>
9000e84a:	f8df b12c 	ldr.w	fp, [pc, #300]	; 9000e978 <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
9000e84e:	f8db 3000 	ldr.w	r3, [fp]
9000e852:	429e      	cmp	r6, r3
9000e854:	d347      	bcc.n	9000e8e6 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e856:	4f44      	ldr	r7, [pc, #272]	; (9000e968 <xTaskIncrementTick.part.0+0x130>)
9000e858:	683b      	ldr	r3, [r7, #0]
9000e85a:	681d      	ldr	r5, [r3, #0]
9000e85c:	2d00      	cmp	r5, #0
9000e85e:	d077      	beq.n	9000e950 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
9000e860:	2500      	movs	r5, #0
9000e862:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9000e97c <xTaskIncrementTick.part.0+0x144>
9000e866:	f8df a118 	ldr.w	sl, [pc, #280]	; 9000e980 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
9000e86a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 9000e984 <xTaskIncrementTick.part.0+0x14c>
9000e86e:	e022      	b.n	9000e8b6 <xTaskIncrementTick.part.0+0x7e>
9000e870:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e872:	f7fe fc4f 	bl	9000d114 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000e876:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000e878:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
9000e87c:	9901      	ldr	r1, [sp, #4]
9000e87e:	b113      	cbz	r3, 9000e886 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000e880:	f7fe fc48 	bl	9000d114 <uxListRemove>
9000e884:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
9000e886:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000e888:	f8d8 2000 	ldr.w	r2, [r8]
9000e88c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000e890:	4293      	cmp	r3, r2
9000e892:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000e896:	d901      	bls.n	9000e89c <xTaskIncrementTick.part.0+0x64>
9000e898:	f8c8 3000 	str.w	r3, [r8]
9000e89c:	f7fe fc12 	bl	9000d0c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000e8a0:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e8a4:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000e8a6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
9000e8a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e8aa:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
9000e8ac:	4291      	cmp	r1, r2
9000e8ae:	bf28      	it	cs
9000e8b0:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e8b2:	2b00      	cmp	r3, #0
9000e8b4:	d050      	beq.n	9000e958 <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e8b6:	683b      	ldr	r3, [r7, #0]
9000e8b8:	68db      	ldr	r3, [r3, #12]
9000e8ba:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
9000e8bc:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e8be:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
9000e8c0:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e8c2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
9000e8c4:	d2d4      	bcs.n	9000e870 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
9000e8c6:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
9000e8ca:	e011      	b.n	9000e8f0 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
9000e8cc:	4b26      	ldr	r3, [pc, #152]	; (9000e968 <xTaskIncrementTick.part.0+0x130>)
9000e8ce:	681a      	ldr	r2, [r3, #0]
9000e8d0:	6812      	ldr	r2, [r2, #0]
9000e8d2:	b30a      	cbz	r2, 9000e918 <xTaskIncrementTick.part.0+0xe0>
9000e8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000e8d8:	f383 8811 	msr	BASEPRI, r3
9000e8dc:	f3bf 8f6f 	isb	sy
9000e8e0:	f3bf 8f4f 	dsb	sy
9000e8e4:	e7fe      	b.n	9000e8e4 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
9000e8e6:	2500      	movs	r5, #0
9000e8e8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 9000e97c <xTaskIncrementTick.part.0+0x144>
9000e8ec:	f8df a090 	ldr.w	sl, [pc, #144]	; 9000e980 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000e8f0:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
9000e8f4:	491d      	ldr	r1, [pc, #116]	; (9000e96c <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
9000e8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e8f8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000e8fc:	009b      	lsls	r3, r3, #2
9000e8fe:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
9000e902:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
9000e904:	2a02      	cmp	r2, #2
9000e906:	bf28      	it	cs
9000e908:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
9000e90a:	2b00      	cmp	r3, #0
}
9000e90c:	bf0c      	ite	eq
9000e90e:	4628      	moveq	r0, r5
9000e910:	2001      	movne	r0, #1
9000e912:	b003      	add	sp, #12
9000e914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
9000e918:	4a15      	ldr	r2, [pc, #84]	; (9000e970 <xTaskIncrementTick.part.0+0x138>)
9000e91a:	6818      	ldr	r0, [r3, #0]
9000e91c:	6811      	ldr	r1, [r2, #0]
9000e91e:	6019      	str	r1, [r3, #0]
9000e920:	4914      	ldr	r1, [pc, #80]	; (9000e974 <xTaskIncrementTick.part.0+0x13c>)
9000e922:	6010      	str	r0, [r2, #0]
9000e924:	680a      	ldr	r2, [r1, #0]
9000e926:	3201      	adds	r2, #1
9000e928:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000e92a:	681a      	ldr	r2, [r3, #0]
9000e92c:	6812      	ldr	r2, [r2, #0]
9000e92e:	b932      	cbnz	r2, 9000e93e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
9000e930:	f8df b044 	ldr.w	fp, [pc, #68]	; 9000e978 <xTaskIncrementTick.part.0+0x140>
9000e934:	f04f 33ff 	mov.w	r3, #4294967295
9000e938:	f8cb 3000 	str.w	r3, [fp]
9000e93c:	e787      	b.n	9000e84e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e93e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000e940:	f8df b034 	ldr.w	fp, [pc, #52]	; 9000e978 <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e944:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000e946:	68db      	ldr	r3, [r3, #12]
9000e948:	685b      	ldr	r3, [r3, #4]
9000e94a:	f8cb 3000 	str.w	r3, [fp]
	}
}
9000e94e:	e77e      	b.n	9000e84e <xTaskIncrementTick.part.0+0x16>
9000e950:	f8df 9028 	ldr.w	r9, [pc, #40]	; 9000e97c <xTaskIncrementTick.part.0+0x144>
9000e954:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000e980 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000e958:	f04f 33ff 	mov.w	r3, #4294967295
9000e95c:	f8cb 3000 	str.w	r3, [fp]
					break;
9000e960:	e7c6      	b.n	9000e8f0 <xTaskIncrementTick.part.0+0xb8>
9000e962:	bf00      	nop
9000e964:	240252dc 	.word	0x240252dc
9000e968:	24024dec 	.word	0x24024dec
9000e96c:	240252e0 	.word	0x240252e0
9000e970:	24024df0 	.word	0x24024df0
9000e974:	24025294 	.word	0x24025294
9000e978:	24025290 	.word	0x24025290
9000e97c:	24024df4 	.word	0x24024df4
9000e980:	24024de8 	.word	0x24024de8
9000e984:	24025264 	.word	0x24025264

9000e988 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
9000e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
9000e98c:	4d41      	ldr	r5, [pc, #260]	; (9000ea94 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
9000e98e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
9000e990:	f7fe fc40 	bl	9000d214 <vPortEnterCritical>
		--uxSchedulerSuspended;
9000e994:	682b      	ldr	r3, [r5, #0]
9000e996:	3b01      	subs	r3, #1
9000e998:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000e99a:	682b      	ldr	r3, [r5, #0]
9000e99c:	2b00      	cmp	r3, #0
9000e99e:	d161      	bne.n	9000ea64 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
9000e9a0:	4b3d      	ldr	r3, [pc, #244]	; (9000ea98 <xTaskResumeAll.part.0+0x110>)
9000e9a2:	681b      	ldr	r3, [r3, #0]
9000e9a4:	2b00      	cmp	r3, #0
9000e9a6:	d05d      	beq.n	9000ea64 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000e9a8:	4e3c      	ldr	r6, [pc, #240]	; (9000ea9c <xTaskResumeAll.part.0+0x114>)
9000e9aa:	6833      	ldr	r3, [r6, #0]
9000e9ac:	2b00      	cmp	r3, #0
9000e9ae:	d06e      	beq.n	9000ea8e <xTaskResumeAll.part.0+0x106>
9000e9b0:	4f3b      	ldr	r7, [pc, #236]	; (9000eaa0 <xTaskResumeAll.part.0+0x118>)
9000e9b2:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 9000eab0 <xTaskResumeAll.part.0+0x128>
9000e9b6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9000eab4 <xTaskResumeAll.part.0+0x12c>
9000e9ba:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9000eab8 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000e9be:	68f3      	ldr	r3, [r6, #12]
9000e9c0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e9c2:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
9000e9c6:	f104 0018 	add.w	r0, r4, #24
9000e9ca:	f7fe fba3 	bl	9000d114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
9000e9ce:	4658      	mov	r0, fp
9000e9d0:	f7fe fba0 	bl	9000d114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
9000e9d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000e9d6:	683a      	ldr	r2, [r7, #0]
9000e9d8:	4659      	mov	r1, fp
9000e9da:	eb03 0083 	add.w	r0, r3, r3, lsl #2
9000e9de:	4293      	cmp	r3, r2
9000e9e0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
9000e9e4:	d900      	bls.n	9000e9e8 <xTaskResumeAll.part.0+0x60>
9000e9e6:	603b      	str	r3, [r7, #0]
9000e9e8:	f7fe fb6c 	bl	9000d0c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
9000e9ec:	f8d8 3000 	ldr.w	r3, [r8]
9000e9f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000e9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000e9f4:	429a      	cmp	r2, r3
9000e9f6:	d33d      	bcc.n	9000ea74 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
9000e9f8:	2301      	movs	r3, #1
9000e9fa:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000e9fe:	6833      	ldr	r3, [r6, #0]
9000ea00:	2b00      	cmp	r3, #0
9000ea02:	d1dc      	bne.n	9000e9be <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000ea04:	4b27      	ldr	r3, [pc, #156]	; (9000eaa4 <xTaskResumeAll.part.0+0x11c>)
9000ea06:	681a      	ldr	r2, [r3, #0]
9000ea08:	6812      	ldr	r2, [r2, #0]
9000ea0a:	2a00      	cmp	r2, #0
9000ea0c:	d03a      	beq.n	9000ea84 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000ea0e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000ea10:	4b25      	ldr	r3, [pc, #148]	; (9000eaa8 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000ea12:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
9000ea14:	68d2      	ldr	r2, [r2, #12]
9000ea16:	6852      	ldr	r2, [r2, #4]
9000ea18:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
9000ea1a:	4e24      	ldr	r6, [pc, #144]	; (9000eaac <xTaskResumeAll.part.0+0x124>)
9000ea1c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
9000ea1e:	b194      	cbz	r4, 9000ea46 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
9000ea20:	2701      	movs	r7, #1
9000ea22:	e006      	b.n	9000ea32 <xTaskResumeAll.part.0+0xaa>
9000ea24:	f7ff ff08 	bl	9000e838 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
9000ea28:	b108      	cbz	r0, 9000ea2e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
9000ea2a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000ea2e:	3c01      	subs	r4, #1
9000ea30:	d008      	beq.n	9000ea44 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000ea32:	682b      	ldr	r3, [r5, #0]
9000ea34:	2b00      	cmp	r3, #0
9000ea36:	d0f5      	beq.n	9000ea24 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
9000ea38:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000ea3a:	3c01      	subs	r4, #1
		++xPendedTicks;
9000ea3c:	f103 0301 	add.w	r3, r3, #1
9000ea40:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
9000ea42:	d1f6      	bne.n	9000ea32 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
9000ea44:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
9000ea46:	f8da 3000 	ldr.w	r3, [sl]
9000ea4a:	b15b      	cbz	r3, 9000ea64 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
9000ea4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ea50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ea54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ea58:	f3bf 8f4f 	dsb	sy
9000ea5c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
9000ea60:	2001      	movs	r0, #1
9000ea62:	e000      	b.n	9000ea66 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
9000ea64:	2000      	movs	r0, #0
9000ea66:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000ea68:	f7fe fbf6 	bl	9000d258 <vPortExitCritical>
}
9000ea6c:	9801      	ldr	r0, [sp, #4]
9000ea6e:	b003      	add	sp, #12
9000ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
9000ea74:	6833      	ldr	r3, [r6, #0]
9000ea76:	2b00      	cmp	r3, #0
9000ea78:	d1a1      	bne.n	9000e9be <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
9000ea7a:	4b0a      	ldr	r3, [pc, #40]	; (9000eaa4 <xTaskResumeAll.part.0+0x11c>)
9000ea7c:	681a      	ldr	r2, [r3, #0]
9000ea7e:	6812      	ldr	r2, [r2, #0]
9000ea80:	2a00      	cmp	r2, #0
9000ea82:	d1c4      	bne.n	9000ea0e <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
9000ea84:	4b08      	ldr	r3, [pc, #32]	; (9000eaa8 <xTaskResumeAll.part.0+0x120>)
9000ea86:	f04f 32ff 	mov.w	r2, #4294967295
9000ea8a:	601a      	str	r2, [r3, #0]
9000ea8c:	e7c5      	b.n	9000ea1a <xTaskResumeAll.part.0+0x92>
9000ea8e:	f8df a028 	ldr.w	sl, [pc, #40]	; 9000eab8 <xTaskResumeAll.part.0+0x130>
9000ea92:	e7c2      	b.n	9000ea1a <xTaskResumeAll.part.0+0x92>
9000ea94:	2402525c 	.word	0x2402525c
9000ea98:	24025254 	.word	0x24025254
9000ea9c:	2402529c 	.word	0x2402529c
9000eaa0:	24025264 	.word	0x24025264
9000eaa4:	24024dec 	.word	0x24024dec
9000eaa8:	24025290 	.word	0x24025290
9000eaac:	24025298 	.word	0x24025298
9000eab0:	24024df4 	.word	0x24024df4
9000eab4:	24024de8 	.word	0x24024de8
9000eab8:	240252e0 	.word	0x240252e0

9000eabc <xTaskCreateStatic>:
	{
9000eabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000eac0:	b083      	sub	sp, #12
9000eac2:	4698      	mov	r8, r3
		configASSERT( puxStackBuffer != NULL );
9000eac4:	e9dd 340b 	ldrd	r3, r4, [sp, #44]	; 0x2c
9000eac8:	b1bb      	cbz	r3, 9000eafa <xTaskCreateStatic+0x3e>
		configASSERT( pxTaskBuffer != NULL );
9000eaca:	b16c      	cbz	r4, 9000eae8 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
9000eacc:	2360      	movs	r3, #96	; 0x60
9000eace:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
9000ead0:	9b01      	ldr	r3, [sp, #4]
9000ead2:	2b60      	cmp	r3, #96	; 0x60
9000ead4:	d01a      	beq.n	9000eb0c <xTaskCreateStatic+0x50>
9000ead6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eada:	f383 8811 	msr	BASEPRI, r3
9000eade:	f3bf 8f6f 	isb	sy
9000eae2:	f3bf 8f4f 	dsb	sy
9000eae6:	e7fe      	b.n	9000eae6 <xTaskCreateStatic+0x2a>
9000eae8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eaec:	f383 8811 	msr	BASEPRI, r3
9000eaf0:	f3bf 8f6f 	isb	sy
9000eaf4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000eaf8:	e7fe      	b.n	9000eaf8 <xTaskCreateStatic+0x3c>
9000eafa:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eafe:	f383 8811 	msr	BASEPRI, r3
9000eb02:	f3bf 8f6f 	isb	sy
9000eb06:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000eb0a:	e7fe      	b.n	9000eb0a <xTaskCreateStatic+0x4e>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000eb0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000eb0e:	0096      	lsls	r6, r2, #2
9000eb10:	4607      	mov	r7, r0
9000eb12:	460d      	mov	r5, r1
9000eb14:	4618      	mov	r0, r3
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000eb16:	6323      	str	r3, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000eb18:	9b01      	ldr	r3, [sp, #4]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000eb1a:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000eb1c:	4632      	mov	r2, r6
9000eb1e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000eb20:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000eb24:	f015 f83a 	bl	90023b9c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000eb28:	1f32      	subs	r2, r6, #4
9000eb2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000eb2c:	4413      	add	r3, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000eb2e:	f023 0907 	bic.w	r9, r3, #7
	if( pcName != NULL )
9000eb32:	2d00      	cmp	r5, #0
9000eb34:	d069      	beq.n	9000ec0a <xTaskCreateStatic+0x14e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb36:	782b      	ldrb	r3, [r5, #0]
9000eb38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000eb3c:	2b00      	cmp	r3, #0
9000eb3e:	d03b      	beq.n	9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb40:	786b      	ldrb	r3, [r5, #1]
9000eb42:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000eb46:	2b00      	cmp	r3, #0
9000eb48:	d036      	beq.n	9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb4a:	78ab      	ldrb	r3, [r5, #2]
9000eb4c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000eb50:	b393      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb52:	78eb      	ldrb	r3, [r5, #3]
9000eb54:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000eb58:	b373      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb5a:	792b      	ldrb	r3, [r5, #4]
9000eb5c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000eb60:	b353      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb62:	796b      	ldrb	r3, [r5, #5]
9000eb64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000eb68:	b333      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb6a:	79ab      	ldrb	r3, [r5, #6]
9000eb6c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000eb70:	b313      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb72:	79eb      	ldrb	r3, [r5, #7]
9000eb74:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000eb78:	b1f3      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb7a:	7a2b      	ldrb	r3, [r5, #8]
9000eb7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000eb80:	b1d3      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb82:	7a6b      	ldrb	r3, [r5, #9]
9000eb84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000eb88:	b1b3      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb8a:	7aab      	ldrb	r3, [r5, #10]
9000eb8c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000eb90:	b193      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb92:	7aeb      	ldrb	r3, [r5, #11]
9000eb94:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000eb98:	b173      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eb9a:	7b2b      	ldrb	r3, [r5, #12]
9000eb9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000eba0:	b153      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eba2:	7b6b      	ldrb	r3, [r5, #13]
9000eba4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000eba8:	b133      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ebaa:	7bab      	ldrb	r3, [r5, #14]
9000ebac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000ebb0:	b113      	cbz	r3, 9000ebb8 <xTaskCreateStatic+0xfc>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ebb2:	7beb      	ldrb	r3, [r5, #15]
9000ebb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000ebb8:	2300      	movs	r3, #0
9000ebba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000ebbe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
9000ebc0:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ebc2:	1d20      	adds	r0, r4, #4
9000ebc4:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000ebc6:	6526      	str	r6, [r4, #80]	; 0x50
9000ebc8:	bf28      	it	cs
9000ebca:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000ebcc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000ebce:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ebd0:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ebd4:	f7fe fa72 	bl	9000d0bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000ebd8:	f104 0018 	add.w	r0, r4, #24
9000ebdc:	f7fe fa6e 	bl	9000d0bc <vListInitialiseItem>
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ebe0:	4642      	mov	r2, r8
9000ebe2:	4639      	mov	r1, r7
		pxNewTCB->ulNotifiedValue = 0;
9000ebe4:	65a6      	str	r6, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ebe6:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ebe8:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000ebea:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000ebec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000ebee:	6566      	str	r6, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000ebf0:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ebf4:	f7fe fae0 	bl	9000d1b8 <pxPortInitialiseStack>
9000ebf8:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000ebfa:	4620      	mov	r0, r4
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ebfc:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000ebfe:	f7ff fd45 	bl	9000e68c <prvAddNewTaskToReadyList>
	}
9000ec02:	4620      	mov	r0, r4
9000ec04:	b003      	add	sp, #12
9000ec06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000ec0a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000ec0e:	e7d6      	b.n	9000ebbe <xTaskCreateStatic+0x102>

9000ec10 <xTaskCreate>:
	{
9000ec10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000ec14:	0096      	lsls	r6, r2, #2
	{
9000ec16:	4680      	mov	r8, r0
9000ec18:	460d      	mov	r5, r1
9000ec1a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
9000ec1c:	4630      	mov	r0, r6
9000ec1e:	f7fe f91f 	bl	9000ce60 <pvPortMalloc>
			if( pxStack != NULL )
9000ec22:	2800      	cmp	r0, #0
9000ec24:	f000 8083 	beq.w	9000ed2e <xTaskCreate+0x11e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
9000ec28:	4607      	mov	r7, r0
9000ec2a:	2060      	movs	r0, #96	; 0x60
9000ec2c:	f7fe f918 	bl	9000ce60 <pvPortMalloc>
				if( pxNewTCB != NULL )
9000ec30:	4604      	mov	r4, r0
9000ec32:	2800      	cmp	r0, #0
9000ec34:	d07f      	beq.n	9000ed36 <xTaskCreate+0x126>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000ec36:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
9000ec38:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000ec3a:	4632      	mov	r2, r6
9000ec3c:	4638      	mov	r0, r7
9000ec3e:	21a5      	movs	r1, #165	; 0xa5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
9000ec40:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000ec44:	f014 ffaa 	bl	90023b9c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000ec48:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
	if( pcName != NULL )
9000ec4c:	2d00      	cmp	r5, #0
9000ec4e:	d078      	beq.n	9000ed42 <xTaskCreate+0x132>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec50:	782b      	ldrb	r3, [r5, #0]
9000ec52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
9000ec56:	2b00      	cmp	r3, #0
9000ec58:	d03b      	beq.n	9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec5a:	786b      	ldrb	r3, [r5, #1]
9000ec5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9000ec60:	2b00      	cmp	r3, #0
9000ec62:	d036      	beq.n	9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec64:	78ab      	ldrb	r3, [r5, #2]
9000ec66:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
9000ec6a:	b393      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec6c:	78eb      	ldrb	r3, [r5, #3]
9000ec6e:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
9000ec72:	b373      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec74:	792b      	ldrb	r3, [r5, #4]
9000ec76:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
9000ec7a:	b353      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec7c:	796b      	ldrb	r3, [r5, #5]
9000ec7e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9000ec82:	b333      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec84:	79ab      	ldrb	r3, [r5, #6]
9000ec86:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
9000ec8a:	b313      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec8c:	79eb      	ldrb	r3, [r5, #7]
9000ec8e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
9000ec92:	b1f3      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec94:	7a2b      	ldrb	r3, [r5, #8]
9000ec96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
9000ec9a:	b1d3      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ec9c:	7a6b      	ldrb	r3, [r5, #9]
9000ec9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
9000eca2:	b1b3      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eca4:	7aab      	ldrb	r3, [r5, #10]
9000eca6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
9000ecaa:	b193      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ecac:	7aeb      	ldrb	r3, [r5, #11]
9000ecae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
9000ecb2:	b173      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ecb4:	7b2b      	ldrb	r3, [r5, #12]
9000ecb6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
9000ecba:	b153      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ecbc:	7b6b      	ldrb	r3, [r5, #13]
9000ecbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
9000ecc2:	b133      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ecc4:	7bab      	ldrb	r3, [r5, #14]
9000ecc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
9000ecca:	b113      	cbz	r3, 9000ecd2 <xTaskCreate+0xc2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000eccc:	7beb      	ldrb	r3, [r5, #15]
9000ecce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000ecd2:	2300      	movs	r3, #0
9000ecd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
9000ecd8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
9000ecda:	2700      	movs	r7, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ecdc:	1d20      	adds	r0, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000ecde:	3e04      	subs	r6, #4
9000ece0:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
9000ece2:	6527      	str	r7, [r4, #80]	; 0x50
9000ece4:	bf28      	it	cs
9000ece6:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
9000ece8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
9000ecea:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ecec:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ecf0:	f7fe f9e4 	bl	9000d0bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000ecf4:	f104 0018 	add.w	r0, r4, #24
9000ecf8:	f7fe f9e0 	bl	9000d0bc <vListInitialiseItem>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000ecfc:	eb0a 0006 	add.w	r0, sl, r6
		pxNewTCB->ulNotifiedValue = 0;
9000ed00:	65a7      	str	r7, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ed02:	464a      	mov	r2, r9
9000ed04:	4641      	mov	r1, r8
9000ed06:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ed0a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000ed0c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000ed0e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000ed10:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000ed12:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ed16:	f7fe fa4f 	bl	9000d1b8 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
9000ed1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ed1c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
9000ed1e:	b103      	cbz	r3, 9000ed22 <xTaskCreate+0x112>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
9000ed20:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000ed22:	4620      	mov	r0, r4
9000ed24:	f7ff fcb2 	bl	9000e68c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
9000ed28:	2001      	movs	r0, #1
	}
9000ed2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000ed2e:	f04f 30ff 	mov.w	r0, #4294967295
	}
9000ed32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
9000ed36:	4638      	mov	r0, r7
9000ed38:	f7fe f950 	bl	9000cfdc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
9000ed3c:	f04f 30ff 	mov.w	r0, #4294967295
9000ed40:	e7f3      	b.n	9000ed2a <xTaskCreate+0x11a>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
9000ed42:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
9000ed46:	e7c7      	b.n	9000ecd8 <xTaskCreate+0xc8>

9000ed48 <vTaskDelay>:
	{
9000ed48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
9000ed4a:	b950      	cbnz	r0, 9000ed62 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
9000ed4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9000ed50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9000ed54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9000ed58:	f3bf 8f4f 	dsb	sy
9000ed5c:	f3bf 8f6f 	isb	sy
	}
9000ed60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
9000ed62:	4d1e      	ldr	r5, [pc, #120]	; (9000eddc <vTaskDelay+0x94>)
9000ed64:	682b      	ldr	r3, [r5, #0]
9000ed66:	b143      	cbz	r3, 9000ed7a <vTaskDelay+0x32>
9000ed68:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ed6c:	f383 8811 	msr	BASEPRI, r3
9000ed70:	f3bf 8f6f 	isb	sy
9000ed74:	f3bf 8f4f 	dsb	sy
9000ed78:	e7fe      	b.n	9000ed78 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
9000ed7a:	682b      	ldr	r3, [r5, #0]
9000ed7c:	4604      	mov	r4, r0
9000ed7e:	3301      	adds	r3, #1
9000ed80:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
9000ed82:	4b17      	ldr	r3, [pc, #92]	; (9000ede0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ed84:	4e17      	ldr	r6, [pc, #92]	; (9000ede4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
9000ed86:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000ed88:	6830      	ldr	r0, [r6, #0]
9000ed8a:	3004      	adds	r0, #4
9000ed8c:	f7fe f9c2 	bl	9000d114 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
9000ed90:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000ed92:	6833      	ldr	r3, [r6, #0]
9000ed94:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
9000ed96:	d315      	bcc.n	9000edc4 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000ed98:	4b13      	ldr	r3, [pc, #76]	; (9000ede8 <vTaskDelay+0xa0>)
9000ed9a:	6818      	ldr	r0, [r3, #0]
9000ed9c:	6831      	ldr	r1, [r6, #0]
9000ed9e:	3104      	adds	r1, #4
9000eda0:	f7fe f9a0 	bl	9000d0e4 <vListInsert>
	configASSERT( uxSchedulerSuspended );
9000eda4:	682b      	ldr	r3, [r5, #0]
9000eda6:	b943      	cbnz	r3, 9000edba <vTaskDelay+0x72>
9000eda8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000edac:	f383 8811 	msr	BASEPRI, r3
9000edb0:	f3bf 8f6f 	isb	sy
9000edb4:	f3bf 8f4f 	dsb	sy
9000edb8:	e7fe      	b.n	9000edb8 <vTaskDelay+0x70>
9000edba:	f7ff fde5 	bl	9000e988 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
9000edbe:	2800      	cmp	r0, #0
9000edc0:	d0c4      	beq.n	9000ed4c <vTaskDelay+0x4>
	}
9000edc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000edc4:	4b09      	ldr	r3, [pc, #36]	; (9000edec <vTaskDelay+0xa4>)
9000edc6:	6818      	ldr	r0, [r3, #0]
9000edc8:	6831      	ldr	r1, [r6, #0]
9000edca:	3104      	adds	r1, #4
9000edcc:	f7fe f98a 	bl	9000d0e4 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
9000edd0:	4b07      	ldr	r3, [pc, #28]	; (9000edf0 <vTaskDelay+0xa8>)
9000edd2:	681a      	ldr	r2, [r3, #0]
9000edd4:	4294      	cmp	r4, r2
9000edd6:	d2e5      	bcs.n	9000eda4 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
9000edd8:	601c      	str	r4, [r3, #0]
9000edda:	e7e3      	b.n	9000eda4 <vTaskDelay+0x5c>
9000eddc:	2402525c 	.word	0x2402525c
9000ede0:	240252dc 	.word	0x240252dc
9000ede4:	24024de8 	.word	0x24024de8
9000ede8:	24024df0 	.word	0x24024df0
9000edec:	24024dec 	.word	0x24024dec
9000edf0:	24025290 	.word	0x24025290

9000edf4 <vTaskStartScheduler>:
{
9000edf4:	b570      	push	{r4, r5, r6, lr}
9000edf6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
9000edf8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000edfa:	4668      	mov	r0, sp
9000edfc:	aa02      	add	r2, sp, #8
9000edfe:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
9000ee00:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
9000ee04:	f7fe f80e 	bl	9000ce24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
9000ee08:	9d00      	ldr	r5, [sp, #0]
9000ee0a:	e9dd 0601 	ldrd	r0, r6, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
9000ee0e:	b1b8      	cbz	r0, 9000ee40 <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
9000ee10:	b16d      	cbz	r5, 9000ee2e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
9000ee12:	2260      	movs	r2, #96	; 0x60
9000ee14:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
9000ee16:	9a03      	ldr	r2, [sp, #12]
9000ee18:	2a60      	cmp	r2, #96	; 0x60
9000ee1a:	d01a      	beq.n	9000ee52 <vTaskStartScheduler+0x5e>
9000ee1c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee20:	f383 8811 	msr	BASEPRI, r3
9000ee24:	f3bf 8f6f 	isb	sy
9000ee28:	f3bf 8f4f 	dsb	sy
9000ee2c:	e7fe      	b.n	9000ee2c <vTaskStartScheduler+0x38>
9000ee2e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee32:	f383 8811 	msr	BASEPRI, r3
9000ee36:	f3bf 8f6f 	isb	sy
9000ee3a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
9000ee3e:	e7fe      	b.n	9000ee3e <vTaskStartScheduler+0x4a>
9000ee40:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ee44:	f383 8811 	msr	BASEPRI, r3
9000ee48:	f3bf 8f6f 	isb	sy
9000ee4c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
9000ee50:	e7fe      	b.n	9000ee50 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000ee52:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000ee54:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000ee56:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
9000ee58:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000ee5a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
9000ee5c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
9000ee60:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9000ee62:	f014 fe9b 	bl	90023b9c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000ee66:	1f33      	subs	r3, r6, #4
9000ee68:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ee6a:	492a      	ldr	r1, [pc, #168]	; (9000ef14 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ee6c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9000ee6e:	441a      	add	r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9000ee70:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
9000ee74:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
9000ee76:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
9000ee7a:	f022 0607 	bic.w	r6, r2, #7
	pxNewTCB->uxPriority = uxPriority;
9000ee7e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
9000ee80:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
9000ee84:	f7fe f91a 	bl	9000d0bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
9000ee88:	f105 0018 	add.w	r0, r5, #24
9000ee8c:	f7fe f916 	bl	9000d0bc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ee90:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ee92:	4622      	mov	r2, r4
9000ee94:	4920      	ldr	r1, [pc, #128]	; (9000ef18 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
9000ee96:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000ee98:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000ee9a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
9000ee9c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
9000ee9e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
9000eea0:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
9000eea2:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000eea6:	f7fe f987 	bl	9000d1b8 <pxPortInitialiseStack>
9000eeaa:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
9000eeac:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
9000eeae:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
9000eeb0:	f7ff fbec 	bl	9000e68c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
9000eeb4:	f000 fca4 	bl	9000f800 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
9000eeb8:	2801      	cmp	r0, #1
9000eeba:	d00c      	beq.n	9000eed6 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000eebc:	3001      	adds	r0, #1
9000eebe:	d001      	beq.n	9000eec4 <vTaskStartScheduler+0xd0>
}
9000eec0:	b004      	add	sp, #16
9000eec2:	bd70      	pop	{r4, r5, r6, pc}
9000eec4:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eec8:	f383 8811 	msr	BASEPRI, r3
9000eecc:	f3bf 8f6f 	isb	sy
9000eed0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
9000eed4:	e7fe      	b.n	9000eed4 <vTaskStartScheduler+0xe0>
9000eed6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000eeda:	f383 8811 	msr	BASEPRI, r3
9000eede:	f3bf 8f6f 	isb	sy
9000eee2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
9000eee6:	4b0d      	ldr	r3, [pc, #52]	; (9000ef1c <vTaskStartScheduler+0x128>)
9000eee8:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
9000eeec:	490c      	ldr	r1, [pc, #48]	; (9000ef20 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
9000eeee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000eef0:	4b0c      	ldr	r3, [pc, #48]	; (9000ef24 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
9000eef2:	4a0d      	ldr	r2, [pc, #52]	; (9000ef28 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
9000eef4:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
9000eef6:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
9000eef8:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
9000eefa:	b143      	cbz	r3, 9000ef0e <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
9000eefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000eefe:	b10b      	cbz	r3, 9000ef04 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000ef00:	2000      	movs	r0, #0
9000ef02:	4798      	blx	r3
}
9000ef04:	b004      	add	sp, #16
9000ef06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9000ef0a:	f7fe ba15 	b.w	9000d338 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9000ef0e:	6813      	ldr	r3, [r2, #0]
9000ef10:	e7f4      	b.n	9000eefc <vTaskStartScheduler+0x108>
9000ef12:	bf00      	nop
9000ef14:	454c4449 	.word	0x454c4449
9000ef18:	9000e79d 	.word	0x9000e79d
9000ef1c:	24025290 	.word	0x24025290
9000ef20:	240252b0 	.word	0x240252b0
9000ef24:	240252dc 	.word	0x240252dc
9000ef28:	24024de8 	.word	0x24024de8

9000ef2c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9000ef2c:	4a02      	ldr	r2, [pc, #8]	; (9000ef38 <vTaskSuspendAll+0xc>)
9000ef2e:	6813      	ldr	r3, [r2, #0]
9000ef30:	3301      	adds	r3, #1
9000ef32:	6013      	str	r3, [r2, #0]
}
9000ef34:	4770      	bx	lr
9000ef36:	bf00      	nop
9000ef38:	2402525c 	.word	0x2402525c

9000ef3c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9000ef3c:	4b06      	ldr	r3, [pc, #24]	; (9000ef58 <xTaskResumeAll+0x1c>)
9000ef3e:	681b      	ldr	r3, [r3, #0]
9000ef40:	b943      	cbnz	r3, 9000ef54 <xTaskResumeAll+0x18>
9000ef42:	f04f 0350 	mov.w	r3, #80	; 0x50
9000ef46:	f383 8811 	msr	BASEPRI, r3
9000ef4a:	f3bf 8f6f 	isb	sy
9000ef4e:	f3bf 8f4f 	dsb	sy
9000ef52:	e7fe      	b.n	9000ef52 <xTaskResumeAll+0x16>
9000ef54:	f7ff bd18 	b.w	9000e988 <xTaskResumeAll.part.0>
9000ef58:	2402525c 	.word	0x2402525c

9000ef5c <xTaskGetTickCount>:
		xTicks = xTickCount;
9000ef5c:	4b01      	ldr	r3, [pc, #4]	; (9000ef64 <xTaskGetTickCount+0x8>)
9000ef5e:	6818      	ldr	r0, [r3, #0]
}
9000ef60:	4770      	bx	lr
9000ef62:	bf00      	nop
9000ef64:	240252dc 	.word	0x240252dc

9000ef68 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000ef68:	4b05      	ldr	r3, [pc, #20]	; (9000ef80 <xTaskIncrementTick+0x18>)
9000ef6a:	681b      	ldr	r3, [r3, #0]
9000ef6c:	b90b      	cbnz	r3, 9000ef72 <xTaskIncrementTick+0xa>
9000ef6e:	f7ff bc63 	b.w	9000e838 <xTaskIncrementTick.part.0>
		++xPendedTicks;
9000ef72:	4a04      	ldr	r2, [pc, #16]	; (9000ef84 <xTaskIncrementTick+0x1c>)
}
9000ef74:	2000      	movs	r0, #0
		++xPendedTicks;
9000ef76:	6813      	ldr	r3, [r2, #0]
9000ef78:	3301      	adds	r3, #1
9000ef7a:	6013      	str	r3, [r2, #0]
}
9000ef7c:	4770      	bx	lr
9000ef7e:	bf00      	nop
9000ef80:	2402525c 	.word	0x2402525c
9000ef84:	24025298 	.word	0x24025298

9000ef88 <vTaskSetApplicationTaskTag>:
	{
9000ef88:	b538      	push	{r3, r4, r5, lr}
9000ef8a:	460d      	mov	r5, r1
		if( xTask == NULL )
9000ef8c:	b138      	cbz	r0, 9000ef9e <vTaskSetApplicationTaskTag+0x16>
9000ef8e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
9000ef90:	f7fe f940 	bl	9000d214 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000ef94:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000ef96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000ef9a:	f7fe b95d 	b.w	9000d258 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9000ef9e:	4b04      	ldr	r3, [pc, #16]	; (9000efb0 <vTaskSetApplicationTaskTag+0x28>)
9000efa0:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
9000efa2:	f7fe f937 	bl	9000d214 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
9000efa6:	6565      	str	r5, [r4, #84]	; 0x54
	}
9000efa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9000efac:	f7fe b954 	b.w	9000d258 <vPortExitCritical>
9000efb0:	24024de8 	.word	0x24024de8

9000efb4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
9000efb4:	4b27      	ldr	r3, [pc, #156]	; (9000f054 <vTaskSwitchContext+0xa0>)
9000efb6:	681b      	ldr	r3, [r3, #0]
9000efb8:	b11b      	cbz	r3, 9000efc2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
9000efba:	4b27      	ldr	r3, [pc, #156]	; (9000f058 <vTaskSwitchContext+0xa4>)
9000efbc:	2201      	movs	r2, #1
9000efbe:	601a      	str	r2, [r3, #0]
9000efc0:	4770      	bx	lr
{
9000efc2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
9000efc4:	4a24      	ldr	r2, [pc, #144]	; (9000f058 <vTaskSwitchContext+0xa4>)
		traceTASK_SWITCHED_OUT();
9000efc6:	4c25      	ldr	r4, [pc, #148]	; (9000f05c <vTaskSwitchContext+0xa8>)
		xYieldPending = pdFALSE;
9000efc8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
9000efca:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000efcc:	2b00      	cmp	r3, #0
9000efce:	d036      	beq.n	9000f03e <vTaskSwitchContext+0x8a>
		if( xTCB->pxTaskTag != NULL )
9000efd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000efd2:	b10b      	cbz	r3, 9000efd8 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000efd4:	2001      	movs	r0, #1
9000efd6:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000efd8:	4d21      	ldr	r5, [pc, #132]	; (9000f060 <vTaskSwitchContext+0xac>)
9000efda:	4922      	ldr	r1, [pc, #136]	; (9000f064 <vTaskSwitchContext+0xb0>)
9000efdc:	682b      	ldr	r3, [r5, #0]
9000efde:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000efe2:	0098      	lsls	r0, r3, #2
9000efe4:	0092      	lsls	r2, r2, #2
9000efe6:	588a      	ldr	r2, [r1, r2]
9000efe8:	b942      	cbnz	r2, 9000effc <vTaskSwitchContext+0x48>
9000efea:	b1fb      	cbz	r3, 9000f02c <vTaskSwitchContext+0x78>
9000efec:	3b01      	subs	r3, #1
9000efee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
9000eff2:	0098      	lsls	r0, r3, #2
9000eff4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
9000eff8:	2a00      	cmp	r2, #0
9000effa:	d0f6      	beq.n	9000efea <vTaskSwitchContext+0x36>
9000effc:	4418      	add	r0, r3
9000effe:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
9000f002:	f8dc 1004 	ldr.w	r1, [ip, #4]
9000f006:	4662      	mov	r2, ip
9000f008:	6849      	ldr	r1, [r1, #4]
9000f00a:	3208      	adds	r2, #8
9000f00c:	4291      	cmp	r1, r2
9000f00e:	f8cc 1004 	str.w	r1, [ip, #4]
9000f012:	d01b      	beq.n	9000f04c <vTaskSwitchContext+0x98>
9000f014:	68ca      	ldr	r2, [r1, #12]
9000f016:	6022      	str	r2, [r4, #0]
9000f018:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
9000f01a:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
9000f01c:	b1a3      	cbz	r3, 9000f048 <vTaskSwitchContext+0x94>
		if( xTCB->pxTaskTag != NULL )
9000f01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000f020:	b11b      	cbz	r3, 9000f02a <vTaskSwitchContext+0x76>
			xReturn = xTCB->pxTaskTag( pvParameter );
9000f022:	2000      	movs	r0, #0
}
9000f024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
9000f028:	4718      	bx	r3
}
9000f02a:	bd70      	pop	{r4, r5, r6, pc}
9000f02c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f030:	f383 8811 	msr	BASEPRI, r3
9000f034:	f3bf 8f6f 	isb	sy
9000f038:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f03c:	e7fe      	b.n	9000f03c <vTaskSwitchContext+0x88>
			xTCB = pxCurrentTCB;
9000f03e:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
9000f040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000f042:	2b00      	cmp	r3, #0
9000f044:	d1c6      	bne.n	9000efd4 <vTaskSwitchContext+0x20>
9000f046:	e7c7      	b.n	9000efd8 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
9000f048:	6823      	ldr	r3, [r4, #0]
9000f04a:	e7e8      	b.n	9000f01e <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f04c:	6849      	ldr	r1, [r1, #4]
9000f04e:	f8cc 1004 	str.w	r1, [ip, #4]
9000f052:	e7df      	b.n	9000f014 <vTaskSwitchContext+0x60>
9000f054:	2402525c 	.word	0x2402525c
9000f058:	240252e0 	.word	0x240252e0
9000f05c:	24024de8 	.word	0x24024de8
9000f060:	24025264 	.word	0x24025264
9000f064:	24024df4 	.word	0x24024df4

9000f068 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
9000f068:	b1f0      	cbz	r0, 9000f0a8 <vTaskPlaceOnEventList+0x40>
{
9000f06a:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000f06c:	4d1a      	ldr	r5, [pc, #104]	; (9000f0d8 <vTaskPlaceOnEventList+0x70>)
9000f06e:	460c      	mov	r4, r1
9000f070:	6829      	ldr	r1, [r5, #0]
9000f072:	3118      	adds	r1, #24
9000f074:	f7fe f836 	bl	9000d0e4 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
9000f078:	4b18      	ldr	r3, [pc, #96]	; (9000f0dc <vTaskPlaceOnEventList+0x74>)
9000f07a:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f07c:	6828      	ldr	r0, [r5, #0]
9000f07e:	3004      	adds	r0, #4
9000f080:	f7fe f848 	bl	9000d114 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
9000f084:	1c63      	adds	r3, r4, #1
9000f086:	d020      	beq.n	9000f0ca <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000f088:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000f08a:	682b      	ldr	r3, [r5, #0]
9000f08c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000f08e:	d214      	bcs.n	9000f0ba <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f090:	4b13      	ldr	r3, [pc, #76]	; (9000f0e0 <vTaskPlaceOnEventList+0x78>)
9000f092:	6818      	ldr	r0, [r3, #0]
9000f094:	6829      	ldr	r1, [r5, #0]
9000f096:	3104      	adds	r1, #4
9000f098:	f7fe f824 	bl	9000d0e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000f09c:	4b11      	ldr	r3, [pc, #68]	; (9000f0e4 <vTaskPlaceOnEventList+0x7c>)
9000f09e:	681a      	ldr	r2, [r3, #0]
9000f0a0:	4294      	cmp	r4, r2
9000f0a2:	d200      	bcs.n	9000f0a6 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
9000f0a4:	601c      	str	r4, [r3, #0]
}
9000f0a6:	bd70      	pop	{r4, r5, r6, pc}
9000f0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f0ac:	f383 8811 	msr	BASEPRI, r3
9000f0b0:	f3bf 8f6f 	isb	sy
9000f0b4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
9000f0b8:	e7fe      	b.n	9000f0b8 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f0ba:	4b0b      	ldr	r3, [pc, #44]	; (9000f0e8 <vTaskPlaceOnEventList+0x80>)
9000f0bc:	6818      	ldr	r0, [r3, #0]
9000f0be:	6829      	ldr	r1, [r5, #0]
}
9000f0c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f0c4:	3104      	adds	r1, #4
9000f0c6:	f7fe b80d 	b.w	9000d0e4 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f0ca:	6829      	ldr	r1, [r5, #0]
9000f0cc:	4807      	ldr	r0, [pc, #28]	; (9000f0ec <vTaskPlaceOnEventList+0x84>)
9000f0ce:	3104      	adds	r1, #4
}
9000f0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f0d4:	f7fd bff6 	b.w	9000d0c4 <vListInsertEnd>
9000f0d8:	24024de8 	.word	0x24024de8
9000f0dc:	240252dc 	.word	0x240252dc
9000f0e0:	24024dec 	.word	0x24024dec
9000f0e4:	24025290 	.word	0x24025290
9000f0e8:	24024df0 	.word	0x24024df0
9000f0ec:	240252b4 	.word	0x240252b4

9000f0f0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
9000f0f0:	b358      	cbz	r0, 9000f14a <vTaskPlaceOnEventListRestricted+0x5a>
	{
9000f0f2:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
9000f0f4:	4e1d      	ldr	r6, [pc, #116]	; (9000f16c <vTaskPlaceOnEventListRestricted+0x7c>)
9000f0f6:	460c      	mov	r4, r1
9000f0f8:	4615      	mov	r5, r2
9000f0fa:	6831      	ldr	r1, [r6, #0]
9000f0fc:	3118      	adds	r1, #24
9000f0fe:	f7fd ffe1 	bl	9000d0c4 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
9000f102:	b165      	cbz	r5, 9000f11e <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
9000f104:	4b1a      	ldr	r3, [pc, #104]	; (9000f170 <vTaskPlaceOnEventListRestricted+0x80>)
9000f106:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f108:	6830      	ldr	r0, [r6, #0]
9000f10a:	3004      	adds	r0, #4
9000f10c:	f7fe f802 	bl	9000d114 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f110:	6831      	ldr	r1, [r6, #0]
9000f112:	4818      	ldr	r0, [pc, #96]	; (9000f174 <vTaskPlaceOnEventListRestricted+0x84>)
9000f114:	3104      	adds	r1, #4
	}
9000f116:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f11a:	f7fd bfd3 	b.w	9000d0c4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9000f11e:	4b14      	ldr	r3, [pc, #80]	; (9000f170 <vTaskPlaceOnEventListRestricted+0x80>)
9000f120:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f122:	6830      	ldr	r0, [r6, #0]
9000f124:	3004      	adds	r0, #4
9000f126:	f7fd fff5 	bl	9000d114 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
9000f12a:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
9000f12c:	6833      	ldr	r3, [r6, #0]
9000f12e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9000f130:	d214      	bcs.n	9000f15c <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f132:	4b11      	ldr	r3, [pc, #68]	; (9000f178 <vTaskPlaceOnEventListRestricted+0x88>)
9000f134:	6818      	ldr	r0, [r3, #0]
9000f136:	6831      	ldr	r1, [r6, #0]
9000f138:	3104      	adds	r1, #4
9000f13a:	f7fd ffd3 	bl	9000d0e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9000f13e:	4b0f      	ldr	r3, [pc, #60]	; (9000f17c <vTaskPlaceOnEventListRestricted+0x8c>)
9000f140:	681a      	ldr	r2, [r3, #0]
9000f142:	4294      	cmp	r4, r2
9000f144:	d200      	bcs.n	9000f148 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
9000f146:	601c      	str	r4, [r3, #0]
	}
9000f148:	bd70      	pop	{r4, r5, r6, pc}
9000f14a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f14e:	f383 8811 	msr	BASEPRI, r3
9000f152:	f3bf 8f6f 	isb	sy
9000f156:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
9000f15a:	e7fe      	b.n	9000f15a <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f15c:	4b08      	ldr	r3, [pc, #32]	; (9000f180 <vTaskPlaceOnEventListRestricted+0x90>)
9000f15e:	6818      	ldr	r0, [r3, #0]
9000f160:	6831      	ldr	r1, [r6, #0]
	}
9000f162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9000f166:	3104      	adds	r1, #4
9000f168:	f7fd bfbc 	b.w	9000d0e4 <vListInsert>
9000f16c:	24024de8 	.word	0x24024de8
9000f170:	240252dc 	.word	0x240252dc
9000f174:	240252b4 	.word	0x240252b4
9000f178:	24024dec 	.word	0x24024dec
9000f17c:	24025290 	.word	0x24025290
9000f180:	24024df0 	.word	0x24024df0

9000f184 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f184:	68c3      	ldr	r3, [r0, #12]
{
9000f186:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f188:	68dc      	ldr	r4, [r3, #12]
{
9000f18a:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
9000f18c:	b35c      	cbz	r4, 9000f1e6 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9000f18e:	f104 0518 	add.w	r5, r4, #24
9000f192:	4628      	mov	r0, r5
9000f194:	f7fd ffbe 	bl	9000d114 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f198:	4b19      	ldr	r3, [pc, #100]	; (9000f200 <xTaskRemoveFromEventList+0x7c>)
9000f19a:	681b      	ldr	r3, [r3, #0]
9000f19c:	b17b      	cbz	r3, 9000f1be <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9000f19e:	4629      	mov	r1, r5
9000f1a0:	4818      	ldr	r0, [pc, #96]	; (9000f204 <xTaskRemoveFromEventList+0x80>)
9000f1a2:	f7fd ff8f 	bl	9000d0c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
9000f1a6:	4b18      	ldr	r3, [pc, #96]	; (9000f208 <xTaskRemoveFromEventList+0x84>)
9000f1a8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000f1aa:	681b      	ldr	r3, [r3, #0]
9000f1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f1ae:	429a      	cmp	r2, r3
9000f1b0:	d922      	bls.n	9000f1f8 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
9000f1b2:	2301      	movs	r3, #1
9000f1b4:	4a15      	ldr	r2, [pc, #84]	; (9000f20c <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
9000f1b6:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
9000f1b8:	6013      	str	r3, [r2, #0]
}
9000f1ba:	b003      	add	sp, #12
9000f1bc:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
9000f1be:	1d21      	adds	r1, r4, #4
9000f1c0:	4608      	mov	r0, r1
9000f1c2:	9101      	str	r1, [sp, #4]
9000f1c4:	f7fd ffa6 	bl	9000d114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
9000f1c8:	4a11      	ldr	r2, [pc, #68]	; (9000f210 <xTaskRemoveFromEventList+0x8c>)
9000f1ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000f1cc:	6810      	ldr	r0, [r2, #0]
9000f1ce:	9901      	ldr	r1, [sp, #4]
9000f1d0:	4283      	cmp	r3, r0
9000f1d2:	d900      	bls.n	9000f1d6 <xTaskRemoveFromEventList+0x52>
9000f1d4:	6013      	str	r3, [r2, #0]
9000f1d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000f1da:	480e      	ldr	r0, [pc, #56]	; (9000f214 <xTaskRemoveFromEventList+0x90>)
9000f1dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
9000f1e0:	f7fd ff70 	bl	9000d0c4 <vListInsertEnd>
9000f1e4:	e7df      	b.n	9000f1a6 <xTaskRemoveFromEventList+0x22>
9000f1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f1ea:	f383 8811 	msr	BASEPRI, r3
9000f1ee:	f3bf 8f6f 	isb	sy
9000f1f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
9000f1f6:	e7fe      	b.n	9000f1f6 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
9000f1f8:	2000      	movs	r0, #0
}
9000f1fa:	b003      	add	sp, #12
9000f1fc:	bd30      	pop	{r4, r5, pc}
9000f1fe:	bf00      	nop
9000f200:	2402525c 	.word	0x2402525c
9000f204:	2402529c 	.word	0x2402529c
9000f208:	24024de8 	.word	0x24024de8
9000f20c:	240252e0 	.word	0x240252e0
9000f210:	24025264 	.word	0x24025264
9000f214:	24024df4 	.word	0x24024df4

9000f218 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000f218:	4a03      	ldr	r2, [pc, #12]	; (9000f228 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
9000f21a:	4b04      	ldr	r3, [pc, #16]	; (9000f22c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000f21c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000f21e:	681b      	ldr	r3, [r3, #0]
9000f220:	e9c0 2300 	strd	r2, r3, [r0]
}
9000f224:	4770      	bx	lr
9000f226:	bf00      	nop
9000f228:	24025294 	.word	0x24025294
9000f22c:	240252dc 	.word	0x240252dc

9000f230 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
9000f230:	b328      	cbz	r0, 9000f27e <xTaskCheckForTimeOut+0x4e>
{
9000f232:	b5f0      	push	{r4, r5, r6, r7, lr}
9000f234:	460d      	mov	r5, r1
9000f236:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
9000f238:	b1c1      	cbz	r1, 9000f26c <xTaskCheckForTimeOut+0x3c>
9000f23a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
9000f23c:	f7fd ffea 	bl	9000d214 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
9000f240:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
9000f242:	4a1d      	ldr	r2, [pc, #116]	; (9000f2b8 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
9000f244:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
9000f246:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
9000f248:	d030      	beq.n	9000f2ac <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000f24a:	f8df c070 	ldr.w	ip, [pc, #112]	; 9000f2bc <xTaskCheckForTimeOut+0x8c>
9000f24e:	6826      	ldr	r6, [r4, #0]
9000f250:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000f254:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
9000f256:	42be      	cmp	r6, r7
9000f258:	d01a      	beq.n	9000f290 <xTaskCheckForTimeOut+0x60>
9000f25a:	4288      	cmp	r0, r1
9000f25c:	d818      	bhi.n	9000f290 <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9000f25e:	2001      	movs	r0, #1
9000f260:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9000f262:	f7fd fff9 	bl	9000d258 <vPortExitCritical>
}
9000f266:	9801      	ldr	r0, [sp, #4]
9000f268:	b003      	add	sp, #12
9000f26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000f26c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f270:	f383 8811 	msr	BASEPRI, r3
9000f274:	f3bf 8f6f 	isb	sy
9000f278:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
9000f27c:	e7fe      	b.n	9000f27c <xTaskCheckForTimeOut+0x4c>
9000f27e:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f282:	f383 8811 	msr	BASEPRI, r3
9000f286:	f3bf 8f6f 	isb	sy
9000f28a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9000f28e:	e7fe      	b.n	9000f28e <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9000f290:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
9000f294:	4573      	cmp	r3, lr
9000f296:	d90b      	bls.n	9000f2b0 <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
9000f298:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
9000f29a:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000f29e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
9000f2a0:	4403      	add	r3, r0
			xReturn = pdFALSE;
9000f2a2:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
9000f2a4:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9000f2a6:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
9000f2aa:	e7d9      	b.n	9000f260 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
9000f2ac:	2000      	movs	r0, #0
9000f2ae:	e7d7      	b.n	9000f260 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
9000f2b0:	2300      	movs	r3, #0
			xReturn = pdTRUE;
9000f2b2:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
9000f2b4:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
9000f2b6:	e7d3      	b.n	9000f260 <xTaskCheckForTimeOut+0x30>
9000f2b8:	240252dc 	.word	0x240252dc
9000f2bc:	24025294 	.word	0x24025294

9000f2c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
9000f2c0:	4b01      	ldr	r3, [pc, #4]	; (9000f2c8 <vTaskMissedYield+0x8>)
9000f2c2:	2201      	movs	r2, #1
9000f2c4:	601a      	str	r2, [r3, #0]
}
9000f2c6:	4770      	bx	lr
9000f2c8:	240252e0 	.word	0x240252e0

9000f2cc <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
9000f2cc:	4b01      	ldr	r3, [pc, #4]	; (9000f2d4 <xTaskGetCurrentTaskHandle+0x8>)
9000f2ce:	6818      	ldr	r0, [r3, #0]
	}
9000f2d0:	4770      	bx	lr
9000f2d2:	bf00      	nop
9000f2d4:	24024de8 	.word	0x24024de8

9000f2d8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
9000f2d8:	4b05      	ldr	r3, [pc, #20]	; (9000f2f0 <xTaskGetSchedulerState+0x18>)
9000f2da:	681b      	ldr	r3, [r3, #0]
9000f2dc:	b133      	cbz	r3, 9000f2ec <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
9000f2de:	4b05      	ldr	r3, [pc, #20]	; (9000f2f4 <xTaskGetSchedulerState+0x1c>)
9000f2e0:	6818      	ldr	r0, [r3, #0]
9000f2e2:	fab0 f080 	clz	r0, r0
9000f2e6:	0940      	lsrs	r0, r0, #5
9000f2e8:	0040      	lsls	r0, r0, #1
9000f2ea:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
9000f2ec:	2001      	movs	r0, #1
	}
9000f2ee:	4770      	bx	lr
9000f2f0:	240252b0 	.word	0x240252b0
9000f2f4:	2402525c 	.word	0x2402525c

9000f2f8 <xTaskPriorityInherit>:
	{
9000f2f8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
9000f2fa:	4604      	mov	r4, r0
	{
9000f2fc:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
9000f2fe:	b1c8      	cbz	r0, 9000f334 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
9000f300:	4d1d      	ldr	r5, [pc, #116]	; (9000f378 <xTaskPriorityInherit+0x80>)
9000f302:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
9000f304:	682a      	ldr	r2, [r5, #0]
9000f306:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000f308:	4293      	cmp	r3, r2
9000f30a:	d215      	bcs.n	9000f338 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000f30c:	6982      	ldr	r2, [r0, #24]
9000f30e:	2a00      	cmp	r2, #0
9000f310:	db04      	blt.n	9000f31c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f312:	682a      	ldr	r2, [r5, #0]
9000f314:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
9000f316:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
9000f31a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
9000f31c:	4e17      	ldr	r6, [pc, #92]	; (9000f37c <xTaskPriorityInherit+0x84>)
9000f31e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000f322:	6962      	ldr	r2, [r4, #20]
9000f324:	eb06 0383 	add.w	r3, r6, r3, lsl #2
9000f328:	429a      	cmp	r2, r3
9000f32a:	d00e      	beq.n	9000f34a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000f32c:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9000f32e:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000f330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f332:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
9000f334:	b002      	add	sp, #8
9000f336:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
9000f338:	682b      	ldr	r3, [r5, #0]
9000f33a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9000f33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9000f33e:	4298      	cmp	r0, r3
9000f340:	bf2c      	ite	cs
9000f342:	2000      	movcs	r0, #0
9000f344:	2001      	movcc	r0, #1
	}
9000f346:	b002      	add	sp, #8
9000f348:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f34a:	1d21      	adds	r1, r4, #4
9000f34c:	4608      	mov	r0, r1
9000f34e:	9101      	str	r1, [sp, #4]
9000f350:	f7fd fee0 	bl	9000d114 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000f354:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000f356:	4b0a      	ldr	r3, [pc, #40]	; (9000f380 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000f358:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000f35a:	681a      	ldr	r2, [r3, #0]
9000f35c:	9901      	ldr	r1, [sp, #4]
9000f35e:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9000f360:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9000f362:	d900      	bls.n	9000f366 <xTaskPriorityInherit+0x6e>
9000f364:	6018      	str	r0, [r3, #0]
9000f366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000f36a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9000f36e:	f7fd fea9 	bl	9000d0c4 <vListInsertEnd>
				xReturn = pdTRUE;
9000f372:	2001      	movs	r0, #1
9000f374:	e7de      	b.n	9000f334 <xTaskPriorityInherit+0x3c>
9000f376:	bf00      	nop
9000f378:	24024de8 	.word	0x24024de8
9000f37c:	24024df4 	.word	0x24024df4
9000f380:	24025264 	.word	0x24025264

9000f384 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
9000f384:	b318      	cbz	r0, 9000f3ce <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
9000f386:	4b1f      	ldr	r3, [pc, #124]	; (9000f404 <xTaskPriorityDisinherit+0x80>)
	{
9000f388:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
9000f38a:	681c      	ldr	r4, [r3, #0]
	{
9000f38c:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9000f38e:	4284      	cmp	r4, r0
9000f390:	d008      	beq.n	9000f3a4 <xTaskPriorityDisinherit+0x20>
9000f392:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f396:	f383 8811 	msr	BASEPRI, r3
9000f39a:	f3bf 8f6f 	isb	sy
9000f39e:	f3bf 8f4f 	dsb	sy
9000f3a2:	e7fe      	b.n	9000f3a2 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
9000f3a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
9000f3a6:	b14b      	cbz	r3, 9000f3bc <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000f3a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
9000f3aa:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
9000f3ac:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
9000f3ae:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
9000f3b0:	4291      	cmp	r1, r2
9000f3b2:	d000      	beq.n	9000f3b6 <xTaskPriorityDisinherit+0x32>
9000f3b4:	b16b      	cbz	r3, 9000f3d2 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
9000f3b6:	2000      	movs	r0, #0
	}
9000f3b8:	b002      	add	sp, #8
9000f3ba:	bd10      	pop	{r4, pc}
9000f3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f3c0:	f383 8811 	msr	BASEPRI, r3
9000f3c4:	f3bf 8f6f 	isb	sy
9000f3c8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000f3cc:	e7fe      	b.n	9000f3cc <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
9000f3ce:	2000      	movs	r0, #0
	}
9000f3d0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f3d2:	1d21      	adds	r1, r4, #4
9000f3d4:	4608      	mov	r0, r1
9000f3d6:	9101      	str	r1, [sp, #4]
9000f3d8:	f7fd fe9c 	bl	9000d114 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000f3dc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
9000f3de:	4b0a      	ldr	r3, [pc, #40]	; (9000f408 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f3e0:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
9000f3e4:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
9000f3e6:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f3e8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
9000f3ea:	681a      	ldr	r2, [r3, #0]
9000f3ec:	4290      	cmp	r0, r2
9000f3ee:	d900      	bls.n	9000f3f2 <xTaskPriorityDisinherit+0x6e>
9000f3f0:	6018      	str	r0, [r3, #0]
9000f3f2:	4b06      	ldr	r3, [pc, #24]	; (9000f40c <xTaskPriorityDisinherit+0x88>)
9000f3f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000f3f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
9000f3fc:	f7fd fe62 	bl	9000d0c4 <vListInsertEnd>
					xReturn = pdTRUE;
9000f400:	2001      	movs	r0, #1
		return xReturn;
9000f402:	e7d9      	b.n	9000f3b8 <xTaskPriorityDisinherit+0x34>
9000f404:	24024de8 	.word	0x24024de8
9000f408:	24025264 	.word	0x24025264
9000f40c:	24024df4 	.word	0x24024df4

9000f410 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
9000f410:	2800      	cmp	r0, #0
9000f412:	d040      	beq.n	9000f496 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
9000f414:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
9000f416:	b530      	push	{r4, r5, lr}
9000f418:	4604      	mov	r4, r0
9000f41a:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
9000f41c:	b153      	cbz	r3, 9000f434 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9000f41e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
9000f420:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000f422:	4281      	cmp	r1, r0
9000f424:	bf38      	it	cc
9000f426:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
9000f428:	2b01      	cmp	r3, #1
9000f42a:	d101      	bne.n	9000f430 <vTaskPriorityDisinheritAfterTimeout+0x20>
9000f42c:	428a      	cmp	r2, r1
9000f42e:	d10a      	bne.n	9000f446 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
9000f430:	b003      	add	sp, #12
9000f432:	bd30      	pop	{r4, r5, pc}
9000f434:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f438:	f383 8811 	msr	BASEPRI, r3
9000f43c:	f3bf 8f6f 	isb	sy
9000f440:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
9000f444:	e7fe      	b.n	9000f444 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
9000f446:	4b19      	ldr	r3, [pc, #100]	; (9000f4ac <vTaskPriorityDisinheritAfterTimeout+0x9c>)
9000f448:	681b      	ldr	r3, [r3, #0]
9000f44a:	42a3      	cmp	r3, r4
9000f44c:	d024      	beq.n	9000f498 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000f44e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
9000f450:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9000f452:	2b00      	cmp	r3, #0
9000f454:	db02      	blt.n	9000f45c <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f456:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
9000f45a:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
9000f45c:	4d14      	ldr	r5, [pc, #80]	; (9000f4b0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9000f45e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
9000f462:	6961      	ldr	r1, [r4, #20]
9000f464:	eb05 0382 	add.w	r3, r5, r2, lsl #2
9000f468:	4299      	cmp	r1, r3
9000f46a:	d1e1      	bne.n	9000f430 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9000f46c:	1d21      	adds	r1, r4, #4
9000f46e:	4608      	mov	r0, r1
9000f470:	9101      	str	r1, [sp, #4]
9000f472:	f7fd fe4f 	bl	9000d114 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
9000f476:	4b0f      	ldr	r3, [pc, #60]	; (9000f4b4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
9000f478:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000f47a:	681a      	ldr	r2, [r3, #0]
9000f47c:	9901      	ldr	r1, [sp, #4]
9000f47e:	4290      	cmp	r0, r2
9000f480:	d900      	bls.n	9000f484 <vTaskPriorityDisinheritAfterTimeout+0x74>
9000f482:	6018      	str	r0, [r3, #0]
9000f484:	eb00 0080 	add.w	r0, r0, r0, lsl #2
9000f488:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
9000f48c:	b003      	add	sp, #12
9000f48e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
9000f492:	f7fd be17 	b.w	9000d0c4 <vListInsertEnd>
9000f496:	4770      	bx	lr
9000f498:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f49c:	f383 8811 	msr	BASEPRI, r3
9000f4a0:	f3bf 8f6f 	isb	sy
9000f4a4:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
9000f4a8:	e7fe      	b.n	9000f4a8 <vTaskPriorityDisinheritAfterTimeout+0x98>
9000f4aa:	bf00      	nop
9000f4ac:	24024de8 	.word	0x24024de8
9000f4b0:	24024df4 	.word	0x24024df4
9000f4b4:	24025264 	.word	0x24025264

9000f4b8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
9000f4b8:	4b04      	ldr	r3, [pc, #16]	; (9000f4cc <pvTaskIncrementMutexHeldCount+0x14>)
9000f4ba:	681a      	ldr	r2, [r3, #0]
9000f4bc:	b11a      	cbz	r2, 9000f4c6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
9000f4be:	6819      	ldr	r1, [r3, #0]
9000f4c0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
9000f4c2:	3201      	adds	r2, #1
9000f4c4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
9000f4c6:	6818      	ldr	r0, [r3, #0]
	}
9000f4c8:	4770      	bx	lr
9000f4ca:	bf00      	nop
9000f4cc:	24024de8 	.word	0x24024de8

9000f4d0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
9000f4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000f4d4:	4e22      	ldr	r6, [pc, #136]	; (9000f560 <prvSwitchTimerLists+0x90>)
9000f4d6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
9000f4d8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 9000f568 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
9000f4dc:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000f4e0:	e00d      	b.n	9000f4fe <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000f4e2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f4e4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000f4e6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000f4e8:	1d25      	adds	r5, r4, #4
9000f4ea:	4628      	mov	r0, r5
9000f4ec:	f7fd fe12 	bl	9000d114 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000f4f0:	6a23      	ldr	r3, [r4, #32]
9000f4f2:	4620      	mov	r0, r4
9000f4f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000f4f6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
9000f4fa:	075b      	lsls	r3, r3, #29
9000f4fc:	d40a      	bmi.n	9000f514 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
9000f4fe:	6833      	ldr	r3, [r6, #0]
9000f500:	681a      	ldr	r2, [r3, #0]
9000f502:	2a00      	cmp	r2, #0
9000f504:	d1ed      	bne.n	9000f4e2 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
9000f506:	4a17      	ldr	r2, [pc, #92]	; (9000f564 <prvSwitchTimerLists+0x94>)
9000f508:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
9000f50a:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
9000f50c:	6031      	str	r1, [r6, #0]
}
9000f50e:	b005      	add	sp, #20
9000f510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000f514:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f516:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
9000f518:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
9000f51a:	429f      	cmp	r7, r3
9000f51c:	d205      	bcs.n	9000f52a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f51e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9000f520:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000f522:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f524:	f7fd fdde 	bl	9000d0e4 <vListInsert>
9000f528:	e7e9      	b.n	9000f4fe <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
9000f52a:	f8d9 3000 	ldr.w	r3, [r9]
9000f52e:	b16b      	cbz	r3, 9000f54c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000f530:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000f532:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000f536:	f7ff fecf 	bl	9000f2d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000f53a:	2300      	movs	r3, #0
9000f53c:	4669      	mov	r1, sp
9000f53e:	f8d9 0000 	ldr.w	r0, [r9]
9000f542:	461a      	mov	r2, r3
9000f544:	f7fe f95e 	bl	9000d804 <xQueueGenericSend>
				configASSERT( xResult );
9000f548:	2800      	cmp	r0, #0
9000f54a:	d1d8      	bne.n	9000f4fe <prvSwitchTimerLists+0x2e>
9000f54c:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f550:	f383 8811 	msr	BASEPRI, r3
9000f554:	f3bf 8f6f 	isb	sy
9000f558:	f3bf 8f4f 	dsb	sy
9000f55c:	e7fe      	b.n	9000f55c <prvSwitchTimerLists+0x8c>
9000f55e:	bf00      	nop
9000f560:	240252e4 	.word	0x240252e4
9000f564:	240252e8 	.word	0x240252e8
9000f568:	24025408 	.word	0x24025408

9000f56c <prvTimerTask>:
{
9000f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f570:	4e9f      	ldr	r6, [pc, #636]	; (9000f7f0 <prvTimerTask+0x284>)
9000f572:	b089      	sub	sp, #36	; 0x24
9000f574:	4d9f      	ldr	r5, [pc, #636]	; (9000f7f4 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
9000f576:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
9000f57a:	4c9f      	ldr	r4, [pc, #636]	; (9000f7f8 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
9000f57c:	6833      	ldr	r3, [r6, #0]
9000f57e:	681f      	ldr	r7, [r3, #0]
9000f580:	2f00      	cmp	r7, #0
9000f582:	f000 80b2 	beq.w	9000f6ea <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
9000f586:	68db      	ldr	r3, [r3, #12]
9000f588:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
9000f58a:	f7ff fccf 	bl	9000ef2c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000f58e:	f7ff fce5 	bl	9000ef5c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000f592:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000f594:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000f596:	4290      	cmp	r0, r2
9000f598:	f0c0 80af 	bcc.w	9000f6fa <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000f59c:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9000f59e:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9000f5a0:	f200 80d0 	bhi.w	9000f744 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
9000f5a4:	f7ff fcca 	bl	9000ef3c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
9000f5a8:	6832      	ldr	r2, [r6, #0]
9000f5aa:	68d2      	ldr	r2, [r2, #12]
9000f5ac:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000f5b0:	f10b 0804 	add.w	r8, fp, #4
9000f5b4:	4640      	mov	r0, r8
9000f5b6:	f7fd fdad 	bl	9000d114 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000f5ba:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
9000f5be:	0741      	lsls	r1, r0, #29
9000f5c0:	f100 80d0 	bmi.w	9000f764 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000f5c4:	f020 0001 	bic.w	r0, r0, #1
9000f5c8:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000f5cc:	f8db 3020 	ldr.w	r3, [fp, #32]
9000f5d0:	4658      	mov	r0, fp
9000f5d2:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
9000f5d4:	2200      	movs	r2, #0
9000f5d6:	4669      	mov	r1, sp
9000f5d8:	6820      	ldr	r0, [r4, #0]
9000f5da:	f7fe fbff 	bl	9000dddc <xQueueReceive>
9000f5de:	2800      	cmp	r0, #0
9000f5e0:	d0cc      	beq.n	9000f57c <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
9000f5e2:	9b00      	ldr	r3, [sp, #0]
9000f5e4:	2b00      	cmp	r3, #0
9000f5e6:	db77      	blt.n	9000f6d8 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
9000f5e8:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
9000f5ea:	697b      	ldr	r3, [r7, #20]
9000f5ec:	b113      	cbz	r3, 9000f5f4 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
9000f5ee:	1d38      	adds	r0, r7, #4
9000f5f0:	f7fd fd90 	bl	9000d114 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
9000f5f4:	f7ff fcb2 	bl	9000ef5c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000f5f8:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000f5fa:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
9000f5fc:	4298      	cmp	r0, r3
9000f5fe:	f0c0 8083 	bcc.w	9000f708 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
9000f602:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
9000f604:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
9000f608:	2b09      	cmp	r3, #9
9000f60a:	d8e3      	bhi.n	9000f5d4 <prvTimerTask+0x68>
9000f60c:	e8df f003 	tbb	[pc, r3]
9000f610:	54050505 	.word	0x54050505
9000f614:	05055b3e 	.word	0x05055b3e
9000f618:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f61a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000f61e:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f620:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000f624:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f626:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9000f62a:	9b01      	ldr	r3, [sp, #4]
9000f62c:	1899      	adds	r1, r3, r2
9000f62e:	bf2c      	ite	cs
9000f630:	2001      	movcs	r0, #1
9000f632:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
9000f634:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000f636:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9000f638:	f200 8086 	bhi.w	9000f748 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f63c:	eba8 0303 	sub.w	r3, r8, r3
9000f640:	429a      	cmp	r2, r3
9000f642:	f200 80c0 	bhi.w	9000f7c6 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
9000f646:	6a3b      	ldr	r3, [r7, #32]
9000f648:	4638      	mov	r0, r7
9000f64a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
9000f64c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000f650:	075b      	lsls	r3, r3, #29
9000f652:	d5bf      	bpl.n	9000f5d4 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
9000f654:	6822      	ldr	r2, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000f656:	9901      	ldr	r1, [sp, #4]
9000f658:	69bb      	ldr	r3, [r7, #24]
	if( xTimerQueue != NULL )
9000f65a:	b172      	cbz	r2, 9000f67a <prvTimerTask+0x10e>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9000f65c:	440b      	add	r3, r1
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000f65e:	e9cd 3705 	strd	r3, r7, [sp, #20]
		xMessage.xMessageID = xCommandID;
9000f662:	2300      	movs	r3, #0
9000f664:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000f666:	f7ff fe37 	bl	9000f2d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000f66a:	2300      	movs	r3, #0
9000f66c:	a904      	add	r1, sp, #16
9000f66e:	6820      	ldr	r0, [r4, #0]
9000f670:	461a      	mov	r2, r3
9000f672:	f7fe f8c7 	bl	9000d804 <xQueueGenericSend>
							configASSERT( xResult );
9000f676:	2800      	cmp	r0, #0
9000f678:	d1ac      	bne.n	9000f5d4 <prvTimerTask+0x68>
9000f67a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f67e:	f383 8811 	msr	BASEPRI, r3
9000f682:	f3bf 8f6f 	isb	sy
9000f686:	f3bf 8f4f 	dsb	sy
9000f68a:	e7fe      	b.n	9000f68a <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9000f68c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000f690:	f043 0301 	orr.w	r3, r3, #1
9000f694:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
9000f698:	9b01      	ldr	r3, [sp, #4]
9000f69a:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000f69c:	2b00      	cmp	r3, #0
9000f69e:	f000 809e 	beq.w	9000f7de <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
9000f6a2:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000f6a4:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000f6a6:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
9000f6a8:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000f6aa:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
9000f6ac:	d856      	bhi.n	9000f75c <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000f6ae:	4b53      	ldr	r3, [pc, #332]	; (9000f7fc <prvTimerTask+0x290>)
9000f6b0:	6818      	ldr	r0, [r3, #0]
9000f6b2:	f7fd fd17 	bl	9000d0e4 <vListInsert>
	return xProcessTimerNow;
9000f6b6:	e78d      	b.n	9000f5d4 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000f6b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000f6bc:	f023 0301 	bic.w	r3, r3, #1
9000f6c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
9000f6c4:	e786      	b.n	9000f5d4 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
9000f6c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9000f6ca:	079a      	lsls	r2, r3, #30
9000f6cc:	d572      	bpl.n	9000f7b4 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
9000f6ce:	f023 0301 	bic.w	r3, r3, #1
9000f6d2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
9000f6d6:	e77d      	b.n	9000f5d4 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
9000f6d8:	9b01      	ldr	r3, [sp, #4]
9000f6da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
9000f6de:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
9000f6e0:	9b00      	ldr	r3, [sp, #0]
9000f6e2:	2b00      	cmp	r3, #0
9000f6e4:	f6ff af76 	blt.w	9000f5d4 <prvTimerTask+0x68>
9000f6e8:	e77e      	b.n	9000f5e8 <prvTimerTask+0x7c>
	vTaskSuspendAll();
9000f6ea:	f7ff fc1f 	bl	9000ef2c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9000f6ee:	f7ff fc35 	bl	9000ef5c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9000f6f2:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
9000f6f4:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
9000f6f6:	4282      	cmp	r2, r0
9000f6f8:	d909      	bls.n	9000f70e <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
9000f6fa:	f7ff fee9 	bl	9000f4d0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
9000f6fe:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
9000f702:	f7ff fc1b 	bl	9000ef3c <xTaskResumeAll>
9000f706:	e765      	b.n	9000f5d4 <prvTimerTask+0x68>
		prvSwitchTimerLists();
9000f708:	f7ff fee2 	bl	9000f4d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
9000f70c:	e779      	b.n	9000f602 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000f70e:	4b3b      	ldr	r3, [pc, #236]	; (9000f7fc <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
9000f710:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9000f714:	681a      	ldr	r2, [r3, #0]
9000f716:	6812      	ldr	r2, [r2, #0]
9000f718:	fab2 f282 	clz	r2, r2
9000f71c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9000f71e:	eba7 010a 	sub.w	r1, r7, sl
9000f722:	6820      	ldr	r0, [r4, #0]
9000f724:	f7fe ff4e 	bl	9000e5c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
9000f728:	f7ff fc08 	bl	9000ef3c <xTaskResumeAll>
9000f72c:	2800      	cmp	r0, #0
9000f72e:	f47f af51 	bne.w	9000f5d4 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
9000f732:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
9000f736:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
9000f73a:	f3bf 8f4f 	dsb	sy
9000f73e:	f3bf 8f6f 	isb	sy
9000f742:	e747      	b.n	9000f5d4 <prvTimerTask+0x68>
9000f744:	2200      	movs	r2, #0
9000f746:	e7ea      	b.n	9000f71e <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
9000f748:	4543      	cmp	r3, r8
9000f74a:	d902      	bls.n	9000f752 <prvTimerTask+0x1e6>
9000f74c:	2800      	cmp	r0, #0
9000f74e:	f43f af7a 	beq.w	9000f646 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f752:	1d39      	adds	r1, r7, #4
9000f754:	6830      	ldr	r0, [r6, #0]
9000f756:	f7fd fcc5 	bl	9000d0e4 <vListInsert>
	return xProcessTimerNow;
9000f75a:	e73b      	b.n	9000f5d4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f75c:	6830      	ldr	r0, [r6, #0]
9000f75e:	f7fd fcc1 	bl	9000d0e4 <vListInsert>
9000f762:	e737      	b.n	9000f5d4 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000f764:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9000f768:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
9000f76c:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
9000f76e:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9000f770:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
9000f774:	d322      	bcc.n	9000f7bc <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9000f776:	ebaa 0307 	sub.w	r3, sl, r7
9000f77a:	429a      	cmp	r2, r3
9000f77c:	d829      	bhi.n	9000f7d2 <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
9000f77e:	6823      	ldr	r3, [r4, #0]
9000f780:	b17b      	cbz	r3, 9000f7a2 <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
9000f782:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9000f784:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9000f786:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
9000f78a:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
9000f78c:	f7ff fda4 	bl	9000f2d8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9000f790:	2300      	movs	r3, #0
9000f792:	a904      	add	r1, sp, #16
9000f794:	6820      	ldr	r0, [r4, #0]
9000f796:	461a      	mov	r2, r3
9000f798:	f7fe f834 	bl	9000d804 <xQueueGenericSend>
			configASSERT( xResult );
9000f79c:	2800      	cmp	r0, #0
9000f79e:	f47f af15 	bne.w	9000f5cc <prvTimerTask+0x60>
9000f7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7a6:	f383 8811 	msr	BASEPRI, r3
9000f7aa:	f3bf 8f6f 	isb	sy
9000f7ae:	f3bf 8f4f 	dsb	sy
9000f7b2:	e7fe      	b.n	9000f7b2 <prvTimerTask+0x246>
							vPortFree( pxTimer );
9000f7b4:	4638      	mov	r0, r7
9000f7b6:	f7fd fc11 	bl	9000cfdc <vPortFree>
9000f7ba:	e70b      	b.n	9000f5d4 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9000f7bc:	4641      	mov	r1, r8
9000f7be:	6830      	ldr	r0, [r6, #0]
9000f7c0:	f7fd fc90 	bl	9000d0e4 <vListInsert>
	return xProcessTimerNow;
9000f7c4:	e702      	b.n	9000f5cc <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000f7c6:	4b0d      	ldr	r3, [pc, #52]	; (9000f7fc <prvTimerTask+0x290>)
9000f7c8:	1d39      	adds	r1, r7, #4
9000f7ca:	6818      	ldr	r0, [r3, #0]
9000f7cc:	f7fd fc8a 	bl	9000d0e4 <vListInsert>
	return xProcessTimerNow;
9000f7d0:	e700      	b.n	9000f5d4 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
9000f7d2:	4b0a      	ldr	r3, [pc, #40]	; (9000f7fc <prvTimerTask+0x290>)
9000f7d4:	4641      	mov	r1, r8
9000f7d6:	6818      	ldr	r0, [r3, #0]
9000f7d8:	f7fd fc84 	bl	9000d0e4 <vListInsert>
	return xProcessTimerNow;
9000f7dc:	e6f6      	b.n	9000f5cc <prvTimerTask+0x60>
9000f7de:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f7e2:	f383 8811 	msr	BASEPRI, r3
9000f7e6:	f3bf 8f6f 	isb	sy
9000f7ea:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
9000f7ee:	e7fe      	b.n	9000f7ee <prvTimerTask+0x282>
9000f7f0:	240252e4 	.word	0x240252e4
9000f7f4:	240253b4 	.word	0x240253b4
9000f7f8:	24025408 	.word	0x24025408
9000f7fc:	240252e8 	.word	0x240252e8

9000f800 <xTimerCreateTimerTask>:
{
9000f800:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
9000f802:	4c23      	ldr	r4, [pc, #140]	; (9000f890 <xTimerCreateTimerTask+0x90>)
{
9000f804:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
9000f806:	f7fd fd05 	bl	9000d214 <vPortEnterCritical>
		if( xTimerQueue == NULL )
9000f80a:	6825      	ldr	r5, [r4, #0]
9000f80c:	b335      	cbz	r5, 9000f85c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9000f80e:	f7fd fd23 	bl	9000d258 <vPortExitCritical>
	if( xTimerQueue != NULL )
9000f812:	6823      	ldr	r3, [r4, #0]
9000f814:	b1cb      	cbz	r3, 9000f84a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
9000f816:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000f818:	aa07      	add	r2, sp, #28
9000f81a:	a906      	add	r1, sp, #24
9000f81c:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000f81e:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
9000f820:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
9000f824:	f7fd fb0c 	bl	9000ce40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9000f828:	4623      	mov	r3, r4
9000f82a:	9a07      	ldr	r2, [sp, #28]
9000f82c:	9500      	str	r5, [sp, #0]
9000f82e:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
9000f832:	e9cd 1001 	strd	r1, r0, [sp, #4]
9000f836:	4917      	ldr	r1, [pc, #92]	; (9000f894 <xTimerCreateTimerTask+0x94>)
9000f838:	4817      	ldr	r0, [pc, #92]	; (9000f898 <xTimerCreateTimerTask+0x98>)
9000f83a:	f7ff f93f 	bl	9000eabc <xTaskCreateStatic>
9000f83e:	4b17      	ldr	r3, [pc, #92]	; (9000f89c <xTimerCreateTimerTask+0x9c>)
9000f840:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
9000f842:	b110      	cbz	r0, 9000f84a <xTimerCreateTimerTask+0x4a>
}
9000f844:	2001      	movs	r0, #1
9000f846:	b009      	add	sp, #36	; 0x24
9000f848:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000f84a:	f04f 0350 	mov.w	r3, #80	; 0x50
9000f84e:	f383 8811 	msr	BASEPRI, r3
9000f852:	f3bf 8f6f 	isb	sy
9000f856:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
9000f85a:	e7fe      	b.n	9000f85a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
9000f85c:	4f10      	ldr	r7, [pc, #64]	; (9000f8a0 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
9000f85e:	4e11      	ldr	r6, [pc, #68]	; (9000f8a4 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
9000f860:	4638      	mov	r0, r7
9000f862:	f7fd fc1f 	bl	9000d0a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
9000f866:	4630      	mov	r0, r6
9000f868:	f7fd fc1c 	bl	9000d0a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
9000f86c:	4a0e      	ldr	r2, [pc, #56]	; (9000f8a8 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000f86e:	9500      	str	r5, [sp, #0]
9000f870:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
9000f872:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000f874:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
9000f876:	4a0d      	ldr	r2, [pc, #52]	; (9000f8ac <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000f878:	4b0d      	ldr	r3, [pc, #52]	; (9000f8b0 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
9000f87a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9000f87c:	4a0d      	ldr	r2, [pc, #52]	; (9000f8b4 <xTimerCreateTimerTask+0xb4>)
9000f87e:	f7fd fe6b 	bl	9000d558 <xQueueGenericCreateStatic>
9000f882:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
9000f884:	2800      	cmp	r0, #0
9000f886:	d0c2      	beq.n	9000f80e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
9000f888:	490b      	ldr	r1, [pc, #44]	; (9000f8b8 <xTimerCreateTimerTask+0xb8>)
9000f88a:	f7fe fe73 	bl	9000e574 <vQueueAddToRegistry>
9000f88e:	e7be      	b.n	9000f80e <xTimerCreateTimerTask+0xe>
9000f890:	24025408 	.word	0x24025408
9000f894:	90027008 	.word	0x90027008
9000f898:	9000f56d 	.word	0x9000f56d
9000f89c:	2402540c 	.word	0x2402540c
9000f8a0:	2402538c 	.word	0x2402538c
9000f8a4:	240253a0 	.word	0x240253a0
9000f8a8:	240252e4 	.word	0x240252e4
9000f8ac:	240252e8 	.word	0x240252e8
9000f8b0:	240253b8 	.word	0x240253b8
9000f8b4:	240252ec 	.word	0x240252ec
9000f8b8:	90027000 	.word	0x90027000

9000f8bc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000f8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000f8c0:	4c82      	ldr	r4, [pc, #520]	; (9000facc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
9000f8c2:	b091      	sub	sp, #68	; 0x44
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000f8c4:	fba4 4303 	umull	r4, r3, r4, r3
{  
9000f8c8:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000f8ca:	0a19      	lsrs	r1, r3, #8
{  
9000f8cc:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000f8ce:	eb02 2313 	add.w	r3, r2, r3, lsr #8
{  
9000f8d2:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
9000f8d4:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
9000f8d8:	4293      	cmp	r3, r2
9000f8da:	930f      	str	r3, [sp, #60]	; 0x3c
9000f8dc:	f240 80f1 	bls.w	9000fac2 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f8e0:	4b7b      	ldr	r3, [pc, #492]	; (9000fad0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
9000f8e2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 9000fae0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f8e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f8e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f8ea:	691b      	ldr	r3, [r3, #16]
9000f8ec:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 9000fae4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
9000f8f0:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000f8f2:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f8f4:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f8f6:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000f8f8:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f8fa:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
9000f8fc:	f04f 0e02 	mov.w	lr, #2
9000f900:	990b      	ldr	r1, [sp, #44]	; 0x2c
9000f902:	f502 7080 	add.w	r0, r2, #256	; 0x100
9000f906:	9204      	str	r2, [sp, #16]
9000f908:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f90a:	3101      	adds	r1, #1
9000f90c:	9006      	str	r0, [sp, #24]
9000f90e:	980e      	ldr	r0, [sp, #56]	; 0x38
9000f910:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f912:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
9000f914:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9000f918:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000f91c:	fb01 f202 	mul.w	r2, r1, r2
9000f920:	005b      	lsls	r3, r3, #1
9000f922:	eb03 1302 	add.w	r3, r3, r2, lsl #4
9000f926:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9000f928:	e009      	b.n	9000f93e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f92a:	9b05      	ldr	r3, [sp, #20]
9000f92c:	9a01      	ldr	r2, [sp, #4]
9000f92e:	4293      	cmp	r3, r2
9000f930:	d80f      	bhi.n	9000f952 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
9000f932:	f1be 0f10 	cmp.w	lr, #16
9000f936:	f000 80bb 	beq.w	9000fab0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
9000f93a:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
9000f93e:	f1be 0f0a 	cmp.w	lr, #10
9000f942:	d1f2      	bne.n	9000f92a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
9000f944:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000f946:	9a01      	ldr	r2, [sp, #4]
9000f948:	3380      	adds	r3, #128	; 0x80
9000f94a:	9304      	str	r3, [sp, #16]
9000f94c:	9b05      	ldr	r3, [sp, #20]
9000f94e:	4293      	cmp	r3, r2
9000f950:	d9f3      	bls.n	9000f93a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
9000f952:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000f954:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
9000f956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000f958:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
9000f95a:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
9000f95c:	990a      	ldr	r1, [sp, #40]	; 0x28
9000f95e:	9a04      	ldr	r2, [sp, #16]
9000f960:	1859      	adds	r1, r3, r1
9000f962:	f103 0c10 	add.w	ip, r3, #16
9000f966:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
9000f96a:	3330      	adds	r3, #48	; 0x30
9000f96c:	4696      	mov	lr, r2
9000f96e:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
9000f970:	9307      	str	r3, [sp, #28]
9000f972:	9b03      	ldr	r3, [sp, #12]
9000f974:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
9000f978:	4674      	mov	r4, lr
    currentMCU++;
9000f97a:	9e02      	ldr	r6, [sp, #8]
9000f97c:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f97e:	f817 3f01 	ldrb.w	r3, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
9000f982:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f984:	4953      	ldr	r1, [pc, #332]	; (9000fad4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
9000f986:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f988:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000f98c:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f98e:	f851 a023 	ldr.w	sl, [r1, r3, lsl #2]
          for(j=0; j < 8; j+=2)
9000f992:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f994:	4950      	ldr	r1, [pc, #320]	; (9000fad8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
9000f996:	f814 2c02 	ldrb.w	r2, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000f99a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f99e:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f9a2:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000f9a4:	449a      	add	sl, r3
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000f9a6:	4b4d      	ldr	r3, [pc, #308]	; (9000fadc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
9000f9a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9ac:	eb09 432a 	add.w	r3, r9, sl, asr #16
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f9b0:	eb01 0a02 	add.w	sl, r1, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9b4:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9b6:	eb03 0b02 	add.w	fp, r3, r2
9000f9ba:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9be:	4402      	add	r2, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9c0:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9c4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9c8:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9cc:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9d0:	ea4f 1b4b 	mov.w	fp, fp, lsl #5
9000f9d4:	ea4b 22c2 	orr.w	r2, fp, r2, lsl #11
9000f9d8:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr = 
9000f9dc:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000f9e0:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9e4:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9e8:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000f9ec:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9ee:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9f2:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000f9f6:	ea4f 0292 	mov.w	r2, r2, lsr #2
9000f9fa:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000f9fe:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa02:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000fa06:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9000fa0a:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000fa0e:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
9000fa12:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa16:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa1a:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fa1e:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa20:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa24:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa28:	ea4f 0292 	mov.w	r2, r2, lsr #2
9000fa2c:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa30:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa34:	ea4f 1242 	mov.w	r2, r2, lsl #5
9000fa38:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
9000fa3c:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
9000fa40:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
9000fa44:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa46:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa48:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000fa4a:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa4c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa50:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa54:	ea4f 0393 	mov.w	r3, r3, lsr #2
9000fa58:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fa5c:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fa60:	ea4f 1343 	mov.w	r3, r3, lsl #5
9000fa64:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
9000fa68:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
9000fa6c:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
9000fa70:	d185      	bne.n	9000f97e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000fa72:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
9000fa74:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
9000fa78:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
9000fa7c:	3310      	adds	r3, #16
9000fa7e:	9302      	str	r3, [sp, #8]
            pChrom++;
9000fa80:	9b03      	ldr	r3, [sp, #12]
9000fa82:	3304      	adds	r3, #4
9000fa84:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
9000fa86:	9b07      	ldr	r3, [sp, #28]
9000fa88:	4563      	cmp	r3, ip
9000fa8a:	f47f af72 	bne.w	9000f972 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
9000fa8e:	9b06      	ldr	r3, [sp, #24]
9000fa90:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9000fa94:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000fa96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
9000fa98:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
9000fa9c:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
9000fa9e:	9b04      	ldr	r3, [sp, #16]
9000faa0:	f103 0310 	add.w	r3, r3, #16
9000faa4:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
9000faa6:	9b01      	ldr	r3, [sp, #4]
9000faa8:	4413      	add	r3, r2
9000faaa:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
9000faac:	f47f af45 	bne.w	9000f93a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
9000fab0:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000fab2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
9000fab4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
9000fab8:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000faba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9000fabc:	4293      	cmp	r3, r2
9000fabe:	f47f af1c 	bne.w	9000f8fa <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
9000fac2:	ee17 0a90 	vmov	r0, s15
9000fac6:	b011      	add	sp, #68	; 0x44
9000fac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000facc:	aaaaaaab 	.word	0xaaaaaaab
9000fad0:	24026410 	.word	0x24026410
9000fad4:	24025810 	.word	0x24025810
9000fad8:	24025410 	.word	0x24025410
9000fadc:	24026010 	.word	0x24026010
9000fae0:	24025c10 	.word	0x24025c10
9000fae4:	90027010 	.word	0x90027010

9000fae8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9000faec:	0a1c      	lsrs	r4, r3, #8
{  
9000faee:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000faf0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
9000faf4:	ee07 4a90 	vmov	s15, r4
{  
9000faf8:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
9000fafa:	429a      	cmp	r2, r3
{  
9000fafc:	9007      	str	r0, [sp, #28]
9000fafe:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
9000fb00:	930b      	str	r3, [sp, #44]	; 0x2c
9000fb02:	f080 814a 	bcs.w	9000fd9a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000fb06:	4ba7      	ldr	r3, [pc, #668]	; (9000fda4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
9000fb08:	4da7      	ldr	r5, [pc, #668]	; (9000fda8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
9000fb0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
9000fb0c:	f8df 929c 	ldr.w	r9, [pc, #668]	; 9000fdac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
9000fb10:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fb12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fb14:	691b      	ldr	r3, [r3, #16]
9000fb16:	f8df a298 	ldr.w	sl, [pc, #664]	; 9000fdb0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
9000fb1a:	f8df b298 	ldr.w	fp, [pc, #664]	; 9000fdb4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
9000fb1e:	f8df 8298 	ldr.w	r8, [pc, #664]	; 9000fdb8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fb22:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fb24:	9301      	str	r3, [sp, #4]
9000fb26:	e008      	b.n	9000fb3a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000fb28:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9000fb2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
9000fb2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
9000fb30:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
9000fb32:	9b08      	ldr	r3, [sp, #32]
9000fb34:	4293      	cmp	r3, r2
9000fb36:	f000 8130 	beq.w	9000fd9a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000fb3a:	9a07      	ldr	r2, [sp, #28]
9000fb3c:	9908      	ldr	r1, [sp, #32]
9000fb3e:	f102 0080 	add.w	r0, r2, #128	; 0x80
9000fb42:	010b      	lsls	r3, r1, #4
9000fb44:	3101      	adds	r1, #1
    currentMCU++;
9000fb46:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000fb4a:	980a      	ldr	r0, [sp, #40]	; 0x28
9000fb4c:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fb4e:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
9000fb50:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
9000fb54:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fb58:	fb01 f202 	mul.w	r2, r1, r2
9000fb5c:	005b      	lsls	r3, r3, #1
9000fb5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
9000fb62:	9300      	str	r3, [sp, #0]
    currentMCU++;
9000fb64:	2308      	movs	r3, #8
9000fb66:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fb68:	e9dd 2300 	ldrd	r2, r3, [sp]
9000fb6c:	4293      	cmp	r3, r2
9000fb6e:	d9db      	bls.n	9000fb28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
9000fb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
9000fb72:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
9000fb74:	9a03      	ldr	r2, [sp, #12]
9000fb76:	f102 0140 	add.w	r1, r2, #64	; 0x40
9000fb7a:	9a02      	ldr	r2, [sp, #8]
9000fb7c:	f103 0020 	add.w	r0, r3, #32
9000fb80:	3204      	adds	r2, #4
9000fb82:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fb84:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
9000fb88:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fb8a:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
9000fb8e:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fb90:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
9000fb94:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
9000fb96:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fb9a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fb9e:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fba0:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9000fba4:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fba8:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fbaa:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fbac:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fbb0:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fbb4:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fbb8:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fbbc:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fbbe:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fbc2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000fbc6:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000fbca:	08e4      	lsrs	r4, r4, #3
9000fbcc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000fbd0:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000fbd4:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fbd8:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
9000fbdc:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000fbe0:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fbe2:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fbe4:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fbe6:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fbea:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000fbee:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fbf2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fbf4:	08c0      	lsrs	r0, r0, #3
9000fbf6:	08a4      	lsrs	r4, r4, #2
9000fbf8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000fbfc:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000fc00:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fc04:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fc08:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fc0c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000fc10:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fc14:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fc18:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fc1a:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9000fc1e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fc22:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fc24:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fc26:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fc2a:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fc2e:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fc32:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fc36:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fc38:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fc3c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000fc40:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000fc44:	08e4      	lsrs	r4, r4, #3
9000fc46:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000fc4a:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000fc4e:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fc52:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
9000fc56:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000fc5a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fc5c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fc5e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fc60:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fc64:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000fc68:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fc6c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fc6e:	08c0      	lsrs	r0, r0, #3
9000fc70:	08a4      	lsrs	r4, r4, #2
9000fc72:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000fc76:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000fc7a:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fc7e:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fc82:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
9000fc86:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fc8a:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fc8e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fc92:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fc96:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fc98:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fc9c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fc9e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fca0:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fca4:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fca8:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fcac:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fcb0:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fcb2:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fcb6:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000fcba:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000fcbe:	08e4      	lsrs	r4, r4, #3
9000fcc0:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000fcc4:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000fcc8:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fccc:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
9000fcd0:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000fcd4:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fcd6:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fcd8:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fcda:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fcde:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000fce2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fce6:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fce8:	08c0      	lsrs	r0, r0, #3
9000fcea:	08a4      	lsrs	r4, r4, #2
9000fcec:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000fcf0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000fcf4:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fcf8:	f892 003b 	ldrb.w	r0, [r2, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fcfc:	f812 4c05 	ldrb.w	r4, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fd00:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
9000fd04:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fd08:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fd0c:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fd0e:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
9000fd12:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fd16:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fd18:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fd1a:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fd1e:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fd22:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000fd26:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fd2a:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fd2c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fd30:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000fd34:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000fd38:	08e4      	lsrs	r4, r4, #3
9000fd3a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000fd3e:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
9000fd42:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fd46:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
9000fd4a:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
9000fd4e:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fd50:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fd52:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fd54:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fd58:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000fd5c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fd60:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fd62:	08c0      	lsrs	r0, r0, #3
9000fd64:	08a4      	lsrs	r4, r4, #2
9000fd66:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000fd6a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
9000fd6e:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
9000fd72:	9804      	ldr	r0, [sp, #16]
9000fd74:	4283      	cmp	r3, r0
9000fd76:	f47f af05 	bne.w	9000fb84 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
9000fd7a:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000fd7c:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
9000fd7e:	3308      	adds	r3, #8
9000fd80:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
9000fd82:	9b03      	ldr	r3, [sp, #12]
9000fd84:	3308      	adds	r3, #8
9000fd86:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000fd88:	9b00      	ldr	r3, [sp, #0]
9000fd8a:	4413      	add	r3, r2
9000fd8c:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
9000fd8e:	9b05      	ldr	r3, [sp, #20]
9000fd90:	3b01      	subs	r3, #1
9000fd92:	9305      	str	r3, [sp, #20]
9000fd94:	f47f aee8 	bne.w	9000fb68 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
9000fd98:	e6c6      	b.n	9000fb28 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
9000fd9a:	ee17 0a90 	vmov	r0, s15
9000fd9e:	b00d      	add	sp, #52	; 0x34
9000fda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000fda4:	24026410 	.word	0x24026410
9000fda8:	24025410 	.word	0x24025410
9000fdac:	24026010 	.word	0x24026010
9000fdb0:	24025c10 	.word	0x24025c10
9000fdb4:	24025810 	.word	0x24025810
9000fdb8:	90027010 	.word	0x90027010

9000fdbc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
9000fdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000fdc0:	4cb6      	ldr	r4, [pc, #728]	; (9001009c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
9000fdc2:	b089      	sub	sp, #36	; 0x24
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000fdc4:	fba4 4303 	umull	r4, r3, r4, r3
{  
9000fdc8:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000fdca:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
9000fdcc:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000fdd0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
9000fdd4:	429a      	cmp	r2, r3
9000fdd6:	9306      	str	r3, [sp, #24]
{  
9000fdd8:	e9cd 0204 	strd	r0, r2, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9000fddc:	f080 8158 	bcs.w	90010090 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fde0:	4baf      	ldr	r3, [pc, #700]	; (900100a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fde2:	4cb0      	ldr	r4, [pc, #704]	; (900100a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fde4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fde6:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 900100ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fdea:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fdec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fdee:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fdf0:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 900100b0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fdf4:	48ac      	ldr	r0, [pc, #688]	; (900100a8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
9000fdf6:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 900100b4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fdfa:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fdfc:	9300      	str	r3, [sp, #0]
9000fdfe:	e007      	b.n	9000fe10 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
9000fe00:	9b04      	ldr	r3, [sp, #16]
9000fe02:	33c0      	adds	r3, #192	; 0xc0
9000fe04:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
9000fe06:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
9000fe0a:	4293      	cmp	r3, r2
9000fe0c:	f000 8140 	beq.w	90010090 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fe10:	9e05      	ldr	r6, [sp, #20]
9000fe12:	9f07      	ldr	r7, [sp, #28]
9000fe14:	00f2      	lsls	r2, r6, #3
9000fe16:	3601      	adds	r6, #1
9000fe18:	9904      	ldr	r1, [sp, #16]
9000fe1a:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fe1c:	9e03      	ldr	r6, [sp, #12]
9000fe1e:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000fe22:	fbb2 f5f7 	udiv	r5, r2, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000fe26:	fb07 2215 	mls	r2, r7, r5, r2
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000fe2a:	fb06 f505 	mul.w	r5, r6, r5
9000fe2e:	0052      	lsls	r2, r2, #1
9000fe30:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
    currentMCU++;   
9000fe34:	2508      	movs	r5, #8
9000fe36:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000fe38:	9d00      	ldr	r5, [sp, #0]
9000fe3a:	4295      	cmp	r5, r2
9000fe3c:	d9e0      	bls.n	9000fe00 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fe3e:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
9000fe42:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fe44:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
9000fe48:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
9000fe4a:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fe4e:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fe52:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
9000fe56:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fe58:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fe5c:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fe60:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fe62:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fe64:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fe66:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fe6a:	eb05 4929 	add.w	r9, r5, r9, asr #16
9000fe6e:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fe72:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fe74:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000fe78:	08ed      	lsrs	r5, r5, #3
9000fe7a:	08bf      	lsrs	r7, r7, #2
9000fe7c:	ea45 25c6 	orr.w	r5, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
9000fe80:	9e02      	ldr	r6, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fe82:	ea45 1547 	orr.w	r5, r5, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fe86:	52b5      	strh	r5, [r6, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fe88:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fe8c:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
9000fe90:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fe94:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fe98:	4425      	add	r5, r4
9000fe9a:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fe9e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fea2:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fea6:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fea8:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000feaa:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000feac:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000feb0:	eb05 4929 	add.w	r9, r5, r9, asr #16
9000feb4:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000feb8:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000feba:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000febe:	08ed      	lsrs	r5, r5, #3
9000fec0:	08bf      	lsrs	r7, r7, #2
9000fec2:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
9000fec6:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000fec8:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
9000fecc:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
9000fece:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fed0:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
9000fed4:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000fed8:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000feda:	4427      	add	r7, r4
9000fedc:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9000fee0:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fee2:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fee6:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fee8:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000feec:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fef0:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fef4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000fef8:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000fefa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000fefe:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ff00:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000ff04:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000ff08:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000ff0c:	08fe      	lsrs	r6, r7, #3
9000ff0e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000ff12:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000ff16:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000ff1a:	80ae      	strh	r6, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ff1c:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ff20:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
9000ff24:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ff28:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ff2c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000ff30:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ff32:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ff36:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ff3a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ff3c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ff3e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ff40:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ff44:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000ff48:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ff4c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ff50:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000ff54:	08fe      	lsrs	r6, r7, #3
9000ff56:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000ff5a:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000ff5e:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000ff62:	80ee      	strh	r6, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ff64:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ff68:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
9000ff6c:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ff70:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ff74:	4427      	add	r7, r4
9000ff76:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ff7a:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ff7e:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ff82:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ff84:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ff86:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ff88:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ff8c:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000ff90:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ff94:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ff98:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000ff9c:	08fe      	lsrs	r6, r7, #3
9000ff9e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000ffa2:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000ffa6:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000ffaa:	812e      	strh	r6, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000ffac:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
9000ffb0:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ffb4:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9000ffb8:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000ffba:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ffbe:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ffc2:	44b9      	add	r9, r7
9000ffc4:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ffc8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ffcc:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000ffd0:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9000ffd4:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9000ffd6:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000ffd8:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000ffdc:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
9000ffe0:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9000ffe4:	08fe      	lsrs	r6, r7, #3
9000ffe6:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9000ffea:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9000ffee:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9000fff2:	816e      	strh	r6, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9000fff4:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000fff8:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
9000fffc:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010000:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010004:	4427      	add	r7, r4
90010006:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001000a:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001000e:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010012:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010014:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010016:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010018:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001001c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010020:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010024:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010028:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
9001002c:	08fe      	lsrs	r6, r7, #3
9001002e:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
90010032:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
90010036:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001003a:	81ae      	strh	r6, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
9001003c:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90010040:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90010044:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010048:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9001004c:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001004e:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90010052:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90010056:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001005a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001005c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001005e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90010060:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010064:	eb07 4626 	add.w	r6, r7, r6, asr #16
90010068:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001006c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90010070:	f896 a100 	ldrb.w	sl, [r6, #256]	; 0x100
90010074:	08fe      	lsrs	r6, r7, #3
90010076:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
9001007a:	ea46 26c9 	orr.w	r6, r6, r9, lsl #11
9001007e:	ea46 164a 	orr.w	r6, r6, sl, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90010082:	81ee      	strh	r6, [r5, #14]
    for(i= 0; i <  8; i++)
90010084:	9d01      	ldr	r5, [sp, #4]
90010086:	3d01      	subs	r5, #1
90010088:	9501      	str	r5, [sp, #4]
9001008a:	f47f aed5 	bne.w	9000fe38 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9001008e:	e6b7      	b.n	9000fe00 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90010090:	ee17 0a90 	vmov	r0, s15
90010094:	b009      	add	sp, #36	; 0x24
90010096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001009a:	bf00      	nop
9001009c:	aaaaaaab 	.word	0xaaaaaaab
900100a0:	24026410 	.word	0x24026410
900100a4:	90027010 	.word	0x90027010
900100a8:	24025c10 	.word	0x24025c10
900100ac:	24026010 	.word	0x24026010
900100b0:	24025410 	.word	0x24025410
900100b4:	24025810 	.word	0x24025810

900100b8 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900100b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
900100bc:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
900100c0:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
900100c2:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
900100c4:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900100c8:	f080 8088 	bcs.w	900101dc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900100cc:	4b45      	ldr	r3, [pc, #276]	; (900101e4 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900100ce:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900100d2:	691e      	ldr	r6, [r3, #16]
900100d4:	e003      	b.n	900100de <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
900100d6:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
900100d8:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
900100dc:	d07e      	beq.n	900101dc <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900100de:	00d3      	lsls	r3, r2, #3
    currentMCU++;
900100e0:	4604      	mov	r4, r0
900100e2:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900100e6:	3201      	adds	r2, #1
900100e8:	fbb3 f5f9 	udiv	r5, r3, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900100ec:	fb09 3315 	mls	r3, r9, r5, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900100f0:	fb08 f505 	mul.w	r5, r8, r5
900100f4:	005b      	lsls	r3, r3, #1
900100f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900100fa:	429e      	cmp	r6, r3
900100fc:	d9eb      	bls.n	900100d6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900100fe:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
90010102:	18cd      	adds	r5, r1, r3
          pLum++;
90010104:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
90010106:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001010a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001010e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010112:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010116:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001011a:	ea47 070c 	orr.w	r7, r7, ip
9001011e:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
90010120:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
90010122:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010126:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001012a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001012e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010132:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010136:	ea47 070c 	orr.w	r7, r7, ip
9001013a:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
9001013c:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010140:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010144:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010148:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001014c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010150:	ea47 070c 	orr.w	r7, r7, ip
90010154:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90010156:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001015a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001015e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010162:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010166:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001016a:	ea47 070c 	orr.w	r7, r7, ip
9001016e:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90010170:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90010174:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010178:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001017c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90010180:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90010184:	ea47 070c 	orr.w	r7, r7, ip
90010188:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9001018a:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001018e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90010192:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90010196:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001019a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001019e:	ea47 070c 	orr.w	r7, r7, ip
900101a2:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
900101a4:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900101a8:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900101ac:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900101b0:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900101b4:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900101b8:	ea47 070c 	orr.w	r7, r7, ip
900101bc:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
900101be:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900101c2:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900101c6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900101ca:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900101ce:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900101d2:	ea47 070c 	orr.w	r7, r7, ip
900101d6:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
900101d8:	d18f      	bne.n	900100fa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
900101da:	e77c      	b.n	900100d6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
900101dc:	ee17 0a90 	vmov	r0, s15
900101e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900101e4:	24026410 	.word	0x24026410

900101e8 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900101e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900101ec:	0a1c      	lsrs	r4, r3, #8
{  
900101ee:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900101f0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900101f4:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900101f8:	429a      	cmp	r2, r3
900101fa:	9300      	str	r3, [sp, #0]
900101fc:	f080 8129 	bcs.w	90010452 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010200:	4b96      	ldr	r3, [pc, #600]	; (9001045c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010202:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90010460 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010206:	6a5c      	ldr	r4, [r3, #36]	; 0x24
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010208:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001020c:	691e      	ldr	r6, [r3, #16]
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001020e:	9401      	str	r4, [sp, #4]
90010210:	e005      	b.n	9001021e <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x36>
  while(currentMCU < (numberMCU + BlockIndex))
90010212:	9b00      	ldr	r3, [sp, #0]

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
90010214:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
90010218:	429a      	cmp	r2, r3
9001021a:	f000 811a 	beq.w	90010452 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26a>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001021e:	00d3      	lsls	r3, r2, #3
90010220:	9c01      	ldr	r4, [sp, #4]
90010222:	3201      	adds	r2, #1
    currentMCU++;
90010224:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90010228:	fbb3 f5f4 	udiv	r5, r3, r4
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9001022c:	fb04 3415 	mls	r4, r4, r5, r3
    currentMCU++;
90010230:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90010232:	fb08 f505 	mul.w	r5, r8, r5
90010236:	0064      	lsls	r4, r4, #1
90010238:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9001023c:	42a6      	cmp	r6, r4
9001023e:	d9e8      	bls.n	90010212 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
            color_k = (int32_t)(*(pChrom + 192));
90010240:	f893 a0c0 	ldrb.w	sl, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
90010244:	190f      	adds	r7, r1, r4
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010246:	f893 9040 	ldrb.w	r9, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
9001024a:	f1be 0e01 	subs.w	lr, lr, #1
            pChrom++;
9001024e:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010252:	fb19 f90a 	smulbb	r9, r9, sl
90010256:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001025a:	f813 5c08 	ldrb.w	r5, [r3, #-8]
9001025e:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010262:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010266:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001026a:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9001026e:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010272:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010276:	f893 9078 	ldrb.w	r9, [r3, #120]	; 0x78
9001027a:	fb19 f90a 	smulbb	r9, r9, sl
9001027e:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010282:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010286:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
90010288:	530d      	strh	r5, [r1, r4]
        refline += JPEG_ConvertorParams.ScaledWidth;          
9001028a:	4444      	add	r4, r8
            color_k = (int32_t)(*(pChrom + 192));
9001028c:	f893 a0b9 	ldrb.w	sl, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010290:	f893 9039 	ldrb.w	r9, [r3, #57]	; 0x39
90010294:	fb19 f90a 	smulbb	r9, r9, sl
90010298:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001029c:	f813 5c07 	ldrb.w	r5, [r3, #-7]
900102a0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900102a4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900102a8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900102ac:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900102b0:	ea4f 2595 	mov.w	r5, r5, lsr #10
900102b4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900102b8:	f893 9079 	ldrb.w	r9, [r3, #121]	; 0x79
900102bc:	fb19 f90a 	smulbb	r9, r9, sl
900102c0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900102c4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900102c8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900102ca:	807d      	strh	r5, [r7, #2]
            color_k = (int32_t)(*(pChrom + 192));
900102cc:	f893 a0ba 	ldrb.w	sl, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900102d0:	f893 903a 	ldrb.w	r9, [r3, #58]	; 0x3a
900102d4:	fb19 f90a 	smulbb	r9, r9, sl
900102d8:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900102dc:	f813 5c06 	ldrb.w	r5, [r3, #-6]
900102e0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900102e4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900102e8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900102ec:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900102f0:	ea4f 2595 	mov.w	r5, r5, lsr #10
900102f4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900102f8:	f893 907a 	ldrb.w	r9, [r3, #122]	; 0x7a
900102fc:	fb19 f90a 	smulbb	r9, r9, sl
90010300:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010304:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010308:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001030a:	80bd      	strh	r5, [r7, #4]
            color_k = (int32_t)(*(pChrom + 192));
9001030c:	f893 a0bb 	ldrb.w	sl, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010310:	f893 903b 	ldrb.w	r9, [r3, #59]	; 0x3b
90010314:	fb19 f90a 	smulbb	r9, r9, sl
90010318:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001031c:	f813 5c05 	ldrb.w	r5, [r3, #-5]
90010320:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010324:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010328:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001032c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010330:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010334:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010338:	f893 907b 	ldrb.w	r9, [r3, #123]	; 0x7b
9001033c:	fb19 f90a 	smulbb	r9, r9, sl
90010340:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010344:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010348:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001034a:	80fd      	strh	r5, [r7, #6]
            color_k = (int32_t)(*(pChrom + 192));
9001034c:	f893 a0bc 	ldrb.w	sl, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010350:	f893 903c 	ldrb.w	r9, [r3, #60]	; 0x3c
90010354:	fb19 f90a 	smulbb	r9, r9, sl
90010358:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001035c:	f813 5c04 	ldrb.w	r5, [r3, #-4]
90010360:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010364:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010368:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001036c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010370:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010374:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010378:	f893 907c 	ldrb.w	r9, [r3, #124]	; 0x7c
9001037c:	fb19 f90a 	smulbb	r9, r9, sl
90010380:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010384:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010388:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001038a:	813d      	strh	r5, [r7, #8]
            color_k = (int32_t)(*(pChrom + 192));
9001038c:	f893 a0bd 	ldrb.w	sl, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010390:	f893 903d 	ldrb.w	r9, [r3, #61]	; 0x3d
90010394:	fb19 f90a 	smulbb	r9, r9, sl
90010398:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001039c:	f813 5c03 	ldrb.w	r5, [r3, #-3]
900103a0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900103a4:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900103a8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900103ac:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900103b0:	ea4f 2595 	mov.w	r5, r5, lsr #10
900103b4:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900103b8:	f893 907d 	ldrb.w	r9, [r3, #125]	; 0x7d
900103bc:	fb19 f90a 	smulbb	r9, r9, sl
900103c0:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900103c4:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
900103c8:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
900103ca:	817d      	strh	r5, [r7, #10]
            color_k = (int32_t)(*(pChrom + 192));
900103cc:	f893 a0be 	ldrb.w	sl, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900103d0:	f813 9c02 	ldrb.w	r9, [r3, #-2]
900103d4:	fb19 f90a 	smulbb	r9, r9, sl
900103d8:	fbac 5909 	umull	r5, r9, ip, r9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900103dc:	f893 503e 	ldrb.w	r5, [r3, #62]	; 0x3e
900103e0:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900103e4:	ea4f 2999 	mov.w	r9, r9, lsr #10
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900103e8:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900103ec:	ea4f 2555 	mov.w	r5, r5, lsr #9
900103f0:	ea4f 1545 	mov.w	r5, r5, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900103f4:	ea45 25c9 	orr.w	r5, r5, r9, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900103f8:	f893 907e 	ldrb.w	r9, [r3, #126]	; 0x7e
900103fc:	fb19 f90a 	smulbb	r9, r9, sl
90010400:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010404:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010408:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001040a:	81bd      	strh	r5, [r7, #12]
            color_k = (int32_t)(*(pChrom + 192));
9001040c:	f893 a0bf 	ldrb.w	sl, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90010410:	f893 903f 	ldrb.w	r9, [r3, #63]	; 0x3f
90010414:	fb19 f90a 	smulbb	r9, r9, sl
90010418:	fbac 5909 	umull	r5, r9, ip, r9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001041c:	f813 5c01 	ldrb.w	r5, [r3, #-1]
90010420:	fb15 f50a 	smulbb	r5, r5, sl
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010424:	ea4f 2959 	mov.w	r9, r9, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90010428:	fbac b505 	umull	fp, r5, ip, r5
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001042c:	ea4f 1949 	mov.w	r9, r9, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90010430:	ea4f 2595 	mov.w	r5, r5, lsr #10
90010434:	ea49 25c5 	orr.w	r5, r9, r5, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90010438:	f893 907f 	ldrb.w	r9, [r3, #127]	; 0x7f
9001043c:	fb19 f90a 	smulbb	r9, r9, sl
90010440:	fbac a909 	umull	sl, r9, ip, r9
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90010444:	ea45 2599 	orr.w	r5, r5, r9, lsr #10
90010448:	b2ad      	uxth	r5, r5
          *(__IO uint16_t *)pOutAddr = 
9001044a:	81fd      	strh	r5, [r7, #14]
    for(i= 0; i <  8; i++)
9001044c:	f47f aef6 	bne.w	9001023c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x54>
90010450:	e6df      	b.n	90010212 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x2a>
  }
  return numberMCU;
}
90010452:	ee17 0a90 	vmov	r0, s15
90010456:	b003      	add	sp, #12
90010458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001045c:	24026410 	.word	0x24026410
90010460:	80808081 	.word	0x80808081

90010464 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90010464:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t hMCU, vMCU;

  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90010466:	68c3      	ldr	r3, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010468:	6805      	ldr	r5, [r0, #0]
9001046a:	4c3e      	ldr	r4, [pc, #248]	; (90010564 <JPEG_GetDecodeColorConvertFunc+0x100>)
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
9001046c:	2d10      	cmp	r5, #16
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9001046e:	60a3      	str	r3, [r4, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90010470:	6025      	str	r5, [r4, #0]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90010472:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010476:	fb06 f003 	mul.w	r0, r6, r3
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9001047a:	60e6      	str	r6, [r4, #12]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9001047c:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90010480:	6067      	str	r7, [r4, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90010482:	6120      	str	r0, [r4, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90010484:	d027      	beq.n	900104d6 <JPEG_GetDecodeColorConvertFunc+0x72>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90010486:	b9ed      	cbnz	r5, 900104c4 <JPEG_GetDecodeColorConvertFunc+0x60>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90010488:	4837      	ldr	r0, [pc, #220]	; (90010568 <JPEG_GetDecodeColorConvertFunc+0x104>)
9001048a:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
9001048c:	f013 0107 	ands.w	r1, r3, #7
90010490:	d02b      	beq.n	900104ea <JPEG_GetDecodeColorConvertFunc+0x86>

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90010492:	f1c1 0108 	rsb	r1, r1, #8
      JPEG_ConvertorParams.H_factor = 16;
90010496:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
90010498:	6161      	str	r1, [r4, #20]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001049a:	4419      	add	r1, r3
9001049c:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001049e:	0059      	lsls	r1, r3, #1
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900104a0:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900104a2:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900104a4:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
900104a8:	3301      	adds	r3, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
900104aa:	fbb6 f1f5 	udiv	r1, r6, r5
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
900104ae:	fb05 6611 	mls	r6, r5, r1, r6
900104b2:	b106      	cbz	r6, 900104b6 <JPEG_GetDecodeColorConvertFunc+0x52>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
900104b4:	3101      	adds	r1, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
900104b6:	fb01 f303 	mul.w	r3, r1, r3
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
900104ba:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
900104bc:	62e3      	str	r3, [r4, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
900104be:	6013      	str	r3, [r2, #0]
}
900104c0:	bcf0      	pop	{r4, r5, r6, r7}
900104c2:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
900104c4:	2d30      	cmp	r5, #48	; 0x30
900104c6:	d119      	bne.n	900104fc <JPEG_GetDecodeColorConvertFunc+0x98>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
900104c8:	4828      	ldr	r0, [pc, #160]	; (9001056c <JPEG_GetDecodeColorConvertFunc+0x108>)
900104ca:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
900104cc:	f013 0107 	ands.w	r1, r3, #7
900104d0:	d1df      	bne.n	90010492 <JPEG_GetDecodeColorConvertFunc+0x2e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
900104d2:	6161      	str	r1, [r4, #20]
900104d4:	e00a      	b.n	900104ec <JPEG_GetDecodeColorConvertFunc+0x88>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
900104d6:	2f01      	cmp	r7, #1
900104d8:	d024      	beq.n	90010524 <JPEG_GetDecodeColorConvertFunc+0xc0>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
900104da:	2f02      	cmp	r7, #2
900104dc:	d011      	beq.n	90010502 <JPEG_GetDecodeColorConvertFunc+0x9e>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900104de:	4824      	ldr	r0, [pc, #144]	; (90010570 <JPEG_GetDecodeColorConvertFunc+0x10c>)
900104e0:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900104e2:	f013 0107 	ands.w	r1, r3, #7
900104e6:	d1d4      	bne.n	90010492 <JPEG_GetDecodeColorConvertFunc+0x2e>
900104e8:	e7f3      	b.n	900104d2 <JPEG_GetDecodeColorConvertFunc+0x6e>
    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
900104ea:	6165      	str	r5, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900104ec:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.H_factor = 16;
900104ee:	2508      	movs	r5, #8
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900104f0:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
900104f2:	08db      	lsrs	r3, r3, #3
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900104f4:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
900104f6:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900104fa:	e7d6      	b.n	900104aa <JPEG_GetDecodeColorConvertFunc+0x46>
    return HAL_ERROR; /* Color space Not supported*/
900104fc:	2001      	movs	r0, #1
}
900104fe:	bcf0      	pop	{r4, r5, r6, r7}
90010500:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90010502:	481c      	ldr	r0, [pc, #112]	; (90010574 <JPEG_GetDecodeColorConvertFunc+0x110>)
      JPEG_ConvertorParams.H_factor = 16;
90010504:	61e5      	str	r5, [r4, #28]
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
90010506:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010508:	f013 010f 	ands.w	r1, r3, #15
9001050c:	d022      	beq.n	90010554 <JPEG_GetDecodeColorConvertFunc+0xf0>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9001050e:	f1c1 0110 	rsb	r1, r1, #16
      JPEG_ConvertorParams.V_factor  = 8;
90010512:	2508      	movs	r5, #8
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90010514:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010516:	4419      	add	r1, r3
      JPEG_ConvertorParams.V_factor  = 8;
90010518:	6225      	str	r5, [r4, #32]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001051a:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001051c:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001051e:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010520:	62a1      	str	r1, [r4, #40]	; 0x28
90010522:	e7c1      	b.n	900104a8 <JPEG_GetDecodeColorConvertFunc+0x44>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
90010524:	4814      	ldr	r0, [pc, #80]	; (90010578 <JPEG_GetDecodeColorConvertFunc+0x114>)
90010526:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90010528:	f013 010f 	ands.w	r1, r3, #15
9001052c:	d107      	bne.n	9001053e <JPEG_GetDecodeColorConvertFunc+0xda>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
9001052e:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010530:	0059      	lsls	r1, r3, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010532:	6263      	str	r3, [r4, #36]	; 0x24
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010534:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010536:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
90010538:	e9c4 5507 	strd	r5, r5, [r4, #28]
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9001053c:	e7b5      	b.n	900104aa <JPEG_GetDecodeColorConvertFunc+0x46>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9001053e:	f1c1 0110 	rsb	r1, r1, #16
90010542:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90010544:	4419      	add	r1, r3
90010546:	6261      	str	r1, [r4, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010548:	0059      	lsls	r1, r3, #1
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001054a:	091b      	lsrs	r3, r3, #4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001054c:	62a1      	str	r1, [r4, #40]	; 0x28
      JPEG_ConvertorParams.V_factor  = 8;
9001054e:	e9c4 5507 	strd	r5, r5, [r4, #28]
90010552:	e7a9      	b.n	900104a8 <JPEG_GetDecodeColorConvertFunc+0x44>
90010554:	2508      	movs	r5, #8
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90010556:	6161      	str	r1, [r4, #20]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
90010558:	0059      	lsls	r1, r3, #1
      JPEG_ConvertorParams.V_factor  = 8;
9001055a:	e9c4 5308 	strd	r5, r3, [r4, #32]
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
9001055e:	62a1      	str	r1, [r4, #40]	; 0x28
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90010560:	091b      	lsrs	r3, r3, #4
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
90010562:	e7a2      	b.n	900104aa <JPEG_GetDecodeColorConvertFunc+0x46>
90010564:	24026410 	.word	0x24026410
90010568:	900100b9 	.word	0x900100b9
9001056c:	900101e9 	.word	0x900101e9
90010570:	9000fdbd 	.word	0x9000fdbd
90010574:	9000fae9 	.word	0x9000fae9
90010578:	9000f8bd 	.word	0x9000f8bd

9001057c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
9001057c:	8880      	ldrh	r0, [r0, #4]
9001057e:	4770      	bx	lr

90010580 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90010580:	b570      	push	{r4, r5, r6, lr}
90010582:	6803      	ldr	r3, [r0, #0]
90010584:	460c      	mov	r4, r1
90010586:	2100      	movs	r1, #0
90010588:	4605      	mov	r5, r0
9001058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001058c:	4798      	blx	r3
9001058e:	4606      	mov	r6, r0
90010590:	682b      	ldr	r3, [r5, #0]
90010592:	4628      	mov	r0, r5
90010594:	1ba4      	subs	r4, r4, r6
90010596:	6a1b      	ldr	r3, [r3, #32]
90010598:	b2a4      	uxth	r4, r4
9001059a:	4798      	blx	r3
9001059c:	fbb4 f0f0 	udiv	r0, r4, r0
900105a0:	bd70      	pop	{r4, r5, r6, pc}

900105a2 <_ZN8touchgfx17AbstractPartition5clearEv>:
900105a2:	2300      	movs	r3, #0
900105a4:	8083      	strh	r3, [r0, #4]
900105a6:	4770      	bx	lr

900105a8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
900105a8:	b510      	push	{r4, lr}
900105aa:	6803      	ldr	r3, [r0, #0]
900105ac:	4604      	mov	r4, r0
900105ae:	8881      	ldrh	r1, [r0, #4]
900105b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900105b2:	4798      	blx	r3
900105b4:	88a3      	ldrh	r3, [r4, #4]
900105b6:	3301      	adds	r3, #1
900105b8:	80a3      	strh	r3, [r4, #4]
900105ba:	bd10      	pop	{r4, pc}

900105bc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
900105bc:	6803      	ldr	r3, [r0, #0]
900105be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900105c0:	4718      	bx	r3

900105c2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
900105c2:	4770      	bx	lr

900105c4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
900105c4:	4a02      	ldr	r2, [pc, #8]	; (900105d0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
900105c6:	6002      	str	r2, [r0, #0]
900105c8:	2200      	movs	r2, #0
900105ca:	8082      	strh	r2, [r0, #4]
900105cc:	4770      	bx	lr
900105ce:	bf00      	nop
900105d0:	90027318 	.word	0x90027318

900105d4 <_ZN8touchgfx9Container13getFirstChildEv>:
900105d4:	6a80      	ldr	r0, [r0, #40]	; 0x28
900105d6:	4770      	bx	lr

900105d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
900105d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
900105da:	2000      	movs	r0, #0
900105dc:	b12b      	cbz	r3, 900105ea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900105de:	b920      	cbnz	r0, 900105ea <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900105e0:	1a5a      	subs	r2, r3, r1
900105e2:	699b      	ldr	r3, [r3, #24]
900105e4:	4250      	negs	r0, r2
900105e6:	4150      	adcs	r0, r2
900105e8:	e7f8      	b.n	900105dc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
900105ea:	4770      	bx	lr

900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>:
900105ec:	2300      	movs	r3, #0
900105ee:	6148      	str	r0, [r1, #20]
900105f0:	618b      	str	r3, [r1, #24]
900105f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
900105f4:	b913      	cbnz	r3, 900105fc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
900105f6:	6281      	str	r1, [r0, #40]	; 0x28
900105f8:	4770      	bx	lr
900105fa:	4613      	mov	r3, r2
900105fc:	699a      	ldr	r2, [r3, #24]
900105fe:	2a00      	cmp	r2, #0
90010600:	d1fb      	bne.n	900105fa <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
90010602:	6199      	str	r1, [r3, #24]
90010604:	4770      	bx	lr

90010606 <_ZN8touchgfx9Container9removeAllEv>:
90010606:	2200      	movs	r2, #0
90010608:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001060a:	b123      	cbz	r3, 90010616 <_ZN8touchgfx9Container9removeAllEv+0x10>
9001060c:	6999      	ldr	r1, [r3, #24]
9001060e:	6281      	str	r1, [r0, #40]	; 0x28
90010610:	e9c3 2205 	strd	r2, r2, [r3, #20]
90010614:	e7f8      	b.n	90010608 <_ZN8touchgfx9Container9removeAllEv+0x2>
90010616:	4770      	bx	lr

90010618 <_ZN8touchgfx9Container6unlinkEv>:
90010618:	2300      	movs	r3, #0
9001061a:	6283      	str	r3, [r0, #40]	; 0x28
9001061c:	4770      	bx	lr

9001061e <_ZNK8touchgfx9Container12getSolidRectEv>:
9001061e:	2200      	movs	r2, #0
90010620:	8002      	strh	r2, [r0, #0]
90010622:	8042      	strh	r2, [r0, #2]
90010624:	8082      	strh	r2, [r0, #4]
90010626:	80c2      	strh	r2, [r0, #6]
90010628:	4770      	bx	lr

9001062a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
9001062a:	b570      	push	{r4, r5, r6, lr}
9001062c:	460d      	mov	r5, r1
9001062e:	4616      	mov	r6, r2
90010630:	6a84      	ldr	r4, [r0, #40]	; 0x28
90010632:	b13c      	cbz	r4, 90010644 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90010634:	6823      	ldr	r3, [r4, #0]
90010636:	4620      	mov	r0, r4
90010638:	4632      	mov	r2, r6
9001063a:	4629      	mov	r1, r5
9001063c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001063e:	4798      	blx	r3
90010640:	69a4      	ldr	r4, [r4, #24]
90010642:	e7f6      	b.n	90010632 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90010644:	bd70      	pop	{r4, r5, r6, pc}

90010646 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90010646:	b538      	push	{r3, r4, r5, lr}
90010648:	460d      	mov	r5, r1
9001064a:	6a84      	ldr	r4, [r0, #40]	; 0x28
9001064c:	b134      	cbz	r4, 9001065c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9001064e:	682b      	ldr	r3, [r5, #0]
90010650:	4621      	mov	r1, r4
90010652:	4628      	mov	r0, r5
90010654:	689b      	ldr	r3, [r3, #8]
90010656:	4798      	blx	r3
90010658:	69a4      	ldr	r4, [r4, #24]
9001065a:	e7f7      	b.n	9001064c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
9001065c:	bd38      	pop	{r3, r4, r5, pc}

9001065e <_ZN8touchgfx9ContainerD1Ev>:
9001065e:	4770      	bx	lr

90010660 <_ZN8touchgfx9ContainerD0Ev>:
90010660:	b510      	push	{r4, lr}
90010662:	4604      	mov	r4, r0
90010664:	212c      	movs	r1, #44	; 0x2c
90010666:	f012 ffd0 	bl	9002360a <_ZdlPvj>
9001066a:	4620      	mov	r0, r4
9001066c:	bd10      	pop	{r4, pc}

9001066e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
9001066e:	6a83      	ldr	r3, [r0, #40]	; 0x28
90010670:	b19b      	cbz	r3, 9001069a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90010672:	428b      	cmp	r3, r1
90010674:	d109      	bne.n	9001068a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
90010676:	699a      	ldr	r2, [r3, #24]
90010678:	2100      	movs	r1, #0
9001067a:	6159      	str	r1, [r3, #20]
9001067c:	6282      	str	r2, [r0, #40]	; 0x28
9001067e:	b902      	cbnz	r2, 90010682 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
90010680:	4770      	bx	lr
90010682:	6199      	str	r1, [r3, #24]
90010684:	4770      	bx	lr
90010686:	4613      	mov	r3, r2
90010688:	b13a      	cbz	r2, 9001069a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9001068a:	699a      	ldr	r2, [r3, #24]
9001068c:	428a      	cmp	r2, r1
9001068e:	d1fa      	bne.n	90010686 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
90010690:	698a      	ldr	r2, [r1, #24]
90010692:	619a      	str	r2, [r3, #24]
90010694:	2300      	movs	r3, #0
90010696:	e9c1 3305 	strd	r3, r3, [r1, #20]
9001069a:	4770      	bx	lr

9001069c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
9001069c:	b410      	push	{r4}
9001069e:	6a83      	ldr	r3, [r0, #40]	; 0x28
900106a0:	4604      	mov	r4, r0
900106a2:	b92b      	cbnz	r3, 900106b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
900106a4:	6803      	ldr	r3, [r0, #0]
900106a6:	4611      	mov	r1, r2
900106a8:	f85d 4b04 	ldr.w	r4, [sp], #4
900106ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
900106ae:	4718      	bx	r3
900106b0:	b941      	cbnz	r1, 900106c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
900106b2:	6193      	str	r3, [r2, #24]
900106b4:	6282      	str	r2, [r0, #40]	; 0x28
900106b6:	6154      	str	r4, [r2, #20]
900106b8:	f85d 4b04 	ldr.w	r4, [sp], #4
900106bc:	4770      	bx	lr
900106be:	4603      	mov	r3, r0
900106c0:	2800      	cmp	r0, #0
900106c2:	d0f9      	beq.n	900106b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
900106c4:	4299      	cmp	r1, r3
900106c6:	6998      	ldr	r0, [r3, #24]
900106c8:	d1f9      	bne.n	900106be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
900106ca:	6190      	str	r0, [r2, #24]
900106cc:	618a      	str	r2, [r1, #24]
900106ce:	e7f2      	b.n	900106b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

900106d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
900106d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900106d4:	461f      	mov	r7, r3
900106d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
900106da:	460d      	mov	r5, r1
900106dc:	4616      	mov	r6, r2
900106de:	b103      	cbz	r3, 900106e2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
900106e0:	6038      	str	r0, [r7, #0]
900106e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
900106e4:	b314      	cbz	r4, 9001072c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
900106e6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900106ea:	b1eb      	cbz	r3, 90010728 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900106ec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900106f0:	428d      	cmp	r5, r1
900106f2:	db19      	blt.n	90010728 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900106f4:	b289      	uxth	r1, r1
900106f6:	8923      	ldrh	r3, [r4, #8]
900106f8:	440b      	add	r3, r1
900106fa:	b21b      	sxth	r3, r3
900106fc:	429d      	cmp	r5, r3
900106fe:	da13      	bge.n	90010728 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90010700:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90010704:	4296      	cmp	r6, r2
90010706:	db0f      	blt.n	90010728 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90010708:	b292      	uxth	r2, r2
9001070a:	8963      	ldrh	r3, [r4, #10]
9001070c:	4413      	add	r3, r2
9001070e:	b21b      	sxth	r3, r3
90010710:	429e      	cmp	r6, r3
90010712:	da09      	bge.n	90010728 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
90010714:	6823      	ldr	r3, [r4, #0]
90010716:	1ab2      	subs	r2, r6, r2
90010718:	1a69      	subs	r1, r5, r1
9001071a:	4620      	mov	r0, r4
9001071c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
90010720:	b212      	sxth	r2, r2
90010722:	463b      	mov	r3, r7
90010724:	b209      	sxth	r1, r1
90010726:	47c0      	blx	r8
90010728:	69a4      	ldr	r4, [r4, #24]
9001072a:	e7db      	b.n	900106e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
9001072c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90010730 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
90010730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010734:	4c6d      	ldr	r4, [pc, #436]	; (900108ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90010736:	b0a1      	sub	sp, #132	; 0x84
90010738:	4606      	mov	r6, r0
9001073a:	6824      	ldr	r4, [r4, #0]
9001073c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001073e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
90010742:	2400      	movs	r4, #0
90010744:	9303      	str	r3, [sp, #12]
90010746:	802c      	strh	r4, [r5, #0]
90010748:	9d2b      	ldr	r5, [sp, #172]	; 0xac
9001074a:	802c      	strh	r4, [r5, #0]
9001074c:	601c      	str	r4, [r3, #0]
9001074e:	e9cd 1201 	strd	r1, r2, [sp, #4]
90010752:	f7ff ffbd 	bl	900106d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90010756:	f1b9 0f03 	cmp.w	r9, #3
9001075a:	f340 80c1 	ble.w	900108e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
9001075e:	4631      	mov	r1, r6
90010760:	a80c      	add	r0, sp, #48	; 0x30
90010762:	f005 f9fd 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90010766:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001076a:	9306      	str	r3, [sp, #24]
9001076c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90010770:	9307      	str	r3, [sp, #28]
90010772:	9b03      	ldr	r3, [sp, #12]
90010774:	f8d3 a000 	ldr.w	sl, [r3]
90010778:	f1ba 0f00 	cmp.w	sl, #0
9001077c:	f000 80b3 	beq.w	900108e6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
90010780:	4651      	mov	r1, sl
90010782:	a810      	add	r0, sp, #64	; 0x40
90010784:	f005 f9ec 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90010788:	2002      	movs	r0, #2
9001078a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
9001078e:	9b01      	ldr	r3, [sp, #4]
90010790:	9a06      	ldr	r2, [sp, #24]
90010792:	fb91 f1f0 	sdiv	r1, r1, r0
90010796:	189d      	adds	r5, r3, r2
90010798:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
9001079c:	9a07      	ldr	r2, [sp, #28]
9001079e:	4419      	add	r1, r3
900107a0:	9b02      	ldr	r3, [sp, #8]
900107a2:	4413      	add	r3, r2
900107a4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
900107a8:	1a6d      	subs	r5, r5, r1
900107aa:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
900107ae:	fb92 f2f0 	sdiv	r2, r2, r0
900107b2:	440a      	add	r2, r1
900107b4:	1a9b      	subs	r3, r3, r2
900107b6:	435b      	muls	r3, r3
900107b8:	fb05 3505 	mla	r5, r5, r5, r3
900107bc:	4f4c      	ldr	r7, [pc, #304]	; (900108f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
900107be:	ac10      	add	r4, sp, #64	; 0x40
900107c0:	f1b9 0f0c 	cmp.w	r9, #12
900107c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900107c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900107c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900107ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900107cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
900107ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
900107d0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
900107d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
900107d8:	f04f 0303 	mov.w	r3, #3
900107dc:	bfd8      	it	le
900107de:	f109 32ff 	addle.w	r2, r9, #4294967295
900107e2:	f04f 0400 	mov.w	r4, #0
900107e6:	f8cd 9000 	str.w	r9, [sp]
900107ea:	bfcc      	ite	gt
900107ec:	4698      	movgt	r8, r3
900107ee:	fb92 f8f3 	sdivle	r8, r2, r3
900107f2:	1c63      	adds	r3, r4, #1
900107f4:	aa10      	add	r2, sp, #64	; 0x40
900107f6:	f004 0401 	and.w	r4, r4, #1
900107fa:	f04f 0b00 	mov.w	fp, #0
900107fe:	9308      	str	r3, [sp, #32]
90010800:	9b00      	ldr	r3, [sp, #0]
90010802:	eb02 1444 	add.w	r4, r2, r4, lsl #5
90010806:	fb93 f3f8 	sdiv	r3, r3, r8
9001080a:	3404      	adds	r4, #4
9001080c:	b29b      	uxth	r3, r3
9001080e:	9304      	str	r3, [sp, #16]
90010810:	9a04      	ldr	r2, [sp, #16]
90010812:	f854 3c04 	ldr.w	r3, [r4, #-4]
90010816:	fb13 f302 	smulbb	r3, r3, r2
9001081a:	9a01      	ldr	r2, [sp, #4]
9001081c:	b29b      	uxth	r3, r3
9001081e:	1899      	adds	r1, r3, r2
90010820:	9305      	str	r3, [sp, #20]
90010822:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90010826:	b209      	sxth	r1, r1
90010828:	4299      	cmp	r1, r3
9001082a:	db4d      	blt.n	900108c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001082c:	8932      	ldrh	r2, [r6, #8]
9001082e:	4413      	add	r3, r2
90010830:	b21b      	sxth	r3, r3
90010832:	4299      	cmp	r1, r3
90010834:	da48      	bge.n	900108c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90010836:	9b04      	ldr	r3, [sp, #16]
90010838:	6827      	ldr	r7, [r4, #0]
9001083a:	fb17 f703 	smulbb	r7, r7, r3
9001083e:	9b02      	ldr	r3, [sp, #8]
90010840:	b2bf      	uxth	r7, r7
90010842:	18fa      	adds	r2, r7, r3
90010844:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90010848:	b212      	sxth	r2, r2
9001084a:	429a      	cmp	r2, r3
9001084c:	db3c      	blt.n	900108c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001084e:	8970      	ldrh	r0, [r6, #10]
90010850:	4403      	add	r3, r0
90010852:	b21b      	sxth	r3, r3
90010854:	429a      	cmp	r2, r3
90010856:	da37      	bge.n	900108c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90010858:	2300      	movs	r3, #0
9001085a:	4630      	mov	r0, r6
9001085c:	930b      	str	r3, [sp, #44]	; 0x2c
9001085e:	ab0b      	add	r3, sp, #44	; 0x2c
90010860:	f7ff ff36 	bl	900106d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90010864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90010866:	b37a      	cbz	r2, 900108c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90010868:	4552      	cmp	r2, sl
9001086a:	d02d      	beq.n	900108c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001086c:	4611      	mov	r1, r2
9001086e:	a80e      	add	r0, sp, #56	; 0x38
90010870:	9209      	str	r2, [sp, #36]	; 0x24
90010872:	f005 f975 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90010876:	f04f 0e02 	mov.w	lr, #2
9001087a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
9001087e:	9a06      	ldr	r2, [sp, #24]
90010880:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
90010884:	9b01      	ldr	r3, [sp, #4]
90010886:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
9001088a:	4413      	add	r3, r2
9001088c:	9a07      	ldr	r2, [sp, #28]
9001088e:	fb91 f1fe 	sdiv	r1, r1, lr
90010892:	fb9c fcfe 	sdiv	ip, ip, lr
90010896:	4401      	add	r1, r0
90010898:	1a58      	subs	r0, r3, r1
9001089a:	9b02      	ldr	r3, [sp, #8]
9001089c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
900108a0:	4413      	add	r3, r2
900108a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
900108a4:	448c      	add	ip, r1
900108a6:	eba3 030c 	sub.w	r3, r3, ip
900108aa:	435b      	muls	r3, r3
900108ac:	fb00 3300 	mla	r3, r0, r0, r3
900108b0:	42ab      	cmp	r3, r5
900108b2:	d208      	bcs.n	900108c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
900108b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
900108b6:	461d      	mov	r5, r3
900108b8:	9803      	ldr	r0, [sp, #12]
900108ba:	6001      	str	r1, [r0, #0]
900108bc:	992a      	ldr	r1, [sp, #168]	; 0xa8
900108be:	9805      	ldr	r0, [sp, #20]
900108c0:	8008      	strh	r0, [r1, #0]
900108c2:	992b      	ldr	r1, [sp, #172]	; 0xac
900108c4:	800f      	strh	r7, [r1, #0]
900108c6:	4692      	mov	sl, r2
900108c8:	f10b 0b01 	add.w	fp, fp, #1
900108cc:	3408      	adds	r4, #8
900108ce:	f1bb 0f04 	cmp.w	fp, #4
900108d2:	d19d      	bne.n	90010810 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
900108d4:	9b00      	ldr	r3, [sp, #0]
900108d6:	9c08      	ldr	r4, [sp, #32]
900108d8:	444b      	add	r3, r9
900108da:	4544      	cmp	r4, r8
900108dc:	9300      	str	r3, [sp, #0]
900108de:	d188      	bne.n	900107f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
900108e0:	b021      	add	sp, #132	; 0x84
900108e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900108e6:	f04f 35ff 	mov.w	r5, #4294967295
900108ea:	e767      	b.n	900107bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
900108ec:	2402645c 	.word	0x2402645c
900108f0:	900246f4 	.word	0x900246f4

900108f4 <_ZN8touchgfx4RectaNERKS0_>:
900108f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900108f8:	f9b1 7000 	ldrsh.w	r7, [r1]
900108fc:	888c      	ldrh	r4, [r1, #4]
900108fe:	f9b0 9000 	ldrsh.w	r9, [r0]
90010902:	443c      	add	r4, r7
90010904:	b2a4      	uxth	r4, r4
90010906:	fa0f f884 	sxth.w	r8, r4
9001090a:	45c1      	cmp	r9, r8
9001090c:	da2f      	bge.n	9001096e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001090e:	8882      	ldrh	r2, [r0, #4]
90010910:	444a      	add	r2, r9
90010912:	b292      	uxth	r2, r2
90010914:	fa0f fe82 	sxth.w	lr, r2
90010918:	4577      	cmp	r7, lr
9001091a:	da28      	bge.n	9001096e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001091c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90010920:	88cb      	ldrh	r3, [r1, #6]
90010922:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
90010926:	442b      	add	r3, r5
90010928:	b21b      	sxth	r3, r3
9001092a:	429e      	cmp	r6, r3
9001092c:	da1f      	bge.n	9001096e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001092e:	88c3      	ldrh	r3, [r0, #6]
90010930:	4433      	add	r3, r6
90010932:	b29b      	uxth	r3, r3
90010934:	fa0f fc83 	sxth.w	ip, r3
90010938:	4565      	cmp	r5, ip
9001093a:	da18      	bge.n	9001096e <_ZN8touchgfx4RectaNERKS0_+0x7a>
9001093c:	454f      	cmp	r7, r9
9001093e:	bfb8      	it	lt
90010940:	464f      	movlt	r7, r9
90010942:	42b5      	cmp	r5, r6
90010944:	bfb8      	it	lt
90010946:	4635      	movlt	r5, r6
90010948:	45f0      	cmp	r8, lr
9001094a:	bfd8      	it	le
9001094c:	4622      	movle	r2, r4
9001094e:	1bd2      	subs	r2, r2, r7
90010950:	8082      	strh	r2, [r0, #4]
90010952:	884a      	ldrh	r2, [r1, #2]
90010954:	88c9      	ldrh	r1, [r1, #6]
90010956:	8007      	strh	r7, [r0, #0]
90010958:	440a      	add	r2, r1
9001095a:	8045      	strh	r5, [r0, #2]
9001095c:	b292      	uxth	r2, r2
9001095e:	b211      	sxth	r1, r2
90010960:	458c      	cmp	ip, r1
90010962:	bfa8      	it	ge
90010964:	4613      	movge	r3, r2
90010966:	1b5b      	subs	r3, r3, r5
90010968:	80c3      	strh	r3, [r0, #6]
9001096a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001096e:	2300      	movs	r3, #0
90010970:	8003      	strh	r3, [r0, #0]
90010972:	8043      	strh	r3, [r0, #2]
90010974:	8083      	strh	r3, [r0, #4]
90010976:	80c3      	strh	r3, [r0, #6]
90010978:	e7f7      	b.n	9001096a <_ZN8touchgfx4RectaNERKS0_+0x76>

9001097a <_ZNK8touchgfx4Rect7isEmptyEv>:
9001097a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9001097e:	2b00      	cmp	r3, #0
90010980:	dd06      	ble.n	90010990 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
90010982:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
90010986:	2800      	cmp	r0, #0
90010988:	bfcc      	ite	gt
9001098a:	2000      	movgt	r0, #0
9001098c:	2001      	movle	r0, #1
9001098e:	4770      	bx	lr
90010990:	2001      	movs	r0, #1
90010992:	4770      	bx	lr

90010994 <_ZNK8touchgfx9Container16getContainedAreaEv>:
90010994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010998:	2300      	movs	r3, #0
9001099a:	4604      	mov	r4, r0
9001099c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001099e:	8003      	strh	r3, [r0, #0]
900109a0:	8043      	strh	r3, [r0, #2]
900109a2:	8083      	strh	r3, [r0, #4]
900109a4:	80c3      	strh	r3, [r0, #6]
900109a6:	2d00      	cmp	r5, #0
900109a8:	d040      	beq.n	90010a2c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
900109aa:	1d28      	adds	r0, r5, #4
900109ac:	f7ff ffe5 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
900109b0:	b988      	cbnz	r0, 900109d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
900109b2:	4620      	mov	r0, r4
900109b4:	f7ff ffe1 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
900109b8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
900109bc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
900109c0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
900109c4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
900109c8:	b138      	cbz	r0, 900109da <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
900109ca:	8022      	strh	r2, [r4, #0]
900109cc:	8063      	strh	r3, [r4, #2]
900109ce:	f8a4 e004 	strh.w	lr, [r4, #4]
900109d2:	f8a4 c006 	strh.w	ip, [r4, #6]
900109d6:	69ad      	ldr	r5, [r5, #24]
900109d8:	e7e5      	b.n	900109a6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
900109da:	f9b4 0000 	ldrsh.w	r0, [r4]
900109de:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
900109e2:	4290      	cmp	r0, r2
900109e4:	4607      	mov	r7, r0
900109e6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
900109ea:	460e      	mov	r6, r1
900109ec:	bfa8      	it	ge
900109ee:	4617      	movge	r7, r2
900109f0:	4299      	cmp	r1, r3
900109f2:	4472      	add	r2, lr
900109f4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
900109f8:	bfa8      	it	ge
900109fa:	461e      	movge	r6, r3
900109fc:	4440      	add	r0, r8
900109fe:	4471      	add	r1, lr
90010a00:	4463      	add	r3, ip
90010a02:	b200      	sxth	r0, r0
90010a04:	8027      	strh	r7, [r4, #0]
90010a06:	b212      	sxth	r2, r2
90010a08:	8066      	strh	r6, [r4, #2]
90010a0a:	b209      	sxth	r1, r1
90010a0c:	b21b      	sxth	r3, r3
90010a0e:	4290      	cmp	r0, r2
90010a10:	bfac      	ite	ge
90010a12:	ebc7 0200 	rsbge	r2, r7, r0
90010a16:	ebc7 0202 	rsblt	r2, r7, r2
90010a1a:	4299      	cmp	r1, r3
90010a1c:	bfac      	ite	ge
90010a1e:	ebc6 0301 	rsbge	r3, r6, r1
90010a22:	ebc6 0303 	rsblt	r3, r6, r3
90010a26:	80a2      	strh	r2, [r4, #4]
90010a28:	80e3      	strh	r3, [r4, #6]
90010a2a:	e7d4      	b.n	900109d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90010a2c:	4620      	mov	r0, r4
90010a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90010a32 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90010a32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90010a36:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90010a3a:	b383      	cbz	r3, 90010a9e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90010a3c:	6a84      	ldr	r4, [r0, #40]	; 0x28
90010a3e:	b374      	cbz	r4, 90010a9e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90010a40:	f9b1 5000 	ldrsh.w	r5, [r1]
90010a44:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90010a48:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
90010a4c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90010a50:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90010a54:	b303      	cbz	r3, 90010a98 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90010a56:	4668      	mov	r0, sp
90010a58:	1d21      	adds	r1, r4, #4
90010a5a:	f8ad 5000 	strh.w	r5, [sp]
90010a5e:	f8ad 6002 	strh.w	r6, [sp, #2]
90010a62:	f8ad 7004 	strh.w	r7, [sp, #4]
90010a66:	f8ad 8006 	strh.w	r8, [sp, #6]
90010a6a:	f7ff ff43 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
90010a6e:	4668      	mov	r0, sp
90010a70:	f7ff ff83 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90010a74:	b980      	cbnz	r0, 90010a98 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90010a76:	f8bd 3000 	ldrh.w	r3, [sp]
90010a7a:	4669      	mov	r1, sp
90010a7c:	88a2      	ldrh	r2, [r4, #4]
90010a7e:	4620      	mov	r0, r4
90010a80:	1a9b      	subs	r3, r3, r2
90010a82:	88e2      	ldrh	r2, [r4, #6]
90010a84:	f8ad 3000 	strh.w	r3, [sp]
90010a88:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90010a8c:	1a9b      	subs	r3, r3, r2
90010a8e:	f8ad 3002 	strh.w	r3, [sp, #2]
90010a92:	6823      	ldr	r3, [r4, #0]
90010a94:	689b      	ldr	r3, [r3, #8]
90010a96:	4798      	blx	r3
90010a98:	69a4      	ldr	r4, [r4, #24]
90010a9a:	2c00      	cmp	r4, #0
90010a9c:	d1d8      	bne.n	90010a50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
90010a9e:	b002      	add	sp, #8
90010aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90010aa4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
90010aa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
90010aa6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90010aaa:	460d      	mov	r5, r1
90010aac:	4616      	mov	r6, r2
90010aae:	b323      	cbz	r3, 90010afa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90010ab0:	6a84      	ldr	r4, [r0, #40]	; 0x28
90010ab2:	b314      	cbz	r4, 90010afa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90010ab4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90010ab8:	b1eb      	cbz	r3, 90010af6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90010aba:	6828      	ldr	r0, [r5, #0]
90010abc:	466b      	mov	r3, sp
90010abe:	6869      	ldr	r1, [r5, #4]
90010ac0:	c303      	stmia	r3!, {r0, r1}
90010ac2:	4668      	mov	r0, sp
90010ac4:	1d21      	adds	r1, r4, #4
90010ac6:	f7ff ff15 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
90010aca:	4668      	mov	r0, sp
90010acc:	f7ff ff55 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90010ad0:	b988      	cbnz	r0, 90010af6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90010ad2:	f8bd 3000 	ldrh.w	r3, [sp]
90010ad6:	4669      	mov	r1, sp
90010ad8:	88a2      	ldrh	r2, [r4, #4]
90010ada:	4620      	mov	r0, r4
90010adc:	1a9b      	subs	r3, r3, r2
90010ade:	88e2      	ldrh	r2, [r4, #6]
90010ae0:	f8ad 3000 	strh.w	r3, [sp]
90010ae4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90010ae8:	1a9b      	subs	r3, r3, r2
90010aea:	4632      	mov	r2, r6
90010aec:	f8ad 3002 	strh.w	r3, [sp, #2]
90010af0:	6823      	ldr	r3, [r4, #0]
90010af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90010af4:	4798      	blx	r3
90010af6:	69a4      	ldr	r4, [r4, #24]
90010af8:	e7db      	b.n	90010ab2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
90010afa:	b002      	add	sp, #8
90010afc:	bd70      	pop	{r4, r5, r6, pc}

90010afe <_ZNK8touchgfx6Slider15getIndicatorMinEv>:
90010afe:	f8b0 00ec 	ldrh.w	r0, [r0, #236]	; 0xec
90010b02:	4770      	bx	lr

90010b04 <_ZNK8touchgfx6Slider15getIndicatorMaxEv>:
90010b04:	f8b0 00ee 	ldrh.w	r0, [r0, #238]	; 0xee
90010b08:	4770      	bx	lr

90010b0a <_ZNK8touchgfx6Slider11getMinValueEv>:
90010b0a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
90010b0c:	4770      	bx	lr

90010b0e <_ZNK8touchgfx6Slider11getMaxValueEv>:
90010b0e:	8f00      	ldrh	r0, [r0, #56]	; 0x38
90010b10:	4770      	bx	lr

90010b12 <_ZN8touchgfx6Slider8setValueEi>:
90010b12:	b570      	push	{r4, r5, r6, lr}
90010b14:	6803      	ldr	r3, [r0, #0]
90010b16:	4604      	mov	r4, r0
90010b18:	e9d3 532b 	ldrd	r5, r3, [r3, #172]	; 0xac
90010b1c:	4798      	blx	r3
90010b1e:	4601      	mov	r1, r0
90010b20:	462b      	mov	r3, r5
90010b22:	4620      	mov	r0, r4
90010b24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010b28:	4718      	bx	r3

90010b2a <_ZNK8touchgfx6Slider15valueToPositionEi>:
90010b2a:	b538      	push	{r3, r4, r5, lr}
90010b2c:	e9d0 340d 	ldrd	r3, r4, [r0, #52]	; 0x34
90010b30:	4605      	mov	r5, r0
90010b32:	428c      	cmp	r4, r1
90010b34:	bfa8      	it	ge
90010b36:	460c      	movge	r4, r1
90010b38:	429c      	cmp	r4, r3
90010b3a:	bfac      	ite	ge
90010b3c:	ebc3 0404 	rsbge	r4, r3, r4
90010b40:	ebc3 0403 	rsblt	r4, r3, r3
90010b44:	6803      	ldr	r3, [r0, #0]
90010b46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90010b4a:	4798      	blx	r3
90010b4c:	682b      	ldr	r3, [r5, #0]
90010b4e:	fb00 4404 	mla	r4, r0, r4, r4
90010b52:	4628      	mov	r0, r5
90010b54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90010b58:	4798      	blx	r3
90010b5a:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
90010b5e:	f9b5 30ec 	ldrsh.w	r3, [r5, #236]	; 0xec
90010b62:	2a01      	cmp	r2, #1
90010b64:	fb94 f0f0 	sdiv	r0, r4, r0
90010b68:	bf08      	it	eq
90010b6a:	f9b5 20ee 	ldrsheq.w	r2, [r5, #238]	; 0xee
90010b6e:	4418      	add	r0, r3
90010b70:	bf04      	itt	eq
90010b72:	1a10      	subeq	r0, r2, r0
90010b74:	18c0      	addeq	r0, r0, r3
90010b76:	b200      	sxth	r0, r0
90010b78:	bd38      	pop	{r3, r4, r5, pc}

90010b7a <_ZNK8touchgfx6Slider15positionToValueEs>:
90010b7a:	b570      	push	{r4, r5, r6, lr}
90010b7c:	f9b0 30ec 	ldrsh.w	r3, [r0, #236]	; 0xec
90010b80:	4605      	mov	r5, r0
90010b82:	460c      	mov	r4, r1
90010b84:	428b      	cmp	r3, r1
90010b86:	d109      	bne.n	90010b9c <_ZNK8touchgfx6Slider15positionToValueEs+0x22>
90010b88:	6b40      	ldr	r0, [r0, #52]	; 0x34
90010b8a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
90010b8e:	2b01      	cmp	r3, #1
90010b90:	bf01      	itttt	eq
90010b92:	6bab      	ldreq	r3, [r5, #56]	; 0x38
90010b94:	1a18      	subeq	r0, r3, r0
90010b96:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
90010b98:	18c0      	addeq	r0, r0, r3
90010b9a:	bd70      	pop	{r4, r5, r6, pc}
90010b9c:	f9b0 30ee 	ldrsh.w	r3, [r0, #238]	; 0xee
90010ba0:	428b      	cmp	r3, r1
90010ba2:	d101      	bne.n	90010ba8 <_ZNK8touchgfx6Slider15positionToValueEs+0x2e>
90010ba4:	6b80      	ldr	r0, [r0, #56]	; 0x38
90010ba6:	e7f0      	b.n	90010b8a <_ZNK8touchgfx6Slider15positionToValueEs+0x10>
90010ba8:	6803      	ldr	r3, [r0, #0]
90010baa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90010bae:	4798      	blx	r3
90010bb0:	682b      	ldr	r3, [r5, #0]
90010bb2:	f9b5 10ec 	ldrsh.w	r1, [r5, #236]	; 0xec
90010bb6:	4606      	mov	r6, r0
90010bb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90010bbc:	4628      	mov	r0, r5
90010bbe:	1a64      	subs	r4, r4, r1
90010bc0:	4798      	blx	r3
90010bc2:	2102      	movs	r1, #2
90010bc4:	682b      	ldr	r3, [r5, #0]
90010bc6:	fb96 f6f1 	sdiv	r6, r6, r1
90010bca:	fb00 6404 	mla	r4, r0, r4, r6
90010bce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90010bd2:	4628      	mov	r0, r5
90010bd4:	4798      	blx	r3
90010bd6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
90010bd8:	fb94 f0f0 	sdiv	r0, r4, r0
90010bdc:	4418      	add	r0, r3
90010bde:	e7d4      	b.n	90010b8a <_ZNK8touchgfx6Slider15positionToValueEs+0x10>

90010be0 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv>:
90010be0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
90010be4:	2302      	movs	r3, #2
90010be6:	b92a      	cbnz	r2, 90010bf4 <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0x14>
90010be8:	f9b0 009c 	ldrsh.w	r0, [r0, #156]	; 0x9c
90010bec:	fb90 f0f3 	sdiv	r0, r0, r3
90010bf0:	b280      	uxth	r0, r0
90010bf2:	4770      	bx	lr
90010bf4:	f9b0 009e 	ldrsh.w	r0, [r0, #158]	; 0x9e
90010bf8:	e7f8      	b.n	90010bec <_ZNK8touchgfx6Slider18getIndicatorRadiusEv+0xc>

90010bfa <_ZN8touchgfx6Slider13setValueRangeEiii>:
90010bfa:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
90010bfe:	6802      	ldr	r2, [r0, #0]
90010c00:	4619      	mov	r1, r3
90010c02:	b410      	push	{r4}
90010c04:	f85d 4b04 	ldr.w	r4, [sp], #4
90010c08:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
90010c0c:	4710      	bx	r2

90010c0e <_ZN8touchgfx6Slider13setValueRangeEii>:
90010c0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
90010c10:	428b      	cmp	r3, r1
90010c12:	b410      	push	{r4}
90010c14:	db09      	blt.n	90010c2a <_ZN8touchgfx6Slider13setValueRangeEii+0x1c>
90010c16:	4293      	cmp	r3, r2
90010c18:	bfa8      	it	ge
90010c1a:	4613      	movge	r3, r2
90010c1c:	6804      	ldr	r4, [r0, #0]
90010c1e:	f8d4 4098 	ldr.w	r4, [r4, #152]	; 0x98
90010c22:	46a4      	mov	ip, r4
90010c24:	f85d 4b04 	ldr.w	r4, [sp], #4
90010c28:	4760      	bx	ip
90010c2a:	460b      	mov	r3, r1
90010c2c:	e7f6      	b.n	90010c1c <_ZN8touchgfx6Slider13setValueRangeEii+0xe>

90010c2e <_ZNK8touchgfx6Slider29getIndicatorPositionRangeSizeEv>:
90010c2e:	f9b0 20ee 	ldrsh.w	r2, [r0, #238]	; 0xee
90010c32:	f9b0 00ec 	ldrsh.w	r0, [r0, #236]	; 0xec
90010c36:	1a10      	subs	r0, r2, r0
90010c38:	4770      	bx	lr

90010c3a <_ZNK8touchgfx6Slider17getValueRangeSizeEv>:
90010c3a:	e9d0 020d 	ldrd	r0, r2, [r0, #52]	; 0x34
90010c3e:	1a10      	subs	r0, r2, r0
90010c40:	4770      	bx	lr

90010c42 <_ZN8touchgfx6SliderD1Ev>:
90010c42:	4770      	bx	lr

90010c44 <_ZN8touchgfx6SliderD0Ev>:
90010c44:	b510      	push	{r4, lr}
90010c46:	4604      	mov	r4, r0
90010c48:	21fc      	movs	r1, #252	; 0xfc
90010c4a:	f012 fcde 	bl	9002360a <_ZdlPvj>
90010c4e:	4620      	mov	r0, r4
90010c50:	bd10      	pop	{r4, pc}

90010c52 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE>:
90010c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010c56:	790b      	ldrb	r3, [r1, #4]
90010c58:	4604      	mov	r4, r0
90010c5a:	460d      	mov	r5, r1
90010c5c:	b323      	cbz	r3, 90010ca8 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x56>
90010c5e:	2b01      	cmp	r3, #1
90010c60:	d135      	bne.n	90010cce <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
90010c62:	6823      	ldr	r3, [r4, #0]
90010c64:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
90010c68:	f8d3 70ac 	ldr.w	r7, [r3, #172]	; 0xac
90010c6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90010c70:	2a00      	cmp	r2, #0
90010c72:	d12a      	bne.n	90010cca <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x78>
90010c74:	88ee      	ldrh	r6, [r5, #6]
90010c76:	4620      	mov	r0, r4
90010c78:	4798      	blx	r3
90010c7a:	1a31      	subs	r1, r6, r0
90010c7c:	4620      	mov	r0, r4
90010c7e:	b209      	sxth	r1, r1
90010c80:	47b8      	blx	r7
90010c82:	792b      	ldrb	r3, [r5, #4]
90010c84:	2b01      	cmp	r3, #1
90010c86:	d122      	bne.n	90010cce <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
90010c88:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
90010c8c:	b1f8      	cbz	r0, 90010cce <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
90010c8e:	6803      	ldr	r3, [r0, #0]
90010c90:	68db      	ldr	r3, [r3, #12]
90010c92:	4798      	blx	r3
90010c94:	b1d8      	cbz	r0, 90010cce <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x7c>
90010c96:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
90010c9a:	4621      	mov	r1, r4
90010c9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
90010c9e:	6803      	ldr	r3, [r0, #0]
90010ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90010ca4:	689b      	ldr	r3, [r3, #8]
90010ca6:	4718      	bx	r3
90010ca8:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
90010cac:	2800      	cmp	r0, #0
90010cae:	d0d8      	beq.n	90010c62 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
90010cb0:	6803      	ldr	r3, [r0, #0]
90010cb2:	68db      	ldr	r3, [r3, #12]
90010cb4:	4798      	blx	r3
90010cb6:	2800      	cmp	r0, #0
90010cb8:	d0d3      	beq.n	90010c62 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
90010cba:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
90010cbe:	4621      	mov	r1, r4
90010cc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
90010cc2:	6803      	ldr	r3, [r0, #0]
90010cc4:	689b      	ldr	r3, [r3, #8]
90010cc6:	4798      	blx	r3
90010cc8:	e7cb      	b.n	90010c62 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x10>
90010cca:	892e      	ldrh	r6, [r5, #8]
90010ccc:	e7d3      	b.n	90010c76 <_ZN8touchgfx6Slider16handleClickEventERKNS_10ClickEventE+0x24>
90010cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90010cd2 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE>:
90010cd2:	b570      	push	{r4, r5, r6, lr}
90010cd4:	6803      	ldr	r3, [r0, #0]
90010cd6:	4604      	mov	r4, r0
90010cd8:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
90010cdc:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
90010ce0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90010ce4:	b942      	cbnz	r2, 90010cf8 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x26>
90010ce6:	894d      	ldrh	r5, [r1, #10]
90010ce8:	4798      	blx	r3
90010cea:	1a29      	subs	r1, r5, r0
90010cec:	4633      	mov	r3, r6
90010cee:	4620      	mov	r0, r4
90010cf0:	b209      	sxth	r1, r1
90010cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010cf6:	4718      	bx	r3
90010cf8:	898d      	ldrh	r5, [r1, #12]
90010cfa:	e7f5      	b.n	90010ce8 <_ZN8touchgfx6Slider15handleDragEventERKNS_9DragEventE+0x16>

90010cfc <_ZN8touchgfx8DrawableC1Ev>:
90010cfc:	4a0a      	ldr	r2, [pc, #40]	; (90010d28 <_ZN8touchgfx8DrawableC1Ev+0x2c>)
90010cfe:	6002      	str	r2, [r0, #0]
90010d00:	2200      	movs	r2, #0
90010d02:	8082      	strh	r2, [r0, #4]
90010d04:	80c2      	strh	r2, [r0, #6]
90010d06:	8102      	strh	r2, [r0, #8]
90010d08:	8142      	strh	r2, [r0, #10]
90010d0a:	8182      	strh	r2, [r0, #12]
90010d0c:	81c2      	strh	r2, [r0, #14]
90010d0e:	8202      	strh	r2, [r0, #16]
90010d10:	8242      	strh	r2, [r0, #18]
90010d12:	61c2      	str	r2, [r0, #28]
90010d14:	8402      	strh	r2, [r0, #32]
90010d16:	8442      	strh	r2, [r0, #34]	; 0x22
90010d18:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
90010d1c:	e9c0 2205 	strd	r2, r2, [r0, #20]
90010d20:	2201      	movs	r2, #1
90010d22:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
90010d26:	4770      	bx	lr
90010d28:	90027780 	.word	0x90027780

90010d2c <_ZN8touchgfx8Drawable5setXYEss>:
90010d2c:	b570      	push	{r4, r5, r6, lr}
90010d2e:	6803      	ldr	r3, [r0, #0]
90010d30:	4604      	mov	r4, r0
90010d32:	4615      	mov	r5, r2
90010d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90010d36:	4798      	blx	r3
90010d38:	6823      	ldr	r3, [r4, #0]
90010d3a:	4629      	mov	r1, r5
90010d3c:	4620      	mov	r0, r4
90010d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90010d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010d44:	4718      	bx	r3

90010d46 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
90010d46:	b570      	push	{r4, r5, r6, lr}
90010d48:	6803      	ldr	r3, [r0, #0]
90010d4a:	4604      	mov	r4, r0
90010d4c:	4615      	mov	r5, r2
90010d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90010d50:	4798      	blx	r3
90010d52:	6823      	ldr	r3, [r4, #0]
90010d54:	4629      	mov	r1, r5
90010d56:	4620      	mov	r0, r4
90010d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90010d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90010d5e:	4718      	bx	r3

90010d60 <_ZN8touchgfx6Slider21setupHorizontalSliderEttttt>:
90010d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010d64:	461d      	mov	r5, r3
90010d66:	f04f 0a00 	mov.w	sl, #0
90010d6a:	b213      	sxth	r3, r2
90010d6c:	4604      	mov	r4, r0
90010d6e:	fa0f fb81 	sxth.w	fp, r1
90010d72:	f880 a02c 	strb.w	sl, [r0, #44]	; 0x2c
90010d76:	4689      	mov	r9, r1
90010d78:	4690      	mov	r8, r2
90010d7a:	4659      	mov	r1, fp
90010d7c:	461a      	mov	r2, r3
90010d7e:	303c      	adds	r0, #60	; 0x3c
90010d80:	f8bd 6034 	ldrh.w	r6, [sp, #52]	; 0x34
90010d84:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
90010d88:	9301      	str	r3, [sp, #4]
90010d8a:	f7ff ffcf 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90010d8e:	9b01      	ldr	r3, [sp, #4]
90010d90:	4659      	mov	r1, fp
90010d92:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
90010d96:	461a      	mov	r2, r3
90010d98:	f7ff ffc8 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90010d9c:	4652      	mov	r2, sl
90010d9e:	4651      	mov	r1, sl
90010da0:	f104 0068 	add.w	r0, r4, #104	; 0x68
90010da4:	f7ff ffc2 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90010da8:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
90010dac:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
90010db0:	4620      	mov	r0, r4
90010db2:	4489      	add	r9, r1
90010db4:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
90010db8:	4490      	add	r8, r2
90010dba:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
90010dbe:	4431      	add	r1, r6
90010dc0:	fa1f f989 	uxth.w	r9, r9
90010dc4:	442a      	add	r2, r5
90010dc6:	fa1f f888 	uxth.w	r8, r8
90010dca:	b289      	uxth	r1, r1
90010dcc:	f8a4 509a 	strh.w	r5, [r4, #154]	; 0x9a
90010dd0:	b292      	uxth	r2, r2
90010dd2:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
90010dd6:	4589      	cmp	r9, r1
90010dd8:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
90010ddc:	bf8c      	ite	hi
90010dde:	fa0f f189 	sxthhi.w	r1, r9
90010de2:	b209      	sxthls	r1, r1
90010de4:	4590      	cmp	r8, r2
90010de6:	bf8c      	ite	hi
90010de8:	fa0f f288 	sxthhi.w	r2, r8
90010dec:	b212      	sxthls	r2, r2
90010dee:	f7ff ffaa 	bl	90010d46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
90010df2:	6823      	ldr	r3, [r4, #0]
90010df4:	6b21      	ldr	r1, [r4, #48]	; 0x30
90010df6:	4620      	mov	r0, r4
90010df8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90010dfc:	b003      	add	sp, #12
90010dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010e02:	4718      	bx	r3

90010e04 <_ZN8touchgfx6Slider19setupVerticalSliderEttttt>:
90010e04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010e08:	461d      	mov	r5, r3
90010e0a:	fa0f fa81 	sxth.w	sl, r1
90010e0e:	2301      	movs	r3, #1
90010e10:	fa0f fb82 	sxth.w	fp, r2
90010e14:	4604      	mov	r4, r0
90010e16:	4689      	mov	r9, r1
90010e18:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
90010e1c:	4651      	mov	r1, sl
90010e1e:	4690      	mov	r8, r2
90010e20:	303c      	adds	r0, #60	; 0x3c
90010e22:	465a      	mov	r2, fp
90010e24:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
90010e28:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
90010e2c:	f7ff ff7e 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90010e30:	465a      	mov	r2, fp
90010e32:	4651      	mov	r1, sl
90010e34:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
90010e38:	f7ff ff78 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90010e3c:	f8b4 1044 	ldrh.w	r1, [r4, #68]	; 0x44
90010e40:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
90010e44:	4620      	mov	r0, r4
90010e46:	4489      	add	r9, r1
90010e48:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
90010e4c:	4490      	add	r8, r2
90010e4e:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
90010e52:	4429      	add	r1, r5
90010e54:	fa1f f989 	uxth.w	r9, r9
90010e58:	4432      	add	r2, r6
90010e5a:	fa1f f888 	uxth.w	r8, r8
90010e5e:	b289      	uxth	r1, r1
90010e60:	f8a4 5098 	strh.w	r5, [r4, #152]	; 0x98
90010e64:	b292      	uxth	r2, r2
90010e66:	f8a4 70ec 	strh.w	r7, [r4, #236]	; 0xec
90010e6a:	4589      	cmp	r9, r1
90010e6c:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
90010e70:	bf8c      	ite	hi
90010e72:	fa0f f189 	sxthhi.w	r1, r9
90010e76:	b209      	sxthls	r1, r1
90010e78:	4590      	cmp	r8, r2
90010e7a:	bf8c      	ite	hi
90010e7c:	fa0f f288 	sxthhi.w	r2, r8
90010e80:	b212      	sxthls	r2, r2
90010e82:	f7ff ff60 	bl	90010d46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
90010e86:	6823      	ldr	r3, [r4, #0]
90010e88:	6b21      	ldr	r1, [r4, #48]	; 0x30
90010e8a:	4620      	mov	r0, r4
90010e8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
90010e90:	b001      	add	sp, #4
90010e92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010e96:	4718      	bx	r3

90010e98 <_ZN8touchgfx6Slider23updateIndicatorPositionEs>:
90010e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010e9c:	f9b0 80ec 	ldrsh.w	r8, [r0, #236]	; 0xec
90010ea0:	4604      	mov	r4, r0
90010ea2:	3094      	adds	r0, #148	; 0x94
90010ea4:	4588      	cmp	r8, r1
90010ea6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
90010eaa:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
90010eae:	bfb8      	it	lt
90010eb0:	4688      	movlt	r8, r1
90010eb2:	f9b0 105a 	ldrsh.w	r1, [r0, #90]	; 0x5a
90010eb6:	4588      	cmp	r8, r1
90010eb8:	bfa8      	it	ge
90010eba:	4688      	movge	r8, r1
90010ebc:	fa1f f788 	uxth.w	r7, r8
90010ec0:	2b00      	cmp	r3, #0
90010ec2:	d12f      	bne.n	90010f24 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x8c>
90010ec4:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	; 0x9a
90010ec8:	4641      	mov	r1, r8
90010eca:	f7f1 fa09 	bl	900022e0 <_ZN8touchgfx8Drawable6moveToEss>
90010ece:	4630      	mov	r0, r6
90010ed0:	f004 fdab 	bl	90015a2a <_ZNK8touchgfx8Drawable10invalidateEv>
90010ed4:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
90010ed8:	6823      	ldr	r3, [r4, #0]
90010eda:	4620      	mov	r0, r4
90010edc:	1abf      	subs	r7, r7, r2
90010ede:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90010ee2:	b2bf      	uxth	r7, r7
90010ee4:	4798      	blx	r3
90010ee6:	4407      	add	r7, r0
90010ee8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
90010eec:	4630      	mov	r0, r6
90010eee:	f004 fd9c 	bl	90015a2a <_ZNK8touchgfx8Drawable10invalidateEv>
90010ef2:	6823      	ldr	r3, [r4, #0]
90010ef4:	4641      	mov	r1, r8
90010ef6:	4620      	mov	r0, r4
90010ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90010efc:	4798      	blx	r3
90010efe:	6320      	str	r0, [r4, #48]	; 0x30
90010f00:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
90010f04:	2800      	cmp	r0, #0
90010f06:	d03d      	beq.n	90010f84 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
90010f08:	6803      	ldr	r3, [r0, #0]
90010f0a:	68db      	ldr	r3, [r3, #12]
90010f0c:	4798      	blx	r3
90010f0e:	2800      	cmp	r0, #0
90010f10:	d038      	beq.n	90010f84 <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0xec>
90010f12:	f8d4 00f8 	ldr.w	r0, [r4, #248]	; 0xf8
90010f16:	4621      	mov	r1, r4
90010f18:	6b22      	ldr	r2, [r4, #48]	; 0x30
90010f1a:	6803      	ldr	r3, [r0, #0]
90010f1c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90010f20:	689b      	ldr	r3, [r3, #8]
90010f22:	4718      	bx	r3
90010f24:	4642      	mov	r2, r8
90010f26:	f9b4 1098 	ldrsh.w	r1, [r4, #152]	; 0x98
90010f2a:	f7f1 f9d9 	bl	900022e0 <_ZN8touchgfx8Drawable6moveToEss>
90010f2e:	4630      	mov	r0, r6
90010f30:	f004 fd7b 	bl	90015a2a <_ZNK8touchgfx8Drawable10invalidateEv>
90010f34:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
90010f38:	f8b4 5046 	ldrh.w	r5, [r4, #70]	; 0x46
90010f3c:	6823      	ldr	r3, [r4, #0]
90010f3e:	4405      	add	r5, r0
90010f40:	4620      	mov	r0, r4
90010f42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90010f46:	b2ad      	uxth	r5, r5
90010f48:	4798      	blx	r3
90010f4a:	6823      	ldr	r3, [r4, #0]
90010f4c:	1bed      	subs	r5, r5, r7
90010f4e:	f9b4 a0c4 	ldrsh.w	sl, [r4, #196]	; 0xc4
90010f52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
90010f56:	1a2d      	subs	r5, r5, r0
90010f58:	4620      	mov	r0, r4
90010f5a:	4798      	blx	r3
90010f5c:	4438      	add	r0, r7
90010f5e:	b2ad      	uxth	r5, r5
90010f60:	f9b4 90c8 	ldrsh.w	r9, [r4, #200]	; 0xc8
90010f64:	b202      	sxth	r2, r0
90010f66:	4651      	mov	r1, sl
90010f68:	4630      	mov	r0, r6
90010f6a:	f7ff fedf 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90010f6e:	4630      	mov	r0, r6
90010f70:	b22a      	sxth	r2, r5
90010f72:	4649      	mov	r1, r9
90010f74:	f7ff fee7 	bl	90010d46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
90010f78:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
90010f7c:	1a2d      	subs	r5, r5, r0
90010f7e:	f8a4 506e 	strh.w	r5, [r4, #110]	; 0x6e
90010f82:	e7b3      	b.n	90010eec <_ZN8touchgfx6Slider23updateIndicatorPositionEs+0x54>
90010f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

90010f88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
90010f88:	b538      	push	{r3, r4, r5, lr}
90010f8a:	4604      	mov	r4, r0
90010f8c:	460d      	mov	r5, r1
90010f8e:	2226      	movs	r2, #38	; 0x26
90010f90:	2100      	movs	r1, #0
90010f92:	f012 fe03 	bl	90023b9c <memset>
90010f96:	4620      	mov	r0, r4
90010f98:	f7ff feb0 	bl	90010cfc <_ZN8touchgfx8DrawableC1Ev>
90010f9c:	4b06      	ldr	r3, [pc, #24]	; (90010fb8 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
90010f9e:	4620      	mov	r0, r4
90010fa0:	4629      	mov	r1, r5
90010fa2:	6023      	str	r3, [r4, #0]
90010fa4:	882b      	ldrh	r3, [r5, #0]
90010fa6:	84e3      	strh	r3, [r4, #38]	; 0x26
90010fa8:	23ff      	movs	r3, #255	; 0xff
90010faa:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
90010fae:	f001 ffb8 	bl	90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90010fb2:	4620      	mov	r0, r4
90010fb4:	bd38      	pop	{r3, r4, r5, pc}
90010fb6:	bf00      	nop
90010fb8:	900276c8 	.word	0x900276c8

90010fbc <_ZN8touchgfx6SliderC1Ev>:
90010fbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90010fc0:	4604      	mov	r4, r0
90010fc2:	2500      	movs	r5, #0
90010fc4:	f7ff fe9a 	bl	90010cfc <_ZN8touchgfx8DrawableC1Ev>
90010fc8:	ae02      	add	r6, sp, #8
90010fca:	4b28      	ldr	r3, [pc, #160]	; (9001106c <_ZN8touchgfx6SliderC1Ev+0xb0>)
90010fcc:	f64f 77ff 	movw	r7, #65535	; 0xffff
90010fd0:	f04f 0b01 	mov.w	fp, #1
90010fd4:	f104 093c 	add.w	r9, r4, #60	; 0x3c
90010fd8:	f104 0a68 	add.w	sl, r4, #104	; 0x68
90010fdc:	6023      	str	r3, [r4, #0]
90010fde:	f826 7d04 	strh.w	r7, [r6, #-4]!
90010fe2:	4648      	mov	r0, r9
90010fe4:	4631      	mov	r1, r6
90010fe6:	62a5      	str	r5, [r4, #40]	; 0x28
90010fe8:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
90010fec:	f104 0894 	add.w	r8, r4, #148	; 0x94
90010ff0:	f8c4 b038 	str.w	fp, [r4, #56]	; 0x38
90010ff4:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
90010ff8:	f7ff ffc6 	bl	90010f88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
90010ffc:	4631      	mov	r1, r6
90010ffe:	4650      	mov	r0, sl
90011000:	f8ad 7004 	strh.w	r7, [sp, #4]
90011004:	f7ff ffc0 	bl	90010f88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
90011008:	4631      	mov	r1, r6
9001100a:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
9001100e:	4640      	mov	r0, r8
90011010:	f8ad 7004 	strh.w	r7, [sp, #4]
90011014:	f7ff ffb8 	bl	90010f88 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
90011018:	4630      	mov	r0, r6
9001101a:	f7ff fe6f 	bl	90010cfc <_ZN8touchgfx8DrawableC1Ev>
9001101e:	4b14      	ldr	r3, [pc, #80]	; (90011070 <_ZN8touchgfx6SliderC1Ev+0xb4>)
90011020:	4651      	mov	r1, sl
90011022:	4630      	mov	r0, r6
90011024:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
90011028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
9001102c:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
90011030:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
90011034:	e9c4 353b 	strd	r3, r5, [r4, #236]	; 0xec
90011038:	e9c4 553d 	strd	r5, r5, [r4, #244]	; 0xf4
9001103c:	f7ff fad6 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
90011040:	4649      	mov	r1, r9
90011042:	4620      	mov	r0, r4
90011044:	f7ff fad2 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
90011048:	4631      	mov	r1, r6
9001104a:	4620      	mov	r0, r4
9001104c:	f7ff face 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
90011050:	4641      	mov	r1, r8
90011052:	4620      	mov	r0, r4
90011054:	f7ff faca 	bl	900105ec <_ZN8touchgfx9Container3addERNS_8DrawableE>
90011058:	4620      	mov	r0, r4
9001105a:	2264      	movs	r2, #100	; 0x64
9001105c:	4629      	mov	r1, r5
9001105e:	f7ff fdd6 	bl	90010c0e <_ZN8touchgfx6Slider13setValueRangeEii>
90011062:	4620      	mov	r0, r4
90011064:	b003      	add	sp, #12
90011066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001106a:	bf00      	nop
9001106c:	900273dc 	.word	0x900273dc
90011070:	9002734c 	.word	0x9002734c

90011074 <_ZN8touchgfx6Slider10setBitmapsERKNS_6BitmapES3_S3_>:
90011074:	b570      	push	{r4, r5, r6, lr}
90011076:	4604      	mov	r4, r0
90011078:	4616      	mov	r6, r2
9001107a:	461d      	mov	r5, r3
9001107c:	303c      	adds	r0, #60	; 0x3c
9001107e:	f001 ff50 	bl	90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90011082:	4631      	mov	r1, r6
90011084:	f104 0068 	add.w	r0, r4, #104	; 0x68
90011088:	f001 ff4b 	bl	90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
9001108c:	4629      	mov	r1, r5
9001108e:	f104 0094 	add.w	r0, r4, #148	; 0x94
90011092:	f001 ff46 	bl	90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90011096:	f9b4 2072 	ldrsh.w	r2, [r4, #114]	; 0x72
9001109a:	f9b4 1070 	ldrsh.w	r1, [r4, #112]	; 0x70
9001109e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
900110a2:	f7ff fe50 	bl	90010d46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
900110a6:	bd70      	pop	{r4, r5, r6, pc}

900110a8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
900110a8:	6803      	ldr	r3, [r0, #0]
900110aa:	b513      	push	{r0, r1, r4, lr}
900110ac:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
900110b0:	2300      	movs	r3, #0
900110b2:	e9cd 3300 	strd	r3, r3, [sp]
900110b6:	466b      	mov	r3, sp
900110b8:	47a0      	blx	r4
900110ba:	b002      	add	sp, #8
900110bc:	bd10      	pop	{r4, pc}

900110be <_ZN8touchgfx3HAL16flushFrameBufferEv>:
900110be:	2301      	movs	r3, #1
900110c0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
900110c4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
900110c8:	4770      	bx	lr

900110ca <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
900110ca:	2301      	movs	r3, #1
900110cc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
900110d0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
900110d4:	4770      	bx	lr

900110d6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
900110d6:	6843      	ldr	r3, [r0, #4]
900110d8:	2201      	movs	r2, #1
900110da:	725a      	strb	r2, [r3, #9]
900110dc:	6840      	ldr	r0, [r0, #4]
900110de:	6803      	ldr	r3, [r0, #0]
900110e0:	691b      	ldr	r3, [r3, #16]
900110e2:	4718      	bx	r3

900110e4 <_ZN8touchgfx3HAL8flushDMAEv>:
900110e4:	6840      	ldr	r0, [r0, #4]
900110e6:	6803      	ldr	r3, [r0, #0]
900110e8:	689b      	ldr	r3, [r3, #8]
900110ea:	4718      	bx	r3

900110ec <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
900110ec:	b530      	push	{r4, r5, lr}
900110ee:	b08b      	sub	sp, #44	; 0x2c
900110f0:	6804      	ldr	r4, [r0, #0]
900110f2:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
900110f6:	9509      	str	r5, [sp, #36]	; 0x24
900110f8:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
900110fc:	9508      	str	r5, [sp, #32]
900110fe:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90011102:	9507      	str	r5, [sp, #28]
90011104:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
90011108:	9506      	str	r5, [sp, #24]
9001110a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
9001110e:	9505      	str	r5, [sp, #20]
90011110:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
90011114:	9504      	str	r5, [sp, #16]
90011116:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
9001111a:	9503      	str	r5, [sp, #12]
9001111c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
90011120:	9502      	str	r5, [sp, #8]
90011122:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
90011126:	e9cd 3500 	strd	r3, r5, [sp]
9001112a:	4613      	mov	r3, r2
9001112c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
9001112e:	2200      	movs	r2, #0
90011130:	47a0      	blx	r4
90011132:	b00b      	add	sp, #44	; 0x2c
90011134:	bd30      	pop	{r4, r5, pc}
	...

90011138 <_ZN8touchgfx3HAL10beginFrameEv>:
90011138:	4b04      	ldr	r3, [pc, #16]	; (9001114c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
9001113a:	781b      	ldrb	r3, [r3, #0]
9001113c:	b123      	cbz	r3, 90011148 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
9001113e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
90011142:	f080 0001 	eor.w	r0, r0, #1
90011146:	4770      	bx	lr
90011148:	2001      	movs	r0, #1
9001114a:	4770      	bx	lr
9001114c:	2402645a 	.word	0x2402645a

90011150 <_ZN8touchgfx3HAL8endFrameEv>:
90011150:	b510      	push	{r4, lr}
90011152:	4604      	mov	r4, r0
90011154:	6840      	ldr	r0, [r0, #4]
90011156:	6803      	ldr	r3, [r0, #0]
90011158:	689b      	ldr	r3, [r3, #8]
9001115a:	4798      	blx	r3
9001115c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
90011160:	b113      	cbz	r3, 90011168 <_ZN8touchgfx3HAL8endFrameEv+0x18>
90011162:	2301      	movs	r3, #1
90011164:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90011168:	bd10      	pop	{r4, pc}

9001116a <_ZN8touchgfx3HAL10initializeEv>:
9001116a:	b510      	push	{r4, lr}
9001116c:	4604      	mov	r4, r0
9001116e:	f7f0 fbe1 	bl	90001934 <_ZN8touchgfx10OSWrappers10initializeEv>
90011172:	f7ef f9c5 	bl	90000500 <_ZN8touchgfx4GPIO4initEv>
90011176:	6860      	ldr	r0, [r4, #4]
90011178:	6803      	ldr	r3, [r0, #0]
9001117a:	68db      	ldr	r3, [r3, #12]
9001117c:	4798      	blx	r3
9001117e:	68e0      	ldr	r0, [r4, #12]
90011180:	6803      	ldr	r3, [r0, #0]
90011182:	689b      	ldr	r3, [r3, #8]
90011184:	4798      	blx	r3
90011186:	6823      	ldr	r3, [r4, #0]
90011188:	4620      	mov	r0, r4
9001118a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
9001118c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90011190:	4718      	bx	r3
	...

90011194 <_ZN8touchgfx3HAL4tickEv>:
90011194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90011196:	6803      	ldr	r3, [r0, #0]
90011198:	4604      	mov	r4, r0
9001119a:	4d5b      	ldr	r5, [pc, #364]	; (90011308 <_ZN8touchgfx3HAL4tickEv+0x174>)
9001119c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
900111a0:	4798      	blx	r3
900111a2:	2800      	cmp	r0, #0
900111a4:	f000 8095 	beq.w	900112d2 <_ZN8touchgfx3HAL4tickEv+0x13e>
900111a8:	2001      	movs	r0, #1
900111aa:	2600      	movs	r6, #0
900111ac:	f7ef f9d2 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
900111b0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
900111b4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
900111b8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
900111bc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
900111c0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
900111c4:	b133      	cbz	r3, 900111d4 <_ZN8touchgfx3HAL4tickEv+0x40>
900111c6:	6823      	ldr	r3, [r4, #0]
900111c8:	4620      	mov	r0, r4
900111ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
900111ce:	4798      	blx	r3
900111d0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
900111d4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
900111d8:	2601      	movs	r6, #1
900111da:	6862      	ldr	r2, [r4, #4]
900111dc:	f083 0301 	eor.w	r3, r3, #1
900111e0:	702e      	strb	r6, [r5, #0]
900111e2:	7253      	strb	r3, [r2, #9]
900111e4:	f003 fbdc 	bl	900149a0 <_ZN8touchgfx11Application11getInstanceEv>
900111e8:	6803      	ldr	r3, [r0, #0]
900111ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900111ec:	4798      	blx	r3
900111ee:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
900111f2:	b90b      	cbnz	r3, 900111f8 <_ZN8touchgfx3HAL4tickEv+0x64>
900111f4:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
900111f8:	f003 fbd2 	bl	900149a0 <_ZN8touchgfx11Application11getInstanceEv>
900111fc:	6803      	ldr	r3, [r0, #0]
900111fe:	695b      	ldr	r3, [r3, #20]
90011200:	4798      	blx	r3
90011202:	6da0      	ldr	r0, [r4, #88]	; 0x58
90011204:	6803      	ldr	r3, [r0, #0]
90011206:	691b      	ldr	r3, [r3, #16]
90011208:	4798      	blx	r3
9001120a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
9001120e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90011212:	3b01      	subs	r3, #1
90011214:	b2db      	uxtb	r3, r3
90011216:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
9001121a:	b10a      	cbz	r2, 90011220 <_ZN8touchgfx3HAL4tickEv+0x8c>
9001121c:	2b00      	cmp	r3, #0
9001121e:	d1eb      	bne.n	900111f8 <_ZN8touchgfx3HAL4tickEv+0x64>
90011220:	4a3a      	ldr	r2, [pc, #232]	; (9001130c <_ZN8touchgfx3HAL4tickEv+0x178>)
90011222:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
90011226:	7813      	ldrb	r3, [r2, #0]
90011228:	3301      	adds	r3, #1
9001122a:	b25b      	sxtb	r3, r3
9001122c:	4299      	cmp	r1, r3
9001122e:	7013      	strb	r3, [r2, #0]
90011230:	dc10      	bgt.n	90011254 <_ZN8touchgfx3HAL4tickEv+0xc0>
90011232:	2300      	movs	r3, #0
90011234:	68e0      	ldr	r0, [r4, #12]
90011236:	a902      	add	r1, sp, #8
90011238:	7013      	strb	r3, [r2, #0]
9001123a:	aa03      	add	r2, sp, #12
9001123c:	6803      	ldr	r3, [r0, #0]
9001123e:	68db      	ldr	r3, [r3, #12]
90011240:	4798      	blx	r3
90011242:	6823      	ldr	r3, [r4, #0]
90011244:	2800      	cmp	r0, #0
90011246:	d050      	beq.n	900112ea <_ZN8touchgfx3HAL4tickEv+0x156>
90011248:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
9001124c:	4620      	mov	r0, r4
9001124e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90011252:	4798      	blx	r3
90011254:	2300      	movs	r3, #0
90011256:	6960      	ldr	r0, [r4, #20]
90011258:	f88d 3007 	strb.w	r3, [sp, #7]
9001125c:	b158      	cbz	r0, 90011276 <_ZN8touchgfx3HAL4tickEv+0xe2>
9001125e:	6803      	ldr	r3, [r0, #0]
90011260:	f10d 0107 	add.w	r1, sp, #7
90011264:	68db      	ldr	r3, [r3, #12]
90011266:	4798      	blx	r3
90011268:	b128      	cbz	r0, 90011276 <_ZN8touchgfx3HAL4tickEv+0xe2>
9001126a:	6da0      	ldr	r0, [r4, #88]	; 0x58
9001126c:	f89d 1007 	ldrb.w	r1, [sp, #7]
90011270:	6803      	ldr	r3, [r0, #0]
90011272:	68db      	ldr	r3, [r3, #12]
90011274:	4798      	blx	r3
90011276:	f104 001c 	add.w	r0, r4, #28
9001127a:	f012 f911 	bl	900234a0 <_ZN8touchgfx8Gestures4tickEv>
9001127e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
90011282:	b30b      	cbz	r3, 900112c8 <_ZN8touchgfx3HAL4tickEv+0x134>
90011284:	6920      	ldr	r0, [r4, #16]
90011286:	6803      	ldr	r3, [r0, #0]
90011288:	691b      	ldr	r3, [r3, #16]
9001128a:	4798      	blx	r3
9001128c:	6f23      	ldr	r3, [r4, #112]	; 0x70
9001128e:	4606      	mov	r6, r0
90011290:	b903      	cbnz	r3, 90011294 <_ZN8touchgfx3HAL4tickEv+0x100>
90011292:	6720      	str	r0, [r4, #112]	; 0x70
90011294:	6f23      	ldr	r3, [r4, #112]	; 0x70
90011296:	4a1e      	ldr	r2, [pc, #120]	; (90011310 <_ZN8touchgfx3HAL4tickEv+0x17c>)
90011298:	1af3      	subs	r3, r6, r3
9001129a:	4293      	cmp	r3, r2
9001129c:	d914      	bls.n	900112c8 <_ZN8touchgfx3HAL4tickEv+0x134>
9001129e:	6920      	ldr	r0, [r4, #16]
900112a0:	6803      	ldr	r3, [r0, #0]
900112a2:	699b      	ldr	r3, [r3, #24]
900112a4:	4798      	blx	r3
900112a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
900112a8:	2264      	movs	r2, #100	; 0x64
900112aa:	1af3      	subs	r3, r6, r3
900112ac:	fbb3 f3f2 	udiv	r3, r3, r2
900112b0:	fbb0 f0f3 	udiv	r0, r0, r3
900112b4:	2800      	cmp	r0, #0
900112b6:	dc1d      	bgt.n	900112f4 <_ZN8touchgfx3HAL4tickEv+0x160>
900112b8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
900112bc:	6920      	ldr	r0, [r4, #16]
900112be:	2100      	movs	r1, #0
900112c0:	6803      	ldr	r3, [r0, #0]
900112c2:	69db      	ldr	r3, [r3, #28]
900112c4:	4798      	blx	r3
900112c6:	6726      	str	r6, [r4, #112]	; 0x70
900112c8:	f003 fb6a 	bl	900149a0 <_ZN8touchgfx11Application11getInstanceEv>
900112cc:	6803      	ldr	r3, [r0, #0]
900112ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900112d0:	4798      	blx	r3
900112d2:	6823      	ldr	r3, [r4, #0]
900112d4:	4620      	mov	r0, r4
900112d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
900112da:	4798      	blx	r3
900112dc:	2001      	movs	r0, #1
900112de:	f7ef f96d 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
900112e2:	2300      	movs	r3, #0
900112e4:	702b      	strb	r3, [r5, #0]
900112e6:	b004      	add	sp, #16
900112e8:	bd70      	pop	{r4, r5, r6, pc}
900112ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
900112ee:	4620      	mov	r0, r4
900112f0:	4798      	blx	r3
900112f2:	e7af      	b.n	90011254 <_ZN8touchgfx3HAL4tickEv+0xc0>
900112f4:	2863      	cmp	r0, #99	; 0x63
900112f6:	bfcb      	itete	gt
900112f8:	2300      	movgt	r3, #0
900112fa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
900112fe:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
90011302:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
90011306:	e7d9      	b.n	900112bc <_ZN8touchgfx3HAL4tickEv+0x128>
90011308:	24026460 	.word	0x24026460
9001130c:	24026461 	.word	0x24026461
90011310:	05f5e100 	.word	0x05f5e100

90011314 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90011314:	f7f0 bb40 	b.w	90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90011318 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
90011318:	6581      	str	r1, [r0, #88]	; 0x58
9001131a:	301c      	adds	r0, #28
9001131c:	f012 b8be 	b.w	9002349c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

90011320 <_ZN8touchgfx3HAL5touchEll>:
90011320:	b530      	push	{r4, r5, lr}
90011322:	b087      	sub	sp, #28
90011324:	4604      	mov	r4, r0
90011326:	a804      	add	r0, sp, #16
90011328:	e9cd 1204 	strd	r1, r2, [sp, #16]
9001132c:	f003 f91a 	bl	90014564 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
90011330:	9b04      	ldr	r3, [sp, #16]
90011332:	a906      	add	r1, sp, #24
90011334:	a803      	add	r0, sp, #12
90011336:	f8ad 300c 	strh.w	r3, [sp, #12]
9001133a:	9b05      	ldr	r3, [sp, #20]
9001133c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
90011340:	f003 f962 	bl	90014608 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90011344:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
90011348:	f104 001c 	add.w	r0, r4, #28
9001134c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
90011350:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90011354:	b189      	cbz	r1, 9001137a <_ZN8touchgfx3HAL5touchEll+0x5a>
90011356:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
9001135a:	9300      	str	r3, [sp, #0]
9001135c:	4613      	mov	r3, r2
9001135e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90011362:	462a      	mov	r2, r5
90011364:	f012 f8aa 	bl	900234bc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
90011368:	b128      	cbz	r0, 90011376 <_ZN8touchgfx3HAL5touchEll+0x56>
9001136a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001136e:	65e3      	str	r3, [r4, #92]	; 0x5c
90011370:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90011374:	6623      	str	r3, [r4, #96]	; 0x60
90011376:	b007      	add	sp, #28
90011378:	bd30      	pop	{r4, r5, pc}
9001137a:	f012 f8df 	bl	9002353c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
9001137e:	2301      	movs	r3, #1
90011380:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90011384:	e7f1      	b.n	9001136a <_ZN8touchgfx3HAL5touchEll+0x4a>

90011386 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
90011386:	b510      	push	{r4, lr}
90011388:	2b00      	cmp	r3, #0
9001138a:	d046      	beq.n	9001141a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9001138c:	ea81 0002 	eor.w	r0, r1, r2
90011390:	07c4      	lsls	r4, r0, #31
90011392:	d508      	bpl.n	900113a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90011394:	440b      	add	r3, r1
90011396:	3a01      	subs	r2, #1
90011398:	428b      	cmp	r3, r1
9001139a:	d93e      	bls.n	9001141a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
9001139c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
900113a0:	f801 0b01 	strb.w	r0, [r1], #1
900113a4:	e7f8      	b.n	90011398 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
900113a6:	07d0      	lsls	r0, r2, #31
900113a8:	bf42      	ittt	mi
900113aa:	f812 0b01 	ldrbmi.w	r0, [r2], #1
900113ae:	f103 33ff 	addmi.w	r3, r3, #4294967295
900113b2:	f801 0b01 	strbmi.w	r0, [r1], #1
900113b6:	2b01      	cmp	r3, #1
900113b8:	d911      	bls.n	900113de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
900113ba:	ea81 0402 	eor.w	r4, r1, r2
900113be:	4610      	mov	r0, r2
900113c0:	07a4      	lsls	r4, r4, #30
900113c2:	d022      	beq.n	9001140a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
900113c4:	f023 0401 	bic.w	r4, r3, #1
900113c8:	440c      	add	r4, r1
900113ca:	428c      	cmp	r4, r1
900113cc:	4602      	mov	r2, r0
900113ce:	d904      	bls.n	900113da <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
900113d0:	8812      	ldrh	r2, [r2, #0]
900113d2:	3002      	adds	r0, #2
900113d4:	f821 2b02 	strh.w	r2, [r1], #2
900113d8:	e7f7      	b.n	900113ca <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
900113da:	f003 0301 	and.w	r3, r3, #1
900113de:	f023 0003 	bic.w	r0, r3, #3
900113e2:	4408      	add	r0, r1
900113e4:	4288      	cmp	r0, r1
900113e6:	4614      	mov	r4, r2
900113e8:	d904      	bls.n	900113f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
900113ea:	6824      	ldr	r4, [r4, #0]
900113ec:	3204      	adds	r2, #4
900113ee:	f841 4b04 	str.w	r4, [r1], #4
900113f2:	e7f7      	b.n	900113e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
900113f4:	f003 0303 	and.w	r3, r3, #3
900113f8:	3a01      	subs	r2, #1
900113fa:	440b      	add	r3, r1
900113fc:	428b      	cmp	r3, r1
900113fe:	d90c      	bls.n	9001141a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90011400:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90011404:	f801 0b01 	strb.w	r0, [r1], #1
90011408:	e7f8      	b.n	900113fc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
9001140a:	0790      	lsls	r0, r2, #30
9001140c:	d0e7      	beq.n	900113de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001140e:	f832 0b02 	ldrh.w	r0, [r2], #2
90011412:	3b02      	subs	r3, #2
90011414:	f821 0b02 	strh.w	r0, [r1], #2
90011418:	e7e1      	b.n	900113de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
9001141a:	2001      	movs	r0, #1
9001141c:	bd10      	pop	{r4, pc}

9001141e <_ZN8touchgfx3HAL7noTouchEv>:
9001141e:	b510      	push	{r4, lr}
90011420:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
90011424:	4604      	mov	r4, r0
90011426:	b153      	cbz	r3, 9001143e <_ZN8touchgfx3HAL7noTouchEv+0x20>
90011428:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
9001142c:	2101      	movs	r1, #1
9001142e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
90011432:	301c      	adds	r0, #28
90011434:	f012 f882 	bl	9002353c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90011438:	2300      	movs	r3, #0
9001143a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
9001143e:	bd10      	pop	{r4, pc}

90011440 <_ZN8touchgfx3HAL3lcdEv>:
90011440:	4b04      	ldr	r3, [pc, #16]	; (90011454 <_ZN8touchgfx3HAL3lcdEv+0x14>)
90011442:	681b      	ldr	r3, [r3, #0]
90011444:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90011448:	b10a      	cbz	r2, 9001144e <_ZN8touchgfx3HAL3lcdEv+0xe>
9001144a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
9001144c:	b900      	cbnz	r0, 90011450 <_ZN8touchgfx3HAL3lcdEv+0x10>
9001144e:	6898      	ldr	r0, [r3, #8]
90011450:	4770      	bx	lr
90011452:	bf00      	nop
90011454:	2402645c 	.word	0x2402645c

90011458 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90011458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001145c:	b085      	sub	sp, #20
9001145e:	4604      	mov	r4, r0
90011460:	2000      	movs	r0, #0
90011462:	4699      	mov	r9, r3
90011464:	ad04      	add	r5, sp, #16
90011466:	460f      	mov	r7, r1
90011468:	4690      	mov	r8, r2
9001146a:	f845 0d04 	str.w	r0, [r5, #-4]!
9001146e:	69a0      	ldr	r0, [r4, #24]
90011470:	6806      	ldr	r6, [r0, #0]
90011472:	9501      	str	r5, [sp, #4]
90011474:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
90011478:	9500      	str	r5, [sp, #0]
9001147a:	6835      	ldr	r5, [r6, #0]
9001147c:	47a8      	blx	r5
9001147e:	4d10      	ldr	r5, [pc, #64]	; (900114c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
90011480:	4606      	mov	r6, r0
90011482:	f8a5 9000 	strh.w	r9, [r5]
90011486:	f7ff ffdb 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
9001148a:	6803      	ldr	r3, [r0, #0]
9001148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001148e:	4798      	blx	r3
90011490:	b128      	cbz	r0, 9001149e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
90011492:	2801      	cmp	r0, #1
90011494:	d00b      	beq.n	900114ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90011496:	4630      	mov	r0, r6
90011498:	b005      	add	sp, #20
9001149a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001149e:	882b      	ldrh	r3, [r5, #0]
900114a0:	fb08 7203 	mla	r2, r8, r3, r7
900114a4:	9b03      	ldr	r3, [sp, #12]
900114a6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
900114aa:	63e3      	str	r3, [r4, #60]	; 0x3c
900114ac:	e7f3      	b.n	90011496 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
900114ae:	882a      	ldrh	r2, [r5, #0]
900114b0:	9b03      	ldr	r3, [sp, #12]
900114b2:	fb08 7202 	mla	r2, r8, r2, r7
900114b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900114ba:	1a9a      	subs	r2, r3, r2
900114bc:	63e2      	str	r2, [r4, #60]	; 0x3c
900114be:	e7ea      	b.n	90011496 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
900114c0:	24026456 	.word	0x24026456

900114c4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
900114c4:	b5f0      	push	{r4, r5, r6, r7, lr}
900114c6:	b08b      	sub	sp, #44	; 0x2c
900114c8:	4617      	mov	r7, r2
900114ca:	4604      	mov	r4, r0
900114cc:	460e      	mov	r6, r1
900114ce:	461d      	mov	r5, r3
900114d0:	f7ff ffb6 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
900114d4:	6803      	ldr	r3, [r0, #0]
900114d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900114d8:	4798      	blx	r3
900114da:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
900114de:	9007      	str	r0, [sp, #28]
900114e0:	4631      	mov	r1, r6
900114e2:	6822      	ldr	r2, [r4, #0]
900114e4:	e9cd 0308 	strd	r0, r3, [sp, #32]
900114e8:	4b0c      	ldr	r3, [pc, #48]	; (9001151c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
900114ea:	4620      	mov	r0, r4
900114ec:	881b      	ldrh	r3, [r3, #0]
900114ee:	9306      	str	r3, [sp, #24]
900114f0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
900114f4:	9305      	str	r3, [sp, #20]
900114f6:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
900114fa:	9304      	str	r3, [sp, #16]
900114fc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011500:	9303      	str	r3, [sp, #12]
90011502:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011506:	9302      	str	r3, [sp, #8]
90011508:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001150c:	e9cd 5300 	strd	r5, r3, [sp]
90011510:	463b      	mov	r3, r7
90011512:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90011514:	2200      	movs	r2, #0
90011516:	47a8      	blx	r5
90011518:	b00b      	add	sp, #44	; 0x2c
9001151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001151c:	24026456 	.word	0x24026456

90011520 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
90011520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011524:	4698      	mov	r8, r3
90011526:	6803      	ldr	r3, [r0, #0]
90011528:	b08b      	sub	sp, #44	; 0x2c
9001152a:	4617      	mov	r7, r2
9001152c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
9001152e:	460e      	mov	r6, r1
90011530:	4b13      	ldr	r3, [pc, #76]	; (90011580 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
90011532:	4604      	mov	r4, r0
90011534:	f8b3 9000 	ldrh.w	r9, [r3]
90011538:	f7ff ff82 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
9001153c:	6803      	ldr	r3, [r0, #0]
9001153e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011540:	4798      	blx	r3
90011542:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90011546:	2200      	movs	r2, #0
90011548:	4631      	mov	r1, r6
9001154a:	e9cd 0308 	strd	r0, r3, [sp, #32]
9001154e:	2302      	movs	r3, #2
90011550:	4620      	mov	r0, r4
90011552:	e9cd 9306 	strd	r9, r3, [sp, #24]
90011556:	2301      	movs	r3, #1
90011558:	9305      	str	r3, [sp, #20]
9001155a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
9001155e:	9304      	str	r3, [sp, #16]
90011560:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
90011564:	9303      	str	r3, [sp, #12]
90011566:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
9001156a:	9302      	str	r3, [sp, #8]
9001156c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011570:	e9cd 8300 	strd	r8, r3, [sp]
90011574:	463b      	mov	r3, r7
90011576:	47a8      	blx	r5
90011578:	b00b      	add	sp, #44	; 0x2c
9001157a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001157e:	bf00      	nop
90011580:	24026456 	.word	0x24026456

90011584 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
90011584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011588:	4698      	mov	r8, r3
9001158a:	6803      	ldr	r3, [r0, #0]
9001158c:	b087      	sub	sp, #28
9001158e:	460e      	mov	r6, r1
90011590:	6d9d      	ldr	r5, [r3, #88]	; 0x58
90011592:	4617      	mov	r7, r2
90011594:	4b0f      	ldr	r3, [pc, #60]	; (900115d4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
90011596:	4604      	mov	r4, r0
90011598:	f8b3 9000 	ldrh.w	r9, [r3]
9001159c:	f7ff ff50 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
900115a0:	6803      	ldr	r3, [r0, #0]
900115a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900115a4:	4798      	blx	r3
900115a6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
900115aa:	463a      	mov	r2, r7
900115ac:	4631      	mov	r1, r6
900115ae:	f8cd 900c 	str.w	r9, [sp, #12]
900115b2:	e9cd 0304 	strd	r0, r3, [sp, #16]
900115b6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
900115ba:	4620      	mov	r0, r4
900115bc:	9302      	str	r3, [sp, #8]
900115be:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900115c2:	9301      	str	r3, [sp, #4]
900115c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900115c8:	9300      	str	r3, [sp, #0]
900115ca:	4643      	mov	r3, r8
900115cc:	47a8      	blx	r5
900115ce:	b007      	add	sp, #28
900115d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900115d4:	24026456 	.word	0x24026456

900115d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
900115d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900115dc:	4604      	mov	r4, r0
900115de:	b08f      	sub	sp, #60	; 0x3c
900115e0:	4610      	mov	r0, r2
900115e2:	460d      	mov	r5, r1
900115e4:	4691      	mov	r9, r2
900115e6:	461e      	mov	r6, r3
900115e8:	f006 f99a 	bl	90017920 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
900115ec:	2800      	cmp	r0, #0
900115ee:	f000 809d 	beq.w	9001172c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
900115f2:	6823      	ldr	r3, [r4, #0]
900115f4:	4620      	mov	r0, r4
900115f6:	f8df b198 	ldr.w	fp, [pc, #408]	; 90011790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
900115fa:	f10d 0838 	add.w	r8, sp, #56	; 0x38
900115fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011600:	4798      	blx	r3
90011602:	6823      	ldr	r3, [r4, #0]
90011604:	4620      	mov	r0, r4
90011606:	f8df a18c 	ldr.w	sl, [pc, #396]	; 90011794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
9001160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001160c:	4798      	blx	r3
9001160e:	f8bb 3000 	ldrh.w	r3, [fp]
90011612:	4f5c      	ldr	r7, [pc, #368]	; (90011784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011614:	9301      	str	r3, [sp, #4]
90011616:	f8ba 3000 	ldrh.w	r3, [sl]
9001161a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
9001161e:	4640      	mov	r0, r8
90011620:	9302      	str	r3, [sp, #8]
90011622:	883b      	ldrh	r3, [r7, #0]
90011624:	9303      	str	r3, [sp, #12]
90011626:	4b58      	ldr	r3, [pc, #352]	; (90011788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011628:	881a      	ldrh	r2, [r3, #0]
9001162a:	9305      	str	r3, [sp, #20]
9001162c:	9204      	str	r2, [sp, #16]
9001162e:	f006 fa0b 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011632:	8038      	strh	r0, [r7, #0]
90011634:	4640      	mov	r0, r8
90011636:	f006 fa3b 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001163a:	9b05      	ldr	r3, [sp, #20]
9001163c:	b280      	uxth	r0, r0
9001163e:	8018      	strh	r0, [r3, #0]
90011640:	4b52      	ldr	r3, [pc, #328]	; (9001178c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
90011642:	781b      	ldrb	r3, [r3, #0]
90011644:	2b00      	cmp	r3, #0
90011646:	d174      	bne.n	90011732 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90011648:	883b      	ldrh	r3, [r7, #0]
9001164a:	f8aa 0000 	strh.w	r0, [sl]
9001164e:	f8ab 3000 	strh.w	r3, [fp]
90011652:	4648      	mov	r0, r9
90011654:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90011658:	f006 f962 	bl	90017920 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
9001165c:	2200      	movs	r2, #0
9001165e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
90011662:	4611      	mov	r1, r2
90011664:	4628      	mov	r0, r5
90011666:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
9001166a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
9001166e:	f7ff fb5d 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90011672:	2301      	movs	r3, #1
90011674:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
90011678:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
9001167c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
90011680:	2b00      	cmp	r3, #0
90011682:	dd5c      	ble.n	9001173e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
90011684:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90011688:	2b00      	cmp	r3, #0
9001168a:	dd58      	ble.n	9001173e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
9001168c:	462a      	mov	r2, r5
9001168e:	ab0a      	add	r3, sp, #40	; 0x28
90011690:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011694:	6851      	ldr	r1, [r2, #4]
90011696:	c303      	stmia	r3!, {r0, r1}
90011698:	4631      	mov	r1, r6
9001169a:	a80a      	add	r0, sp, #40	; 0x28
9001169c:	f7ff f92a 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
900116a0:	4b38      	ldr	r3, [pc, #224]	; (90011784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900116a2:	2100      	movs	r1, #0
900116a4:	f9b3 2000 	ldrsh.w	r2, [r3]
900116a8:	4b37      	ldr	r3, [pc, #220]	; (90011788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
900116aa:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900116ae:	aa0a      	add	r2, sp, #40	; 0x28
900116b0:	f9b3 3000 	ldrsh.w	r3, [r3]
900116b4:	910c      	str	r1, [sp, #48]	; 0x30
900116b6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900116ba:	ab08      	add	r3, sp, #32
900116bc:	e892 0003 	ldmia.w	r2, {r0, r1}
900116c0:	e883 0003 	stmia.w	r3, {r0, r1}
900116c4:	4618      	mov	r0, r3
900116c6:	a90c      	add	r1, sp, #48	; 0x30
900116c8:	f7ff f914 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
900116cc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
900116ce:	2b00      	cmp	r3, #0
900116d0:	d13c      	bne.n	9001174c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
900116d2:	2000      	movs	r0, #0
900116d4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
900116d8:	2600      	movs	r6, #0
900116da:	696b      	ldr	r3, [r5, #20]
900116dc:	a908      	add	r1, sp, #32
900116de:	682a      	ldr	r2, [r5, #0]
900116e0:	4628      	mov	r0, r5
900116e2:	9305      	str	r3, [sp, #20]
900116e4:	616e      	str	r6, [r5, #20]
900116e6:	6892      	ldr	r2, [r2, #8]
900116e8:	4790      	blx	r2
900116ea:	9b05      	ldr	r3, [sp, #20]
900116ec:	4652      	mov	r2, sl
900116ee:	4649      	mov	r1, r9
900116f0:	616b      	str	r3, [r5, #20]
900116f2:	4628      	mov	r0, r5
900116f4:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
900116f8:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
900116fc:	f7ff fb16 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90011700:	9a01      	ldr	r2, [sp, #4]
90011702:	4b23      	ldr	r3, [pc, #140]	; (90011790 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90011704:	4620      	mov	r0, r4
90011706:	801a      	strh	r2, [r3, #0]
90011708:	9a02      	ldr	r2, [sp, #8]
9001170a:	4b22      	ldr	r3, [pc, #136]	; (90011794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
9001170c:	801a      	strh	r2, [r3, #0]
9001170e:	9a03      	ldr	r2, [sp, #12]
90011710:	4b1c      	ldr	r3, [pc, #112]	; (90011784 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90011712:	801a      	strh	r2, [r3, #0]
90011714:	4b1c      	ldr	r3, [pc, #112]	; (90011788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90011716:	9a04      	ldr	r2, [sp, #16]
90011718:	801a      	strh	r2, [r3, #0]
9001171a:	6823      	ldr	r3, [r4, #0]
9001171c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
90011720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90011722:	4798      	blx	r3
90011724:	6823      	ldr	r3, [r4, #0]
90011726:	4620      	mov	r0, r4
90011728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001172a:	4798      	blx	r3
9001172c:	b00f      	add	sp, #60	; 0x3c
9001172e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90011732:	883b      	ldrh	r3, [r7, #0]
90011734:	f8ab 0000 	strh.w	r0, [fp]
90011738:	f8aa 3000 	strh.w	r3, [sl]
9001173c:	e789      	b.n	90011652 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
9001173e:	462a      	mov	r2, r5
90011740:	ab0a      	add	r3, sp, #40	; 0x28
90011742:	f852 0f04 	ldr.w	r0, [r2, #4]!
90011746:	6851      	ldr	r1, [r2, #4]
90011748:	c303      	stmia	r3!, {r0, r1}
9001174a:	e7a9      	b.n	900116a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
9001174c:	a807      	add	r0, sp, #28
9001174e:	f006 faeb 	bl	90017d28 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011752:	4606      	mov	r6, r0
90011754:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90011756:	6803      	ldr	r3, [r0, #0]
90011758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001175a:	4798      	blx	r3
9001175c:	4286      	cmp	r6, r0
9001175e:	d1b8      	bne.n	900116d2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
90011760:	f7ff fe6e 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
90011764:	6803      	ldr	r3, [r0, #0]
90011766:	4606      	mov	r6, r0
90011768:	a807      	add	r0, sp, #28
9001176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
9001176c:	9305      	str	r3, [sp, #20]
9001176e:	f006 fadb 	bl	90017d28 <_ZNK8touchgfx6Bitmap9getFormatEv>
90011772:	9b05      	ldr	r3, [sp, #20]
90011774:	4601      	mov	r1, r0
90011776:	4630      	mov	r0, r6
90011778:	4798      	blx	r3
9001177a:	f080 0001 	eor.w	r0, r0, #1
9001177e:	b2c0      	uxtb	r0, r0
90011780:	e7a8      	b.n	900116d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
90011782:	bf00      	nop
90011784:	24026450 	.word	0x24026450
90011788:	24026452 	.word	0x24026452
9001178c:	24026454 	.word	0x24026454
90011790:	24026456 	.word	0x24026456
90011794:	24026458 	.word	0x24026458

90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
90011798:	4b07      	ldr	r3, [pc, #28]	; (900117b8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
9001179a:	b510      	push	{r4, lr}
9001179c:	781b      	ldrb	r3, [r3, #0]
9001179e:	4604      	mov	r4, r0
900117a0:	b13b      	cbz	r3, 900117b2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900117a2:	6803      	ldr	r3, [r0, #0]
900117a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900117a6:	4798      	blx	r3
900117a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900117aa:	4283      	cmp	r3, r0
900117ac:	d101      	bne.n	900117b2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900117ae:	6c20      	ldr	r0, [r4, #64]	; 0x40
900117b0:	bd10      	pop	{r4, pc}
900117b2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
900117b4:	e7fc      	b.n	900117b0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
900117b6:	bf00      	nop
900117b8:	2402645a 	.word	0x2402645a

900117bc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
900117bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900117c0:	461d      	mov	r5, r3
900117c2:	b08a      	sub	sp, #40	; 0x28
900117c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
900117c8:	4690      	mov	r8, r2
900117ca:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
900117ce:	2400      	movs	r4, #0
900117d0:	4607      	mov	r7, r0
900117d2:	fb06 8505 	mla	r5, r6, r5, r8
900117d6:	9404      	str	r4, [sp, #16]
900117d8:	f88d 4020 	strb.w	r4, [sp, #32]
900117dc:	e9cd 3101 	strd	r3, r1, [sp, #4]
900117e0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
900117e4:	f8ad 3018 	strh.w	r3, [sp, #24]
900117e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900117ec:	f8ad 301a 	strh.w	r3, [sp, #26]
900117f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900117f4:	f8ad 301c 	strh.w	r3, [sp, #28]
900117f8:	f7ff ffce 	bl	90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900117fc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011800:	6878      	ldr	r0, [r7, #4]
90011802:	f8ad 601e 	strh.w	r6, [sp, #30]
90011806:	a901      	add	r1, sp, #4
90011808:	9505      	str	r5, [sp, #20]
9001180a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001180e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
90011812:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90011816:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
9001181a:	6803      	ldr	r3, [r0, #0]
9001181c:	685b      	ldr	r3, [r3, #4]
9001181e:	4798      	blx	r3
90011820:	b00a      	add	sp, #40	; 0x28
90011822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90011826 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90011826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001182a:	b08b      	sub	sp, #44	; 0x2c
9001182c:	2400      	movs	r4, #0
9001182e:	4691      	mov	r9, r2
90011830:	461d      	mov	r5, r3
90011832:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90011836:	f44f 6300 	mov.w	r3, #2048	; 0x800
9001183a:	4688      	mov	r8, r1
9001183c:	4607      	mov	r7, r0
9001183e:	9404      	str	r4, [sp, #16]
90011840:	fb06 9505 	mla	r5, r6, r5, r9
90011844:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011848:	f7ff ffa6 	bl	90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001184c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011850:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90011854:	6878      	ldr	r0, [r7, #4]
90011856:	f8ad 3018 	strh.w	r3, [sp, #24]
9001185a:	a901      	add	r1, sp, #4
9001185c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90011860:	9505      	str	r5, [sp, #20]
90011862:	f8ad 301a 	strh.w	r3, [sp, #26]
90011866:	f8ad 401c 	strh.w	r4, [sp, #28]
9001186a:	f8ad 601e 	strh.w	r6, [sp, #30]
9001186e:	f8cd 8010 	str.w	r8, [sp, #16]
90011872:	f8ad 4020 	strh.w	r4, [sp, #32]
90011876:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001187a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
9001187e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90011882:	6803      	ldr	r3, [r0, #0]
90011884:	685b      	ldr	r3, [r3, #4]
90011886:	4798      	blx	r3
90011888:	b00b      	add	sp, #44	; 0x2c
9001188a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

90011890 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
90011890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011894:	b08a      	sub	sp, #40	; 0x28
90011896:	4698      	mov	r8, r3
90011898:	2300      	movs	r3, #0
9001189a:	4606      	mov	r6, r0
9001189c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
900118a0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
900118a4:	2d0b      	cmp	r5, #11
900118a6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
900118aa:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
900118ae:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
900118b2:	9304      	str	r3, [sp, #16]
900118b4:	d137      	bne.n	90011926 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
900118b6:	2380      	movs	r3, #128	; 0x80
900118b8:	f88d 0020 	strb.w	r0, [sp, #32]
900118bc:	4630      	mov	r0, r6
900118be:	9203      	str	r2, [sp, #12]
900118c0:	e9cd 3101 	strd	r3, r1, [sp, #4]
900118c4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
900118c8:	f8ad 3018 	strh.w	r3, [sp, #24]
900118cc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900118d0:	f8ad 301a 	strh.w	r3, [sp, #26]
900118d4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
900118d8:	f8ad 301c 	strh.w	r3, [sp, #28]
900118dc:	f7ff ff5c 	bl	90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900118e0:	2c0b      	cmp	r4, #11
900118e2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
900118e6:	f8ad 701e 	strh.w	r7, [sp, #30]
900118ea:	bf94      	ite	ls
900118ec:	4b19      	ldrls	r3, [pc, #100]	; (90011954 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
900118ee:	2100      	movhi	r1, #0
900118f0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
900118f4:	bf98      	it	ls
900118f6:	5d19      	ldrbls	r1, [r3, r4]
900118f8:	fb02 8307 	mla	r3, r2, r7, r8
900118fc:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
90011900:	10c9      	asrs	r1, r1, #3
90011902:	fb01 0003 	mla	r0, r1, r3, r0
90011906:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
9001190a:	a901      	add	r1, sp, #4
9001190c:	9005      	str	r0, [sp, #20]
9001190e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011912:	2300      	movs	r3, #0
90011914:	6870      	ldr	r0, [r6, #4]
90011916:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
9001191a:	6803      	ldr	r3, [r0, #0]
9001191c:	685b      	ldr	r3, [r3, #4]
9001191e:	4798      	blx	r3
90011920:	b00a      	add	sp, #40	; 0x28
90011922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011926:	2d02      	cmp	r5, #2
90011928:	d109      	bne.n	9001193e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
9001192a:	28ff      	cmp	r0, #255	; 0xff
9001192c:	d105      	bne.n	9001193a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
9001192e:	f1bc 0f00 	cmp.w	ip, #0
90011932:	bf14      	ite	ne
90011934:	2340      	movne	r3, #64	; 0x40
90011936:	2320      	moveq	r3, #32
90011938:	e7be      	b.n	900118b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001193a:	2340      	movs	r3, #64	; 0x40
9001193c:	e7bc      	b.n	900118b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001193e:	28ff      	cmp	r0, #255	; 0xff
90011940:	d105      	bne.n	9001194e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
90011942:	f1bc 0f00 	cmp.w	ip, #0
90011946:	bf14      	ite	ne
90011948:	2304      	movne	r3, #4
9001194a:	2301      	moveq	r3, #1
9001194c:	e7b4      	b.n	900118b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001194e:	2304      	movs	r3, #4
90011950:	e7b2      	b.n	900118b8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90011952:	bf00      	nop
90011954:	900274a0 	.word	0x900274a0

90011958 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90011958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001195c:	b08b      	sub	sp, #44	; 0x2c
9001195e:	461d      	mov	r5, r3
90011960:	2400      	movs	r4, #0
90011962:	4688      	mov	r8, r1
90011964:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
90011968:	4693      	mov	fp, r2
9001196a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
9001196e:	4607      	mov	r7, r0
90011970:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90011974:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
90011978:	9404      	str	r4, [sp, #16]
9001197a:	bf14      	ite	ne
9001197c:	2308      	movne	r3, #8
9001197e:	2302      	moveq	r3, #2
90011980:	fb05 b50a 	mla	r5, r5, sl, fp
90011984:	e9cd 3401 	strd	r3, r4, [sp, #4]
90011988:	f7ff ff06 	bl	90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001198c:	2e0b      	cmp	r6, #11
9001198e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90011992:	a901      	add	r1, sp, #4
90011994:	bf98      	it	ls
90011996:	4b13      	ldrls	r3, [pc, #76]	; (900119e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
90011998:	f8ad a01e 	strh.w	sl, [sp, #30]
9001199c:	bf98      	it	ls
9001199e:	5d9c      	ldrbls	r4, [r3, r6]
900119a0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
900119a4:	10e4      	asrs	r4, r4, #3
900119a6:	f8cd 8010 	str.w	r8, [sp, #16]
900119aa:	f8ad 3018 	strh.w	r3, [sp, #24]
900119ae:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
900119b2:	fb04 0405 	mla	r4, r4, r5, r0
900119b6:	6878      	ldr	r0, [r7, #4]
900119b8:	f8ad 301a 	strh.w	r3, [sp, #26]
900119bc:	2300      	movs	r3, #0
900119be:	9405      	str	r4, [sp, #20]
900119c0:	f8ad 301c 	strh.w	r3, [sp, #28]
900119c4:	f88d 9020 	strb.w	r9, [sp, #32]
900119c8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
900119cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
900119d0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
900119d4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
900119d8:	6803      	ldr	r3, [r0, #0]
900119da:	685b      	ldr	r3, [r3, #4]
900119dc:	4798      	blx	r3
900119de:	b00b      	add	sp, #44	; 0x2c
900119e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900119e4:	900274a0 	.word	0x900274a0

900119e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
900119e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900119ec:	461e      	mov	r6, r3
900119ee:	4b0a      	ldr	r3, [pc, #40]	; (90011a18 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
900119f0:	460f      	mov	r7, r1
900119f2:	4690      	mov	r8, r2
900119f4:	881d      	ldrh	r5, [r3, #0]
900119f6:	f7ff fd23 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
900119fa:	6803      	ldr	r3, [r0, #0]
900119fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900119fe:	4798      	blx	r3
90011a00:	280b      	cmp	r0, #11
90011a02:	bf96      	itet	ls
90011a04:	4b05      	ldrls	r3, [pc, #20]	; (90011a1c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90011a06:	2400      	movhi	r4, #0
90011a08:	5c1c      	ldrbls	r4, [r3, r0]
90011a0a:	fb08 7005 	mla	r0, r8, r5, r7
90011a0e:	10e4      	asrs	r4, r4, #3
90011a10:	fb04 6000 	mla	r0, r4, r0, r6
90011a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011a18:	24026456 	.word	0x24026456
90011a1c:	900274a0 	.word	0x900274a0

90011a20 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
90011a20:	b5f0      	push	{r4, r5, r6, r7, lr}
90011a22:	b08b      	sub	sp, #44	; 0x2c
90011a24:	461f      	mov	r7, r3
90011a26:	4604      	mov	r4, r0
90011a28:	4616      	mov	r6, r2
90011a2a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
90011a2e:	2500      	movs	r5, #0
90011a30:	e9cd 3101 	strd	r3, r1, [sp, #4]
90011a34:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90011a38:	9504      	str	r5, [sp, #16]
90011a3a:	f8ad 3018 	strh.w	r3, [sp, #24]
90011a3e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90011a42:	f8ad 301a 	strh.w	r3, [sp, #26]
90011a46:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90011a4a:	f8ad 301c 	strh.w	r3, [sp, #28]
90011a4e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90011a52:	f88d 3020 	strb.w	r3, [sp, #32]
90011a56:	f7ff fe9f 	bl	90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011a5a:	463a      	mov	r2, r7
90011a5c:	4631      	mov	r1, r6
90011a5e:	4603      	mov	r3, r0
90011a60:	4620      	mov	r0, r4
90011a62:	f7ff ffc1 	bl	900119e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011a66:	4b0e      	ldr	r3, [pc, #56]	; (90011aa0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
90011a68:	9005      	str	r0, [sp, #20]
90011a6a:	881b      	ldrh	r3, [r3, #0]
90011a6c:	f8ad 301e 	strh.w	r3, [sp, #30]
90011a70:	f7ff fce6 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
90011a74:	6803      	ldr	r3, [r0, #0]
90011a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011a78:	4798      	blx	r3
90011a7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90011a7c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
90011a80:	a901      	add	r1, sp, #4
90011a82:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
90011a86:	9304      	str	r3, [sp, #16]
90011a88:	6860      	ldr	r0, [r4, #4]
90011a8a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90011a8e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
90011a92:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
90011a96:	6803      	ldr	r3, [r0, #0]
90011a98:	685b      	ldr	r3, [r3, #4]
90011a9a:	4798      	blx	r3
90011a9c:	b00b      	add	sp, #44	; 0x2c
90011a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011aa0:	24026456 	.word	0x24026456

90011aa4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
90011aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
90011aa6:	b08d      	sub	sp, #52	; 0x34
90011aa8:	2501      	movs	r5, #1
90011aaa:	4604      	mov	r4, r0
90011aac:	466b      	mov	r3, sp
90011aae:	9503      	str	r5, [sp, #12]
90011ab0:	e883 0006 	stmia.w	r3, {r1, r2}
90011ab4:	2300      	movs	r3, #0
90011ab6:	f8bd 6000 	ldrh.w	r6, [sp]
90011aba:	f8bd 7002 	ldrh.w	r7, [sp, #2]
90011abe:	9306      	str	r3, [sp, #24]
90011ac0:	6803      	ldr	r3, [r0, #0]
90011ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011ac4:	4798      	blx	r3
90011ac6:	463a      	mov	r2, r7
90011ac8:	4631      	mov	r1, r6
90011aca:	4603      	mov	r3, r0
90011acc:	4620      	mov	r0, r4
90011ace:	f7ff ff8b 	bl	900119e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011ad2:	6c63      	ldr	r3, [r4, #68]	; 0x44
90011ad4:	9004      	str	r0, [sp, #16]
90011ad6:	9307      	str	r3, [sp, #28]
90011ad8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90011adc:	f8ad 3020 	strh.w	r3, [sp, #32]
90011ae0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90011ae4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90011ae8:	4b0e      	ldr	r3, [pc, #56]	; (90011b24 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
90011aea:	881b      	ldrh	r3, [r3, #0]
90011aec:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90011af0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90011af4:	f7ff fca4 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
90011af8:	6803      	ldr	r3, [r0, #0]
90011afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011afc:	4798      	blx	r3
90011afe:	23ff      	movs	r3, #255	; 0xff
90011b00:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90011b04:	a903      	add	r1, sp, #12
90011b06:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90011b0a:	6860      	ldr	r0, [r4, #4]
90011b0c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90011b10:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90011b14:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90011b18:	6803      	ldr	r3, [r0, #0]
90011b1a:	685b      	ldr	r3, [r3, #4]
90011b1c:	4798      	blx	r3
90011b1e:	6c60      	ldr	r0, [r4, #68]	; 0x44
90011b20:	b00d      	add	sp, #52	; 0x34
90011b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011b24:	24026456 	.word	0x24026456

90011b28 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90011b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011b2c:	b08c      	sub	sp, #48	; 0x30
90011b2e:	461e      	mov	r6, r3
90011b30:	2300      	movs	r3, #0
90011b32:	4604      	mov	r4, r0
90011b34:	466d      	mov	r5, sp
90011b36:	9306      	str	r3, [sp, #24]
90011b38:	6803      	ldr	r3, [r0, #0]
90011b3a:	e885 0006 	stmia.w	r5, {r1, r2}
90011b3e:	2501      	movs	r5, #1
90011b40:	f8bd 7000 	ldrh.w	r7, [sp]
90011b44:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90011b48:	9503      	str	r5, [sp, #12]
90011b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011b4c:	4798      	blx	r3
90011b4e:	4642      	mov	r2, r8
90011b50:	4639      	mov	r1, r7
90011b52:	4603      	mov	r3, r0
90011b54:	4620      	mov	r0, r4
90011b56:	f7ff ff47 	bl	900119e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011b5a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90011b5e:	9004      	str	r0, [sp, #16]
90011b60:	f8ad 3020 	strh.w	r3, [sp, #32]
90011b64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90011b68:	9607      	str	r6, [sp, #28]
90011b6a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90011b6e:	4b10      	ldr	r3, [pc, #64]	; (90011bb0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
90011b70:	881b      	ldrh	r3, [r3, #0]
90011b72:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
90011b76:	9b12      	ldr	r3, [sp, #72]	; 0x48
90011b78:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90011b7c:	f7ff fc60 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
90011b80:	6803      	ldr	r3, [r0, #0]
90011b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011b84:	4798      	blx	r3
90011b86:	23ff      	movs	r3, #255	; 0xff
90011b88:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90011b8c:	a903      	add	r1, sp, #12
90011b8e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90011b92:	6860      	ldr	r0, [r4, #4]
90011b94:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
90011b98:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90011b9c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90011ba0:	6803      	ldr	r3, [r0, #0]
90011ba2:	685b      	ldr	r3, [r3, #4]
90011ba4:	4798      	blx	r3
90011ba6:	4630      	mov	r0, r6
90011ba8:	b00c      	add	sp, #48	; 0x30
90011baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90011bae:	bf00      	nop
90011bb0:	24026456 	.word	0x24026456

90011bb4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
90011bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
90011bb6:	b085      	sub	sp, #20
90011bb8:	4605      	mov	r5, r0
90011bba:	ac02      	add	r4, sp, #8
90011bbc:	e884 0006 	stmia.w	r4, {r1, r2}
90011bc0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90011bc4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90011bc8:	f7ff fde6 	bl	90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011bcc:	4631      	mov	r1, r6
90011bce:	4603      	mov	r3, r0
90011bd0:	463a      	mov	r2, r7
90011bd2:	4628      	mov	r0, r5
90011bd4:	f7ff ff08 	bl	900119e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90011bd8:	4a05      	ldr	r2, [pc, #20]	; (90011bf0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
90011bda:	682b      	ldr	r3, [r5, #0]
90011bdc:	8812      	ldrh	r2, [r2, #0]
90011bde:	9200      	str	r2, [sp, #0]
90011be0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
90011be2:	4603      	mov	r3, r0
90011be4:	4628      	mov	r0, r5
90011be6:	e894 0006 	ldmia.w	r4, {r1, r2}
90011bea:	47b0      	blx	r6
90011bec:	b005      	add	sp, #20
90011bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
90011bf0:	24026456 	.word	0x24026456

90011bf4 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90011bf4:	b570      	push	{r4, r5, r6, lr}
90011bf6:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
90011bfa:	4604      	mov	r4, r0
90011bfc:	b19b      	cbz	r3, 90011c26 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
90011bfe:	2002      	movs	r0, #2
90011c00:	f7ee fd10 	bl	90000624 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90011c04:	2300      	movs	r3, #0
90011c06:	4620      	mov	r0, r4
90011c08:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90011c0c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
90011c10:	6823      	ldr	r3, [r4, #0]
90011c12:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
90011c16:	f7ff fdbf 	bl	90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011c1a:	4601      	mov	r1, r0
90011c1c:	4620      	mov	r0, r4
90011c1e:	462b      	mov	r3, r5
90011c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011c24:	4718      	bx	r3
90011c26:	bd70      	pop	{r4, r5, r6, pc}

90011c28 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90011c28:	b570      	push	{r4, r5, r6, lr}
90011c2a:	4605      	mov	r5, r0
90011c2c:	460c      	mov	r4, r1
90011c2e:	2003      	movs	r0, #3
90011c30:	b149      	cbz	r1, 90011c46 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
90011c32:	f7ee fc8f 	bl	90000554 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90011c36:	6928      	ldr	r0, [r5, #16]
90011c38:	b168      	cbz	r0, 90011c56 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90011c3a:	6803      	ldr	r3, [r0, #0]
90011c3c:	2101      	movs	r1, #1
90011c3e:	695b      	ldr	r3, [r3, #20]
90011c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011c44:	4718      	bx	r3
90011c46:	f7ee fcb9 	bl	900005bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90011c4a:	6928      	ldr	r0, [r5, #16]
90011c4c:	b118      	cbz	r0, 90011c56 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90011c4e:	6803      	ldr	r3, [r0, #0]
90011c50:	4621      	mov	r1, r4
90011c52:	695b      	ldr	r3, [r3, #20]
90011c54:	e7f4      	b.n	90011c40 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90011c56:	bd70      	pop	{r4, r5, r6, pc}

90011c58 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90011c58:	b538      	push	{r3, r4, r5, lr}
90011c5a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
90011c5e:	4604      	mov	r4, r0
90011c60:	460d      	mov	r5, r1
90011c62:	428b      	cmp	r3, r1
90011c64:	d006      	beq.n	90011c74 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
90011c66:	6803      	ldr	r3, [r0, #0]
90011c68:	b929      	cbnz	r1, 90011c76 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
90011c6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
90011c6e:	4798      	blx	r3
90011c70:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
90011c74:	bd38      	pop	{r3, r4, r5, pc}
90011c76:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
90011c7a:	e7f8      	b.n	90011c6e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

90011c7c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
90011c7c:	4b0d      	ldr	r3, [pc, #52]	; (90011cb4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
90011c7e:	b510      	push	{r4, lr}
90011c80:	781b      	ldrb	r3, [r3, #0]
90011c82:	4604      	mov	r4, r0
90011c84:	b95b      	cbnz	r3, 90011c9e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90011c86:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
90011c8a:	2b02      	cmp	r3, #2
90011c8c:	d007      	beq.n	90011c9e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90011c8e:	6840      	ldr	r0, [r0, #4]
90011c90:	f000 f900 	bl	90011e94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
90011c94:	b118      	cbz	r0, 90011c9e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
90011c96:	6862      	ldr	r2, [r4, #4]
90011c98:	7a53      	ldrb	r3, [r2, #9]
90011c9a:	2b00      	cmp	r3, #0
90011c9c:	d0fc      	beq.n	90011c98 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
90011c9e:	f7ef fe73 	bl	90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90011ca2:	4620      	mov	r0, r4
90011ca4:	2100      	movs	r1, #0
90011ca6:	f7ff ffd7 	bl	90011c58 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90011caa:	4620      	mov	r0, r4
90011cac:	f7ff fd74 	bl	90011798 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90011cb0:	bd10      	pop	{r4, pc}
90011cb2:	bf00      	nop
90011cb4:	2402645a 	.word	0x2402645a

90011cb8 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
90011cb8:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
90011cbc:	1a13      	subs	r3, r2, r0
90011cbe:	4258      	negs	r0, r3
90011cc0:	4158      	adcs	r0, r3
90011cc2:	4770      	bx	lr

90011cc4 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90011cc4:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90011cc8:	1a9b      	subs	r3, r3, r2
90011cca:	2b00      	cmp	r3, #0
90011ccc:	bfdc      	itt	le
90011cce:	6882      	ldrle	r2, [r0, #8]
90011cd0:	189b      	addle	r3, r3, r2
90011cd2:	2b01      	cmp	r3, #1
90011cd4:	bfcc      	ite	gt
90011cd6:	2000      	movgt	r0, #0
90011cd8:	2001      	movle	r0, #1
90011cda:	4770      	bx	lr

90011cdc <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90011cdc:	6902      	ldr	r2, [r0, #16]
90011cde:	6843      	ldr	r3, [r0, #4]
90011ce0:	2024      	movs	r0, #36	; 0x24
90011ce2:	fb00 3002 	mla	r0, r0, r2, r3
90011ce6:	4770      	bx	lr

90011ce8 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90011ce8:	6803      	ldr	r3, [r0, #0]
90011cea:	691b      	ldr	r3, [r3, #16]
90011cec:	4718      	bx	r3

90011cee <_ZN8touchgfx13DMA_Interface7executeEv>:
90011cee:	2301      	movs	r3, #1
90011cf0:	b570      	push	{r4, r5, r6, lr}
90011cf2:	7203      	strb	r3, [r0, #8]
90011cf4:	4604      	mov	r4, r0
90011cf6:	6840      	ldr	r0, [r0, #4]
90011cf8:	6803      	ldr	r3, [r0, #0]
90011cfa:	699b      	ldr	r3, [r3, #24]
90011cfc:	4798      	blx	r3
90011cfe:	6803      	ldr	r3, [r0, #0]
90011d00:	4605      	mov	r5, r0
90011d02:	2b40      	cmp	r3, #64	; 0x40
90011d04:	d00c      	beq.n	90011d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90011d06:	d810      	bhi.n	90011d2a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90011d08:	2b04      	cmp	r3, #4
90011d0a:	d01d      	beq.n	90011d48 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
90011d0c:	d804      	bhi.n	90011d18 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
90011d0e:	2b01      	cmp	r3, #1
90011d10:	d006      	beq.n	90011d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90011d12:	2b02      	cmp	r3, #2
90011d14:	d02c      	beq.n	90011d70 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
90011d16:	bd70      	pop	{r4, r5, r6, pc}
90011d18:	2b08      	cmp	r3, #8
90011d1a:	d01d      	beq.n	90011d58 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
90011d1c:	2b20      	cmp	r3, #32
90011d1e:	d1fa      	bne.n	90011d16 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
90011d20:	6823      	ldr	r3, [r4, #0]
90011d22:	4620      	mov	r0, r4
90011d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90011d26:	4798      	blx	r3
90011d28:	e013      	b.n	90011d52 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
90011d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90011d2e:	d0f7      	beq.n	90011d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90011d30:	d804      	bhi.n	90011d3c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
90011d32:	2b80      	cmp	r3, #128	; 0x80
90011d34:	d0f4      	beq.n	90011d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90011d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90011d3a:	e7f0      	b.n	90011d1e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
90011d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
90011d40:	d0ee      	beq.n	90011d20 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90011d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90011d46:	e7e5      	b.n	90011d14 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90011d48:	6823      	ldr	r3, [r4, #0]
90011d4a:	7f01      	ldrb	r1, [r0, #28]
90011d4c:	4620      	mov	r0, r4
90011d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90011d50:	4798      	blx	r3
90011d52:	6823      	ldr	r3, [r4, #0]
90011d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90011d56:	e006      	b.n	90011d66 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90011d58:	6823      	ldr	r3, [r4, #0]
90011d5a:	7f01      	ldrb	r1, [r0, #28]
90011d5c:	4620      	mov	r0, r4
90011d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90011d60:	4798      	blx	r3
90011d62:	6823      	ldr	r3, [r4, #0]
90011d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90011d66:	4629      	mov	r1, r5
90011d68:	4620      	mov	r0, r4
90011d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011d6e:	4718      	bx	r3
90011d70:	6823      	ldr	r3, [r4, #0]
90011d72:	4620      	mov	r0, r4
90011d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90011d76:	4798      	blx	r3
90011d78:	e7f3      	b.n	90011d62 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

90011d7a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
90011d7a:	4770      	bx	lr

90011d7c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
90011d7c:	4770      	bx	lr

90011d7e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
90011d7e:	4770      	bx	lr

90011d80 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
90011d80:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
90011d84:	b510      	push	{r4, lr}
90011d86:	1ad2      	subs	r2, r2, r3
90011d88:	2a00      	cmp	r2, #0
90011d8a:	bfdc      	itt	le
90011d8c:	6884      	ldrle	r4, [r0, #8]
90011d8e:	1912      	addle	r2, r2, r4
90011d90:	2a01      	cmp	r2, #1
90011d92:	dd16      	ble.n	90011dc2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
90011d94:	6842      	ldr	r2, [r0, #4]
90011d96:	2424      	movs	r4, #36	; 0x24
90011d98:	fb04 2303 	mla	r3, r4, r3, r2
90011d9c:	f101 0220 	add.w	r2, r1, #32
90011da0:	f851 4b04 	ldr.w	r4, [r1], #4
90011da4:	4291      	cmp	r1, r2
90011da6:	f843 4b04 	str.w	r4, [r3], #4
90011daa:	d1f9      	bne.n	90011da0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
90011dac:	780a      	ldrb	r2, [r1, #0]
90011dae:	701a      	strb	r2, [r3, #0]
90011db0:	68c3      	ldr	r3, [r0, #12]
90011db2:	6882      	ldr	r2, [r0, #8]
90011db4:	f3bf 8f5b 	dmb	ish
90011db8:	3301      	adds	r3, #1
90011dba:	429a      	cmp	r2, r3
90011dbc:	bfd8      	it	le
90011dbe:	1a9b      	suble	r3, r3, r2
90011dc0:	60c3      	str	r3, [r0, #12]
90011dc2:	bd10      	pop	{r4, pc}

90011dc4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90011dc4:	6903      	ldr	r3, [r0, #16]
90011dc6:	6882      	ldr	r2, [r0, #8]
90011dc8:	f3bf 8f5b 	dmb	ish
90011dcc:	3301      	adds	r3, #1
90011dce:	429a      	cmp	r2, r3
90011dd0:	bfd8      	it	le
90011dd2:	1a9b      	suble	r3, r3, r2
90011dd4:	6103      	str	r3, [r0, #16]
90011dd6:	4770      	bx	lr

90011dd8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90011dd8:	b570      	push	{r4, r5, r6, lr}
90011dda:	4604      	mov	r4, r0
90011ddc:	460e      	mov	r6, r1
90011dde:	6860      	ldr	r0, [r4, #4]
90011de0:	6803      	ldr	r3, [r0, #0]
90011de2:	685b      	ldr	r3, [r3, #4]
90011de4:	4798      	blx	r3
90011de6:	2800      	cmp	r0, #0
90011de8:	d1f9      	bne.n	90011dde <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
90011dea:	4d0d      	ldr	r5, [pc, #52]	; (90011e20 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
90011dec:	6828      	ldr	r0, [r5, #0]
90011dee:	6803      	ldr	r3, [r0, #0]
90011df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90011df2:	4798      	blx	r3
90011df4:	f7ef fdd6 	bl	900019a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90011df8:	6828      	ldr	r0, [r5, #0]
90011dfa:	2101      	movs	r1, #1
90011dfc:	f7ff ff2c 	bl	90011c58 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
90011e00:	6860      	ldr	r0, [r4, #4]
90011e02:	4631      	mov	r1, r6
90011e04:	6803      	ldr	r3, [r0, #0]
90011e06:	689b      	ldr	r3, [r3, #8]
90011e08:	4798      	blx	r3
90011e0a:	6823      	ldr	r3, [r4, #0]
90011e0c:	4620      	mov	r0, r4
90011e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90011e10:	4798      	blx	r3
90011e12:	6828      	ldr	r0, [r5, #0]
90011e14:	6803      	ldr	r3, [r0, #0]
90011e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90011e1c:	4718      	bx	r3
90011e1e:	bf00      	nop
90011e20:	2402645c 	.word	0x2402645c

90011e24 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90011e24:	b508      	push	{r3, lr}
90011e26:	f7ef fdaf 	bl	90001988 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90011e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
90011e2e:	f7ef bdb3 	b.w	90001998 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90011e32 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
90011e32:	b510      	push	{r4, lr}
90011e34:	4604      	mov	r4, r0
90011e36:	2114      	movs	r1, #20
90011e38:	f011 fbe7 	bl	9002360a <_ZdlPvj>
90011e3c:	4620      	mov	r0, r4
90011e3e:	bd10      	pop	{r4, pc}

90011e40 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
90011e40:	b570      	push	{r4, r5, r6, lr}
90011e42:	4604      	mov	r4, r0
90011e44:	6840      	ldr	r0, [r0, #4]
90011e46:	6803      	ldr	r3, [r0, #0]
90011e48:	681b      	ldr	r3, [r3, #0]
90011e4a:	4798      	blx	r3
90011e4c:	4605      	mov	r5, r0
90011e4e:	b930      	cbnz	r0, 90011e5e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90011e50:	7a23      	ldrb	r3, [r4, #8]
90011e52:	b123      	cbz	r3, 90011e5e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90011e54:	6860      	ldr	r0, [r4, #4]
90011e56:	6803      	ldr	r3, [r0, #0]
90011e58:	695b      	ldr	r3, [r3, #20]
90011e5a:	4798      	blx	r3
90011e5c:	7225      	strb	r5, [r4, #8]
90011e5e:	6860      	ldr	r0, [r4, #4]
90011e60:	6803      	ldr	r3, [r0, #0]
90011e62:	681b      	ldr	r3, [r3, #0]
90011e64:	4798      	blx	r3
90011e66:	b928      	cbnz	r0, 90011e74 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
90011e68:	6823      	ldr	r3, [r4, #0]
90011e6a:	4620      	mov	r0, r4
90011e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90011e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011e72:	4718      	bx	r3
90011e74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90011e78:	f7ef bd9c 	b.w	900019b4 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

90011e7c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
90011e7c:	b510      	push	{r4, lr}
90011e7e:	6082      	str	r2, [r0, #8]
90011e80:	2200      	movs	r2, #0
90011e82:	4c03      	ldr	r4, [pc, #12]	; (90011e90 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
90011e84:	e9c0 2203 	strd	r2, r2, [r0, #12]
90011e88:	e9c0 4100 	strd	r4, r1, [r0]
90011e8c:	bd10      	pop	{r4, pc}
90011e8e:	bf00      	nop
90011e90:	900274b4 	.word	0x900274b4

90011e94 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
90011e94:	6840      	ldr	r0, [r0, #4]
90011e96:	6803      	ldr	r3, [r0, #0]
90011e98:	681b      	ldr	r3, [r3, #0]
90011e9a:	4718      	bx	r3

90011e9c <_ZNK8touchgfx5Image17invalidateContentEv>:
90011e9c:	b508      	push	{r3, lr}
90011e9e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90011ea2:	b10b      	cbz	r3, 90011ea8 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
90011ea4:	f7f0 fa00 	bl	900022a8 <_ZNK8touchgfx8Drawable17invalidateContentEv>
90011ea8:	bd08      	pop	{r3, pc}

90011eaa <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
90011eaa:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
90011eae:	4770      	bx	lr

90011eb0 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
90011eb0:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
90011eb4:	4770      	bx	lr

90011eb6 <_ZN8touchgfx13ScalableImageD1Ev>:
90011eb6:	4770      	bx	lr

90011eb8 <_ZN8touchgfx13ScalableImageD0Ev>:
90011eb8:	b510      	push	{r4, lr}
90011eba:	4604      	mov	r4, r0
90011ebc:	212c      	movs	r1, #44	; 0x2c
90011ebe:	f011 fba4 	bl	9002360a <_ZdlPvj>
90011ec2:	4620      	mov	r0, r4
90011ec4:	bd10      	pop	{r4, pc}

90011ec6 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
90011ec6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90011ec8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90011ecc:	4605      	mov	r5, r0
90011ece:	2bff      	cmp	r3, #255	; 0xff
90011ed0:	d11e      	bne.n	90011f10 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
90011ed2:	f101 0426 	add.w	r4, r1, #38	; 0x26
90011ed6:	4668      	mov	r0, sp
90011ed8:	4621      	mov	r1, r4
90011eda:	f005 fe1d 	bl	90017b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90011ede:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
90011ee2:	4620      	mov	r0, r4
90011ee4:	f005 fdb0 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90011ee8:	4286      	cmp	r6, r0
90011eea:	d111      	bne.n	90011f10 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
90011eec:	4621      	mov	r1, r4
90011eee:	a802      	add	r0, sp, #8
90011ef0:	f005 fe12 	bl	90017b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90011ef4:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
90011ef8:	4620      	mov	r0, r4
90011efa:	f005 fdd9 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90011efe:	4286      	cmp	r6, r0
90011f00:	d106      	bne.n	90011f10 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
90011f02:	4621      	mov	r1, r4
90011f04:	4628      	mov	r0, r5
90011f06:	f005 fe07 	bl	90017b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90011f0a:	4628      	mov	r0, r5
90011f0c:	b004      	add	sp, #16
90011f0e:	bd70      	pop	{r4, r5, r6, pc}
90011f10:	2300      	movs	r3, #0
90011f12:	802b      	strh	r3, [r5, #0]
90011f14:	806b      	strh	r3, [r5, #2]
90011f16:	80ab      	strh	r3, [r5, #4]
90011f18:	80eb      	strh	r3, [r5, #6]
90011f1a:	e7f6      	b.n	90011f0a <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

90011f1c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
90011f1c:	b538      	push	{r3, r4, r5, lr}
90011f1e:	2300      	movs	r3, #0
90011f20:	2501      	movs	r5, #1
90011f22:	4604      	mov	r4, r0
90011f24:	8083      	strh	r3, [r0, #4]
90011f26:	80c3      	strh	r3, [r0, #6]
90011f28:	8103      	strh	r3, [r0, #8]
90011f2a:	8143      	strh	r3, [r0, #10]
90011f2c:	8183      	strh	r3, [r0, #12]
90011f2e:	81c3      	strh	r3, [r0, #14]
90011f30:	8203      	strh	r3, [r0, #16]
90011f32:	8243      	strh	r3, [r0, #18]
90011f34:	61c3      	str	r3, [r0, #28]
90011f36:	8403      	strh	r3, [r0, #32]
90011f38:	8443      	strh	r3, [r0, #34]	; 0x22
90011f3a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
90011f3e:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
90011f42:	e9c0 3305 	strd	r3, r3, [r0, #20]
90011f46:	4b07      	ldr	r3, [pc, #28]	; (90011f64 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
90011f48:	6003      	str	r3, [r0, #0]
90011f4a:	880b      	ldrh	r3, [r1, #0]
90011f4c:	84c3      	strh	r3, [r0, #38]	; 0x26
90011f4e:	23ff      	movs	r3, #255	; 0xff
90011f50:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
90011f54:	f000 ffe5 	bl	90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90011f58:	4b03      	ldr	r3, [pc, #12]	; (90011f68 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
90011f5a:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
90011f5e:	4620      	mov	r0, r4
90011f60:	6023      	str	r3, [r4, #0]
90011f62:	bd38      	pop	{r3, r4, r5, pc}
90011f64:	900276c8 	.word	0x900276c8
90011f68:	900274d8 	.word	0x900274d8

90011f6c <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
90011f6c:	4603      	mov	r3, r0
90011f6e:	3026      	adds	r0, #38	; 0x26
90011f70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
90011f74:	b90b      	cbnz	r3, 90011f7a <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
90011f76:	f003 be97 	b.w	90015ca8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
90011f7a:	f003 bea5 	b.w	90015cc8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

90011f80 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
90011f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90011f84:	4604      	mov	r4, r0
90011f86:	469b      	mov	fp, r3
90011f88:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
90011f8c:	b0b3      	sub	sp, #204	; 0xcc
90011f8e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90011f92:	f9b1 6000 	ldrsh.w	r6, [r1]
90011f96:	8888      	ldrh	r0, [r1, #4]
90011f98:	9206      	str	r2, [sp, #24]
90011f9a:	2200      	movs	r2, #0
90011f9c:	4430      	add	r0, r6
90011f9e:	9211      	str	r2, [sp, #68]	; 0x44
90011fa0:	b280      	uxth	r0, r0
90011fa2:	fa0f fe80 	sxth.w	lr, r0
90011fa6:	4596      	cmp	lr, r2
90011fa8:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
90011fac:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
90011fb0:	f340 811a 	ble.w	900121e8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90011fb4:	45b4      	cmp	ip, r6
90011fb6:	f340 8117 	ble.w	900121e8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90011fba:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90011fbe:	88ca      	ldrh	r2, [r1, #6]
90011fc0:	442a      	add	r2, r5
90011fc2:	b292      	uxth	r2, r2
90011fc4:	b211      	sxth	r1, r2
90011fc6:	2900      	cmp	r1, #0
90011fc8:	f340 810e 	ble.w	900121e8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90011fcc:	42ab      	cmp	r3, r5
90011fce:	f340 810b 	ble.w	900121e8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90011fd2:	45f4      	cmp	ip, lr
90011fd4:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
90011fd8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90011fdc:	bfb8      	it	lt
90011fde:	fa1f f08c 	uxthlt.w	r0, ip
90011fe2:	428b      	cmp	r3, r1
90011fe4:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
90011fe8:	bfb8      	it	lt
90011fea:	b29a      	uxthlt	r2, r3
90011fec:	1b80      	subs	r0, r0, r6
90011fee:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
90011ff2:	1b52      	subs	r2, r2, r5
90011ff4:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
90011ff8:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
90011ffc:	ab11      	add	r3, sp, #68	; 0x44
90011ffe:	ad13      	add	r5, sp, #76	; 0x4c
90012000:	6822      	ldr	r2, [r4, #0]
90012002:	1d26      	adds	r6, r4, #4
90012004:	9307      	str	r3, [sp, #28]
90012006:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90012008:	e893 0003 	ldmia.w	r3, {r0, r1}
9001200c:	e885 0003 	stmia.w	r5, {r0, r1}
90012010:	4629      	mov	r1, r5
90012012:	4620      	mov	r0, r4
90012014:	4790      	blx	r2
90012016:	4621      	mov	r1, r4
90012018:	a815      	add	r0, sp, #84	; 0x54
9001201a:	f003 fda1 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001201e:	a815      	add	r0, sp, #84	; 0x54
90012020:	f002 fb20 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90012024:	9b07      	ldr	r3, [sp, #28]
90012026:	4631      	mov	r1, r6
90012028:	4618      	mov	r0, r3
9001202a:	f002 fb5f 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001202e:	4628      	mov	r0, r5
90012030:	f104 0526 	add.w	r5, r4, #38	; 0x26
90012034:	f002 fb16 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90012038:	4628      	mov	r0, r5
9001203a:	f005 fdf1 	bl	90017c20 <_ZNK8touchgfx6Bitmap7getDataEv>
9001203e:	9007      	str	r0, [sp, #28]
90012040:	2800      	cmp	r0, #0
90012042:	f000 80ce 	beq.w	900121e2 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
90012046:	f8db 2000 	ldr.w	r2, [fp]
9001204a:	a90d      	add	r1, sp, #52	; 0x34
9001204c:	a809      	add	r0, sp, #36	; 0x24
9001204e:	9209      	str	r2, [sp, #36]	; 0x24
90012050:	f8db 2004 	ldr.w	r2, [fp, #4]
90012054:	920a      	str	r2, [sp, #40]	; 0x28
90012056:	f8db 2008 	ldr.w	r2, [fp, #8]
9001205a:	920b      	str	r2, [sp, #44]	; 0x2c
9001205c:	f8db 200c 	ldr.w	r2, [fp, #12]
90012060:	920c      	str	r2, [sp, #48]	; 0x30
90012062:	f8da 2000 	ldr.w	r2, [sl]
90012066:	920d      	str	r2, [sp, #52]	; 0x34
90012068:	f8da 2004 	ldr.w	r2, [sl, #4]
9001206c:	920e      	str	r2, [sp, #56]	; 0x38
9001206e:	f8da 2008 	ldr.w	r2, [sl, #8]
90012072:	920f      	str	r2, [sp, #60]	; 0x3c
90012074:	f8da 200c 	ldr.w	r2, [sl, #12]
90012078:	9210      	str	r2, [sp, #64]	; 0x40
9001207a:	4632      	mov	r2, r6
9001207c:	f002 fb1a 	bl	900146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90012080:	4632      	mov	r2, r6
90012082:	a90e      	add	r1, sp, #56	; 0x38
90012084:	a80a      	add	r0, sp, #40	; 0x28
90012086:	f002 fb15 	bl	900146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
9001208a:	4632      	mov	r2, r6
9001208c:	a90f      	add	r1, sp, #60	; 0x3c
9001208e:	a80b      	add	r0, sp, #44	; 0x2c
90012090:	f002 fb10 	bl	900146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90012094:	4632      	mov	r2, r6
90012096:	a910      	add	r1, sp, #64	; 0x40
90012098:	a80c      	add	r0, sp, #48	; 0x30
9001209a:	f002 fb0b 	bl	900146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
9001209e:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
900120a2:	edd7 3a00 	vldr	s7, [r7]
900120a6:	eef0 6a67 	vmov.f32	s13, s15
900120aa:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
900120ae:	ed97 5a01 	vldr	s10, [r7, #4]
900120b2:	eeb0 7a67 	vmov.f32	s14, s15
900120b6:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
900120ba:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
900120be:	edd9 2a00 	vldr	s5, [r9]
900120c2:	eeb0 6a67 	vmov.f32	s12, s15
900120c6:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
900120ca:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
900120ce:	ed98 3a00 	vldr	s6, [r8]
900120d2:	ed99 4a01 	vldr	s8, [r9, #4]
900120d6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
900120da:	edd8 4a01 	vldr	s9, [r8, #4]
900120de:	edd9 5a02 	vldr	s11, [r9, #8]
900120e2:	f8d9 e00c 	ldr.w	lr, [r9, #12]
900120e6:	ee16 6a10 	vmov	r6, s12
900120ea:	eeb0 6a67 	vmov.f32	s12, s15
900120ee:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
900120f2:	f8d8 c00c 	ldr.w	ip, [r8, #12]
900120f6:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
900120fa:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
900120fe:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
90012102:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
90012106:	ee16 0a10 	vmov	r0, s12
9001210a:	eeb0 6a67 	vmov.f32	s12, s15
9001210e:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
90012112:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
90012116:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
9001211a:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
9001211e:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
90012122:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
90012126:	ee16 1a10 	vmov	r1, s12
9001212a:	eeb0 6a67 	vmov.f32	s12, s15
9001212e:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
90012132:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
90012136:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
9001213a:	f8d7 a008 	ldr.w	sl, [r7, #8]
9001213e:	f8d8 b008 	ldr.w	fp, [r8, #8]
90012142:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
90012146:	68ff      	ldr	r7, [r7, #12]
90012148:	ee16 2a10 	vmov	r2, s12
9001214c:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
90012150:	9624      	str	r6, [sp, #144]	; 0x90
90012152:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
90012156:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
9001215a:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
9001215e:	4628      	mov	r0, r5
90012160:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
90012164:	9b06      	ldr	r3, [sp, #24]
90012166:	922d      	str	r2, [sp, #180]	; 0xb4
90012168:	4a21      	ldr	r2, [pc, #132]	; (900121f0 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
9001216a:	9317      	str	r3, [sp, #92]	; 0x5c
9001216c:	8812      	ldrh	r2, [r2, #0]
9001216e:	9b07      	ldr	r3, [sp, #28]
90012170:	9218      	str	r2, [sp, #96]	; 0x60
90012172:	9319      	str	r3, [sp, #100]	; 0x64
90012174:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
90012178:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
9001217c:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
90012180:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
90012184:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
90012188:	9731      	str	r7, [sp, #196]	; 0xc4
9001218a:	f005 fd79 	bl	90017c80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001218e:	901a      	str	r0, [sp, #104]	; 0x68
90012190:	4628      	mov	r0, r5
90012192:	f005 fc59 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012196:	901b      	str	r0, [sp, #108]	; 0x6c
90012198:	4628      	mov	r0, r5
9001219a:	f005 fc89 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001219e:	901c      	str	r0, [sp, #112]	; 0x70
900121a0:	4628      	mov	r0, r5
900121a2:	f005 fc51 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
900121a6:	4b13      	ldr	r3, [pc, #76]	; (900121f4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
900121a8:	901d      	str	r0, [sp, #116]	; 0x74
900121aa:	681b      	ldr	r3, [r3, #0]
900121ac:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900121b0:	b10a      	cbz	r2, 900121b6 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
900121b2:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
900121b4:	b905      	cbnz	r5, 900121b8 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
900121b6:	689d      	ldr	r5, [r3, #8]
900121b8:	682b      	ldr	r3, [r5, #0]
900121ba:	4620      	mov	r0, r4
900121bc:	6c1e      	ldr	r6, [r3, #64]	; 0x40
900121be:	f7ff fed5 	bl	90011f6c <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
900121c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
900121c6:	aa1e      	add	r2, sp, #120	; 0x78
900121c8:	a917      	add	r1, sp, #92	; 0x5c
900121ca:	9304      	str	r3, [sp, #16]
900121cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
900121d0:	e9cd 0302 	strd	r0, r3, [sp, #8]
900121d4:	ab13      	add	r3, sp, #76	; 0x4c
900121d6:	4628      	mov	r0, r5
900121d8:	9301      	str	r3, [sp, #4]
900121da:	ab15      	add	r3, sp, #84	; 0x54
900121dc:	9300      	str	r3, [sp, #0]
900121de:	ab19      	add	r3, sp, #100	; 0x64
900121e0:	47b0      	blx	r6
900121e2:	b033      	add	sp, #204	; 0xcc
900121e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900121e8:	2300      	movs	r3, #0
900121ea:	9312      	str	r3, [sp, #72]	; 0x48
900121ec:	e706      	b.n	90011ffc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
900121ee:	bf00      	nop
900121f0:	24026456 	.word	0x24026456
900121f4:	2402645c 	.word	0x2402645c

900121f8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
900121f8:	b570      	push	{r4, r5, r6, lr}
900121fa:	ed2d 8b04 	vpush	{d8-d9}
900121fe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90012202:	b098      	sub	sp, #96	; 0x60
90012204:	4604      	mov	r4, r0
90012206:	460e      	mov	r6, r1
90012208:	2b00      	cmp	r3, #0
9001220a:	d065      	beq.n	900122d8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
9001220c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90012210:	f100 0526 	add.w	r5, r0, #38	; 0x26
90012214:	ed9f 8a37 	vldr	s16, [pc, #220]	; 900122f4 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
90012218:	ee09 3a10 	vmov	s18, r3
9001221c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90012220:	4628      	mov	r0, r5
90012222:	ee08 3a90 	vmov	s17, r3
90012226:	4b34      	ldr	r3, [pc, #208]	; (900122f8 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
90012228:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
9001222c:	930c      	str	r3, [sp, #48]	; 0x30
9001222e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
90012232:	930d      	str	r3, [sp, #52]	; 0x34
90012234:	930e      	str	r3, [sp, #56]	; 0x38
90012236:	ee39 9a08 	vadd.f32	s18, s18, s16
9001223a:	930f      	str	r3, [sp, #60]	; 0x3c
9001223c:	f005 fc04 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012240:	ee07 0a90 	vmov	s15, r0
90012244:	4628      	mov	r0, r5
90012246:	ee78 8a88 	vadd.f32	s17, s17, s16
9001224a:	eef8 9ae7 	vcvt.f32.s32	s19, s15
9001224e:	f005 fc2f 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012252:	4b2a      	ldr	r3, [pc, #168]	; (900122fc <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
90012254:	ee07 0a90 	vmov	s15, r0
90012258:	781b      	ldrb	r3, [r3, #0]
9001225a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9001225e:	eef0 7a48 	vmov.f32	s15, s16
90012262:	2b01      	cmp	r3, #1
90012264:	d13c      	bne.n	900122e0 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
90012266:	eef0 6a69 	vmov.f32	s13, s19
9001226a:	ee19 3a90 	vmov	r3, s19
9001226e:	eeb0 6a47 	vmov.f32	s12, s14
90012272:	eef0 5a47 	vmov.f32	s11, s14
90012276:	eef0 9a48 	vmov.f32	s19, s16
9001227a:	eeb0 7a48 	vmov.f32	s14, s16
9001227e:	9314      	str	r3, [sp, #80]	; 0x50
90012280:	ab14      	add	r3, sp, #80	; 0x50
90012282:	2200      	movs	r2, #0
90012284:	4631      	mov	r1, r6
90012286:	9303      	str	r3, [sp, #12]
90012288:	ab10      	add	r3, sp, #64	; 0x40
9001228a:	4620      	mov	r0, r4
9001228c:	edcd 7a04 	vstr	s15, [sp, #16]
90012290:	9302      	str	r3, [sp, #8]
90012292:	ab0c      	add	r3, sp, #48	; 0x30
90012294:	ed8d 9a05 	vstr	s18, [sp, #20]
90012298:	9301      	str	r3, [sp, #4]
9001229a:	ab08      	add	r3, sp, #32
9001229c:	ed8d 9a06 	vstr	s18, [sp, #24]
900122a0:	9300      	str	r3, [sp, #0]
900122a2:	ab04      	add	r3, sp, #16
900122a4:	edcd 7a07 	vstr	s15, [sp, #28]
900122a8:	edcd 7a08 	vstr	s15, [sp, #32]
900122ac:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
900122b0:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
900122b4:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
900122b8:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
900122bc:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
900122c0:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
900122c4:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
900122c8:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
900122cc:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
900122d0:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
900122d4:	f7ff fe54 	bl	90011f80 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
900122d8:	b018      	add	sp, #96	; 0x60
900122da:	ecbd 8b04 	vpop	{d8-d9}
900122de:	bd70      	pop	{r4, r5, r6, pc}
900122e0:	eef0 6a47 	vmov.f32	s13, s14
900122e4:	ee18 3a10 	vmov	r3, s16
900122e8:	eef0 5a69 	vmov.f32	s11, s19
900122ec:	eeb0 6a48 	vmov.f32	s12, s16
900122f0:	e7c5      	b.n	9001227e <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
900122f2:	bf00      	nop
900122f4:	00000000 	.word	0x00000000
900122f8:	42c80000 	.word	0x42c80000
900122fc:	24026454 	.word	0x24026454

90012300 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
90012300:	2000      	movs	r0, #0
90012302:	4770      	bx	lr

90012304 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
90012304:	4b07      	ldr	r3, [pc, #28]	; (90012324 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
90012306:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90012308:	881b      	ldrh	r3, [r3, #0]
9001230a:	4293      	cmp	r3, r2
9001230c:	bf81      	itttt	hi
9001230e:	4b06      	ldrhi	r3, [pc, #24]	; (90012328 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90012310:	681b      	ldrhi	r3, [r3, #0]
90012312:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
90012316:	7858      	ldrbhi	r0, [r3, #1]
90012318:	bf8c      	ite	hi
9001231a:	f000 0003 	andhi.w	r0, r0, #3
9001231e:	2000      	movls	r0, #0
90012320:	4770      	bx	lr
90012322:	bf00      	nop
90012324:	240264b0 	.word	0x240264b0
90012328:	240264ac 	.word	0x240264ac

9001232c <_ZN8touchgfx8TextAreaD1Ev>:
9001232c:	4770      	bx	lr
	...

90012330 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90012330:	4b11      	ldr	r3, [pc, #68]	; (90012378 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90012332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012336:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90012338:	4604      	mov	r4, r0
9001233a:	881b      	ldrh	r3, [r3, #0]
9001233c:	428b      	cmp	r3, r1
9001233e:	d918      	bls.n	90012372 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90012340:	6803      	ldr	r3, [r0, #0]
90012342:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90012344:	4b0d      	ldr	r3, [pc, #52]	; (9001237c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
90012346:	6818      	ldr	r0, [r3, #0]
90012348:	f7f3 fcce 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
9001234c:	6823      	ldr	r3, [r4, #0]
9001234e:	4606      	mov	r6, r0
90012350:	4620      	mov	r0, r4
90012352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012354:	4798      	blx	r3
90012356:	6823      	ldr	r3, [r4, #0]
90012358:	4607      	mov	r7, r0
9001235a:	4620      	mov	r0, r4
9001235c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90012360:	4798      	blx	r3
90012362:	463a      	mov	r2, r7
90012364:	4603      	mov	r3, r0
90012366:	4631      	mov	r1, r6
90012368:	4620      	mov	r0, r4
9001236a:	46ac      	mov	ip, r5
9001236c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90012370:	4760      	bx	ip
90012372:	2000      	movs	r0, #0
90012374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012378:	240264b0 	.word	0x240264b0
9001237c:	240264b8 	.word	0x240264b8

90012380 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
90012380:	4b18      	ldr	r3, [pc, #96]	; (900123e4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
90012382:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90012386:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90012388:	4604      	mov	r4, r0
9001238a:	881b      	ldrh	r3, [r3, #0]
9001238c:	428b      	cmp	r3, r1
9001238e:	d926      	bls.n	900123de <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
90012390:	4b15      	ldr	r3, [pc, #84]	; (900123e8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
90012392:	681b      	ldr	r3, [r3, #0]
90012394:	eb03 0241 	add.w	r2, r3, r1, lsl #1
90012398:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
9001239c:	4b13      	ldr	r3, [pc, #76]	; (900123ec <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
9001239e:	7855      	ldrb	r5, [r2, #1]
900123a0:	681b      	ldr	r3, [r3, #0]
900123a2:	f3c5 0581 	ubfx	r5, r5, #2, #2
900123a6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
900123aa:	6833      	ldr	r3, [r6, #0]
900123ac:	69df      	ldr	r7, [r3, #28]
900123ae:	4b10      	ldr	r3, [pc, #64]	; (900123f0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
900123b0:	6818      	ldr	r0, [r3, #0]
900123b2:	f7f3 fc99 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
900123b6:	6823      	ldr	r3, [r4, #0]
900123b8:	4680      	mov	r8, r0
900123ba:	4620      	mov	r0, r4
900123bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900123be:	4798      	blx	r3
900123c0:	6823      	ldr	r3, [r4, #0]
900123c2:	4681      	mov	r9, r0
900123c4:	4620      	mov	r0, r4
900123c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900123ca:	4798      	blx	r3
900123cc:	464b      	mov	r3, r9
900123ce:	9000      	str	r0, [sp, #0]
900123d0:	4642      	mov	r2, r8
900123d2:	4629      	mov	r1, r5
900123d4:	4630      	mov	r0, r6
900123d6:	47b8      	blx	r7
900123d8:	b003      	add	sp, #12
900123da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900123de:	2000      	movs	r0, #0
900123e0:	e7fa      	b.n	900123d8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
900123e2:	bf00      	nop
900123e4:	240264b0 	.word	0x240264b0
900123e8:	240264ac 	.word	0x240264ac
900123ec:	240264b4 	.word	0x240264b4
900123f0:	240264b8 	.word	0x240264b8

900123f4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
900123f4:	b40e      	push	{r1, r2, r3}
900123f6:	4b30      	ldr	r3, [pc, #192]	; (900124b8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
900123f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900123fc:	881a      	ldrh	r2, [r3, #0]
900123fe:	b09d      	sub	sp, #116	; 0x74
90012400:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90012402:	4604      	mov	r4, r0
90012404:	429a      	cmp	r2, r3
90012406:	d954      	bls.n	900124b2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
90012408:	aa26      	add	r2, sp, #152	; 0x98
9001240a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 900124bc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
9001240e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 900124c0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90012412:	9202      	str	r2, [sp, #8]
90012414:	f8d9 2000 	ldr.w	r2, [r9]
90012418:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
9001241c:	f8d8 3000 	ldr.w	r3, [r8]
90012420:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90012424:	682b      	ldr	r3, [r5, #0]
90012426:	4628      	mov	r0, r5
90012428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001242a:	4798      	blx	r3
9001242c:	4606      	mov	r6, r0
9001242e:	b207      	sxth	r7, r0
90012430:	a803      	add	r0, sp, #12
90012432:	f003 ff77 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
90012436:	682b      	ldr	r3, [r5, #0]
90012438:	4628      	mov	r0, r5
9001243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001243c:	4798      	blx	r3
9001243e:	682b      	ldr	r3, [r5, #0]
90012440:	4682      	mov	sl, r0
90012442:	4628      	mov	r0, r5
90012444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90012446:	4798      	blx	r3
90012448:	4653      	mov	r3, sl
9001244a:	9000      	str	r0, [sp, #0]
9001244c:	a803      	add	r0, sp, #12
9001244e:	9a02      	ldr	r2, [sp, #8]
90012450:	9925      	ldr	r1, [sp, #148]	; 0x94
90012452:	f003 ffc2 	bl	900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90012456:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90012458:	f8d9 3000 	ldr.w	r3, [r9]
9001245c:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90012460:	8925      	ldrh	r5, [r4, #8]
90012462:	eb03 0142 	add.w	r1, r3, r2, lsl #1
90012466:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
9001246a:	eba5 050c 	sub.w	r5, r5, ip
9001246e:	784a      	ldrb	r2, [r1, #1]
90012470:	f8d8 3000 	ldr.w	r3, [r8]
90012474:	b22d      	sxth	r5, r5
90012476:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
9001247a:	f3c2 0281 	ubfx	r2, r2, #2, #2
9001247e:	9500      	str	r5, [sp, #0]
90012480:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90012484:	a803      	add	r0, sp, #12
90012486:	f001 fdfb 	bl	90014080 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
9001248a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
9001248e:	b203      	sxth	r3, r0
90012490:	18b9      	adds	r1, r7, r2
90012492:	2900      	cmp	r1, #0
90012494:	dd0b      	ble.n	900124ae <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
90012496:	3b01      	subs	r3, #1
90012498:	fb13 f302 	smulbb	r3, r3, r2
9001249c:	fb16 3300 	smlabb	r3, r6, r0, r3
900124a0:	b21f      	sxth	r7, r3
900124a2:	4638      	mov	r0, r7
900124a4:	b01d      	add	sp, #116	; 0x74
900124a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900124aa:	b003      	add	sp, #12
900124ac:	4770      	bx	lr
900124ae:	2b00      	cmp	r3, #0
900124b0:	dcf7      	bgt.n	900124a2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
900124b2:	2700      	movs	r7, #0
900124b4:	e7f5      	b.n	900124a2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
900124b6:	bf00      	nop
900124b8:	240264b0 	.word	0x240264b0
900124bc:	240264ac 	.word	0x240264ac
900124c0:	240264b4 	.word	0x240264b4

900124c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
900124c4:	4bbd      	ldr	r3, [pc, #756]	; (900127bc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
900124c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900124ca:	460c      	mov	r4, r1
900124cc:	881b      	ldrh	r3, [r3, #0]
900124ce:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
900124d0:	b0a9      	sub	sp, #164	; 0xa4
900124d2:	4680      	mov	r8, r0
900124d4:	428b      	cmp	r3, r1
900124d6:	d809      	bhi.n	900124ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
900124d8:	2300      	movs	r3, #0
900124da:	f04f 32ff 	mov.w	r2, #4294967295
900124de:	6083      	str	r3, [r0, #8]
900124e0:	e9c0 3200 	strd	r3, r2, [r0]
900124e4:	4640      	mov	r0, r8
900124e6:	b029      	add	sp, #164	; 0xa4
900124e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900124ec:	4eb4      	ldr	r6, [pc, #720]	; (900127c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
900124ee:	6833      	ldr	r3, [r6, #0]
900124f0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
900124f4:	4bb3      	ldr	r3, [pc, #716]	; (900127c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
900124f6:	681b      	ldr	r3, [r3, #0]
900124f8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
900124fc:	4bb2      	ldr	r3, [pc, #712]	; (900127c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
900124fe:	6818      	ldr	r0, [r3, #0]
90012500:	f7f3 fbf2 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
90012504:	682b      	ldr	r3, [r5, #0]
90012506:	4681      	mov	r9, r0
90012508:	4628      	mov	r0, r5
9001250a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001250c:	4798      	blx	r3
9001250e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
90012510:	b203      	sxth	r3, r0
90012512:	4682      	mov	sl, r0
90012514:	4407      	add	r7, r0
90012516:	a80f      	add	r0, sp, #60	; 0x3c
90012518:	9304      	str	r3, [sp, #16]
9001251a:	b2bb      	uxth	r3, r7
9001251c:	9303      	str	r3, [sp, #12]
9001251e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
90012522:	2b00      	cmp	r3, #0
90012524:	f040 80a5 	bne.w	90012672 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
90012528:	f003 fefc 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
9001252c:	682b      	ldr	r3, [r5, #0]
9001252e:	4628      	mov	r0, r5
90012530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90012532:	4798      	blx	r3
90012534:	682b      	ldr	r3, [r5, #0]
90012536:	4606      	mov	r6, r0
90012538:	4628      	mov	r0, r5
9001253a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001253c:	4798      	blx	r3
9001253e:	6823      	ldr	r3, [r4, #0]
90012540:	4607      	mov	r7, r0
90012542:	4620      	mov	r0, r4
90012544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012546:	4798      	blx	r3
90012548:	6823      	ldr	r3, [r4, #0]
9001254a:	4683      	mov	fp, r0
9001254c:	4620      	mov	r0, r4
9001254e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90012552:	4798      	blx	r3
90012554:	463b      	mov	r3, r7
90012556:	4649      	mov	r1, r9
90012558:	4632      	mov	r2, r6
9001255a:	2600      	movs	r6, #0
9001255c:	e9cd b000 	strd	fp, r0, [sp]
90012560:	a80f      	add	r0, sp, #60	; 0x3c
90012562:	4637      	mov	r7, r6
90012564:	f003 ff4e 	bl	90016404 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
90012568:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001256c:	f8df b250 	ldr.w	fp, [pc, #592]	; 900127c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
90012570:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90012574:	bf0c      	ite	eq
90012576:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
9001257a:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
9001257e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90012580:	4629      	mov	r1, r5
90012582:	f8db 3000 	ldr.w	r3, [fp]
90012586:	a80f      	add	r0, sp, #60	; 0x3c
90012588:	3701      	adds	r7, #1
9001258a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
9001258e:	f647 72ff 	movw	r2, #32767	; 0x7fff
90012592:	b2bf      	uxth	r7, r7
90012594:	785b      	ldrb	r3, [r3, #1]
90012596:	f3c3 0381 	ubfx	r3, r3, #2, #2
9001259a:	f001 fa8c 	bl	90013ab6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
9001259e:	9b03      	ldr	r3, [sp, #12]
900125a0:	4286      	cmp	r6, r0
900125a2:	eba9 0903 	sub.w	r9, r9, r3
900125a6:	bfb8      	it	lt
900125a8:	4606      	movlt	r6, r0
900125aa:	a80f      	add	r0, sp, #60	; 0x3c
900125ac:	fa0f f989 	sxth.w	r9, r9
900125b0:	b236      	sxth	r6, r6
900125b2:	f003 fede 	bl	90016372 <_ZN8touchgfx12TextProvider11endOfStringEv>
900125b6:	b918      	cbnz	r0, 900125c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900125b8:	7a2b      	ldrb	r3, [r5, #8]
900125ba:	444b      	add	r3, r9
900125bc:	2b00      	cmp	r3, #0
900125be:	dcde      	bgt.n	9001257e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
900125c0:	9b03      	ldr	r3, [sp, #12]
900125c2:	4620      	mov	r0, r4
900125c4:	9a04      	ldr	r2, [sp, #16]
900125c6:	fb13 f707 	smulbb	r7, r3, r7
900125ca:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
900125cc:	f895 9009 	ldrb.w	r9, [r5, #9]
900125d0:	1aff      	subs	r7, r7, r3
900125d2:	b2bf      	uxth	r7, r7
900125d4:	b23b      	sxth	r3, r7
900125d6:	429a      	cmp	r2, r3
900125d8:	bfa8      	it	ge
900125da:	4657      	movge	r7, sl
900125dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900125e0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900125e4:	6823      	ldr	r3, [r4, #0]
900125e6:	444f      	add	r7, r9
900125e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
900125ea:	bf08      	it	eq
900125ec:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
900125f0:	fa1f f987 	uxth.w	r9, r7
900125f4:	bf18      	it	ne
900125f6:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
900125fa:	4798      	blx	r3
900125fc:	2801      	cmp	r0, #1
900125fe:	fa0f f789 	sxth.w	r7, r9
90012602:	b2b3      	uxth	r3, r6
90012604:	f000 80e2 	beq.w	900127cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
90012608:	2802      	cmp	r0, #2
9001260a:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
9001260e:	f000 80e3 	beq.w	900127d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
90012612:	7aea      	ldrb	r2, [r5, #11]
90012614:	b236      	sxth	r6, r6
90012616:	7b2d      	ldrb	r5, [r5, #12]
90012618:	1ab6      	subs	r6, r6, r2
9001261a:	442a      	add	r2, r5
9001261c:	fa1f fa86 	uxth.w	sl, r6
90012620:	4413      	add	r3, r2
90012622:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
90012626:	fa0f fb8a 	sxth.w	fp, sl
9001262a:	b29b      	uxth	r3, r3
9001262c:	2a02      	cmp	r2, #2
9001262e:	b21e      	sxth	r6, r3
90012630:	f000 80d6 	beq.w	900127e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
90012634:	2a03      	cmp	r2, #3
90012636:	f000 80de 	beq.w	900127f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
9001263a:	2a01      	cmp	r2, #1
9001263c:	f040 80e6 	bne.w	9001280c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
90012640:	8925      	ldrh	r5, [r4, #8]
90012642:	4633      	mov	r3, r6
90012644:	463e      	mov	r6, r7
90012646:	eba5 0909 	sub.w	r9, r5, r9
9001264a:	461f      	mov	r7, r3
9001264c:	465d      	mov	r5, fp
9001264e:	fa0f fb89 	sxth.w	fp, r9
90012652:	4b5d      	ldr	r3, [pc, #372]	; (900127c8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90012654:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90012656:	6818      	ldr	r0, [r3, #0]
90012658:	f7f3 fb46 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
9001265c:	f8a8 b000 	strh.w	fp, [r8]
90012660:	f8a8 5002 	strh.w	r5, [r8, #2]
90012664:	f8a8 6004 	strh.w	r6, [r8, #4]
90012668:	f8a8 7006 	strh.w	r7, [r8, #6]
9001266c:	f8c8 0008 	str.w	r0, [r8, #8]
90012670:	e738      	b.n	900124e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
90012672:	f003 fe57 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
90012676:	682b      	ldr	r3, [r5, #0]
90012678:	4628      	mov	r0, r5
9001267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001267c:	4798      	blx	r3
9001267e:	682b      	ldr	r3, [r5, #0]
90012680:	4607      	mov	r7, r0
90012682:	4628      	mov	r0, r5
90012684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90012686:	4798      	blx	r3
90012688:	6823      	ldr	r3, [r4, #0]
9001268a:	4683      	mov	fp, r0
9001268c:	4620      	mov	r0, r4
9001268e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012690:	4798      	blx	r3
90012692:	6822      	ldr	r2, [r4, #0]
90012694:	9005      	str	r0, [sp, #20]
90012696:	4620      	mov	r0, r4
90012698:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
9001269c:	4790      	blx	r2
9001269e:	9b05      	ldr	r3, [sp, #20]
900126a0:	463a      	mov	r2, r7
900126a2:	4649      	mov	r1, r9
900126a4:	9001      	str	r0, [sp, #4]
900126a6:	a80f      	add	r0, sp, #60	; 0x3c
900126a8:	9300      	str	r3, [sp, #0]
900126aa:	465b      	mov	r3, fp
900126ac:	f003 feaa 	bl	90016404 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
900126b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900126b4:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
900126b8:	af0f      	add	r7, sp, #60	; 0x3c
900126ba:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900126be:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
900126c2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900126c4:	bf0a      	itet	eq
900126c6:	464a      	moveq	r2, r9
900126c8:	461a      	movne	r2, r3
900126ca:	4699      	moveq	r9, r3
900126cc:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
900126d0:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
900126d4:	1ad2      	subs	r2, r2, r3
900126d6:	6833      	ldr	r3, [r6, #0]
900126d8:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
900126dc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
900126e0:	7859      	ldrb	r1, [r3, #1]
900126e2:	2300      	movs	r3, #0
900126e4:	9707      	str	r7, [sp, #28]
900126e6:	f3c1 0181 	ubfx	r1, r1, #2, #2
900126ea:	f8ad 3018 	strh.w	r3, [sp, #24]
900126ee:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
900126f2:	f88d 1020 	strb.w	r1, [sp, #32]
900126f6:	9509      	str	r5, [sp, #36]	; 0x24
900126f8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
900126fc:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
90012700:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
90012704:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90012708:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001270c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90012710:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90012714:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90012718:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
9001271c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
90012720:	b350      	cbz	r0, 90012778 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90012722:	682b      	ldr	r3, [r5, #0]
90012724:	4628      	mov	r0, r5
90012726:	695b      	ldr	r3, [r3, #20]
90012728:	4798      	blx	r3
9001272a:	4607      	mov	r7, r0
9001272c:	b320      	cbz	r0, 90012778 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
9001272e:	9809      	ldr	r0, [sp, #36]	; 0x24
90012730:	4639      	mov	r1, r7
90012732:	6803      	ldr	r3, [r0, #0]
90012734:	68db      	ldr	r3, [r3, #12]
90012736:	4798      	blx	r3
90012738:	4606      	mov	r6, r0
9001273a:	b1e8      	cbz	r0, 90012778 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
9001273c:	7b43      	ldrb	r3, [r0, #13]
9001273e:	7a82      	ldrb	r2, [r0, #10]
90012740:	005b      	lsls	r3, r3, #1
90012742:	f403 7380 	and.w	r3, r3, #256	; 0x100
90012746:	4313      	orrs	r3, r2
90012748:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
9001274c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
90012750:	2b06      	cmp	r3, #6
90012752:	d111      	bne.n	90012778 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90012754:	9809      	ldr	r0, [sp, #36]	; 0x24
90012756:	4632      	mov	r2, r6
90012758:	4639      	mov	r1, r7
9001275a:	6803      	ldr	r3, [r0, #0]
9001275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001275e:	4798      	blx	r3
90012760:	7b73      	ldrb	r3, [r6, #13]
90012762:	005b      	lsls	r3, r3, #1
90012764:	f403 7280 	and.w	r2, r3, #256	; 0x100
90012768:	7ab3      	ldrb	r3, [r6, #10]
9001276a:	4313      	orrs	r3, r2
9001276c:	4418      	add	r0, r3
9001276e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90012772:	4418      	add	r0, r3
90012774:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
90012778:	2600      	movs	r6, #0
9001277a:	4637      	mov	r7, r6
9001277c:	a806      	add	r0, sp, #24
9001277e:	3701      	adds	r7, #1
90012780:	f001 fb7b 	bl	90013e7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90012784:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
90012788:	9b03      	ldr	r3, [sp, #12]
9001278a:	b2bf      	uxth	r7, r7
9001278c:	4286      	cmp	r6, r0
9001278e:	eba9 0903 	sub.w	r9, r9, r3
90012792:	f8bd 3018 	ldrh.w	r3, [sp, #24]
90012796:	bfb8      	it	lt
90012798:	4606      	movlt	r6, r0
9001279a:	fa0f f989 	sxth.w	r9, r9
9001279e:	b236      	sxth	r6, r6
900127a0:	2b00      	cmp	r3, #0
900127a2:	f43f af0d 	beq.w	900125c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900127a6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
900127aa:	2b00      	cmp	r3, #0
900127ac:	f47f af08 	bne.w	900125c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900127b0:	7a2b      	ldrb	r3, [r5, #8]
900127b2:	444b      	add	r3, r9
900127b4:	2b00      	cmp	r3, #0
900127b6:	dce1      	bgt.n	9001277c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
900127b8:	e702      	b.n	900125c0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900127ba:	bf00      	nop
900127bc:	240264b0 	.word	0x240264b0
900127c0:	240264ac 	.word	0x240264ac
900127c4:	240264b4 	.word	0x240264b4
900127c8:	240264b8 	.word	0x240264b8
900127cc:	ebaa 0606 	sub.w	r6, sl, r6
900127d0:	2002      	movs	r0, #2
900127d2:	fb96 f6f0 	sdiv	r6, r6, r0
900127d6:	e71c      	b.n	90012612 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
900127d8:	441e      	add	r6, r3
900127da:	ebaa 0606 	sub.w	r6, sl, r6
900127de:	e718      	b.n	90012612 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
900127e0:	8925      	ldrh	r5, [r4, #8]
900127e2:	1aed      	subs	r5, r5, r3
900127e4:	eba5 050a 	sub.w	r5, r5, sl
900127e8:	fa0f fb85 	sxth.w	fp, r5
900127ec:	8965      	ldrh	r5, [r4, #10]
900127ee:	eba5 0509 	sub.w	r5, r5, r9
900127f2:	b22d      	sxth	r5, r5
900127f4:	e72d      	b.n	90012652 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
900127f6:	8965      	ldrh	r5, [r4, #10]
900127f8:	f04f 0b00 	mov.w	fp, #0
900127fc:	1aed      	subs	r5, r5, r3
900127fe:	4633      	mov	r3, r6
90012800:	463e      	mov	r6, r7
90012802:	eba5 050a 	sub.w	r5, r5, sl
90012806:	461f      	mov	r7, r3
90012808:	b22d      	sxth	r5, r5
9001280a:	e722      	b.n	90012652 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
9001280c:	2500      	movs	r5, #0
9001280e:	e720      	b.n	90012652 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

90012810 <_ZN8touchgfx8TextAreaD0Ev>:
90012810:	b510      	push	{r4, lr}
90012812:	4604      	mov	r4, r0
90012814:	2148      	movs	r1, #72	; 0x48
90012816:	f010 fef8 	bl	9002360a <_ZdlPvj>
9001281a:	4620      	mov	r0, r4
9001281c:	bd10      	pop	{r4, pc}
	...

90012820 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
90012820:	b513      	push	{r0, r1, r4, lr}
90012822:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
90012826:	4604      	mov	r4, r0
90012828:	b1fb      	cbz	r3, 9001286a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
9001282a:	4b16      	ldr	r3, [pc, #88]	; (90012884 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
9001282c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
9001282e:	881b      	ldrh	r3, [r3, #0]
90012830:	428b      	cmp	r3, r1
90012832:	d91a      	bls.n	9001286a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90012834:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90012838:	2b00      	cmp	r3, #0
9001283a:	dd16      	ble.n	9001286a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
9001283c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90012840:	2b00      	cmp	r3, #0
90012842:	dd12      	ble.n	9001286a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90012844:	4b10      	ldr	r3, [pc, #64]	; (90012888 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
90012846:	6818      	ldr	r0, [r3, #0]
90012848:	f7f3 fa4e 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
9001284c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
90012850:	6822      	ldr	r2, [r4, #0]
90012852:	2b00      	cmp	r3, #0
90012854:	db06      	blt.n	90012864 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
90012856:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
9001285a:	2b00      	cmp	r3, #0
9001285c:	db02      	blt.n	90012864 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
9001285e:	6c63      	ldr	r3, [r4, #68]	; 0x44
90012860:	4298      	cmp	r0, r3
90012862:	d004      	beq.n	9001286e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
90012864:	6953      	ldr	r3, [r2, #20]
90012866:	4620      	mov	r0, r4
90012868:	4798      	blx	r3
9001286a:	b002      	add	sp, #8
9001286c:	bd10      	pop	{r4, pc}
9001286e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
90012872:	466b      	mov	r3, sp
90012874:	6912      	ldr	r2, [r2, #16]
90012876:	c903      	ldmia	r1, {r0, r1}
90012878:	e883 0003 	stmia.w	r3, {r0, r1}
9001287c:	4619      	mov	r1, r3
9001287e:	4620      	mov	r0, r4
90012880:	4790      	blx	r2
90012882:	e7f2      	b.n	9001286a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90012884:	240264b0 	.word	0x240264b0
90012888:	240264b8 	.word	0x240264b8

9001288c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
9001288c:	4b45      	ldr	r3, [pc, #276]	; (900129a4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
9001288e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012892:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90012894:	b08e      	sub	sp, #56	; 0x38
90012896:	881b      	ldrh	r3, [r3, #0]
90012898:	4604      	mov	r4, r0
9001289a:	4293      	cmp	r3, r2
9001289c:	d97e      	bls.n	9001299c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
9001289e:	6808      	ldr	r0, [r1, #0]
900128a0:	ab05      	add	r3, sp, #20
900128a2:	6849      	ldr	r1, [r1, #4]
900128a4:	4d40      	ldr	r5, [pc, #256]	; (900129a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
900128a6:	c303      	stmia	r3!, {r0, r1}
900128a8:	4611      	mov	r1, r2
900128aa:	6828      	ldr	r0, [r5, #0]
900128ac:	f7f3 fa1c 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
900128b0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
900128b4:	2b00      	cmp	r3, #0
900128b6:	db11      	blt.n	900128dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900128b8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900128bc:	2b00      	cmp	r3, #0
900128be:	db0d      	blt.n	900128dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900128c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
900128c2:	4298      	cmp	r0, r3
900128c4:	d10a      	bne.n	900128dc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900128c6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
900128ca:	ab09      	add	r3, sp, #36	; 0x24
900128cc:	e892 0003 	ldmia.w	r2, {r0, r1}
900128d0:	e883 0003 	stmia.w	r3, {r0, r1}
900128d4:	4619      	mov	r1, r3
900128d6:	a805      	add	r0, sp, #20
900128d8:	f7fe f80c 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
900128dc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900128e0:	2b00      	cmp	r3, #0
900128e2:	dd5b      	ble.n	9001299c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900128e4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
900128e8:	2b00      	cmp	r3, #0
900128ea:	dd57      	ble.n	9001299c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900128ec:	4f2f      	ldr	r7, [pc, #188]	; (900129ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
900128ee:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
900128f0:	683b      	ldr	r3, [r7, #0]
900128f2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900128f6:	4b2e      	ldr	r3, [pc, #184]	; (900129b0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
900128f8:	681b      	ldr	r3, [r3, #0]
900128fa:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
900128fe:	2e00      	cmp	r6, #0
90012900:	d04c      	beq.n	9001299c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90012902:	6823      	ldr	r3, [r4, #0]
90012904:	4620      	mov	r0, r4
90012906:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
9001290a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
9001290c:	4798      	blx	r3
9001290e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90012910:	683b      	ldr	r3, [r7, #0]
90012912:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
90012916:	eb03 0342 	add.w	r3, r3, r2, lsl #1
9001291a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
9001291e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
90012922:	785b      	ldrb	r3, [r3, #1]
90012924:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
90012928:	f3c3 0381 	ubfx	r3, r3, #2, #2
9001292c:	6b21      	ldr	r1, [r4, #48]	; 0x30
9001292e:	9609      	str	r6, [sp, #36]	; 0x24
90012930:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90012934:	4b1f      	ldr	r3, [pc, #124]	; (900129b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
90012936:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
9001293a:	681b      	ldr	r3, [r3, #0]
9001293c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
90012940:	910b      	str	r1, [sp, #44]	; 0x2c
90012942:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
90012946:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
9001294a:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
9001294e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
90012952:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90012956:	b10a      	cbz	r2, 9001295c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
90012958:	6cde      	ldr	r6, [r3, #76]	; 0x4c
9001295a:	b906      	cbnz	r6, 9001295e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
9001295c:	689e      	ldr	r6, [r3, #8]
9001295e:	af07      	add	r7, sp, #28
90012960:	4621      	mov	r1, r4
90012962:	4638      	mov	r0, r7
90012964:	f003 f8fc 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012968:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
9001296a:	6828      	ldr	r0, [r5, #0]
9001296c:	f7f3 f9bc 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
90012970:	6823      	ldr	r3, [r4, #0]
90012972:	4605      	mov	r5, r0
90012974:	4620      	mov	r0, r4
90012976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012978:	4798      	blx	r3
9001297a:	6823      	ldr	r3, [r4, #0]
9001297c:	4680      	mov	r8, r0
9001297e:	4620      	mov	r0, r4
90012980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90012984:	4798      	blx	r3
90012986:	ab09      	add	r3, sp, #36	; 0x24
90012988:	9501      	str	r5, [sp, #4]
9001298a:	9300      	str	r3, [sp, #0]
9001298c:	ab05      	add	r3, sp, #20
9001298e:	e9cd 8002 	strd	r8, r0, [sp, #8]
90012992:	4630      	mov	r0, r6
90012994:	e897 0006 	ldmia.w	r7, {r1, r2}
90012998:	f7f3 f956 	bl	90005c48 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
9001299c:	b00e      	add	sp, #56	; 0x38
9001299e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900129a2:	bf00      	nop
900129a4:	240264b0 	.word	0x240264b0
900129a8:	240264b8 	.word	0x240264b8
900129ac:	240264ac 	.word	0x240264ac
900129b0:	240264b4 	.word	0x240264b4
900129b4:	2402645c 	.word	0x2402645c

900129b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
900129b8:	b538      	push	{r3, r4, r5, lr}
900129ba:	4b0e      	ldr	r3, [pc, #56]	; (900129f4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
900129bc:	4604      	mov	r4, r0
900129be:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900129c0:	881b      	ldrh	r3, [r3, #0]
900129c2:	429a      	cmp	r2, r3
900129c4:	d214      	bcs.n	900129f0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
900129c6:	6803      	ldr	r3, [r0, #0]
900129c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
900129ca:	4798      	blx	r3
900129cc:	6823      	ldr	r3, [r4, #0]
900129ce:	4605      	mov	r5, r0
900129d0:	4620      	mov	r0, r4
900129d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
900129d4:	4798      	blx	r3
900129d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900129da:	b22d      	sxth	r5, r5
900129dc:	4601      	mov	r1, r0
900129de:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900129e2:	bf06      	itte	eq
900129e4:	4602      	moveq	r2, r0
900129e6:	4629      	moveq	r1, r5
900129e8:	462a      	movne	r2, r5
900129ea:	4620      	mov	r0, r4
900129ec:	f7fe f9ab 	bl	90010d46 <_ZN8touchgfx8Drawable14setWidthHeightEss>
900129f0:	bd38      	pop	{r3, r4, r5, pc}
900129f2:	bf00      	nop
900129f4:	240264b0 	.word	0x240264b0

900129f8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
900129f8:	b530      	push	{r4, r5, lr}
900129fa:	888b      	ldrh	r3, [r1, #4]
900129fc:	b085      	sub	sp, #20
900129fe:	4604      	mov	r4, r0
90012a00:	8583      	strh	r3, [r0, #44]	; 0x2c
90012a02:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90012a06:	b923      	cbnz	r3, 90012a12 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90012a08:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90012a0c:	b90b      	cbnz	r3, 90012a12 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90012a0e:	f7ff ffd3 	bl	900129b8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
90012a12:	6823      	ldr	r3, [r4, #0]
90012a14:	466d      	mov	r5, sp
90012a16:	4621      	mov	r1, r4
90012a18:	343c      	adds	r4, #60	; 0x3c
90012a1a:	4628      	mov	r0, r5
90012a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90012a20:	4798      	blx	r3
90012a22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90012a26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90012a2a:	b005      	add	sp, #20
90012a2c:	bd30      	pop	{r4, r5, pc}

90012a2e <_ZNK8touchgfx3Box12getSolidRectEv>:
90012a2e:	2300      	movs	r3, #0
90012a30:	8083      	strh	r3, [r0, #4]
90012a32:	80c3      	strh	r3, [r0, #6]
90012a34:	8003      	strh	r3, [r0, #0]
90012a36:	8043      	strh	r3, [r0, #2]
90012a38:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
90012a3c:	2bff      	cmp	r3, #255	; 0xff
90012a3e:	bf01      	itttt	eq
90012a40:	890b      	ldrheq	r3, [r1, #8]
90012a42:	8083      	strheq	r3, [r0, #4]
90012a44:	894b      	ldrheq	r3, [r1, #10]
90012a46:	80c3      	strheq	r3, [r0, #6]
90012a48:	4770      	bx	lr
	...

90012a4c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
90012a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
90012a4e:	4604      	mov	r4, r0
90012a50:	466b      	mov	r3, sp
90012a52:	6808      	ldr	r0, [r1, #0]
90012a54:	6849      	ldr	r1, [r1, #4]
90012a56:	c303      	stmia	r3!, {r0, r1}
90012a58:	6823      	ldr	r3, [r4, #0]
90012a5a:	4669      	mov	r1, sp
90012a5c:	4620      	mov	r0, r4
90012a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012a60:	4798      	blx	r3
90012a62:	4b08      	ldr	r3, [pc, #32]	; (90012a84 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
90012a64:	681b      	ldr	r3, [r3, #0]
90012a66:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90012a6a:	b10a      	cbz	r2, 90012a70 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
90012a6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90012a6e:	b900      	cbnz	r0, 90012a72 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
90012a70:	6898      	ldr	r0, [r3, #8]
90012a72:	6803      	ldr	r3, [r0, #0]
90012a74:	4669      	mov	r1, sp
90012a76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
90012a78:	6a1d      	ldr	r5, [r3, #32]
90012a7a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
90012a7e:	47a8      	blx	r5
90012a80:	b003      	add	sp, #12
90012a82:	bd30      	pop	{r4, r5, pc}
90012a84:	2402645c 	.word	0x2402645c

90012a88 <_ZN8touchgfx3BoxD1Ev>:
90012a88:	4770      	bx	lr

90012a8a <_ZN8touchgfx3BoxD0Ev>:
90012a8a:	b510      	push	{r4, lr}
90012a8c:	4604      	mov	r4, r0
90012a8e:	212c      	movs	r1, #44	; 0x2c
90012a90:	f010 fdbb 	bl	9002360a <_ZdlPvj>
90012a94:	4620      	mov	r0, r4
90012a96:	bd10      	pop	{r4, pc}

90012a98 <_ZNK8touchgfx3Box17invalidateContentEv>:
90012a98:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
90012a9c:	b12a      	cbz	r2, 90012aaa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90012a9e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90012aa2:	b112      	cbz	r2, 90012aaa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
90012aa4:	6803      	ldr	r3, [r0, #0]
90012aa6:	695b      	ldr	r3, [r3, #20]
90012aa8:	4718      	bx	r3
90012aaa:	4770      	bx	lr

90012aac <_ZN8touchgfx10TiledImage9setOffsetEss>:
90012aac:	b570      	push	{r4, r5, r6, lr}
90012aae:	6803      	ldr	r3, [r0, #0]
90012ab0:	4604      	mov	r4, r0
90012ab2:	4615      	mov	r5, r2
90012ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90012ab6:	4798      	blx	r3
90012ab8:	6823      	ldr	r3, [r4, #0]
90012aba:	4629      	mov	r1, r5
90012abc:	4620      	mov	r0, r4
90012abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90012ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012ac4:	4718      	bx	r3

90012ac6 <_ZN8touchgfx10TiledImage9getOffsetERsS1_>:
90012ac6:	b570      	push	{r4, r5, r6, lr}
90012ac8:	6803      	ldr	r3, [r0, #0]
90012aca:	4604      	mov	r4, r0
90012acc:	460e      	mov	r6, r1
90012ace:	4615      	mov	r5, r2
90012ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90012ad2:	4798      	blx	r3
90012ad4:	8030      	strh	r0, [r6, #0]
90012ad6:	6823      	ldr	r3, [r4, #0]
90012ad8:	4620      	mov	r0, r4
90012ada:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90012adc:	4798      	blx	r3
90012ade:	8028      	strh	r0, [r5, #0]
90012ae0:	bd70      	pop	{r4, r5, r6, pc}

90012ae2 <_ZN8touchgfx10TiledImage10getXOffsetEv>:
90012ae2:	f9b0 002a 	ldrsh.w	r0, [r0, #42]	; 0x2a
90012ae6:	4770      	bx	lr

90012ae8 <_ZN8touchgfx10TiledImage10getYOffsetEv>:
90012ae8:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
90012aec:	4770      	bx	lr

90012aee <_ZN8touchgfx10TiledImageD1Ev>:
90012aee:	4770      	bx	lr

90012af0 <_ZN8touchgfx10TiledImage9setBitmapERKNS_6BitmapE>:
90012af0:	b510      	push	{r4, lr}
90012af2:	4604      	mov	r4, r0
90012af4:	f000 fa15 	bl	90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90012af8:	6823      	ldr	r3, [r4, #0]
90012afa:	4620      	mov	r0, r4
90012afc:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
90012b00:	f9b4 102a 	ldrsh.w	r1, [r4, #42]	; 0x2a
90012b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
90012b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90012b0a:	4718      	bx	r3

90012b0c <_ZN8touchgfx10TiledImage10setXOffsetEs>:
90012b0c:	b538      	push	{r3, r4, r5, lr}
90012b0e:	f100 0526 	add.w	r5, r0, #38	; 0x26
90012b12:	4604      	mov	r4, r0
90012b14:	8541      	strh	r1, [r0, #42]	; 0x2a
90012b16:	4628      	mov	r0, r5
90012b18:	f004 ff96 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012b1c:	b188      	cbz	r0, 90012b42 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
90012b1e:	4628      	mov	r0, r5
90012b20:	f004 ff92 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012b24:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
90012b28:	fb92 f3f0 	sdiv	r3, r2, r0
90012b2c:	fb03 2010 	mls	r0, r3, r0, r2
90012b30:	2800      	cmp	r0, #0
90012b32:	8560      	strh	r0, [r4, #42]	; 0x2a
90012b34:	da05      	bge.n	90012b42 <_ZN8touchgfx10TiledImage10setXOffsetEs+0x36>
90012b36:	4628      	mov	r0, r5
90012b38:	f004 ff86 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012b3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
90012b3e:	4418      	add	r0, r3
90012b40:	8560      	strh	r0, [r4, #42]	; 0x2a
90012b42:	bd38      	pop	{r3, r4, r5, pc}

90012b44 <_ZN8touchgfx10TiledImage10setYOffsetEs>:
90012b44:	b538      	push	{r3, r4, r5, lr}
90012b46:	f100 0526 	add.w	r5, r0, #38	; 0x26
90012b4a:	4604      	mov	r4, r0
90012b4c:	8581      	strh	r1, [r0, #44]	; 0x2c
90012b4e:	4628      	mov	r0, r5
90012b50:	f004 ffae 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012b54:	b188      	cbz	r0, 90012b7a <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
90012b56:	4628      	mov	r0, r5
90012b58:	f004 ffaa 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012b5c:	f9b4 202c 	ldrsh.w	r2, [r4, #44]	; 0x2c
90012b60:	fb92 f3f0 	sdiv	r3, r2, r0
90012b64:	fb03 2010 	mls	r0, r3, r0, r2
90012b68:	2800      	cmp	r0, #0
90012b6a:	85a0      	strh	r0, [r4, #44]	; 0x2c
90012b6c:	da05      	bge.n	90012b7a <_ZN8touchgfx10TiledImage10setYOffsetEs+0x36>
90012b6e:	4628      	mov	r0, r5
90012b70:	f004 ff9e 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012b74:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
90012b76:	4418      	add	r0, r3
90012b78:	85a0      	strh	r0, [r4, #44]	; 0x2c
90012b7a:	bd38      	pop	{r3, r4, r5, pc}

90012b7c <_ZN8touchgfx10TiledImageD0Ev>:
90012b7c:	b510      	push	{r4, lr}
90012b7e:	4604      	mov	r4, r0
90012b80:	2130      	movs	r1, #48	; 0x30
90012b82:	f010 fd42 	bl	9002360a <_ZdlPvj>
90012b86:	4620      	mov	r0, r4
90012b88:	bd10      	pop	{r4, pc}
	...

90012b8c <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE>:
90012b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012b90:	f100 0b26 	add.w	fp, r0, #38	; 0x26
90012b94:	b093      	sub	sp, #76	; 0x4c
90012b96:	4607      	mov	r7, r0
90012b98:	460e      	mov	r6, r1
90012b9a:	4658      	mov	r0, fp
90012b9c:	f004 ff54 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012ba0:	4681      	mov	r9, r0
90012ba2:	4658      	mov	r0, fp
90012ba4:	f004 ff84 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012ba8:	4605      	mov	r5, r0
90012baa:	f1b9 0f00 	cmp.w	r9, #0
90012bae:	f000 80c4 	beq.w	90012d3a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
90012bb2:	2800      	cmp	r0, #0
90012bb4:	f000 80c1 	beq.w	90012d3a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
90012bb8:	2300      	movs	r3, #0
90012bba:	a90e      	add	r1, sp, #56	; 0x38
90012bbc:	4638      	mov	r0, r7
90012bbe:	fa1f f889 	uxth.w	r8, r9
90012bc2:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
90012bc6:	683b      	ldr	r3, [r7, #0]
90012bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012bca:	4798      	blx	r3
90012bcc:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
90012bd0:	f9b6 3000 	ldrsh.w	r3, [r6]
90012bd4:	88b1      	ldrh	r1, [r6, #4]
90012bd6:	189c      	adds	r4, r3, r2
90012bd8:	440b      	add	r3, r1
90012bda:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
90012bde:	fa02 f383 	sxtah	r3, r2, r3
90012be2:	3b01      	subs	r3, #1
90012be4:	fb93 f3f9 	sdiv	r3, r3, r9
90012be8:	fb94 f4f9 	sdiv	r4, r4, r9
90012bec:	fb13 f308 	smulbb	r3, r3, r8
90012bf0:	fb14 f408 	smulbb	r4, r4, r8
90012bf4:	b21b      	sxth	r3, r3
90012bf6:	1aa4      	subs	r4, r4, r2
90012bf8:	b2aa      	uxth	r2, r5
90012bfa:	930b      	str	r3, [sp, #44]	; 0x2c
90012bfc:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
90012c00:	b2a4      	uxth	r4, r4
90012c02:	9205      	str	r2, [sp, #20]
90012c04:	185a      	adds	r2, r3, r1
90012c06:	9805      	ldr	r0, [sp, #20]
90012c08:	fb92 f2f5 	sdiv	r2, r2, r5
90012c0c:	fb12 f200 	smulbb	r2, r2, r0
90012c10:	1a52      	subs	r2, r2, r1
90012c12:	b212      	sxth	r2, r2
90012c14:	920c      	str	r2, [sp, #48]	; 0x30
90012c16:	88f2      	ldrh	r2, [r6, #6]
90012c18:	4413      	add	r3, r2
90012c1a:	fa01 f383 	sxtah	r3, r1, r3
90012c1e:	3b01      	subs	r3, #1
90012c20:	fb93 f3f5 	sdiv	r3, r3, r5
90012c24:	fb13 f300 	smulbb	r3, r3, r0
90012c28:	eb08 0504 	add.w	r5, r8, r4
90012c2c:	b21b      	sxth	r3, r3
90012c2e:	930d      	str	r3, [sp, #52]	; 0x34
90012c30:	b223      	sxth	r3, r4
90012c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90012c34:	b2ad      	uxth	r5, r5
90012c36:	4293      	cmp	r3, r2
90012c38:	9306      	str	r3, [sp, #24]
90012c3a:	dc7e      	bgt.n	90012d3a <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1ae>
90012c3c:	b22b      	sxth	r3, r5
90012c3e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
90012c42:	930a      	str	r3, [sp, #40]	; 0x28
90012c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90012c46:	4599      	cmp	r9, r3
90012c48:	dd03      	ble.n	90012c52 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xc6>
90012c4a:	4444      	add	r4, r8
90012c4c:	4445      	add	r5, r8
90012c4e:	b2a4      	uxth	r4, r4
90012c50:	e7ee      	b.n	90012c30 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xa4>
90012c52:	f9b6 c000 	ldrsh.w	ip, [r6]
90012c56:	88b2      	ldrh	r2, [r6, #4]
90012c58:	9806      	ldr	r0, [sp, #24]
90012c5a:	4462      	add	r2, ip
90012c5c:	9905      	ldr	r1, [sp, #20]
90012c5e:	b292      	uxth	r2, r2
90012c60:	b213      	sxth	r3, r2
90012c62:	9308      	str	r3, [sp, #32]
90012c64:	fa1f f389 	uxth.w	r3, r9
90012c68:	4419      	add	r1, r3
90012c6a:	9307      	str	r3, [sp, #28]
90012c6c:	4603      	mov	r3, r0
90012c6e:	9808      	ldr	r0, [sp, #32]
90012c70:	b289      	uxth	r1, r1
90012c72:	4283      	cmp	r3, r0
90012c74:	fa0f fa81 	sxth.w	sl, r1
90012c78:	da5b      	bge.n	90012d32 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
90012c7a:	980a      	ldr	r0, [sp, #40]	; 0x28
90012c7c:	4584      	cmp	ip, r0
90012c7e:	da58      	bge.n	90012d32 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
90012c80:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
90012c84:	f8b6 e006 	ldrh.w	lr, [r6, #6]
90012c88:	4486      	add	lr, r0
90012c8a:	fa1f fe8e 	uxth.w	lr, lr
90012c8e:	fa0f f38e 	sxth.w	r3, lr
90012c92:	4599      	cmp	r9, r3
90012c94:	9309      	str	r3, [sp, #36]	; 0x24
90012c96:	da4c      	bge.n	90012d32 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
90012c98:	4550      	cmp	r0, sl
90012c9a:	da4a      	bge.n	90012d32 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1a6>
90012c9c:	9b06      	ldr	r3, [sp, #24]
90012c9e:	459c      	cmp	ip, r3
90012ca0:	bfb8      	it	lt
90012ca2:	469c      	movlt	ip, r3
90012ca4:	4548      	cmp	r0, r9
90012ca6:	9b08      	ldr	r3, [sp, #32]
90012ca8:	bfb8      	it	lt
90012caa:	4648      	movlt	r0, r9
90012cac:	f8ad c040 	strh.w	ip, [sp, #64]	; 0x40
90012cb0:	4699      	mov	r9, r3
90012cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90012cb4:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
90012cb8:	4599      	cmp	r9, r3
90012cba:	bfc8      	it	gt
90012cbc:	462a      	movgt	r2, r5
90012cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
90012cc0:	4553      	cmp	r3, sl
90012cc2:	bfd8      	it	le
90012cc4:	4671      	movle	r1, lr
90012cc6:	eba2 020c 	sub.w	r2, r2, ip
90012cca:	1a09      	subs	r1, r1, r0
90012ccc:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
90012cd0:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
90012cd4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90012cd8:	9b07      	ldr	r3, [sp, #28]
90012cda:	1b12      	subs	r2, r2, r4
90012cdc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
90012ce0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
90012ce4:	1ad2      	subs	r2, r2, r3
90012ce6:	4b16      	ldr	r3, [pc, #88]	; (90012d40 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x1b4>)
90012ce8:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
90012cec:	681a      	ldr	r2, [r3, #0]
90012cee:	f892 1076 	ldrb.w	r1, [r2, #118]	; 0x76
90012cf2:	b109      	cbz	r1, 90012cf8 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16c>
90012cf4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
90012cf6:	b900      	cbnz	r0, 90012cfa <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x16e>
90012cf8:	6890      	ldr	r0, [r2, #8]
90012cfa:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
90012cfe:	f04f 0c01 	mov.w	ip, #1
90012d02:	9b07      	ldr	r3, [sp, #28]
90012d04:	6801      	ldr	r1, [r0, #0]
90012d06:	4413      	add	r3, r2
90012d08:	f8cd c008 	str.w	ip, [sp, #8]
90012d0c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
90012d10:	f897 c028 	ldrb.w	ip, [r7, #40]	; 0x28
90012d14:	b21b      	sxth	r3, r3
90012d16:	4422      	add	r2, r4
90012d18:	f8cd c004 	str.w	ip, [sp, #4]
90012d1c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
90012d20:	b212      	sxth	r2, r2
90012d22:	f8cd c000 	str.w	ip, [sp]
90012d26:	f8d1 9008 	ldr.w	r9, [r1, #8]
90012d2a:	4659      	mov	r1, fp
90012d2c:	47c8      	blx	r9
90012d2e:	46d1      	mov	r9, sl
90012d30:	e788      	b.n	90012c44 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0xb8>
90012d32:	2300      	movs	r3, #0
90012d34:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
90012d38:	e7cc      	b.n	90012cd4 <_ZNK8touchgfx10TiledImage4drawERKNS_4RectE+0x148>
90012d3a:	b013      	add	sp, #76	; 0x4c
90012d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012d40:	2402645c 	.word	0x2402645c

90012d44 <_ZNK8touchgfx10TiledImage12getSolidRectEv>:
90012d44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90012d48:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90012d4c:	4606      	mov	r6, r0
90012d4e:	4689      	mov	r9, r1
90012d50:	2bff      	cmp	r3, #255	; 0xff
90012d52:	d008      	beq.n	90012d66 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x22>
90012d54:	2300      	movs	r3, #0
90012d56:	8003      	strh	r3, [r0, #0]
90012d58:	8043      	strh	r3, [r0, #2]
90012d5a:	8083      	strh	r3, [r0, #4]
90012d5c:	4630      	mov	r0, r6
90012d5e:	80f3      	strh	r3, [r6, #6]
90012d60:	b003      	add	sp, #12
90012d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90012d66:	f101 0b26 	add.w	fp, r1, #38	; 0x26
90012d6a:	4668      	mov	r0, sp
90012d6c:	4659      	mov	r1, fp
90012d6e:	f004 fed3 	bl	90017b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90012d72:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
90012d76:	4658      	mov	r0, fp
90012d78:	f9bd 7000 	ldrsh.w	r7, [sp]
90012d7c:	f9bd a002 	ldrsh.w	sl, [sp, #2]
90012d80:	f9bd 8006 	ldrsh.w	r8, [sp, #6]
90012d84:	f004 fe60 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012d88:	4284      	cmp	r4, r0
90012d8a:	d10d      	bne.n	90012da8 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x64>
90012d8c:	f9b9 5008 	ldrsh.w	r5, [r9, #8]
90012d90:	4658      	mov	r0, fp
90012d92:	f004 fe8d 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012d96:	4580      	cmp	r8, r0
90012d98:	d12a      	bne.n	90012df0 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0xac>
90012d9a:	f9b9 300a 	ldrsh.w	r3, [r9, #10]
90012d9e:	8037      	strh	r7, [r6, #0]
90012da0:	f8a6 a002 	strh.w	sl, [r6, #2]
90012da4:	80b5      	strh	r5, [r6, #4]
90012da6:	e7d9      	b.n	90012d5c <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x18>
90012da8:	f8b9 502a 	ldrh.w	r5, [r9, #42]	; 0x2a
90012dac:	4658      	mov	r0, fp
90012dae:	f004 fe4b 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012db2:	f9b9 2008 	ldrsh.w	r2, [r9, #8]
90012db6:	1b7f      	subs	r7, r7, r5
90012db8:	b2a3      	uxth	r3, r4
90012dba:	b2bd      	uxth	r5, r7
90012dbc:	b22f      	sxth	r7, r5
90012dbe:	4428      	add	r0, r5
90012dc0:	2f00      	cmp	r7, #0
90012dc2:	b280      	uxth	r0, r0
90012dc4:	bfb8      	it	lt
90012dc6:	18ed      	addlt	r5, r5, r3
90012dc8:	4403      	add	r3, r0
90012dca:	bfac      	ite	ge
90012dcc:	4625      	movge	r5, r4
90012dce:	2700      	movlt	r7, #0
90012dd0:	b29b      	uxth	r3, r3
90012dd2:	bfb8      	it	lt
90012dd4:	b22d      	sxthlt	r5, r5
90012dd6:	b219      	sxth	r1, r3
90012dd8:	bfb8      	it	lt
90012dda:	ea25 75e5 	biclt.w	r5, r5, r5, asr #31
90012dde:	4291      	cmp	r1, r2
90012de0:	bfc4      	itt	gt
90012de2:	1a9c      	subgt	r4, r3, r2
90012de4:	b224      	sxthgt	r4, r4
90012de6:	42ac      	cmp	r4, r5
90012de8:	bfc4      	itt	gt
90012dea:	b207      	sxthgt	r7, r0
90012dec:	4625      	movgt	r5, r4
90012dee:	e7cf      	b.n	90012d90 <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x4c>
90012df0:	f8b9 402c 	ldrh.w	r4, [r9, #44]	; 0x2c
90012df4:	4658      	mov	r0, fp
90012df6:	f004 fe5b 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012dfa:	f9b9 100a 	ldrsh.w	r1, [r9, #10]
90012dfe:	ebaa 0404 	sub.w	r4, sl, r4
90012e02:	fa1f f288 	uxth.w	r2, r8
90012e06:	b2a4      	uxth	r4, r4
90012e08:	fa0f fa84 	sxth.w	sl, r4
90012e0c:	4420      	add	r0, r4
90012e0e:	f1ba 0f00 	cmp.w	sl, #0
90012e12:	b280      	uxth	r0, r0
90012e14:	bfb8      	it	lt
90012e16:	18a3      	addlt	r3, r4, r2
90012e18:	4402      	add	r2, r0
90012e1a:	bfac      	ite	ge
90012e1c:	4643      	movge	r3, r8
90012e1e:	f04f 0a00 	movlt.w	sl, #0
90012e22:	b292      	uxth	r2, r2
90012e24:	bfb8      	it	lt
90012e26:	b21b      	sxthlt	r3, r3
90012e28:	b214      	sxth	r4, r2
90012e2a:	bfb8      	it	lt
90012e2c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90012e30:	428c      	cmp	r4, r1
90012e32:	bfc4      	itt	gt
90012e34:	eba2 0801 	subgt.w	r8, r2, r1
90012e38:	fa0f f888 	sxthgt.w	r8, r8
90012e3c:	4598      	cmp	r8, r3
90012e3e:	bfc4      	itt	gt
90012e40:	fa0f fa80 	sxthgt.w	sl, r0
90012e44:	4643      	movgt	r3, r8
90012e46:	e7aa      	b.n	90012d9e <_ZNK8touchgfx10TiledImage12getSolidRectEv+0x5a>

90012e48 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
90012e48:	4b30      	ldr	r3, [pc, #192]	; (90012f0c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
90012e4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012e4e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90012e50:	b08d      	sub	sp, #52	; 0x34
90012e52:	881b      	ldrh	r3, [r3, #0]
90012e54:	4604      	mov	r4, r0
90012e56:	460f      	mov	r7, r1
90012e58:	4293      	cmp	r3, r2
90012e5a:	d954      	bls.n	90012f06 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90012e5c:	4b2c      	ldr	r3, [pc, #176]	; (90012f10 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
90012e5e:	6819      	ldr	r1, [r3, #0]
90012e60:	eb01 0342 	add.w	r3, r1, r2, lsl #1
90012e64:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
90012e68:	4a2a      	ldr	r2, [pc, #168]	; (90012f14 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
90012e6a:	6812      	ldr	r2, [r2, #0]
90012e6c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
90012e70:	2900      	cmp	r1, #0
90012e72:	d048      	beq.n	90012f06 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90012e74:	785a      	ldrb	r2, [r3, #1]
90012e76:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
90012e7a:	f3c2 0801 	ubfx	r8, r2, #0, #2
90012e7e:	f3c2 0281 	ubfx	r2, r2, #2, #2
90012e82:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
90012e86:	4b24      	ldr	r3, [pc, #144]	; (90012f18 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
90012e88:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
90012e8c:	681a      	ldr	r2, [r3, #0]
90012e8e:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
90012e92:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
90012e96:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
90012e9a:	6b26      	ldr	r6, [r4, #48]	; 0x30
90012e9c:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
90012ea0:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90012ea4:	9107      	str	r1, [sp, #28]
90012ea6:	f88d 8020 	strb.w	r8, [sp, #32]
90012eaa:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
90012eae:	9609      	str	r6, [sp, #36]	; 0x24
90012eb0:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90012eb4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
90012eb8:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
90012ebc:	b10b      	cbz	r3, 90012ec2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
90012ebe:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
90012ec0:	b905      	cbnz	r5, 90012ec4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
90012ec2:	6895      	ldr	r5, [r2, #8]
90012ec4:	ae05      	add	r6, sp, #20
90012ec6:	4621      	mov	r1, r4
90012ec8:	4630      	mov	r0, r6
90012eca:	f002 fe49 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90012ece:	4b13      	ldr	r3, [pc, #76]	; (90012f1c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
90012ed0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90012ed2:	6818      	ldr	r0, [r3, #0]
90012ed4:	f7f2 ff08 	bl	90005ce8 <_ZNK8touchgfx5Texts7getTextEt>
90012ed8:	6823      	ldr	r3, [r4, #0]
90012eda:	4680      	mov	r8, r0
90012edc:	4620      	mov	r0, r4
90012ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90012ee0:	4798      	blx	r3
90012ee2:	6823      	ldr	r3, [r4, #0]
90012ee4:	4681      	mov	r9, r0
90012ee6:	4620      	mov	r0, r4
90012ee8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90012eec:	4798      	blx	r3
90012eee:	ab07      	add	r3, sp, #28
90012ef0:	f8cd 8004 	str.w	r8, [sp, #4]
90012ef4:	9300      	str	r3, [sp, #0]
90012ef6:	463b      	mov	r3, r7
90012ef8:	e9cd 9002 	strd	r9, r0, [sp, #8]
90012efc:	4628      	mov	r0, r5
90012efe:	e896 0006 	ldmia.w	r6, {r1, r2}
90012f02:	f7f2 fea1 	bl	90005c48 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
90012f06:	b00d      	add	sp, #52	; 0x34
90012f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90012f0c:	240264b0 	.word	0x240264b0
90012f10:	240264ac 	.word	0x240264ac
90012f14:	240264b4 	.word	0x240264b4
90012f18:	2402645c 	.word	0x2402645c
90012f1c:	240264b8 	.word	0x240264b8

90012f20 <_ZN8touchgfx5ImageD1Ev>:
90012f20:	4770      	bx	lr

90012f22 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90012f22:	b570      	push	{r4, r5, r6, lr}
90012f24:	880b      	ldrh	r3, [r1, #0]
90012f26:	460d      	mov	r5, r1
90012f28:	4604      	mov	r4, r0
90012f2a:	84c3      	strh	r3, [r0, #38]	; 0x26
90012f2c:	4608      	mov	r0, r1
90012f2e:	f004 fd8b 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012f32:	4606      	mov	r6, r0
90012f34:	4628      	mov	r0, r5
90012f36:	f004 fdbb 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012f3a:	6823      	ldr	r3, [r4, #0]
90012f3c:	4605      	mov	r5, r0
90012f3e:	4631      	mov	r1, r6
90012f40:	4620      	mov	r0, r4
90012f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90012f44:	4798      	blx	r3
90012f46:	6823      	ldr	r3, [r4, #0]
90012f48:	4629      	mov	r1, r5
90012f4a:	4620      	mov	r0, r4
90012f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90012f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90012f52:	4718      	bx	r3

90012f54 <_ZN8touchgfx5ImageD0Ev>:
90012f54:	b510      	push	{r4, lr}
90012f56:	4604      	mov	r4, r0
90012f58:	212c      	movs	r1, #44	; 0x2c
90012f5a:	f010 fb56 	bl	9002360a <_ZdlPvj>
90012f5e:	4620      	mov	r0, r4
90012f60:	bd10      	pop	{r4, pc}

90012f62 <_ZNK8touchgfx5Image12getSolidRectEv>:
90012f62:	b510      	push	{r4, lr}
90012f64:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90012f68:	4604      	mov	r4, r0
90012f6a:	2bff      	cmp	r3, #255	; 0xff
90012f6c:	d006      	beq.n	90012f7c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
90012f6e:	2300      	movs	r3, #0
90012f70:	8003      	strh	r3, [r0, #0]
90012f72:	8043      	strh	r3, [r0, #2]
90012f74:	8083      	strh	r3, [r0, #4]
90012f76:	80c3      	strh	r3, [r0, #6]
90012f78:	4620      	mov	r0, r4
90012f7a:	bd10      	pop	{r4, pc}
90012f7c:	3126      	adds	r1, #38	; 0x26
90012f7e:	f004 fdcb 	bl	90017b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90012f82:	e7f9      	b.n	90012f78 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

90012f84 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
90012f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90012f88:	4604      	mov	r4, r0
90012f8a:	b088      	sub	sp, #32
90012f8c:	2500      	movs	r5, #0
90012f8e:	460f      	mov	r7, r1
90012f90:	f854 3b26 	ldr.w	r3, [r4], #38
90012f94:	a904      	add	r1, sp, #16
90012f96:	4606      	mov	r6, r0
90012f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012f9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
90012f9e:	4798      	blx	r3
90012fa0:	4620      	mov	r0, r4
90012fa2:	f004 fd51 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
90012fa6:	4680      	mov	r8, r0
90012fa8:	4620      	mov	r0, r4
90012faa:	f004 fd81 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
90012fae:	9506      	str	r5, [sp, #24]
90012fb0:	ad06      	add	r5, sp, #24
90012fb2:	f8ad 001e 	strh.w	r0, [sp, #30]
90012fb6:	4639      	mov	r1, r7
90012fb8:	f8ad 801c 	strh.w	r8, [sp, #28]
90012fbc:	4628      	mov	r0, r5
90012fbe:	f7fd fc99 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
90012fc2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
90012fc6:	2b00      	cmp	r3, #0
90012fc8:	dd19      	ble.n	90012ffe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90012fca:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
90012fce:	2b00      	cmp	r3, #0
90012fd0:	dd15      	ble.n	90012ffe <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
90012fd2:	4b0c      	ldr	r3, [pc, #48]	; (90013004 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
90012fd4:	681b      	ldr	r3, [r3, #0]
90012fd6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90012fda:	b10a      	cbz	r2, 90012fe0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
90012fdc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90012fde:	b900      	cbnz	r0, 90012fe2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
90012fe0:	6898      	ldr	r0, [r3, #8]
90012fe2:	2701      	movs	r7, #1
90012fe4:	6801      	ldr	r1, [r0, #0]
90012fe6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
90012fea:	9702      	str	r7, [sp, #8]
90012fec:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
90012ff0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
90012ff4:	e9cd 5600 	strd	r5, r6, [sp]
90012ff8:	688d      	ldr	r5, [r1, #8]
90012ffa:	4621      	mov	r1, r4
90012ffc:	47a8      	blx	r5
90012ffe:	b008      	add	sp, #32
90013000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90013004:	2402645c 	.word	0x2402645c

90013008 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
90013008:	b510      	push	{r4, lr}
9001300a:	6803      	ldr	r3, [r0, #0]
9001300c:	460c      	mov	r4, r1
9001300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013010:	4798      	blx	r3
90013012:	1b03      	subs	r3, r0, r4
90013014:	4258      	negs	r0, r3
90013016:	4158      	adcs	r0, r3
90013018:	bd10      	pop	{r4, pc}
	...

9001301c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
9001301c:	4b01      	ldr	r3, [pc, #4]	; (90013024 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
9001301e:	6019      	str	r1, [r3, #0]
90013020:	4770      	bx	lr
90013022:	bf00      	nop
90013024:	24026464 	.word	0x24026464

90013028 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90013028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001302c:	4696      	mov	lr, r2
9001302e:	b097      	sub	sp, #92	; 0x5c
90013030:	4605      	mov	r5, r0
90013032:	4614      	mov	r4, r2
90013034:	460e      	mov	r6, r1
90013036:	461f      	mov	r7, r3
90013038:	f10d 0c1c 	add.w	ip, sp, #28
9001303c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
90013040:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
90013044:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
90013048:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001304c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90013050:	f8de 3000 	ldr.w	r3, [lr]
90013054:	f104 0e14 	add.w	lr, r4, #20
90013058:	f8cc 3000 	str.w	r3, [ip]
9001305c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90013060:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90013064:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90013068:	f8de 3000 	ldr.w	r3, [lr]
9001306c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90013070:	f8cc 3000 	str.w	r3, [ip]
90013074:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90013078:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001307c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90013080:	f8de 3000 	ldr.w	r3, [lr]
90013084:	4631      	mov	r1, r6
90013086:	9a21      	ldr	r2, [sp, #132]	; 0x84
90013088:	4628      	mov	r0, r5
9001308a:	f8cc 3000 	str.w	r3, [ip]
9001308e:	682b      	ldr	r3, [r5, #0]
90013090:	9201      	str	r2, [sp, #4]
90013092:	9a20      	ldr	r2, [sp, #128]	; 0x80
90013094:	f8cd 8008 	str.w	r8, [sp, #8]
90013098:	9200      	str	r2, [sp, #0]
9001309a:	aa07      	add	r2, sp, #28
9001309c:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900130a0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
900130a4:	463b      	mov	r3, r7
900130a6:	47d8      	blx	fp
900130a8:	46a6      	mov	lr, r4
900130aa:	f10d 0c1c 	add.w	ip, sp, #28
900130ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900130b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900130b6:	f8de 3000 	ldr.w	r3, [lr]
900130ba:	f104 0e28 	add.w	lr, r4, #40	; 0x28
900130be:	343c      	adds	r4, #60	; 0x3c
900130c0:	f8cc 3000 	str.w	r3, [ip]
900130c4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900130c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900130cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900130d0:	f8de 3000 	ldr.w	r3, [lr]
900130d4:	f8cc 3000 	str.w	r3, [ip]
900130d8:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
900130dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900130de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900130e2:	6823      	ldr	r3, [r4, #0]
900130e4:	4631      	mov	r1, r6
900130e6:	4628      	mov	r0, r5
900130e8:	f8cc 3000 	str.w	r3, [ip]
900130ec:	682b      	ldr	r3, [r5, #0]
900130ee:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900130f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
900130f4:	f8cd 8008 	str.w	r8, [sp, #8]
900130f8:	9201      	str	r2, [sp, #4]
900130fa:	9a20      	ldr	r2, [sp, #128]	; 0x80
900130fc:	9200      	str	r2, [sp, #0]
900130fe:	aa07      	add	r2, sp, #28
90013100:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
90013102:	463b      	mov	r3, r7
90013104:	47a0      	blx	r4
90013106:	b017      	add	sp, #92	; 0x5c
90013108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001310c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
9001310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013110:	b08d      	sub	sp, #52	; 0x34
90013112:	4688      	mov	r8, r1
90013114:	f8d3 c000 	ldr.w	ip, [r3]
90013118:	9916      	ldr	r1, [sp, #88]	; 0x58
9001311a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
9001311e:	680f      	ldr	r7, [r1, #0]
90013120:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
90013124:	eba7 070c 	sub.w	r7, r7, ip
90013128:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
9001312c:	edd3 6a07 	vldr	s13, [r3, #28]
90013130:	42bc      	cmp	r4, r7
90013132:	9918      	ldr	r1, [sp, #96]	; 0x60
90013134:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
90013138:	bfa8      	it	ge
9001313a:	463c      	movge	r4, r7
9001313c:	f9b1 9000 	ldrsh.w	r9, [r1]
90013140:	f9ba 1000 	ldrsh.w	r1, [sl]
90013144:	ee07 4a90 	vmov	s15, r4
90013148:	eb09 0e0c 	add.w	lr, r9, ip
9001314c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
90013150:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
90013154:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
90013158:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
9001315c:	4571      	cmp	r1, lr
9001315e:	ee25 4a04 	vmul.f32	s8, s10, s8
90013162:	ee65 4a24 	vmul.f32	s9, s10, s9
90013166:	ee25 5a27 	vmul.f32	s10, s10, s15
9001316a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
9001316e:	ee71 0aa4 	vadd.f32	s1, s3, s9
90013172:	ee32 1a05 	vadd.f32	s2, s4, s10
90013176:	ee87 7aa6 	vdiv.f32	s14, s15, s13
9001317a:	ee36 0a84 	vadd.f32	s0, s13, s8
9001317e:	ee61 1a87 	vmul.f32	s3, s3, s14
90013182:	ee22 2a07 	vmul.f32	s4, s4, s14
90013186:	f340 808c 	ble.w	900132a2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
9001318a:	eba1 060e 	sub.w	r6, r1, lr
9001318e:	fb96 f5f4 	sdiv	r5, r6, r4
90013192:	ee07 5a10 	vmov	s14, r5
90013196:	2d00      	cmp	r5, #0
90013198:	fb04 6615 	mls	r6, r4, r5, r6
9001319c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900131a0:	eea7 0a04 	vfma.f32	s0, s14, s8
900131a4:	eee7 0a24 	vfma.f32	s1, s14, s9
900131a8:	eea7 1a05 	vfma.f32	s2, s14, s10
900131ac:	dd12      	ble.n	900131d4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
900131ae:	ee70 6a44 	vsub.f32	s13, s0, s8
900131b2:	ee70 1ae4 	vsub.f32	s3, s1, s9
900131b6:	ee31 2a45 	vsub.f32	s4, s2, s10
900131ba:	eef5 6a40 	vcmp.f32	s13, #0.0
900131be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
900131c2:	bf14      	ite	ne
900131c4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
900131c8:	eeb0 7a67 	vmoveq.f32	s14, s15
900131cc:	ee61 1a87 	vmul.f32	s3, s3, s14
900131d0:	ee22 2a07 	vmul.f32	s4, s4, s14
900131d4:	fb05 f204 	mul.w	r2, r5, r4
900131d8:	1abf      	subs	r7, r7, r2
900131da:	4494      	add	ip, r2
900131dc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
900131e0:	4411      	add	r1, r2
900131e2:	eb09 020c 	add.w	r2, r9, ip
900131e6:	b209      	sxth	r1, r1
900131e8:	443a      	add	r2, r7
900131ea:	428a      	cmp	r2, r1
900131ec:	bfc4      	itt	gt
900131ee:	eba1 0209 	subgt.w	r2, r1, r9
900131f2:	eba2 070c 	subgt.w	r7, r2, ip
900131f6:	2f00      	cmp	r7, #0
900131f8:	dd50      	ble.n	9001329c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
900131fa:	fb97 f1f4 	sdiv	r1, r7, r4
900131fe:	fb04 7211 	mls	r2, r4, r1, r7
90013202:	b90a      	cbnz	r2, 90013208 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90013204:	3901      	subs	r1, #1
90013206:	4622      	mov	r2, r4
90013208:	eec7 3a80 	vdiv.f32	s7, s15, s0
9001320c:	6840      	ldr	r0, [r0, #4]
9001320e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
90013212:	44b6      	add	lr, r6
90013214:	f8d0 a000 	ldr.w	sl, [r0]
90013218:	2900      	cmp	r1, #0
9001321a:	bfcc      	ite	gt
9001321c:	46a1      	movgt	r9, r4
9001321e:	4691      	movle	r9, r2
90013220:	900b      	str	r0, [sp, #44]	; 0x2c
90013222:	9817      	ldr	r0, [sp, #92]	; 0x5c
90013224:	fb04 e505 	mla	r5, r4, r5, lr
90013228:	eef0 6a42 	vmov.f32	s13, s4
9001322c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90013230:	9008      	str	r0, [sp, #32]
90013232:	eeb0 7a61 	vmov.f32	s14, s3
90013236:	9818      	ldr	r0, [sp, #96]	; 0x60
90013238:	695b      	ldr	r3, [r3, #20]
9001323a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001323e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
90013242:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
90013246:	980b      	ldr	r0, [sp, #44]	; 0x2c
90013248:	445b      	add	r3, fp
9001324a:	9307      	str	r3, [sp, #28]
9001324c:	ee16 3a90 	vmov	r3, s13
90013250:	e9cd 8505 	strd	r8, r5, [sp, #20]
90013254:	ee60 2aa3 	vmul.f32	s5, s1, s7
90013258:	ee21 3a23 	vmul.f32	s6, s2, s7
9001325c:	ee72 7ae1 	vsub.f32	s15, s5, s3
90013260:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90013264:	ee17 7a90 	vmov	r7, s15
90013268:	ee73 7a42 	vsub.f32	s15, s6, s4
9001326c:	fb97 f7f4 	sdiv	r7, r7, r4
90013270:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90013274:	ee17 ca90 	vmov	ip, s15
90013278:	fb9c fcf4 	sdiv	ip, ip, r4
9001327c:	fb0c 3306 	mla	r3, ip, r6, r3
90013280:	9302      	str	r3, [sp, #8]
90013282:	ee17 3a10 	vmov	r3, s14
90013286:	e9cd 7c03 	strd	r7, ip, [sp, #12]
9001328a:	fb07 3706 	mla	r7, r7, r6, r3
9001328e:	eba9 0306 	sub.w	r3, r9, r6
90013292:	e9cd 4700 	strd	r4, r7, [sp]
90013296:	f8da 4008 	ldr.w	r4, [sl, #8]
9001329a:	47a0      	blx	r4
9001329c:	b00d      	add	sp, #52	; 0x34
9001329e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900132a2:	2500      	movs	r5, #0
900132a4:	462e      	mov	r6, r5
900132a6:	e799      	b.n	900131dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

900132a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
900132a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900132ac:	b0db      	sub	sp, #364	; 0x16c
900132ae:	461d      	mov	r5, r3
900132b0:	4614      	mov	r4, r2
900132b2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
900132b6:	910f      	str	r1, [sp, #60]	; 0x3c
900132b8:	4629      	mov	r1, r5
900132ba:	930a      	str	r3, [sp, #40]	; 0x28
900132bc:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
900132c0:	9009      	str	r0, [sp, #36]	; 0x24
900132c2:	930b      	str	r3, [sp, #44]	; 0x2c
900132c4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
900132c8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
900132cc:	9310      	str	r3, [sp, #64]	; 0x40
900132ce:	6803      	ldr	r3, [r0, #0]
900132d0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
900132d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
900132d6:	47b8      	blx	r7
900132d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900132da:	6058      	str	r0, [r3, #4]
900132dc:	2800      	cmp	r0, #0
900132de:	f000 83a1 	beq.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
900132e2:	682b      	ldr	r3, [r5, #0]
900132e4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
900132e8:	ed94 7a02 	vldr	s14, [r4, #8]
900132ec:	9314      	str	r3, [sp, #80]	; 0x50
900132ee:	686b      	ldr	r3, [r5, #4]
900132f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
900132f4:	9315      	str	r3, [sp, #84]	; 0x54
900132f6:	4bc1      	ldr	r3, [pc, #772]	; (900135fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
900132f8:	7819      	ldrb	r1, [r3, #0]
900132fa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
900132fe:	2900      	cmp	r1, #0
90013300:	bf16      	itet	ne
90013302:	4619      	movne	r1, r3
90013304:	4611      	moveq	r1, r2
90013306:	4613      	movne	r3, r2
90013308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001330c:	9116      	str	r1, [sp, #88]	; 0x58
9001330e:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90013312:	f240 8387 	bls.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013316:	ed94 7a07 	vldr	s14, [r4, #28]
9001331a:	eeb4 7ae7 	vcmpe.f32	s14, s15
9001331e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90013322:	f240 837f 	bls.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013326:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
9001332a:	eeb4 7ae7 	vcmpe.f32	s14, s15
9001332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90013332:	f240 8377 	bls.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013336:	6822      	ldr	r2, [r4, #0]
90013338:	4bb1      	ldr	r3, [pc, #708]	; (90013600 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
9001333a:	429a      	cmp	r2, r3
9001333c:	f2c0 8372 	blt.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013340:	49b0      	ldr	r1, [pc, #704]	; (90013604 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90013342:	6963      	ldr	r3, [r4, #20]
90013344:	428a      	cmp	r2, r1
90013346:	f300 836d 	bgt.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
9001334a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
9001334e:	48ae      	ldr	r0, [pc, #696]	; (90013608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90013350:	33ff      	adds	r3, #255	; 0xff
90013352:	4283      	cmp	r3, r0
90013354:	f200 8366 	bhi.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013358:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9001335a:	4dac      	ldr	r5, [pc, #688]	; (9001360c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
9001335c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90013360:	33ff      	adds	r3, #255	; 0xff
90013362:	42ab      	cmp	r3, r5
90013364:	f200 835e 	bhi.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013368:	6862      	ldr	r2, [r4, #4]
9001336a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
9001336e:	33ff      	adds	r3, #255	; 0xff
90013370:	4283      	cmp	r3, r0
90013372:	f200 8357 	bhi.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013376:	69a1      	ldr	r1, [r4, #24]
90013378:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
9001337c:	33ff      	adds	r3, #255	; 0xff
9001337e:	4283      	cmp	r3, r0
90013380:	f200 8350 	bhi.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013384:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90013386:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
9001338a:	30ff      	adds	r0, #255	; 0xff
9001338c:	42a8      	cmp	r0, r5
9001338e:	f200 8349 	bhi.w	90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013392:	428a      	cmp	r2, r1
90013394:	f280 8110 	bge.w	900135b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90013398:	429a      	cmp	r2, r3
9001339a:	f300 8119 	bgt.w	900135d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
9001339e:	4299      	cmp	r1, r3
900133a0:	f280 811d 	bge.w	900135de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
900133a4:	2502      	movs	r5, #2
900133a6:	2701      	movs	r7, #1
900133a8:	46a9      	mov	r9, r5
900133aa:	46b8      	mov	r8, r7
900133ac:	f04f 0a00 	mov.w	sl, #0
900133b0:	4621      	mov	r1, r4
900133b2:	a849      	add	r0, sp, #292	; 0x124
900133b4:	f003 fd00 	bl	90016db8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
900133b8:	4622      	mov	r2, r4
900133ba:	4653      	mov	r3, sl
900133bc:	a949      	add	r1, sp, #292	; 0x124
900133be:	f8cd 9000 	str.w	r9, [sp]
900133c2:	a819      	add	r0, sp, #100	; 0x64
900133c4:	f003 fe28 	bl	90017018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
900133c8:	4622      	mov	r2, r4
900133ca:	4653      	mov	r3, sl
900133cc:	a949      	add	r1, sp, #292	; 0x124
900133ce:	f8cd 8000 	str.w	r8, [sp]
900133d2:	a829      	add	r0, sp, #164	; 0xa4
900133d4:	f003 fe20 	bl	90017018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
900133d8:	4643      	mov	r3, r8
900133da:	4622      	mov	r2, r4
900133dc:	a949      	add	r1, sp, #292	; 0x124
900133de:	f8cd 9000 	str.w	r9, [sp]
900133e2:	a839      	add	r0, sp, #228	; 0xe4
900133e4:	f003 fe18 	bl	90017018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
900133e8:	42af      	cmp	r7, r5
900133ea:	af12      	add	r7, sp, #72	; 0x48
900133ec:	bfb7      	itett	lt
900133ee:	2300      	movlt	r3, #0
900133f0:	2301      	movge	r3, #1
900133f2:	ad29      	addlt	r5, sp, #164	; 0xa4
900133f4:	ac19      	addlt	r4, sp, #100	; 0x64
900133f6:	bfb1      	iteee	lt
900133f8:	930e      	strlt	r3, [sp, #56]	; 0x38
900133fa:	ad19      	addge	r5, sp, #100	; 0x64
900133fc:	930e      	strge	r3, [sp, #56]	; 0x38
900133fe:	ac29      	addge	r4, sp, #164	; 0xa4
90013400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90013402:	e893 0003 	ldmia.w	r3, {r0, r1}
90013406:	e887 0003 	stmia.w	r7, {r0, r1}
9001340a:	b928      	cbnz	r0, 90013418 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
9001340c:	4b80      	ldr	r3, [pc, #512]	; (90013610 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
9001340e:	6818      	ldr	r0, [r3, #0]
90013410:	6803      	ldr	r3, [r0, #0]
90013412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90013414:	4798      	blx	r3
90013416:	6038      	str	r0, [r7, #0]
90013418:	9b64      	ldr	r3, [sp, #400]	; 0x190
9001341a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
9001341e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90013422:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90013424:	930c      	str	r3, [sp, #48]	; 0x30
90013426:	990c      	ldr	r1, [sp, #48]	; 0x30
90013428:	6963      	ldr	r3, [r4, #20]
9001342a:	440b      	add	r3, r1
9001342c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90013430:	4408      	add	r0, r1
90013432:	b200      	sxth	r0, r0
90013434:	4283      	cmp	r3, r0
90013436:	900d      	str	r0, [sp, #52]	; 0x34
90013438:	f280 80dd 	bge.w	900135f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
9001343c:	428b      	cmp	r3, r1
9001343e:	da08      	bge.n	90013452 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90013440:	2a00      	cmp	r2, #0
90013442:	dd06      	ble.n	90013452 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90013444:	1acb      	subs	r3, r1, r3
90013446:	429a      	cmp	r2, r3
90013448:	f2c0 80e4 	blt.w	90013614 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
9001344c:	2b00      	cmp	r3, #0
9001344e:	f300 80e2 	bgt.w	90013616 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90013452:	6967      	ldr	r7, [r4, #20]
90013454:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90013458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001345a:	443b      	add	r3, r7
9001345c:	461f      	mov	r7, r3
9001345e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90013460:	1bdf      	subs	r7, r3, r7
90013462:	4297      	cmp	r7, r2
90013464:	bfa8      	it	ge
90013466:	4617      	movge	r7, r2
90013468:	2f00      	cmp	r7, #0
9001346a:	f340 8166 	ble.w	9001373a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
9001346e:	9b64      	ldr	r3, [sp, #400]	; 0x190
90013470:	6829      	ldr	r1, [r5, #0]
90013472:	f9b3 2000 	ldrsh.w	r2, [r3]
90013476:	f9bb 3000 	ldrsh.w	r3, [fp]
9001347a:	4411      	add	r1, r2
9001347c:	6820      	ldr	r0, [r4, #0]
9001347e:	4299      	cmp	r1, r3
90013480:	dd1a      	ble.n	900134b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90013482:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90013486:	4402      	add	r2, r0
90013488:	440b      	add	r3, r1
9001348a:	b21b      	sxth	r3, r3
9001348c:	429a      	cmp	r2, r3
9001348e:	dc13      	bgt.n	900134b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90013490:	9a10      	ldr	r2, [sp, #64]	; 0x40
90013492:	a912      	add	r1, sp, #72	; 0x48
90013494:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013496:	9809      	ldr	r0, [sp, #36]	; 0x24
90013498:	681b      	ldr	r3, [r3, #0]
9001349a:	9206      	str	r2, [sp, #24]
9001349c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001349e:	9500      	str	r5, [sp, #0]
900134a0:	9205      	str	r2, [sp, #20]
900134a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900134a4:	e9cd b203 	strd	fp, r2, [sp, #12]
900134a8:	9a64      	ldr	r2, [sp, #400]	; 0x190
900134aa:	e9cd 8201 	strd	r8, r2, [sp, #4]
900134ae:	aa49      	add	r2, sp, #292	; 0x124
900134b0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
900134b4:	4623      	mov	r3, r4
900134b6:	47c8      	blx	r9
900134b8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
900134bc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
900134c0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
900134c4:	ee37 7a27 	vadd.f32	s14, s14, s15
900134c8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
900134cc:	68a1      	ldr	r1, [r4, #8]
900134ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
900134d2:	ed94 6a08 	vldr	s12, [r4, #32]
900134d6:	edd4 6a07 	vldr	s13, [r4, #28]
900134da:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900134de:	ee76 6a86 	vadd.f32	s13, s13, s12
900134e2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
900134e6:	e9d4 2300 	ldrd	r2, r3, [r4]
900134ea:	edc4 6a07 	vstr	s13, [r4, #28]
900134ee:	441a      	add	r2, r3
900134f0:	6963      	ldr	r3, [r4, #20]
900134f2:	3301      	adds	r3, #1
900134f4:	6022      	str	r2, [r4, #0]
900134f6:	6163      	str	r3, [r4, #20]
900134f8:	69a3      	ldr	r3, [r4, #24]
900134fa:	3b01      	subs	r3, #1
900134fc:	61a3      	str	r3, [r4, #24]
900134fe:	6923      	ldr	r3, [r4, #16]
90013500:	440b      	add	r3, r1
90013502:	68e1      	ldr	r1, [r4, #12]
90013504:	428b      	cmp	r3, r1
90013506:	6123      	str	r3, [r4, #16]
90013508:	db15      	blt.n	90013536 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
9001350a:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
9001350e:	3201      	adds	r2, #1
90013510:	1a5b      	subs	r3, r3, r1
90013512:	ee76 6a26 	vadd.f32	s13, s12, s13
90013516:	6022      	str	r2, [r4, #0]
90013518:	6123      	str	r3, [r4, #16]
9001351a:	edc4 6a07 	vstr	s13, [r4, #28]
9001351e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90013522:	ee36 7a87 	vadd.f32	s14, s13, s14
90013526:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
9001352a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
9001352e:	ee77 7a27 	vadd.f32	s15, s14, s15
90013532:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90013536:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
9001353a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
9001353e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90013542:	ee37 7a27 	vadd.f32	s14, s14, s15
90013546:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
9001354a:	68a9      	ldr	r1, [r5, #8]
9001354c:	ee77 7aa6 	vadd.f32	s15, s15, s13
90013550:	ed95 6a08 	vldr	s12, [r5, #32]
90013554:	edd5 6a07 	vldr	s13, [r5, #28]
90013558:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
9001355c:	ee76 6a86 	vadd.f32	s13, s13, s12
90013560:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90013564:	e9d5 2300 	ldrd	r2, r3, [r5]
90013568:	edc5 6a07 	vstr	s13, [r5, #28]
9001356c:	441a      	add	r2, r3
9001356e:	696b      	ldr	r3, [r5, #20]
90013570:	3301      	adds	r3, #1
90013572:	602a      	str	r2, [r5, #0]
90013574:	616b      	str	r3, [r5, #20]
90013576:	69ab      	ldr	r3, [r5, #24]
90013578:	3b01      	subs	r3, #1
9001357a:	61ab      	str	r3, [r5, #24]
9001357c:	692b      	ldr	r3, [r5, #16]
9001357e:	440b      	add	r3, r1
90013580:	68e9      	ldr	r1, [r5, #12]
90013582:	428b      	cmp	r3, r1
90013584:	612b      	str	r3, [r5, #16]
90013586:	db15      	blt.n	900135b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90013588:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
9001358c:	3201      	adds	r2, #1
9001358e:	1a5b      	subs	r3, r3, r1
90013590:	ee76 6a26 	vadd.f32	s13, s12, s13
90013594:	602a      	str	r2, [r5, #0]
90013596:	612b      	str	r3, [r5, #16]
90013598:	edc5 6a07 	vstr	s13, [r5, #28]
9001359c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
900135a0:	ee36 7a87 	vadd.f32	s14, s13, s14
900135a4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900135a8:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
900135ac:	ee77 7a27 	vadd.f32	s15, s14, s15
900135b0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
900135b4:	3f01      	subs	r7, #1
900135b6:	e757      	b.n	90013468 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
900135b8:	4299      	cmp	r1, r3
900135ba:	dc13      	bgt.n	900135e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
900135bc:	429a      	cmp	r2, r3
900135be:	da14      	bge.n	900135ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
900135c0:	2502      	movs	r5, #2
900135c2:	2703      	movs	r7, #3
900135c4:	f04f 0800 	mov.w	r8, #0
900135c8:	46a9      	mov	r9, r5
900135ca:	f04f 0a01 	mov.w	sl, #1
900135ce:	e6ef      	b.n	900133b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
900135d0:	2501      	movs	r5, #1
900135d2:	2700      	movs	r7, #0
900135d4:	46a9      	mov	r9, r5
900135d6:	46b8      	mov	r8, r7
900135d8:	f04f 0a02 	mov.w	sl, #2
900135dc:	e6e8      	b.n	900133b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
900135de:	2501      	movs	r5, #1
900135e0:	2702      	movs	r7, #2
900135e2:	e6e1      	b.n	900133a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
900135e4:	2500      	movs	r5, #0
900135e6:	2701      	movs	r7, #1
900135e8:	e7f4      	b.n	900135d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
900135ea:	2702      	movs	r7, #2
900135ec:	2503      	movs	r5, #3
900135ee:	f04f 0900 	mov.w	r9, #0
900135f2:	46b8      	mov	r8, r7
900135f4:	e7e9      	b.n	900135ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
900135f6:	4613      	mov	r3, r2
900135f8:	e728      	b.n	9001344c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
900135fa:	bf00      	nop
900135fc:	24026454 	.word	0x24026454
90013600:	fffd8f01 	.word	0xfffd8f01
90013604:	00027100 	.word	0x00027100
90013608:	0004e1ff 	.word	0x0004e1ff
9001360c:	0004e1fe 	.word	0x0004e1fe
90013610:	2402645c 	.word	0x2402645c
90013614:	4613      	mov	r3, r2
90013616:	992b      	ldr	r1, [sp, #172]	; 0xac
90013618:	469e      	mov	lr, r3
9001361a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
9001361c:	469c      	mov	ip, r3
9001361e:	9111      	str	r1, [sp, #68]	; 0x44
90013620:	f04f 0900 	mov.w	r9, #0
90013624:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90013628:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
9001362c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90013630:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90013634:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90013638:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
9001363c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90013640:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90013644:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90013648:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
9001364c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90013650:	f1bc 0f00 	cmp.w	ip, #0
90013654:	d147      	bne.n	900136e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90013656:	eb03 0c07 	add.w	ip, r3, r7
9001365a:	1ad7      	subs	r7, r2, r3
9001365c:	f1b9 0f00 	cmp.w	r9, #0
90013660:	d009      	beq.n	90013676 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90013662:	9029      	str	r0, [sp, #164]	; 0xa4
90013664:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90013668:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
9001366c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90013670:	912d      	str	r1, [sp, #180]	; 0xb4
90013672:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90013676:	991b      	ldr	r1, [sp, #108]	; 0x6c
90013678:	f04f 0800 	mov.w	r8, #0
9001367c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90013680:	9111      	str	r1, [sp, #68]	; 0x44
90013682:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90013686:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
9001368a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
9001368e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90013692:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90013696:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
9001369a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
9001369e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
900136a2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
900136a6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
900136aa:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
900136ae:	f1be 0f00 	cmp.w	lr, #0
900136b2:	d031      	beq.n	90013718 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
900136b4:	9e11      	ldr	r6, [sp, #68]	; 0x44
900136b6:	4450      	add	r0, sl
900136b8:	ee76 6aa4 	vadd.f32	s13, s13, s9
900136bc:	4431      	add	r1, r6
900136be:	ee37 7a04 	vadd.f32	s14, s14, s8
900136c2:	ee77 7aa3 	vadd.f32	s15, s15, s7
900136c6:	4549      	cmp	r1, r9
900136c8:	db08      	blt.n	900136dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
900136ca:	ee77 7a85 	vadd.f32	s15, s15, s10
900136ce:	3001      	adds	r0, #1
900136d0:	ee76 6aa5 	vadd.f32	s13, s13, s11
900136d4:	eba1 0109 	sub.w	r1, r1, r9
900136d8:	ee37 7a06 	vadd.f32	s14, s14, s12
900136dc:	f10e 3eff 	add.w	lr, lr, #4294967295
900136e0:	f04f 0801 	mov.w	r8, #1
900136e4:	e7e3      	b.n	900136ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
900136e6:	9e11      	ldr	r6, [sp, #68]	; 0x44
900136e8:	4450      	add	r0, sl
900136ea:	ee37 7a24 	vadd.f32	s14, s14, s9
900136ee:	4431      	add	r1, r6
900136f0:	ee77 7a84 	vadd.f32	s15, s15, s8
900136f4:	ee76 6aa3 	vadd.f32	s13, s13, s7
900136f8:	4541      	cmp	r1, r8
900136fa:	db08      	blt.n	9001370e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
900136fc:	ee76 6a85 	vadd.f32	s13, s13, s10
90013700:	3001      	adds	r0, #1
90013702:	ee37 7a25 	vadd.f32	s14, s14, s11
90013706:	eba1 0108 	sub.w	r1, r1, r8
9001370a:	ee77 7a86 	vadd.f32	s15, s15, s12
9001370e:	f10c 3cff 	add.w	ip, ip, #4294967295
90013712:	f04f 0901 	mov.w	r9, #1
90013716:	e79b      	b.n	90013650 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90013718:	449c      	add	ip, r3
9001371a:	1aff      	subs	r7, r7, r3
9001371c:	f1b8 0f00 	cmp.w	r8, #0
90013720:	d009      	beq.n	90013736 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
90013722:	9019      	str	r0, [sp, #100]	; 0x64
90013724:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90013728:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
9001372c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90013730:	911d      	str	r1, [sp, #116]	; 0x74
90013732:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90013736:	1ad2      	subs	r2, r2, r3
90013738:	e68b      	b.n	90013452 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
9001373a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001373c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
9001373e:	2b00      	cmp	r3, #0
90013740:	f000 80d1 	beq.w	900138e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
90013744:	ad19      	add	r5, sp, #100	; 0x64
90013746:	ac39      	add	r4, sp, #228	; 0xe4
90013748:	9b64      	ldr	r3, [sp, #400]	; 0x190
9001374a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
9001374e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90013752:	930c      	str	r3, [sp, #48]	; 0x30
90013754:	990c      	ldr	r1, [sp, #48]	; 0x30
90013756:	6963      	ldr	r3, [r4, #20]
90013758:	440b      	add	r3, r1
9001375a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
9001375e:	4408      	add	r0, r1
90013760:	b200      	sxth	r0, r0
90013762:	4283      	cmp	r3, r0
90013764:	900d      	str	r0, [sp, #52]	; 0x34
90013766:	f280 80c1 	bge.w	900138ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
9001376a:	428b      	cmp	r3, r1
9001376c:	da08      	bge.n	90013780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
9001376e:	2a00      	cmp	r2, #0
90013770:	dd06      	ble.n	90013780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90013772:	1acb      	subs	r3, r1, r3
90013774:	429a      	cmp	r2, r3
90013776:	f2c0 80bb 	blt.w	900138f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
9001377a:	2b00      	cmp	r3, #0
9001377c:	f300 80b9 	bgt.w	900138f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90013780:	6967      	ldr	r7, [r4, #20]
90013782:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90013786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90013788:	443b      	add	r3, r7
9001378a:	461f      	mov	r7, r3
9001378c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001378e:	1bdf      	subs	r7, r3, r7
90013790:	4297      	cmp	r7, r2
90013792:	bfa8      	it	ge
90013794:	4617      	movge	r7, r2
90013796:	2f00      	cmp	r7, #0
90013798:	f340 813c 	ble.w	90013a14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
9001379c:	9b64      	ldr	r3, [sp, #400]	; 0x190
9001379e:	6829      	ldr	r1, [r5, #0]
900137a0:	f9b3 2000 	ldrsh.w	r2, [r3]
900137a4:	f9bb 3000 	ldrsh.w	r3, [fp]
900137a8:	4411      	add	r1, r2
900137aa:	6820      	ldr	r0, [r4, #0]
900137ac:	4299      	cmp	r1, r3
900137ae:	dd1a      	ble.n	900137e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
900137b0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
900137b4:	4402      	add	r2, r0
900137b6:	440b      	add	r3, r1
900137b8:	b21b      	sxth	r3, r3
900137ba:	429a      	cmp	r2, r3
900137bc:	dc13      	bgt.n	900137e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
900137be:	9a10      	ldr	r2, [sp, #64]	; 0x40
900137c0:	a912      	add	r1, sp, #72	; 0x48
900137c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900137c4:	9809      	ldr	r0, [sp, #36]	; 0x24
900137c6:	681b      	ldr	r3, [r3, #0]
900137c8:	9206      	str	r2, [sp, #24]
900137ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900137cc:	9500      	str	r5, [sp, #0]
900137ce:	9205      	str	r2, [sp, #20]
900137d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900137d2:	e9cd b203 	strd	fp, r2, [sp, #12]
900137d6:	9a64      	ldr	r2, [sp, #400]	; 0x190
900137d8:	e9cd 8201 	strd	r8, r2, [sp, #4]
900137dc:	aa49      	add	r2, sp, #292	; 0x124
900137de:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
900137e2:	4623      	mov	r3, r4
900137e4:	47c8      	blx	r9
900137e6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
900137ea:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
900137ee:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
900137f2:	ee37 7a27 	vadd.f32	s14, s14, s15
900137f6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
900137fa:	68a1      	ldr	r1, [r4, #8]
900137fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
90013800:	ed94 6a08 	vldr	s12, [r4, #32]
90013804:	edd4 6a07 	vldr	s13, [r4, #28]
90013808:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
9001380c:	ee76 6a86 	vadd.f32	s13, s13, s12
90013810:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90013814:	e9d4 2300 	ldrd	r2, r3, [r4]
90013818:	edc4 6a07 	vstr	s13, [r4, #28]
9001381c:	441a      	add	r2, r3
9001381e:	6963      	ldr	r3, [r4, #20]
90013820:	3301      	adds	r3, #1
90013822:	6022      	str	r2, [r4, #0]
90013824:	6163      	str	r3, [r4, #20]
90013826:	69a3      	ldr	r3, [r4, #24]
90013828:	3b01      	subs	r3, #1
9001382a:	61a3      	str	r3, [r4, #24]
9001382c:	6923      	ldr	r3, [r4, #16]
9001382e:	440b      	add	r3, r1
90013830:	68e1      	ldr	r1, [r4, #12]
90013832:	428b      	cmp	r3, r1
90013834:	6123      	str	r3, [r4, #16]
90013836:	db15      	blt.n	90013864 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90013838:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
9001383c:	3201      	adds	r2, #1
9001383e:	1a5b      	subs	r3, r3, r1
90013840:	ee76 6a26 	vadd.f32	s13, s12, s13
90013844:	6022      	str	r2, [r4, #0]
90013846:	6123      	str	r3, [r4, #16]
90013848:	edc4 6a07 	vstr	s13, [r4, #28]
9001384c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90013850:	ee36 7a87 	vadd.f32	s14, s13, s14
90013854:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90013858:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
9001385c:	ee77 7a27 	vadd.f32	s15, s14, s15
90013860:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90013864:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90013868:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
9001386c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90013870:	ee37 7a27 	vadd.f32	s14, s14, s15
90013874:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90013878:	68a9      	ldr	r1, [r5, #8]
9001387a:	ee77 7aa6 	vadd.f32	s15, s15, s13
9001387e:	ed95 6a08 	vldr	s12, [r5, #32]
90013882:	edd5 6a07 	vldr	s13, [r5, #28]
90013886:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
9001388a:	ee76 6a86 	vadd.f32	s13, s13, s12
9001388e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90013892:	e9d5 2300 	ldrd	r2, r3, [r5]
90013896:	edc5 6a07 	vstr	s13, [r5, #28]
9001389a:	441a      	add	r2, r3
9001389c:	696b      	ldr	r3, [r5, #20]
9001389e:	3301      	adds	r3, #1
900138a0:	602a      	str	r2, [r5, #0]
900138a2:	616b      	str	r3, [r5, #20]
900138a4:	69ab      	ldr	r3, [r5, #24]
900138a6:	3b01      	subs	r3, #1
900138a8:	61ab      	str	r3, [r5, #24]
900138aa:	692b      	ldr	r3, [r5, #16]
900138ac:	440b      	add	r3, r1
900138ae:	68e9      	ldr	r1, [r5, #12]
900138b0:	428b      	cmp	r3, r1
900138b2:	612b      	str	r3, [r5, #16]
900138b4:	db15      	blt.n	900138e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
900138b6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
900138ba:	3201      	adds	r2, #1
900138bc:	1a5b      	subs	r3, r3, r1
900138be:	ee76 6a26 	vadd.f32	s13, s12, s13
900138c2:	602a      	str	r2, [r5, #0]
900138c4:	612b      	str	r3, [r5, #16]
900138c6:	edc5 6a07 	vstr	s13, [r5, #28]
900138ca:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
900138ce:	ee36 7a87 	vadd.f32	s14, s13, s14
900138d2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900138d6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
900138da:	ee77 7a27 	vadd.f32	s15, s14, s15
900138de:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
900138e2:	3f01      	subs	r7, #1
900138e4:	e757      	b.n	90013796 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
900138e6:	ad39      	add	r5, sp, #228	; 0xe4
900138e8:	ac19      	add	r4, sp, #100	; 0x64
900138ea:	e72d      	b.n	90013748 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
900138ec:	4613      	mov	r3, r2
900138ee:	e744      	b.n	9001377a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
900138f0:	4613      	mov	r3, r2
900138f2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
900138f4:	469e      	mov	lr, r3
900138f6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
900138fa:	461f      	mov	r7, r3
900138fc:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
90013900:	f04f 0900 	mov.w	r9, #0
90013904:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
90013908:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
9001390c:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
90013910:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
90013914:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90013918:	993d      	ldr	r1, [sp, #244]	; 0xf4
9001391a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
9001391e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
90013922:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
90013926:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
9001392a:	960e      	str	r6, [sp, #56]	; 0x38
9001392c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90013930:	2f00      	cmp	r7, #0
90013932:	d146      	bne.n	900139c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
90013934:	449c      	add	ip, r3
90013936:	1ad7      	subs	r7, r2, r3
90013938:	f1b9 0f00 	cmp.w	r9, #0
9001393c:	d009      	beq.n	90013952 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
9001393e:	9039      	str	r0, [sp, #228]	; 0xe4
90013940:	913d      	str	r1, [sp, #244]	; 0xf4
90013942:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
90013946:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
9001394a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
9001394e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
90013952:	991b      	ldr	r1, [sp, #108]	; 0x6c
90013954:	f04f 0800 	mov.w	r8, #0
90013958:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
9001395c:	910e      	str	r1, [sp, #56]	; 0x38
9001395e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90013962:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90013966:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
9001396a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
9001396e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90013972:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90013976:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
9001397a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
9001397e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90013982:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90013986:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
9001398a:	f1be 0f00 	cmp.w	lr, #0
9001398e:	d030      	beq.n	900139f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90013990:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90013992:	4450      	add	r0, sl
90013994:	ee76 6aa4 	vadd.f32	s13, s13, s9
90013998:	4431      	add	r1, r6
9001399a:	ee37 7a04 	vadd.f32	s14, s14, s8
9001399e:	ee77 7aa3 	vadd.f32	s15, s15, s7
900139a2:	4549      	cmp	r1, r9
900139a4:	db08      	blt.n	900139b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
900139a6:	ee77 7a85 	vadd.f32	s15, s15, s10
900139aa:	3001      	adds	r0, #1
900139ac:	ee76 6aa5 	vadd.f32	s13, s13, s11
900139b0:	eba1 0109 	sub.w	r1, r1, r9
900139b4:	ee37 7a06 	vadd.f32	s14, s14, s12
900139b8:	f10e 3eff 	add.w	lr, lr, #4294967295
900139bc:	f04f 0801 	mov.w	r8, #1
900139c0:	e7e3      	b.n	9001398a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
900139c2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
900139c4:	4450      	add	r0, sl
900139c6:	ee37 7a24 	vadd.f32	s14, s14, s9
900139ca:	4431      	add	r1, r6
900139cc:	ee77 7a84 	vadd.f32	s15, s15, s8
900139d0:	ee76 6aa3 	vadd.f32	s13, s13, s7
900139d4:	4541      	cmp	r1, r8
900139d6:	db08      	blt.n	900139ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
900139d8:	ee76 6a85 	vadd.f32	s13, s13, s10
900139dc:	3001      	adds	r0, #1
900139de:	ee37 7a25 	vadd.f32	s14, s14, s11
900139e2:	eba1 0108 	sub.w	r1, r1, r8
900139e6:	ee77 7a86 	vadd.f32	s15, s15, s12
900139ea:	3f01      	subs	r7, #1
900139ec:	f04f 0901 	mov.w	r9, #1
900139f0:	e79e      	b.n	90013930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
900139f2:	449c      	add	ip, r3
900139f4:	1aff      	subs	r7, r7, r3
900139f6:	f1b8 0f00 	cmp.w	r8, #0
900139fa:	d009      	beq.n	90013a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
900139fc:	9019      	str	r0, [sp, #100]	; 0x64
900139fe:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90013a02:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90013a06:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90013a0a:	911d      	str	r1, [sp, #116]	; 0x74
90013a0c:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
90013a10:	1ad2      	subs	r2, r2, r3
90013a12:	e6b5      	b.n	90013780 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90013a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90013a16:	681b      	ldr	r3, [r3, #0]
90013a18:	b923      	cbnz	r3, 90013a24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90013a1a:	4b04      	ldr	r3, [pc, #16]	; (90013a2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90013a1c:	6818      	ldr	r0, [r3, #0]
90013a1e:	6803      	ldr	r3, [r0, #0]
90013a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90013a22:	4798      	blx	r3
90013a24:	b05b      	add	sp, #364	; 0x16c
90013a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013a2a:	bf00      	nop
90013a2c:	2402645c 	.word	0x2402645c

90013a30 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90013a30:	b570      	push	{r4, r5, r6, lr}
90013a32:	4604      	mov	r4, r0
90013a34:	2500      	movs	r5, #0
90013a36:	9805      	ldr	r0, [sp, #20]
90013a38:	f89d 601c 	ldrb.w	r6, [sp, #28]
90013a3c:	6061      	str	r1, [r4, #4]
90013a3e:	8263      	strh	r3, [r4, #18]
90013a40:	f89d 1010 	ldrb.w	r1, [sp, #16]
90013a44:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90013a48:	8025      	strh	r5, [r4, #0]
90013a4a:	7221      	strb	r1, [r4, #8]
90013a4c:	7266      	strb	r6, [r4, #9]
90013a4e:	60e0      	str	r0, [r4, #12]
90013a50:	8222      	strh	r2, [r4, #16]
90013a52:	82a3      	strh	r3, [r4, #20]
90013a54:	82e5      	strh	r5, [r4, #22]
90013a56:	8325      	strh	r5, [r4, #24]
90013a58:	8365      	strh	r5, [r4, #26]
90013a5a:	83a5      	strh	r5, [r4, #28]
90013a5c:	83e5      	strh	r5, [r4, #30]
90013a5e:	8425      	strh	r5, [r4, #32]
90013a60:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
90013a64:	b32e      	cbz	r6, 90013ab2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013a66:	6803      	ldr	r3, [r0, #0]
90013a68:	695b      	ldr	r3, [r3, #20]
90013a6a:	4798      	blx	r3
90013a6c:	4606      	mov	r6, r0
90013a6e:	b300      	cbz	r0, 90013ab2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013a70:	68e0      	ldr	r0, [r4, #12]
90013a72:	4631      	mov	r1, r6
90013a74:	6803      	ldr	r3, [r0, #0]
90013a76:	68db      	ldr	r3, [r3, #12]
90013a78:	4798      	blx	r3
90013a7a:	4605      	mov	r5, r0
90013a7c:	b1c8      	cbz	r0, 90013ab2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013a7e:	7b43      	ldrb	r3, [r0, #13]
90013a80:	7a82      	ldrb	r2, [r0, #10]
90013a82:	005b      	lsls	r3, r3, #1
90013a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
90013a88:	4313      	orrs	r3, r2
90013a8a:	8423      	strh	r3, [r4, #32]
90013a8c:	7a63      	ldrb	r3, [r4, #9]
90013a8e:	2b06      	cmp	r3, #6
90013a90:	d10f      	bne.n	90013ab2 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90013a92:	68e0      	ldr	r0, [r4, #12]
90013a94:	462a      	mov	r2, r5
90013a96:	4631      	mov	r1, r6
90013a98:	6803      	ldr	r3, [r0, #0]
90013a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013a9c:	4798      	blx	r3
90013a9e:	7b6b      	ldrb	r3, [r5, #13]
90013aa0:	005b      	lsls	r3, r3, #1
90013aa2:	f403 7280 	and.w	r2, r3, #256	; 0x100
90013aa6:	7aab      	ldrb	r3, [r5, #10]
90013aa8:	4313      	orrs	r3, r2
90013aaa:	4418      	add	r0, r3
90013aac:	8c23      	ldrh	r3, [r4, #32]
90013aae:	4418      	add	r0, r3
90013ab0:	8420      	strh	r0, [r4, #32]
90013ab2:	4620      	mov	r0, r4
90013ab4:	bd70      	pop	{r4, r5, r6, pc}

90013ab6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
90013ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013aba:	2400      	movs	r4, #0
90013abc:	b085      	sub	sp, #20
90013abe:	4681      	mov	r9, r0
90013ac0:	4688      	mov	r8, r1
90013ac2:	4692      	mov	sl, r2
90013ac4:	469b      	mov	fp, r3
90013ac6:	4627      	mov	r7, r4
90013ac8:	4625      	mov	r5, r4
90013aca:	4626      	mov	r6, r4
90013acc:	4554      	cmp	r4, sl
90013ace:	da2a      	bge.n	90013b26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90013ad0:	2300      	movs	r3, #0
90013ad2:	9303      	str	r3, [sp, #12]
90013ad4:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013ad8:	429d      	cmp	r5, r3
90013ada:	d004      	beq.n	90013ae6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
90013adc:	f242 030b 	movw	r3, #8203	; 0x200b
90013ae0:	429d      	cmp	r5, r3
90013ae2:	bf18      	it	ne
90013ae4:	462f      	movne	r7, r5
90013ae6:	ab03      	add	r3, sp, #12
90013ae8:	4642      	mov	r2, r8
90013aea:	4659      	mov	r1, fp
90013aec:	4648      	mov	r0, r9
90013aee:	f002 ff79 	bl	900169e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013af2:	4605      	mov	r5, r0
90013af4:	b1b8      	cbz	r0, 90013b26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90013af6:	280a      	cmp	r0, #10
90013af8:	d015      	beq.n	90013b26 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
90013afa:	9a03      	ldr	r2, [sp, #12]
90013afc:	b18a      	cbz	r2, 90013b22 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
90013afe:	7b50      	ldrb	r0, [r2, #13]
90013b00:	4639      	mov	r1, r7
90013b02:	7a93      	ldrb	r3, [r2, #10]
90013b04:	0040      	lsls	r0, r0, #1
90013b06:	8895      	ldrh	r5, [r2, #4]
90013b08:	f400 7080 	and.w	r0, r0, #256	; 0x100
90013b0c:	4303      	orrs	r3, r0
90013b0e:	4640      	mov	r0, r8
90013b10:	9301      	str	r3, [sp, #4]
90013b12:	f8d8 3000 	ldr.w	r3, [r8]
90013b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013b18:	4798      	blx	r3
90013b1a:	9b01      	ldr	r3, [sp, #4]
90013b1c:	4418      	add	r0, r3
90013b1e:	4406      	add	r6, r0
90013b20:	b2b6      	uxth	r6, r6
90013b22:	3401      	adds	r4, #1
90013b24:	e7d2      	b.n	90013acc <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
90013b26:	4630      	mov	r0, r6
90013b28:	b005      	add	sp, #20
90013b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90013b2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90013b2e:	2a02      	cmp	r2, #2
90013b30:	b530      	push	{r4, r5, lr}
90013b32:	d011      	beq.n	90013b58 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
90013b34:	2a03      	cmp	r2, #3
90013b36:	d01c      	beq.n	90013b72 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90013b38:	2a01      	cmp	r2, #1
90013b3a:	d10c      	bne.n	90013b56 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90013b3c:	888b      	ldrh	r3, [r1, #4]
90013b3e:	8801      	ldrh	r1, [r0, #0]
90013b40:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
90013b44:	1a5b      	subs	r3, r3, r1
90013b46:	8844      	ldrh	r4, [r0, #2]
90013b48:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90013b4c:	1a9b      	subs	r3, r3, r2
90013b4e:	8004      	strh	r4, [r0, #0]
90013b50:	8081      	strh	r1, [r0, #4]
90013b52:	8043      	strh	r3, [r0, #2]
90013b54:	80c2      	strh	r2, [r0, #6]
90013b56:	bd30      	pop	{r4, r5, pc}
90013b58:	88cb      	ldrh	r3, [r1, #6]
90013b5a:	8842      	ldrh	r2, [r0, #2]
90013b5c:	1a9b      	subs	r3, r3, r2
90013b5e:	88c2      	ldrh	r2, [r0, #6]
90013b60:	1a9b      	subs	r3, r3, r2
90013b62:	888a      	ldrh	r2, [r1, #4]
90013b64:	8801      	ldrh	r1, [r0, #0]
90013b66:	8043      	strh	r3, [r0, #2]
90013b68:	1a52      	subs	r2, r2, r1
90013b6a:	8881      	ldrh	r1, [r0, #4]
90013b6c:	1a52      	subs	r2, r2, r1
90013b6e:	8002      	strh	r2, [r0, #0]
90013b70:	e7f1      	b.n	90013b56 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90013b72:	88cb      	ldrh	r3, [r1, #6]
90013b74:	8841      	ldrh	r1, [r0, #2]
90013b76:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
90013b7a:	1a5b      	subs	r3, r3, r1
90013b7c:	f9b0 5000 	ldrsh.w	r5, [r0]
90013b80:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
90013b84:	1a9b      	subs	r3, r3, r2
90013b86:	8045      	strh	r5, [r0, #2]
90013b88:	8082      	strh	r2, [r0, #4]
90013b8a:	8003      	strh	r3, [r0, #0]
90013b8c:	80c4      	strh	r4, [r0, #6]
90013b8e:	e7e2      	b.n	90013b56 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90013b90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90013b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013b94:	b09f      	sub	sp, #124	; 0x7c
90013b96:	9116      	str	r1, [sp, #88]	; 0x58
90013b98:	9317      	str	r3, [sp, #92]	; 0x5c
90013b9a:	9929      	ldr	r1, [sp, #164]	; 0xa4
90013b9c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90013b9e:	8809      	ldrh	r1, [r1, #0]
90013ba0:	889b      	ldrh	r3, [r3, #4]
90013ba2:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
90013ba6:	440b      	add	r3, r1
90013ba8:	9212      	str	r2, [sp, #72]	; 0x48
90013baa:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
90013bae:	b21b      	sxth	r3, r3
90013bb0:	9011      	str	r0, [sp, #68]	; 0x44
90013bb2:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
90013bb6:	9310      	str	r3, [sp, #64]	; 0x40
90013bb8:	f8d8 3000 	ldr.w	r3, [r8]
90013bbc:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
90013bc0:	7b19      	ldrb	r1, [r3, #12]
90013bc2:	7adb      	ldrb	r3, [r3, #11]
90013bc4:	9114      	str	r1, [sp, #80]	; 0x50
90013bc6:	9315      	str	r3, [sp, #84]	; 0x54
90013bc8:	2a00      	cmp	r2, #0
90013bca:	d06a      	beq.n	90013ca2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
90013bcc:	f898 3010 	ldrb.w	r3, [r8, #16]
90013bd0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90013bd2:	2b06      	cmp	r3, #6
90013bd4:	bf14      	ite	ne
90013bd6:	2301      	movne	r3, #1
90013bd8:	2302      	moveq	r3, #2
90013bda:	4413      	add	r3, r2
90013bdc:	f04f 0900 	mov.w	r9, #0
90013be0:	930f      	str	r3, [sp, #60]	; 0x3c
90013be2:	464c      	mov	r4, r9
90013be4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
90013be8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
90013bec:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
90013bf0:	4293      	cmp	r3, r2
90013bf2:	f280 808f 	bge.w	90013d14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90013bf6:	2300      	movs	r3, #0
90013bf8:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
90013bfc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
90013c00:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013c04:	429c      	cmp	r4, r3
90013c06:	d006      	beq.n	90013c16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
90013c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90013c0a:	f242 020b 	movw	r2, #8203	; 0x200b
90013c0e:	4294      	cmp	r4, r2
90013c10:	bf18      	it	ne
90013c12:	4623      	movne	r3, r4
90013c14:	930d      	str	r3, [sp, #52]	; 0x34
90013c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90013c18:	992d      	ldr	r1, [sp, #180]	; 0xb4
90013c1a:	f8d8 2000 	ldr.w	r2, [r8]
90013c1e:	428b      	cmp	r3, r1
90013c20:	db41      	blt.n	90013ca6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
90013c22:	6813      	ldr	r3, [r2, #0]
90013c24:	4610      	mov	r0, r2
90013c26:	695b      	ldr	r3, [r3, #20]
90013c28:	4798      	blx	r3
90013c2a:	4604      	mov	r4, r0
90013c2c:	f8d8 0000 	ldr.w	r0, [r8]
90013c30:	aa1d      	add	r2, sp, #116	; 0x74
90013c32:	4621      	mov	r1, r4
90013c34:	6803      	ldr	r3, [r0, #0]
90013c36:	689d      	ldr	r5, [r3, #8]
90013c38:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90013c3c:	47a8      	blx	r5
90013c3e:	901c      	str	r0, [sp, #112]	; 0x70
90013c40:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013c44:	429c      	cmp	r4, r3
90013c46:	f000 80ec 	beq.w	90013e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013c4a:	f242 030b 	movw	r3, #8203	; 0x200b
90013c4e:	429c      	cmp	r4, r3
90013c50:	f000 80e7 	beq.w	90013e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013c54:	2c00      	cmp	r4, #0
90013c56:	f000 80f9 	beq.w	90013e4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90013c5a:	2c0a      	cmp	r4, #10
90013c5c:	d060      	beq.n	90013d20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90013c5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90013c60:	b36a      	cbz	r2, 90013cbe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
90013c62:	8894      	ldrh	r4, [r2, #4]
90013c64:	f1bb 0f00 	cmp.w	fp, #0
90013c68:	d03b      	beq.n	90013ce2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
90013c6a:	f892 900d 	ldrb.w	r9, [r2, #13]
90013c6e:	f1bb 0f01 	cmp.w	fp, #1
90013c72:	ea4f 0949 	mov.w	r9, r9, lsl #1
90013c76:	f409 7380 	and.w	r3, r9, #256	; 0x100
90013c7a:	f892 900a 	ldrb.w	r9, [r2, #10]
90013c7e:	ea49 0903 	orr.w	r9, r9, r3
90013c82:	d134      	bne.n	90013cee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
90013c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90013c86:	eba6 0609 	sub.w	r6, r6, r9
90013c8a:	2b00      	cmp	r3, #0
90013c8c:	d14f      	bne.n	90013d2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90013c8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
90013c90:	eb09 0306 	add.w	r3, r9, r6
90013c94:	4413      	add	r3, r2
90013c96:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90013c98:	f9b2 2000 	ldrsh.w	r2, [r2]
90013c9c:	4293      	cmp	r3, r2
90013c9e:	da51      	bge.n	90013d44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90013ca0:	e038      	b.n	90013d14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
90013ca2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90013ca4:	e79a      	b.n	90013bdc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
90013ca6:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90013caa:	4659      	mov	r1, fp
90013cac:	982c      	ldr	r0, [sp, #176]	; 0xb0
90013cae:	9301      	str	r3, [sp, #4]
90013cb0:	ab1d      	add	r3, sp, #116	; 0x74
90013cb2:	9300      	str	r3, [sp, #0]
90013cb4:	ab1c      	add	r3, sp, #112	; 0x70
90013cb6:	f002 fede 	bl	90016a76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
90013cba:	4604      	mov	r4, r0
90013cbc:	e7c0      	b.n	90013c40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
90013cbe:	f8d8 0000 	ldr.w	r0, [r8]
90013cc2:	6803      	ldr	r3, [r0, #0]
90013cc4:	691b      	ldr	r3, [r3, #16]
90013cc6:	4798      	blx	r3
90013cc8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013ccc:	4298      	cmp	r0, r3
90013cce:	f000 80a8 	beq.w	90013e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013cd2:	f242 030b 	movw	r3, #8203	; 0x200b
90013cd6:	4298      	cmp	r0, r3
90013cd8:	f000 80a3 	beq.w	90013e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013cdc:	f1bb 0f00 	cmp.w	fp, #0
90013ce0:	d100      	bne.n	90013ce4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
90013ce2:	444e      	add	r6, r9
90013ce4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90013ce6:	2a00      	cmp	r2, #0
90013ce8:	d1bf      	bne.n	90013c6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
90013cea:	4691      	mov	r9, r2
90013cec:	e099      	b.n	90013e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90013cf0:	2b00      	cmp	r3, #0
90013cf2:	f000 80ad 	beq.w	90013e50 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
90013cf6:	f1bb 0f00 	cmp.w	fp, #0
90013cfa:	d118      	bne.n	90013d2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90013cfc:	f8d8 0000 	ldr.w	r0, [r8]
90013d00:	990d      	ldr	r1, [sp, #52]	; 0x34
90013d02:	6803      	ldr	r3, [r0, #0]
90013d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013d06:	4798      	blx	r3
90013d08:	4406      	add	r6, r0
90013d0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
90013d0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
90013d0e:	1af3      	subs	r3, r6, r3
90013d10:	4293      	cmp	r3, r2
90013d12:	dd17      	ble.n	90013d44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90013d14:	2c00      	cmp	r4, #0
90013d16:	f000 8099 	beq.w	90013e4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90013d1a:	2c0a      	cmp	r4, #10
90013d1c:	f040 8087 	bne.w	90013e2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
90013d20:	240a      	movs	r4, #10
90013d22:	fab4 f084 	clz	r0, r4
90013d26:	0940      	lsrs	r0, r0, #5
90013d28:	b01f      	add	sp, #124	; 0x7c
90013d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013d2e:	f8d8 0000 	ldr.w	r0, [r8]
90013d32:	990d      	ldr	r1, [sp, #52]	; 0x34
90013d34:	6803      	ldr	r3, [r0, #0]
90013d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013d38:	4798      	blx	r3
90013d3a:	f1bb 0f01 	cmp.w	fp, #1
90013d3e:	eba6 0600 	sub.w	r6, r6, r0
90013d42:	d0a4      	beq.n	90013c8e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
90013d44:	981c      	ldr	r0, [sp, #112]	; 0x70
90013d46:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90013d48:	f990 1009 	ldrsb.w	r1, [r0, #9]
90013d4c:	f9b3 7000 	ldrsh.w	r7, [r3]
90013d50:	7b43      	ldrb	r3, [r0, #13]
90013d52:	4431      	add	r1, r6
90013d54:	015b      	lsls	r3, r3, #5
90013d56:	f403 7280 	and.w	r2, r3, #256	; 0x100
90013d5a:	7983      	ldrb	r3, [r0, #6]
90013d5c:	4313      	orrs	r3, r2
90013d5e:	440b      	add	r3, r1
90013d60:	42bb      	cmp	r3, r7
90013d62:	db5e      	blt.n	90013e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
90013d66:	4299      	cmp	r1, r3
90013d68:	da5b      	bge.n	90013e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013d6a:	f8d8 0000 	ldr.w	r0, [r8]
90013d6e:	42b7      	cmp	r7, r6
90013d70:	6803      	ldr	r3, [r0, #0]
90013d72:	bfcc      	ite	gt
90013d74:	1bbf      	subgt	r7, r7, r6
90013d76:	2700      	movle	r7, #0
90013d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90013d7a:	bfc8      	it	gt
90013d7c:	b2bf      	uxthgt	r7, r7
90013d7e:	4798      	blx	r3
90013d80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90013d82:	7b5a      	ldrb	r2, [r3, #13]
90013d84:	00d1      	lsls	r1, r2, #3
90013d86:	f401 7580 	and.w	r5, r1, #256	; 0x100
90013d8a:	7a19      	ldrb	r1, [r3, #8]
90013d8c:	4329      	orrs	r1, r5
90013d8e:	0655      	lsls	r5, r2, #25
90013d90:	9d17      	ldr	r5, [sp, #92]	; 0x5c
90013d92:	bf48      	it	mi
90013d94:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
90013d98:	4405      	add	r5, r0
90013d9a:	bf48      	it	mi
90013d9c:	b209      	sxthmi	r1, r1
90013d9e:	1a6d      	subs	r5, r5, r1
90013da0:	9929      	ldr	r1, [sp, #164]	; 0xa4
90013da2:	b2ad      	uxth	r5, r5
90013da4:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
90013da8:	fa0f fa85 	sxth.w	sl, r5
90013dac:	4551      	cmp	r1, sl
90013dae:	dd3c      	ble.n	90013e2a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
90013db0:	0112      	lsls	r2, r2, #4
90013db2:	79d8      	ldrb	r0, [r3, #7]
90013db4:	f402 7280 	and.w	r2, r2, #256	; 0x100
90013db8:	4302      	orrs	r2, r0
90013dba:	4492      	add	sl, r2
90013dbc:	4551      	cmp	r1, sl
90013dbe:	dc30      	bgt.n	90013e22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90013dc0:	1b4d      	subs	r5, r1, r5
90013dc2:	468a      	mov	sl, r1
90013dc4:	b22d      	sxth	r5, r5
90013dc6:	9319      	str	r3, [sp, #100]	; 0x64
90013dc8:	b2ad      	uxth	r5, r5
90013dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
90013dcc:	f8d8 0000 	ldr.w	r0, [r8]
90013dd0:	681a      	ldr	r2, [r3, #0]
90013dd2:	6801      	ldr	r1, [r0, #0]
90013dd4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
90013dd6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
90013dd8:	9313      	str	r3, [sp, #76]	; 0x4c
90013dda:	9218      	str	r2, [sp, #96]	; 0x60
90013ddc:	6c09      	ldr	r1, [r1, #64]	; 0x40
90013dde:	4788      	blx	r1
90013de0:	f898 1006 	ldrb.w	r1, [r8, #6]
90013de4:	9b19      	ldr	r3, [sp, #100]	; 0x64
90013de6:	910b      	str	r1, [sp, #44]	; 0x2c
90013de8:	f898 100e 	ldrb.w	r1, [r8, #14]
90013dec:	9a18      	ldr	r2, [sp, #96]	; 0x60
90013dee:	910a      	str	r1, [sp, #40]	; 0x28
90013df0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
90013df4:	9109      	str	r1, [sp, #36]	; 0x24
90013df6:	f8d8 1008 	ldr.w	r1, [r8, #8]
90013dfa:	9305      	str	r3, [sp, #20]
90013dfc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90013dfe:	9206      	str	r2, [sp, #24]
90013e00:	9304      	str	r3, [sp, #16]
90013e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
90013e04:	f8cd a004 	str.w	sl, [sp, #4]
90013e08:	e9cd 7502 	strd	r7, r5, [sp, #8]
90013e0c:	4437      	add	r7, r6
90013e0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90013e10:	b23f      	sxth	r7, r7
90013e12:	e9cd 0107 	strd	r0, r1, [sp, #28]
90013e16:	9700      	str	r7, [sp, #0]
90013e18:	9916      	ldr	r1, [sp, #88]	; 0x58
90013e1a:	681a      	ldr	r2, [r3, #0]
90013e1c:	9811      	ldr	r0, [sp, #68]	; 0x44
90013e1e:	685b      	ldr	r3, [r3, #4]
90013e20:	47a8      	blx	r5
90013e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90013e24:	3301      	adds	r3, #1
90013e26:	930e      	str	r3, [sp, #56]	; 0x38
90013e28:	e6e0      	b.n	90013bec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
90013e2a:	2500      	movs	r5, #0
90013e2c:	e7cb      	b.n	90013dc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
90013e2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90013e30:	3501      	adds	r5, #1
90013e32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
90013e34:	429d      	cmp	r5, r3
90013e36:	f6bf af74 	bge.w	90013d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90013e3a:	4659      	mov	r1, fp
90013e3c:	982c      	ldr	r0, [sp, #176]	; 0xb0
90013e3e:	f7f1 feb1 	bl	90005ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90013e42:	4604      	mov	r4, r0
90013e44:	b110      	cbz	r0, 90013e4c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90013e46:	280a      	cmp	r0, #10
90013e48:	d1f2      	bne.n	90013e30 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
90013e4a:	e769      	b.n	90013d20 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90013e4c:	2400      	movs	r4, #0
90013e4e:	e768      	b.n	90013d22 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90013e50:	f1bb 0f00 	cmp.w	fp, #0
90013e54:	f43f af59 	beq.w	90013d0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
90013e58:	e774      	b.n	90013d44 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

90013e5a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
90013e5a:	b530      	push	{r4, r5, lr}
90013e5c:	8ac4      	ldrh	r4, [r0, #22]
90013e5e:	8b45      	ldrh	r5, [r0, #26]
90013e60:	8343      	strh	r3, [r0, #26]
90013e62:	442c      	add	r4, r5
90013e64:	1ae4      	subs	r4, r4, r3
90013e66:	8b83      	ldrh	r3, [r0, #28]
90013e68:	82c4      	strh	r4, [r0, #22]
90013e6a:	8b04      	ldrh	r4, [r0, #24]
90013e6c:	4422      	add	r2, r4
90013e6e:	440c      	add	r4, r1
90013e70:	1a59      	subs	r1, r3, r1
90013e72:	83c2      	strh	r2, [r0, #30]
90013e74:	8304      	strh	r4, [r0, #24]
90013e76:	8381      	strh	r1, [r0, #28]
90013e78:	bd30      	pop	{r4, r5, pc}

90013e7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
90013e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90013e7e:	4604      	mov	r4, r0
90013e80:	8a47      	ldrh	r7, [r0, #18]
90013e82:	68c0      	ldr	r0, [r0, #12]
90013e84:	b085      	sub	sp, #20
90013e86:	6803      	ldr	r3, [r0, #0]
90013e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90013e8a:	4798      	blx	r3
90013e8c:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
90013e90:	7a63      	ldrb	r3, [r4, #9]
90013e92:	eb06 0640 	add.w	r6, r6, r0, lsl #1
90013e96:	3b01      	subs	r3, #1
90013e98:	42b7      	cmp	r7, r6
90013e9a:	bfac      	ite	ge
90013e9c:	f04f 0900 	movge.w	r9, #0
90013ea0:	f04f 0901 	movlt.w	r9, #1
90013ea4:	2b05      	cmp	r3, #5
90013ea6:	d804      	bhi.n	90013eb2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
90013ea8:	e8df f003 	tbb	[pc, r3]
90013eac:	470f0854 	.word	0x470f0854
90013eb0:	4c4c      	.short	0x4c4c
90013eb2:	2500      	movs	r5, #0
90013eb4:	46a9      	mov	r9, r5
90013eb6:	462e      	mov	r6, r5
90013eb8:	462f      	mov	r7, r5
90013eba:	e00e      	b.n	90013eda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013ebc:	42b7      	cmp	r7, r6
90013ebe:	f04f 0500 	mov.w	r5, #0
90013ec2:	bfb4      	ite	lt
90013ec4:	2600      	movlt	r6, #0
90013ec6:	2601      	movge	r6, #1
90013ec8:	e7f6      	b.n	90013eb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90013eca:	42b7      	cmp	r7, r6
90013ecc:	464d      	mov	r5, r9
90013ece:	f04f 0900 	mov.w	r9, #0
90013ed2:	bfb4      	ite	lt
90013ed4:	2600      	movlt	r6, #0
90013ed6:	2601      	movge	r6, #1
90013ed8:	464f      	mov	r7, r9
90013eda:	f04f 0800 	mov.w	r8, #0
90013ede:	f8a4 8016 	strh.w	r8, [r4, #22]
90013ee2:	f8a4 8018 	strh.w	r8, [r4, #24]
90013ee6:	f8cd 8004 	str.w	r8, [sp, #4]
90013eea:	2300      	movs	r3, #0
90013eec:	9303      	str	r3, [sp, #12]
90013eee:	8823      	ldrh	r3, [r4, #0]
90013ef0:	2b20      	cmp	r3, #32
90013ef2:	d033      	beq.n	90013f5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
90013ef4:	f242 010b 	movw	r1, #8203	; 0x200b
90013ef8:	1a5a      	subs	r2, r3, r1
90013efa:	f1d2 0a00 	rsbs	sl, r2, #0
90013efe:	eb4a 0a02 	adc.w	sl, sl, r2
90013f02:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90013f06:	4293      	cmp	r3, r2
90013f08:	d008      	beq.n	90013f1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90013f0a:	428b      	cmp	r3, r1
90013f0c:	9a01      	ldr	r2, [sp, #4]
90013f0e:	bf0e      	itee	eq
90013f10:	f04f 0a01 	moveq.w	sl, #1
90013f14:	461a      	movne	r2, r3
90013f16:	f04f 0a00 	movne.w	sl, #0
90013f1a:	9201      	str	r2, [sp, #4]
90013f1c:	ab03      	add	r3, sp, #12
90013f1e:	68e2      	ldr	r2, [r4, #12]
90013f20:	7a21      	ldrb	r1, [r4, #8]
90013f22:	6860      	ldr	r0, [r4, #4]
90013f24:	f002 fd5e 	bl	900169e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90013f28:	8020      	strh	r0, [r4, #0]
90013f2a:	b9d8      	cbnz	r0, 90013f64 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
90013f2c:	8ba2      	ldrh	r2, [r4, #28]
90013f2e:	2300      	movs	r3, #0
90013f30:	4611      	mov	r1, r2
90013f32:	4620      	mov	r0, r4
90013f34:	f7ff ff91 	bl	90013e5a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90013f38:	e06e      	b.n	90014018 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
90013f3a:	2500      	movs	r5, #0
90013f3c:	2701      	movs	r7, #1
90013f3e:	46a9      	mov	r9, r5
90013f40:	462e      	mov	r6, r5
90013f42:	e7ca      	b.n	90013eda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013f44:	42b7      	cmp	r7, r6
90013f46:	f04f 0500 	mov.w	r5, #0
90013f4a:	bfb4      	ite	lt
90013f4c:	2700      	movlt	r7, #0
90013f4e:	2701      	movge	r7, #1
90013f50:	462e      	mov	r6, r5
90013f52:	e7c2      	b.n	90013eda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
90013f54:	2500      	movs	r5, #0
90013f56:	2601      	movs	r6, #1
90013f58:	46a9      	mov	r9, r5
90013f5a:	e7ad      	b.n	90013eb8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90013f5c:	9301      	str	r3, [sp, #4]
90013f5e:	f04f 0a01 	mov.w	sl, #1
90013f62:	e7db      	b.n	90013f1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
90013f64:	8b63      	ldrh	r3, [r4, #26]
90013f66:	280a      	cmp	r0, #10
90013f68:	f103 0301 	add.w	r3, r3, #1
90013f6c:	8363      	strh	r3, [r4, #26]
90013f6e:	d0dd      	beq.n	90013f2c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
90013f70:	9a03      	ldr	r2, [sp, #12]
90013f72:	bb62      	cbnz	r2, 90013fce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
90013f74:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90013f78:	4298      	cmp	r0, r3
90013f7a:	d003      	beq.n	90013f84 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90013f7c:	f242 030b 	movw	r3, #8203	; 0x200b
90013f80:	4298      	cmp	r0, r3
90013f82:	d1b2      	bne.n	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013f84:	8823      	ldrh	r3, [r4, #0]
90013f86:	8ba1      	ldrh	r1, [r4, #28]
90013f88:	2b20      	cmp	r3, #32
90013f8a:	d003      	beq.n	90013f94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
90013f8c:	f242 000b 	movw	r0, #8203	; 0x200b
90013f90:	4283      	cmp	r3, r0
90013f92:	d131      	bne.n	90013ff8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
90013f94:	f1ba 0f00 	cmp.w	sl, #0
90013f98:	bf0a      	itet	eq
90013f9a:	4688      	moveq	r8, r1
90013f9c:	4650      	movne	r0, sl
90013f9e:	2001      	moveq	r0, #1
90013fa0:	440a      	add	r2, r1
90013fa2:	8b23      	ldrh	r3, [r4, #24]
90013fa4:	f8b4 c010 	ldrh.w	ip, [r4, #16]
90013fa8:	b292      	uxth	r2, r2
90013faa:	83a2      	strh	r2, [r4, #28]
90013fac:	4413      	add	r3, r2
90013fae:	f1b9 0f00 	cmp.w	r9, #0
90013fb2:	d102      	bne.n	90013fba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
90013fb4:	2d00      	cmp	r5, #0
90013fb6:	d042      	beq.n	9001403e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
90013fb8:	b300      	cbz	r0, 90013ffc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
90013fba:	8c21      	ldrh	r1, [r4, #32]
90013fbc:	4419      	add	r1, r3
90013fbe:	458c      	cmp	ip, r1
90013fc0:	da37      	bge.n	90014032 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90013fc2:	8ae1      	ldrh	r1, [r4, #22]
90013fc4:	2900      	cmp	r1, #0
90013fc6:	d034      	beq.n	90014032 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
90013fc8:	4563      	cmp	r3, ip
90013fca:	dd8e      	ble.n	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90013fcc:	e01d      	b.n	9001400a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
90013fce:	8893      	ldrh	r3, [r2, #4]
90013fd0:	9901      	ldr	r1, [sp, #4]
90013fd2:	8023      	strh	r3, [r4, #0]
90013fd4:	f892 b00d 	ldrb.w	fp, [r2, #13]
90013fd8:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
90013fdc:	f40b 7080 	and.w	r0, fp, #256	; 0x100
90013fe0:	f892 b00a 	ldrb.w	fp, [r2, #10]
90013fe4:	ea4b 0b00 	orr.w	fp, fp, r0
90013fe8:	68e0      	ldr	r0, [r4, #12]
90013fea:	6803      	ldr	r3, [r0, #0]
90013fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90013fee:	4798      	blx	r3
90013ff0:	eb0b 0200 	add.w	r2, fp, r0
90013ff4:	b292      	uxth	r2, r2
90013ff6:	e7c5      	b.n	90013f84 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90013ff8:	2000      	movs	r0, #0
90013ffa:	e7d1      	b.n	90013fa0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
90013ffc:	4563      	cmp	r3, ip
90013ffe:	f77f af74 	ble.w	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90014002:	8ae3      	ldrh	r3, [r4, #22]
90014004:	2b00      	cmp	r3, #0
90014006:	f43f af70 	beq.w	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001400a:	2301      	movs	r3, #1
9001400c:	8c22      	ldrh	r2, [r4, #32]
9001400e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
90014012:	8be3      	ldrh	r3, [r4, #30]
90014014:	4413      	add	r3, r2
90014016:	83e3      	strh	r3, [r4, #30]
90014018:	68e0      	ldr	r0, [r4, #12]
9001401a:	6803      	ldr	r3, [r0, #0]
9001401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001401e:	4798      	blx	r3
90014020:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
90014024:	4418      	add	r0, r3
90014026:	8a63      	ldrh	r3, [r4, #18]
90014028:	1a18      	subs	r0, r3, r0
9001402a:	8260      	strh	r0, [r4, #18]
9001402c:	b005      	add	sp, #20
9001402e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014032:	2300      	movs	r3, #0
90014034:	4611      	mov	r1, r2
90014036:	4620      	mov	r0, r4
90014038:	f7ff ff0f 	bl	90013e5a <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
9001403c:	e755      	b.n	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001403e:	4563      	cmp	r3, ip
90014040:	dd14      	ble.n	9001406c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
90014042:	b117      	cbz	r7, 9001404a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
90014044:	2301      	movs	r3, #1
90014046:	460a      	mov	r2, r1
90014048:	e772      	b.n	90013f30 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
9001404a:	2e00      	cmp	r6, #0
9001404c:	f43f af4d 	beq.w	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90014050:	2800      	cmp	r0, #0
90014052:	f47f af4a 	bne.w	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90014056:	f1ba 0f00 	cmp.w	sl, #0
9001405a:	d002      	beq.n	90014062 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
9001405c:	2301      	movs	r3, #1
9001405e:	4642      	mov	r2, r8
90014060:	e767      	b.n	90013f32 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
90014062:	8ae3      	ldrh	r3, [r4, #22]
90014064:	2b00      	cmp	r3, #0
90014066:	f43f af40 	beq.w	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001406a:	e7d5      	b.n	90014018 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
9001406c:	2800      	cmp	r0, #0
9001406e:	f47f af3c 	bne.w	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90014072:	f1ba 0f00 	cmp.w	sl, #0
90014076:	f43f af38 	beq.w	90013eea <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001407a:	2301      	movs	r3, #1
9001407c:	4642      	mov	r2, r8
9001407e:	e7da      	b.n	90014036 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

90014080 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
90014080:	b5f0      	push	{r4, r5, r6, r7, lr}
90014082:	4605      	mov	r5, r0
90014084:	b08f      	sub	sp, #60	; 0x3c
90014086:	4617      	mov	r7, r2
90014088:	461c      	mov	r4, r3
9001408a:	460e      	mov	r6, r1
9001408c:	b1d1      	cbz	r1, 900140c4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
9001408e:	681b      	ldr	r3, [r3, #0]
90014090:	4620      	mov	r0, r4
90014092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014094:	4798      	blx	r3
90014096:	4240      	negs	r0, r0
90014098:	9603      	str	r6, [sp, #12]
9001409a:	f64f 73ff 	movw	r3, #65535	; 0xffff
9001409e:	b200      	sxth	r0, r0
900140a0:	9700      	str	r7, [sp, #0]
900140a2:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
900140a6:	4629      	mov	r1, r5
900140a8:	e9cd 4001 	strd	r4, r0, [sp, #4]
900140ac:	2401      	movs	r4, #1
900140ae:	a805      	add	r0, sp, #20
900140b0:	f7ff fcbe 	bl	90013a30 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900140b4:	a805      	add	r0, sp, #20
900140b6:	f7ff fee0 	bl	90013e7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900140ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
900140be:	b163      	cbz	r3, 900140da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
900140c0:	3401      	adds	r4, #1
900140c2:	e7f7      	b.n	900140b4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
900140c4:	2401      	movs	r4, #1
900140c6:	f002 fd59 	bl	90016b7c <_ZN8touchgfx12TextProvider11getNextCharEv>
900140ca:	280a      	cmp	r0, #10
900140cc:	4628      	mov	r0, r5
900140ce:	bf08      	it	eq
900140d0:	3401      	addeq	r4, #1
900140d2:	f002 fd53 	bl	90016b7c <_ZN8touchgfx12TextProvider11getNextCharEv>
900140d6:	2800      	cmp	r0, #0
900140d8:	d1f7      	bne.n	900140ca <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
900140da:	b2a0      	uxth	r0, r4
900140dc:	b00f      	add	sp, #60	; 0x3c
900140de:	bdf0      	pop	{r4, r5, r6, r7, pc}

900140e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
900140e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900140e4:	b0e3      	sub	sp, #396	; 0x18c
900140e6:	461c      	mov	r4, r3
900140e8:	4683      	mov	fp, r0
900140ea:	4688      	mov	r8, r1
900140ec:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
900140ee:	2b00      	cmp	r3, #0
900140f0:	f000 810f 	beq.w	90014312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900140f4:	6823      	ldr	r3, [r4, #0]
900140f6:	2b00      	cmp	r3, #0
900140f8:	f000 810b 	beq.w	90014312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900140fc:	7ba3      	ldrb	r3, [r4, #14]
900140fe:	2b00      	cmp	r3, #0
90014100:	f000 8107 	beq.w	90014312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90014104:	ad0a      	add	r5, sp, #40	; 0x28
90014106:	6810      	ldr	r0, [r2, #0]
90014108:	6851      	ldr	r1, [r2, #4]
9001410a:	462b      	mov	r3, r5
9001410c:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
90014110:	c303      	stmia	r3!, {r0, r1}
90014112:	2100      	movs	r1, #0
90014114:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
90014118:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
9001411c:	4628      	mov	r0, r5
9001411e:	910c      	str	r1, [sp, #48]	; 0x30
90014120:	a90c      	add	r1, sp, #48	; 0x30
90014122:	79a2      	ldrb	r2, [r4, #6]
90014124:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90014128:	f7ff fd01 	bl	90013b2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
9001412c:	a90c      	add	r1, sp, #48	; 0x30
9001412e:	79a2      	ldrb	r2, [r4, #6]
90014130:	4608      	mov	r0, r1
90014132:	f7ff fcfc 	bl	90013b2e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90014136:	a817      	add	r0, sp, #92	; 0x5c
90014138:	f002 f8f4 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
9001413c:	6820      	ldr	r0, [r4, #0]
9001413e:	6803      	ldr	r3, [r0, #0]
90014140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014142:	4798      	blx	r3
90014144:	4606      	mov	r6, r0
90014146:	6820      	ldr	r0, [r4, #0]
90014148:	6803      	ldr	r3, [r0, #0]
9001414a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001414c:	4798      	blx	r3
9001414e:	4633      	mov	r3, r6
90014150:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90014152:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90014154:	9000      	str	r0, [sp, #0]
90014156:	a817      	add	r0, sp, #92	; 0x5c
90014158:	f002 f93f 	bl	900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001415c:	6820      	ldr	r0, [r4, #0]
9001415e:	f894 a004 	ldrb.w	sl, [r4, #4]
90014162:	6803      	ldr	r3, [r0, #0]
90014164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014166:	4798      	blx	r3
90014168:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
9001416c:	6823      	ldr	r3, [r4, #0]
9001416e:	4607      	mov	r7, r0
90014170:	4406      	add	r6, r0
90014172:	a830      	add	r0, sp, #192	; 0xc0
90014174:	f893 9009 	ldrb.w	r9, [r3, #9]
90014178:	f002 f8d4 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
9001417c:	7c23      	ldrb	r3, [r4, #16]
9001417e:	b17b      	cbz	r3, 900141a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
90014180:	6820      	ldr	r0, [r4, #0]
90014182:	6803      	ldr	r3, [r0, #0]
90014184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90014186:	4798      	blx	r3
90014188:	9009      	str	r0, [sp, #36]	; 0x24
9001418a:	6820      	ldr	r0, [r4, #0]
9001418c:	6802      	ldr	r2, [r0, #0]
9001418e:	6d12      	ldr	r2, [r2, #80]	; 0x50
90014190:	4790      	blx	r2
90014192:	9b09      	ldr	r3, [sp, #36]	; 0x24
90014194:	9000      	str	r0, [sp, #0]
90014196:	a830      	add	r0, sp, #192	; 0xc0
90014198:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
9001419a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
9001419c:	f002 f91d 	bl	900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900141a0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
900141a4:	a80e      	add	r0, sp, #56	; 0x38
900141a6:	7be2      	ldrb	r2, [r4, #15]
900141a8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
900141ac:	1a8a      	subs	r2, r1, r2
900141ae:	7c21      	ldrb	r1, [r4, #16]
900141b0:	9103      	str	r1, [sp, #12]
900141b2:	b292      	uxth	r2, r2
900141b4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
900141b8:	9102      	str	r1, [sp, #8]
900141ba:	6821      	ldr	r1, [r4, #0]
900141bc:	9101      	str	r1, [sp, #4]
900141be:	7961      	ldrb	r1, [r4, #5]
900141c0:	9100      	str	r1, [sp, #0]
900141c2:	a930      	add	r1, sp, #192	; 0xc0
900141c4:	f7ff fc34 	bl	90013a30 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
900141c8:	2e00      	cmp	r6, #0
900141ca:	dc5b      	bgt.n	90014284 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
900141cc:	af17      	add	r7, sp, #92	; 0x5c
900141ce:	f04f 0900 	mov.w	r9, #0
900141d2:	7c23      	ldrb	r3, [r4, #16]
900141d4:	2b00      	cmp	r3, #0
900141d6:	f000 80ae 	beq.w	90014336 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
900141da:	a80e      	add	r0, sp, #56	; 0x38
900141dc:	f7ff fe4d 	bl	90013e7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900141e0:	f1ba 0f00 	cmp.w	sl, #0
900141e4:	f000 80a2 	beq.w	9001432c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
900141e8:	7c23      	ldrb	r3, [r4, #16]
900141ea:	2264      	movs	r2, #100	; 0x64
900141ec:	4639      	mov	r1, r7
900141ee:	a849      	add	r0, sp, #292	; 0x124
900141f0:	9309      	str	r3, [sp, #36]	; 0x24
900141f2:	f00f fdb4 	bl	90023d5e <memcpy>
900141f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900141f8:	2b00      	cmp	r3, #0
900141fa:	f000 80a4 	beq.w	90014346 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
900141fe:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
90014202:	7922      	ldrb	r2, [r4, #4]
90014204:	2a01      	cmp	r2, #1
90014206:	f040 8087 	bne.w	90014318 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
9001420a:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
9001420e:	1ac0      	subs	r0, r0, r3
90014210:	2302      	movs	r3, #2
90014212:	fb90 f0f3 	sdiv	r0, r0, r3
90014216:	b200      	sxth	r0, r0
90014218:	7c23      	ldrb	r3, [r4, #16]
9001421a:	2b00      	cmp	r3, #0
9001421c:	f000 8088 	beq.w	90014330 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
90014220:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90014224:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
90014228:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001422c:	e9cd 2105 	strd	r2, r1, [sp, #20]
90014230:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90014234:	2100      	movs	r1, #0
90014236:	4410      	add	r0, r2
90014238:	4642      	mov	r2, r8
9001423a:	b200      	sxth	r0, r0
9001423c:	e9cd 9703 	strd	r9, r7, [sp, #12]
90014240:	9000      	str	r0, [sp, #0]
90014242:	4658      	mov	r0, fp
90014244:	e9cd 5401 	strd	r5, r4, [sp, #4]
90014248:	f7ff fca2 	bl	90013b90 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
9001424c:	2800      	cmp	r0, #0
9001424e:	d160      	bne.n	90014312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90014250:	b2b2      	uxth	r2, r6
90014252:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90014256:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
9001425a:	4413      	add	r3, r2
9001425c:	1a8a      	subs	r2, r1, r2
9001425e:	b21b      	sxth	r3, r3
90014260:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90014264:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
90014268:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001426c:	2a00      	cmp	r2, #0
9001426e:	d150      	bne.n	90014312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90014270:	6822      	ldr	r2, [r4, #0]
90014272:	8869      	ldrh	r1, [r5, #2]
90014274:	7a12      	ldrb	r2, [r2, #8]
90014276:	1a9b      	subs	r3, r3, r2
90014278:	88ea      	ldrh	r2, [r5, #6]
9001427a:	440a      	add	r2, r1
9001427c:	b212      	sxth	r2, r2
9001427e:	4293      	cmp	r3, r2
90014280:	dda7      	ble.n	900141d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
90014282:	e046      	b.n	90014312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90014284:	7c23      	ldrb	r3, [r4, #16]
90014286:	444f      	add	r7, r9
90014288:	b1c3      	cbz	r3, 900142bc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
9001428a:	f64f 79ff 	movw	r9, #65535	; 0xffff
9001428e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90014292:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90014296:	443b      	add	r3, r7
90014298:	4293      	cmp	r3, r2
9001429a:	da97      	bge.n	900141cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
9001429c:	a80e      	add	r0, sp, #56	; 0x38
9001429e:	f7ff fdec 	bl	90013e7a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900142a2:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
900142a6:	3b01      	subs	r3, #1
900142a8:	b29b      	uxth	r3, r3
900142aa:	454b      	cmp	r3, r9
900142ac:	9309      	str	r3, [sp, #36]	; 0x24
900142ae:	d021      	beq.n	900142f4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
900142b0:	7961      	ldrb	r1, [r4, #5]
900142b2:	a817      	add	r0, sp, #92	; 0x5c
900142b4:	f7f1 fc76 	bl	90005ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900142b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900142ba:	e7f4      	b.n	900142a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
900142bc:	fa1f f986 	uxth.w	r9, r6
900142c0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
900142c4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
900142c8:	443b      	add	r3, r7
900142ca:	4293      	cmp	r3, r2
900142cc:	f6bf af7e 	bge.w	900141cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
900142d0:	a817      	add	r0, sp, #92	; 0x5c
900142d2:	f002 fc53 	bl	90016b7c <_ZN8touchgfx12TextProvider11getNextCharEv>
900142d6:	b1e0      	cbz	r0, 90014312 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900142d8:	280a      	cmp	r0, #10
900142da:	d1f1      	bne.n	900142c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
900142dc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
900142e0:	444b      	add	r3, r9
900142e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
900142e6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
900142ea:	eba3 0309 	sub.w	r3, r3, r9
900142ee:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900142f2:	e7e5      	b.n	900142c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
900142f4:	b2b3      	uxth	r3, r6
900142f6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
900142fa:	441a      	add	r2, r3
900142fc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90014300:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90014304:	1ad3      	subs	r3, r2, r3
90014306:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001430a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001430e:	2b00      	cmp	r3, #0
90014310:	d1bd      	bne.n	9001428e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90014312:	b063      	add	sp, #396	; 0x18c
90014314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014318:	2a02      	cmp	r2, #2
9001431a:	d105      	bne.n	90014328 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
9001431c:	7be2      	ldrb	r2, [r4, #15]
9001431e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90014322:	1a80      	subs	r0, r0, r2
90014324:	1ac0      	subs	r0, r0, r3
90014326:	e776      	b.n	90014216 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90014328:	2000      	movs	r0, #0
9001432a:	e775      	b.n	90014218 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
9001432c:	7be0      	ldrb	r0, [r4, #15]
9001432e:	e773      	b.n	90014218 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90014330:	f647 72ff 	movw	r2, #32767	; 0x7fff
90014334:	e776      	b.n	90014224 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90014336:	f1ba 0f00 	cmp.w	sl, #0
9001433a:	d0f7      	beq.n	9001432c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
9001433c:	2264      	movs	r2, #100	; 0x64
9001433e:	4639      	mov	r1, r7
90014340:	a849      	add	r0, sp, #292	; 0x124
90014342:	f00f fd0c 	bl	90023d5e <memcpy>
90014346:	2300      	movs	r3, #0
90014348:	f647 72ff 	movw	r2, #32767	; 0x7fff
9001434c:	6821      	ldr	r1, [r4, #0]
9001434e:	a849      	add	r0, sp, #292	; 0x124
90014350:	f7ff fbb1 	bl	90013ab6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90014354:	b203      	sxth	r3, r0
90014356:	e754      	b.n	90014202 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90014358 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90014358:	2b03      	cmp	r3, #3
9001435a:	d818      	bhi.n	9001438e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
9001435c:	e8df f003 	tbb	[pc, r3]
90014360:	130d0602 	.word	0x130d0602
90014364:	f9b0 2000 	ldrsh.w	r2, [r0]
90014368:	1850      	adds	r0, r2, r1
9001436a:	4770      	bx	lr
9001436c:	8803      	ldrh	r3, [r0, #0]
9001436e:	8880      	ldrh	r0, [r0, #4]
90014370:	4418      	add	r0, r3
90014372:	b200      	sxth	r0, r0
90014374:	1a80      	subs	r0, r0, r2
90014376:	3801      	subs	r0, #1
90014378:	4770      	bx	lr
9001437a:	8803      	ldrh	r3, [r0, #0]
9001437c:	8880      	ldrh	r0, [r0, #4]
9001437e:	4418      	add	r0, r3
90014380:	b200      	sxth	r0, r0
90014382:	1a40      	subs	r0, r0, r1
90014384:	e7f7      	b.n	90014376 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90014386:	f9b0 0000 	ldrsh.w	r0, [r0]
9001438a:	4410      	add	r0, r2
9001438c:	4770      	bx	lr
9001438e:	2000      	movs	r0, #0
90014390:	4770      	bx	lr

90014392 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90014392:	2b03      	cmp	r3, #3
90014394:	d817      	bhi.n	900143c6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90014396:	e8df f003 	tbb	[pc, r3]
9001439a:	0602      	.short	0x0602
9001439c:	1009      	.short	0x1009
9001439e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
900143a2:	1850      	adds	r0, r2, r1
900143a4:	4770      	bx	lr
900143a6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
900143aa:	e7fa      	b.n	900143a2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
900143ac:	8843      	ldrh	r3, [r0, #2]
900143ae:	88c0      	ldrh	r0, [r0, #6]
900143b0:	4418      	add	r0, r3
900143b2:	b200      	sxth	r0, r0
900143b4:	1a80      	subs	r0, r0, r2
900143b6:	3801      	subs	r0, #1
900143b8:	4770      	bx	lr
900143ba:	8843      	ldrh	r3, [r0, #2]
900143bc:	88c0      	ldrh	r0, [r0, #6]
900143be:	4418      	add	r0, r3
900143c0:	b200      	sxth	r0, r0
900143c2:	1a40      	subs	r0, r0, r1
900143c4:	e7f7      	b.n	900143b6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
900143c6:	2000      	movs	r0, #0
900143c8:	4770      	bx	lr
	...

900143cc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
900143cc:	4b01      	ldr	r3, [pc, #4]	; (900143d4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
900143ce:	2200      	movs	r2, #0
900143d0:	601a      	str	r2, [r3, #0]
900143d2:	4770      	bx	lr
900143d4:	24026464 	.word	0x24026464

900143d8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
900143d8:	4603      	mov	r3, r0
900143da:	b1c8      	cbz	r0, 90014410 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
900143dc:	0c02      	lsrs	r2, r0, #16
900143de:	0412      	lsls	r2, r2, #16
900143e0:	b9a2      	cbnz	r2, 9001440c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
900143e2:	0403      	lsls	r3, r0, #16
900143e4:	2010      	movs	r0, #16
900143e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
900143ea:	bf04      	itt	eq
900143ec:	021b      	lsleq	r3, r3, #8
900143ee:	3008      	addeq	r0, #8
900143f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
900143f4:	bf04      	itt	eq
900143f6:	011b      	lsleq	r3, r3, #4
900143f8:	3004      	addeq	r0, #4
900143fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
900143fe:	bf04      	itt	eq
90014400:	009b      	lsleq	r3, r3, #2
90014402:	3002      	addeq	r0, #2
90014404:	2b00      	cmp	r3, #0
90014406:	db04      	blt.n	90014412 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90014408:	3001      	adds	r0, #1
9001440a:	4770      	bx	lr
9001440c:	2000      	movs	r0, #0
9001440e:	e7ea      	b.n	900143e6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90014410:	2020      	movs	r0, #32
90014412:	4770      	bx	lr

90014414 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90014414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014418:	b087      	sub	sp, #28
9001441a:	4681      	mov	r9, r0
9001441c:	4698      	mov	r8, r3
9001441e:	4610      	mov	r0, r2
90014420:	460d      	mov	r5, r1
90014422:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90014426:	b981      	cbnz	r1, 9001444a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90014428:	b14b      	cbz	r3, 9001443e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
9001442a:	460b      	mov	r3, r1
9001442c:	464a      	mov	r2, r9
9001442e:	4641      	mov	r1, r8
90014430:	e9cd 4700 	strd	r4, r7, [sp]
90014434:	f7ff ffee 	bl	90014414 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90014438:	b007      	add	sp, #28
9001443a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001443e:	f04f 33ff 	mov.w	r3, #4294967295
90014442:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90014446:	603b      	str	r3, [r7, #0]
90014448:	e7f6      	b.n	90014438 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
9001444a:	fa32 fa01 	lsrs.w	sl, r2, r1
9001444e:	d107      	bne.n	90014460 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90014450:	fb09 f602 	mul.w	r6, r9, r2
90014454:	fbb6 f0f4 	udiv	r0, r6, r4
90014458:	fb04 6610 	mls	r6, r4, r0, r6
9001445c:	603e      	str	r6, [r7, #0]
9001445e:	e7eb      	b.n	90014438 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90014460:	2601      	movs	r6, #1
90014462:	fa09 fb01 	lsl.w	fp, r9, r1
90014466:	408e      	lsls	r6, r1
90014468:	fbbb f3f4 	udiv	r3, fp, r4
9001446c:	3e01      	subs	r6, #1
9001446e:	9302      	str	r3, [sp, #8]
90014470:	fb0a f303 	mul.w	r3, sl, r3
90014474:	4016      	ands	r6, r2
90014476:	9303      	str	r3, [sp, #12]
90014478:	4630      	mov	r0, r6
9001447a:	f7ff ffad 	bl	900143d8 <_ZN8touchgfx16TouchCalibration4clzuEm>
9001447e:	464a      	mov	r2, r9
90014480:	460b      	mov	r3, r1
90014482:	4601      	mov	r1, r0
90014484:	4630      	mov	r0, r6
90014486:	e9cd 4700 	strd	r4, r7, [sp]
9001448a:	f7ff ffc3 	bl	90014414 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
9001448e:	9b02      	ldr	r3, [sp, #8]
90014490:	4606      	mov	r6, r0
90014492:	eb05 0108 	add.w	r1, r5, r8
90014496:	fb04 bb13 	mls	fp, r4, r3, fp
9001449a:	4658      	mov	r0, fp
9001449c:	f7ff ff9c 	bl	900143d8 <_ZN8touchgfx16TouchCalibration4clzuEm>
900144a0:	ab05      	add	r3, sp, #20
900144a2:	465a      	mov	r2, fp
900144a4:	e9cd 4300 	strd	r4, r3, [sp]
900144a8:	4603      	mov	r3, r0
900144aa:	4650      	mov	r0, sl
900144ac:	f7ff ffb2 	bl	90014414 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
900144b0:	6839      	ldr	r1, [r7, #0]
900144b2:	9a05      	ldr	r2, [sp, #20]
900144b4:	9b03      	ldr	r3, [sp, #12]
900144b6:	4411      	add	r1, r2
900144b8:	fbb1 f2f4 	udiv	r2, r1, r4
900144bc:	18d3      	adds	r3, r2, r3
900144be:	fb04 1412 	mls	r4, r4, r2, r1
900144c2:	441e      	add	r6, r3
900144c4:	603c      	str	r4, [r7, #0]
900144c6:	4430      	add	r0, r6
900144c8:	e7b6      	b.n	90014438 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

900144ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
900144ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900144ce:	b085      	sub	sp, #20
900144d0:	f1b0 0900 	subs.w	r9, r0, #0
900144d4:	461d      	mov	r5, r3
900144d6:	4617      	mov	r7, r2
900144d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900144da:	bfbb      	ittet	lt
900144dc:	f1c9 0900 	rsblt	r9, r9, #0
900144e0:	f04f 36ff 	movlt.w	r6, #4294967295
900144e4:	2601      	movge	r6, #1
900144e6:	6823      	ldrlt	r3, [r4, #0]
900144e8:	bfbc      	itt	lt
900144ea:	425b      	neglt	r3, r3
900144ec:	6023      	strlt	r3, [r4, #0]
900144ee:	2a00      	cmp	r2, #0
900144f0:	da04      	bge.n	900144fc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
900144f2:	6823      	ldr	r3, [r4, #0]
900144f4:	4257      	negs	r7, r2
900144f6:	4276      	negs	r6, r6
900144f8:	425b      	negs	r3, r3
900144fa:	6023      	str	r3, [r4, #0]
900144fc:	2d00      	cmp	r5, #0
900144fe:	4638      	mov	r0, r7
90014500:	bfba      	itte	lt
90014502:	426d      	neglt	r5, r5
90014504:	f04f 38ff 	movlt.w	r8, #4294967295
90014508:	f04f 0801 	movge.w	r8, #1
9001450c:	f7ff ff64 	bl	900143d8 <_ZN8touchgfx16TouchCalibration4clzuEm>
90014510:	ab03      	add	r3, sp, #12
90014512:	463a      	mov	r2, r7
90014514:	e9cd 5300 	strd	r5, r3, [sp]
90014518:	4603      	mov	r3, r0
9001451a:	4648      	mov	r0, r9
9001451c:	f7ff ff7a 	bl	90014414 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90014520:	6823      	ldr	r3, [r4, #0]
90014522:	9a03      	ldr	r2, [sp, #12]
90014524:	4546      	cmp	r6, r8
90014526:	441a      	add	r2, r3
90014528:	fb92 f3f5 	sdiv	r3, r2, r5
9001452c:	4418      	add	r0, r3
9001452e:	fb05 2313 	mls	r3, r5, r3, r2
90014532:	bf18      	it	ne
90014534:	4240      	negne	r0, r0
90014536:	1c72      	adds	r2, r6, #1
90014538:	6023      	str	r3, [r4, #0]
9001453a:	d105      	bne.n	90014548 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
9001453c:	2b00      	cmp	r3, #0
9001453e:	f1c3 0200 	rsb	r2, r3, #0
90014542:	db0b      	blt.n	9001455c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90014544:	6022      	str	r2, [r4, #0]
90014546:	e006      	b.n	90014556 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90014548:	2e01      	cmp	r6, #1
9001454a:	d104      	bne.n	90014556 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
9001454c:	2b00      	cmp	r3, #0
9001454e:	da02      	bge.n	90014556 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90014550:	442b      	add	r3, r5
90014552:	3801      	subs	r0, #1
90014554:	6023      	str	r3, [r4, #0]
90014556:	b005      	add	sp, #20
90014558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001455c:	3801      	subs	r0, #1
9001455e:	1b52      	subs	r2, r2, r5
90014560:	e7f0      	b.n	90014544 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90014564 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90014564:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90014568:	4c1c      	ldr	r4, [pc, #112]	; (900145dc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
9001456a:	4605      	mov	r5, r0
9001456c:	6807      	ldr	r7, [r0, #0]
9001456e:	69a3      	ldr	r3, [r4, #24]
90014570:	b92b      	cbnz	r3, 9001457e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90014572:	6840      	ldr	r0, [r0, #4]
90014574:	e9c5 7000 	strd	r7, r0, [r5]
90014578:	b004      	add	sp, #16
9001457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001457e:	f04f 0802 	mov.w	r8, #2
90014582:	68a2      	ldr	r2, [r4, #8]
90014584:	ae04      	add	r6, sp, #16
90014586:	6820      	ldr	r0, [r4, #0]
90014588:	fb93 f1f8 	sdiv	r1, r3, r8
9001458c:	440a      	add	r2, r1
9001458e:	69e1      	ldr	r1, [r4, #28]
90014590:	f846 2d04 	str.w	r2, [r6, #-4]!
90014594:	463a      	mov	r2, r7
90014596:	9600      	str	r6, [sp, #0]
90014598:	f7ff ff97 	bl	900144ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
9001459c:	69a3      	ldr	r3, [r4, #24]
9001459e:	4607      	mov	r7, r0
900145a0:	686a      	ldr	r2, [r5, #4]
900145a2:	6a21      	ldr	r1, [r4, #32]
900145a4:	9600      	str	r6, [sp, #0]
900145a6:	6860      	ldr	r0, [r4, #4]
900145a8:	f7ff ff8f 	bl	900144ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900145ac:	69a3      	ldr	r3, [r4, #24]
900145ae:	6962      	ldr	r2, [r4, #20]
900145b0:	4407      	add	r7, r0
900145b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
900145b4:	9600      	str	r6, [sp, #0]
900145b6:	68e0      	ldr	r0, [r4, #12]
900145b8:	fb93 f8f8 	sdiv	r8, r3, r8
900145bc:	4442      	add	r2, r8
900145be:	9203      	str	r2, [sp, #12]
900145c0:	682a      	ldr	r2, [r5, #0]
900145c2:	f7ff ff82 	bl	900144ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900145c6:	4680      	mov	r8, r0
900145c8:	9600      	str	r6, [sp, #0]
900145ca:	69a3      	ldr	r3, [r4, #24]
900145cc:	686a      	ldr	r2, [r5, #4]
900145ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
900145d0:	6920      	ldr	r0, [r4, #16]
900145d2:	f7ff ff7a 	bl	900144ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
900145d6:	4440      	add	r0, r8
900145d8:	e7cc      	b.n	90014574 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
900145da:	bf00      	nop
900145dc:	24026468 	.word	0x24026468

900145e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
900145e0:	4b07      	ldr	r3, [pc, #28]	; (90014600 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
900145e2:	781b      	ldrb	r3, [r3, #0]
900145e4:	2b01      	cmp	r3, #1
900145e6:	d109      	bne.n	900145fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
900145e8:	f9b1 3000 	ldrsh.w	r3, [r1]
900145ec:	f9b0 2000 	ldrsh.w	r2, [r0]
900145f0:	8003      	strh	r3, [r0, #0]
900145f2:	4b04      	ldr	r3, [pc, #16]	; (90014604 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
900145f4:	881b      	ldrh	r3, [r3, #0]
900145f6:	3b01      	subs	r3, #1
900145f8:	1a9b      	subs	r3, r3, r2
900145fa:	800b      	strh	r3, [r1, #0]
900145fc:	4770      	bx	lr
900145fe:	bf00      	nop
90014600:	24026454 	.word	0x24026454
90014604:	24026450 	.word	0x24026450

90014608 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90014608:	4b07      	ldr	r3, [pc, #28]	; (90014628 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
9001460a:	b510      	push	{r4, lr}
9001460c:	781b      	ldrb	r3, [r3, #0]
9001460e:	2b01      	cmp	r3, #1
90014610:	d108      	bne.n	90014624 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90014612:	4b06      	ldr	r3, [pc, #24]	; (9001462c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90014614:	880c      	ldrh	r4, [r1, #0]
90014616:	881b      	ldrh	r3, [r3, #0]
90014618:	f9b0 2000 	ldrsh.w	r2, [r0]
9001461c:	3b01      	subs	r3, #1
9001461e:	1b1b      	subs	r3, r3, r4
90014620:	8003      	strh	r3, [r0, #0]
90014622:	800a      	strh	r2, [r1, #0]
90014624:	bd10      	pop	{r4, pc}
90014626:	bf00      	nop
90014628:	24026454 	.word	0x24026454
9001462c:	24026450 	.word	0x24026450

90014630 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90014630:	4b0a      	ldr	r3, [pc, #40]	; (9001465c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90014632:	b510      	push	{r4, lr}
90014634:	781b      	ldrb	r3, [r3, #0]
90014636:	2b01      	cmp	r3, #1
90014638:	d10e      	bne.n	90014658 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
9001463a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
9001463e:	8843      	ldrh	r3, [r0, #2]
90014640:	f9b0 4000 	ldrsh.w	r4, [r0]
90014644:	18ca      	adds	r2, r1, r3
90014646:	4b06      	ldr	r3, [pc, #24]	; (90014660 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90014648:	8044      	strh	r4, [r0, #2]
9001464a:	881b      	ldrh	r3, [r3, #0]
9001464c:	1a9b      	subs	r3, r3, r2
9001464e:	8003      	strh	r3, [r0, #0]
90014650:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90014654:	8081      	strh	r1, [r0, #4]
90014656:	80c3      	strh	r3, [r0, #6]
90014658:	bd10      	pop	{r4, pc}
9001465a:	bf00      	nop
9001465c:	24026454 	.word	0x24026454
90014660:	24026450 	.word	0x24026450

90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90014664:	4b08      	ldr	r3, [pc, #32]	; (90014688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90014666:	781b      	ldrb	r3, [r3, #0]
90014668:	2b01      	cmp	r3, #1
9001466a:	d10c      	bne.n	90014686 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
9001466c:	8803      	ldrh	r3, [r0, #0]
9001466e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90014672:	8842      	ldrh	r2, [r0, #2]
90014674:	8002      	strh	r2, [r0, #0]
90014676:	185a      	adds	r2, r3, r1
90014678:	4b04      	ldr	r3, [pc, #16]	; (9001468c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
9001467a:	881b      	ldrh	r3, [r3, #0]
9001467c:	1a9b      	subs	r3, r3, r2
9001467e:	8043      	strh	r3, [r0, #2]
90014680:	88c3      	ldrh	r3, [r0, #6]
90014682:	80c1      	strh	r1, [r0, #6]
90014684:	8083      	strh	r3, [r0, #4]
90014686:	4770      	bx	lr
90014688:	24026454 	.word	0x24026454
9001468c:	24026450 	.word	0x24026450

90014690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90014690:	4b07      	ldr	r3, [pc, #28]	; (900146b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90014692:	b510      	push	{r4, lr}
90014694:	781b      	ldrb	r3, [r3, #0]
90014696:	2b01      	cmp	r3, #1
90014698:	d108      	bne.n	900146ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
9001469a:	f9b1 3000 	ldrsh.w	r3, [r1]
9001469e:	f9b0 4000 	ldrsh.w	r4, [r0]
900146a2:	8003      	strh	r3, [r0, #0]
900146a4:	8893      	ldrh	r3, [r2, #4]
900146a6:	3b01      	subs	r3, #1
900146a8:	1b1b      	subs	r3, r3, r4
900146aa:	800b      	strh	r3, [r1, #0]
900146ac:	bd10      	pop	{r4, pc}
900146ae:	bf00      	nop
900146b0:	24026454 	.word	0x24026454

900146b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
900146b4:	4b0b      	ldr	r3, [pc, #44]	; (900146e4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
900146b6:	781b      	ldrb	r3, [r3, #0]
900146b8:	2b01      	cmp	r3, #1
900146ba:	d111      	bne.n	900146e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
900146bc:	680b      	ldr	r3, [r1, #0]
900146be:	ed90 7a00 	vldr	s14, [r0]
900146c2:	6003      	str	r3, [r0, #0]
900146c4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
900146c8:	eddf 6a07 	vldr	s13, [pc, #28]	; 900146e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
900146cc:	ee07 3a90 	vmov	s15, r3
900146d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900146d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
900146d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
900146dc:	edc1 7a00 	vstr	s15, [r1]
900146e0:	4770      	bx	lr
900146e2:	bf00      	nop
900146e4:	24026454 	.word	0x24026454
900146e8:	38d1b717 	.word	0x38d1b717

900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
900146ec:	4b0a      	ldr	r3, [pc, #40]	; (90014718 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
900146ee:	460a      	mov	r2, r1
900146f0:	b510      	push	{r4, lr}
900146f2:	781b      	ldrb	r3, [r3, #0]
900146f4:	2b01      	cmp	r3, #1
900146f6:	d10d      	bne.n	90014714 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
900146f8:	8881      	ldrh	r1, [r0, #4]
900146fa:	8803      	ldrh	r3, [r0, #0]
900146fc:	440b      	add	r3, r1
900146fe:	4601      	mov	r1, r0
90014700:	3b01      	subs	r3, #1
90014702:	f821 3b02 	strh.w	r3, [r1], #2
90014706:	f7ff ffc3 	bl	90014690 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
9001470a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9001470e:	88c2      	ldrh	r2, [r0, #6]
90014710:	80c3      	strh	r3, [r0, #6]
90014712:	8082      	strh	r2, [r0, #4]
90014714:	bd10      	pop	{r4, pc}
90014716:	bf00      	nop
90014718:	24026454 	.word	0x24026454

9001471c <_ZN8touchgfx11Application19changeToStartScreenEv>:
9001471c:	4770      	bx	lr
	...

90014720 <_ZN8touchgfx11Application13requestRedrawEv>:
90014720:	4b06      	ldr	r3, [pc, #24]	; (9001473c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
90014722:	2100      	movs	r1, #0
90014724:	f9b3 2000 	ldrsh.w	r2, [r3]
90014728:	4b05      	ldr	r3, [pc, #20]	; (90014740 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
9001472a:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
9001472e:	f9b3 3000 	ldrsh.w	r3, [r3]
90014732:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
90014736:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
9001473a:	4770      	bx	lr
9001473c:	24026450 	.word	0x24026450
90014740:	24026452 	.word	0x24026452

90014744 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
90014744:	4b03      	ldr	r3, [pc, #12]	; (90014754 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
90014746:	6818      	ldr	r0, [r3, #0]
90014748:	b110      	cbz	r0, 90014750 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
9001474a:	6803      	ldr	r3, [r0, #0]
9001474c:	699b      	ldr	r3, [r3, #24]
9001474e:	4718      	bx	r3
90014750:	4770      	bx	lr
90014752:	bf00      	nop
90014754:	24026498 	.word	0x24026498

90014758 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90014758:	4770      	bx	lr
	...

9001475c <_ZN8touchgfx11Application4drawEv>:
9001475c:	4b09      	ldr	r3, [pc, #36]	; (90014784 <_ZN8touchgfx11Application4drawEv+0x28>)
9001475e:	b507      	push	{r0, r1, r2, lr}
90014760:	f9b3 2000 	ldrsh.w	r2, [r3]
90014764:	2100      	movs	r1, #0
90014766:	4b08      	ldr	r3, [pc, #32]	; (90014788 <_ZN8touchgfx11Application4drawEv+0x2c>)
90014768:	9100      	str	r1, [sp, #0]
9001476a:	4669      	mov	r1, sp
9001476c:	f9b3 3000 	ldrsh.w	r3, [r3]
90014770:	f8ad 2004 	strh.w	r2, [sp, #4]
90014774:	f8ad 3006 	strh.w	r3, [sp, #6]
90014778:	6803      	ldr	r3, [r0, #0]
9001477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001477c:	4798      	blx	r3
9001477e:	b003      	add	sp, #12
90014780:	f85d fb04 	ldr.w	pc, [sp], #4
90014784:	24026450 	.word	0x24026450
90014788:	24026452 	.word	0x24026452

9001478c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
9001478c:	4b03      	ldr	r3, [pc, #12]	; (9001479c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
9001478e:	6818      	ldr	r0, [r3, #0]
90014790:	b110      	cbz	r0, 90014798 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
90014792:	6803      	ldr	r3, [r0, #0]
90014794:	69db      	ldr	r3, [r3, #28]
90014796:	4718      	bx	r3
90014798:	4770      	bx	lr
9001479a:	bf00      	nop
9001479c:	24026498 	.word	0x24026498

900147a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
900147a0:	4b03      	ldr	r3, [pc, #12]	; (900147b0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
900147a2:	6818      	ldr	r0, [r3, #0]
900147a4:	b110      	cbz	r0, 900147ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
900147a6:	6803      	ldr	r3, [r0, #0]
900147a8:	6a1b      	ldr	r3, [r3, #32]
900147aa:	4718      	bx	r3
900147ac:	4770      	bx	lr
900147ae:	bf00      	nop
900147b0:	24026498 	.word	0x24026498

900147b4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
900147b4:	2300      	movs	r3, #0
900147b6:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
900147ba:	4770      	bx	lr

900147bc <_ZN8touchgfx11Application14handleKeyEventEh>:
900147bc:	4b03      	ldr	r3, [pc, #12]	; (900147cc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
900147be:	6818      	ldr	r0, [r3, #0]
900147c0:	b110      	cbz	r0, 900147c8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
900147c2:	6803      	ldr	r3, [r0, #0]
900147c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900147c6:	4718      	bx	r3
900147c8:	4770      	bx	lr
900147ca:	bf00      	nop
900147cc:	24026498 	.word	0x24026498

900147d0 <_ZN8touchgfx11ApplicationD1Ev>:
900147d0:	4770      	bx	lr

900147d2 <_ZN8touchgfx11ApplicationD0Ev>:
900147d2:	b510      	push	{r4, lr}
900147d4:	4604      	mov	r4, r0
900147d6:	f44f 719e 	mov.w	r1, #316	; 0x13c
900147da:	f00e ff16 	bl	9002360a <_ZdlPvj>
900147de:	4620      	mov	r0, r4
900147e0:	bd10      	pop	{r4, pc}

900147e2 <_ZNK8touchgfx4Rect9intersectERKS0_>:
900147e2:	b510      	push	{r4, lr}
900147e4:	f9b1 4000 	ldrsh.w	r4, [r1]
900147e8:	888a      	ldrh	r2, [r1, #4]
900147ea:	f9b0 3000 	ldrsh.w	r3, [r0]
900147ee:	4422      	add	r2, r4
900147f0:	b212      	sxth	r2, r2
900147f2:	4293      	cmp	r3, r2
900147f4:	da15      	bge.n	90014822 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
900147f6:	8882      	ldrh	r2, [r0, #4]
900147f8:	4413      	add	r3, r2
900147fa:	b21b      	sxth	r3, r3
900147fc:	429c      	cmp	r4, r3
900147fe:	da10      	bge.n	90014822 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90014800:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
90014804:	88c9      	ldrh	r1, [r1, #6]
90014806:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
9001480a:	4419      	add	r1, r3
9001480c:	b209      	sxth	r1, r1
9001480e:	428a      	cmp	r2, r1
90014810:	da07      	bge.n	90014822 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
90014812:	88c0      	ldrh	r0, [r0, #6]
90014814:	4410      	add	r0, r2
90014816:	b200      	sxth	r0, r0
90014818:	4283      	cmp	r3, r0
9001481a:	bfac      	ite	ge
9001481c:	2000      	movge	r0, #0
9001481e:	2001      	movlt	r0, #1
90014820:	bd10      	pop	{r4, pc}
90014822:	2000      	movs	r0, #0
90014824:	e7fc      	b.n	90014820 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

90014826 <_ZN8touchgfx4Rect10restrictToEss>:
90014826:	f9b0 3000 	ldrsh.w	r3, [r0]
9001482a:	2b00      	cmp	r3, #0
9001482c:	b510      	push	{r4, lr}
9001482e:	da04      	bge.n	9001483a <_ZN8touchgfx4Rect10restrictToEss+0x14>
90014830:	8884      	ldrh	r4, [r0, #4]
90014832:	4423      	add	r3, r4
90014834:	8083      	strh	r3, [r0, #4]
90014836:	2300      	movs	r3, #0
90014838:	8003      	strh	r3, [r0, #0]
9001483a:	f9b0 4000 	ldrsh.w	r4, [r0]
9001483e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90014842:	1b09      	subs	r1, r1, r4
90014844:	428b      	cmp	r3, r1
90014846:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
9001484a:	bfc8      	it	gt
9001484c:	8081      	strhgt	r1, [r0, #4]
9001484e:	2b00      	cmp	r3, #0
90014850:	da04      	bge.n	9001485c <_ZN8touchgfx4Rect10restrictToEss+0x36>
90014852:	88c1      	ldrh	r1, [r0, #6]
90014854:	440b      	add	r3, r1
90014856:	80c3      	strh	r3, [r0, #6]
90014858:	2300      	movs	r3, #0
9001485a:	8043      	strh	r3, [r0, #2]
9001485c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90014860:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
90014864:	1a52      	subs	r2, r2, r1
90014866:	4293      	cmp	r3, r2
90014868:	bfc8      	it	gt
9001486a:	80c2      	strhgt	r2, [r0, #6]
9001486c:	bd10      	pop	{r4, pc}
	...

90014870 <_ZN8touchgfx11Application4drawERNS_4RectE>:
90014870:	4b10      	ldr	r3, [pc, #64]	; (900148b4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
90014872:	b510      	push	{r4, lr}
90014874:	460c      	mov	r4, r1
90014876:	f9b3 2000 	ldrsh.w	r2, [r3]
9001487a:	4b0f      	ldr	r3, [pc, #60]	; (900148b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
9001487c:	4620      	mov	r0, r4
9001487e:	f9b3 1000 	ldrsh.w	r1, [r3]
90014882:	f7ff ffd0 	bl	90014826 <_ZN8touchgfx4Rect10restrictToEss>
90014886:	4b0d      	ldr	r3, [pc, #52]	; (900148bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90014888:	6818      	ldr	r0, [r3, #0]
9001488a:	b190      	cbz	r0, 900148b2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
9001488c:	6803      	ldr	r3, [r0, #0]
9001488e:	4621      	mov	r1, r4
90014890:	689b      	ldr	r3, [r3, #8]
90014892:	4798      	blx	r3
90014894:	4b0a      	ldr	r3, [pc, #40]	; (900148c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
90014896:	6818      	ldr	r0, [r3, #0]
90014898:	b118      	cbz	r0, 900148a2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
9001489a:	6803      	ldr	r3, [r0, #0]
9001489c:	4621      	mov	r1, r4
9001489e:	689b      	ldr	r3, [r3, #8]
900148a0:	4798      	blx	r3
900148a2:	4b08      	ldr	r3, [pc, #32]	; (900148c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
900148a4:	4621      	mov	r1, r4
900148a6:	6818      	ldr	r0, [r3, #0]
900148a8:	6803      	ldr	r3, [r0, #0]
900148aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900148ae:	69db      	ldr	r3, [r3, #28]
900148b0:	4718      	bx	r3
900148b2:	bd10      	pop	{r4, pc}
900148b4:	24026452 	.word	0x24026452
900148b8:	24026450 	.word	0x24026450
900148bc:	24026498 	.word	0x24026498
900148c0:	24026494 	.word	0x24026494
900148c4:	2402645c 	.word	0x2402645c

900148c8 <_ZNK8touchgfx4Rect8includesERKS0_>:
900148c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900148ca:	4606      	mov	r6, r0
900148cc:	4608      	mov	r0, r1
900148ce:	460f      	mov	r7, r1
900148d0:	f7fc f853 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
900148d4:	b9e8      	cbnz	r0, 90014912 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900148d6:	f9b7 5000 	ldrsh.w	r5, [r7]
900148da:	f9b6 4000 	ldrsh.w	r4, [r6]
900148de:	42a5      	cmp	r5, r4
900148e0:	db17      	blt.n	90014912 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900148e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
900148e6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
900148ea:	429a      	cmp	r2, r3
900148ec:	db11      	blt.n	90014912 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900148ee:	88b9      	ldrh	r1, [r7, #4]
900148f0:	440d      	add	r5, r1
900148f2:	88b1      	ldrh	r1, [r6, #4]
900148f4:	440c      	add	r4, r1
900148f6:	b22d      	sxth	r5, r5
900148f8:	b224      	sxth	r4, r4
900148fa:	42a5      	cmp	r5, r4
900148fc:	dc09      	bgt.n	90014912 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900148fe:	88f8      	ldrh	r0, [r7, #6]
90014900:	4410      	add	r0, r2
90014902:	88f2      	ldrh	r2, [r6, #6]
90014904:	4413      	add	r3, r2
90014906:	b200      	sxth	r0, r0
90014908:	b21b      	sxth	r3, r3
9001490a:	4298      	cmp	r0, r3
9001490c:	bfcc      	ite	gt
9001490e:	2000      	movgt	r0, #0
90014910:	2001      	movle	r0, #1
90014912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90014914 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
90014914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014916:	4604      	mov	r4, r0
90014918:	4608      	mov	r0, r1
9001491a:	460d      	mov	r5, r1
9001491c:	f7fc f82d 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90014920:	b978      	cbnz	r0, 90014942 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
90014922:	4620      	mov	r0, r4
90014924:	f7fc f829 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90014928:	f9b5 6000 	ldrsh.w	r6, [r5]
9001492c:	b150      	cbz	r0, 90014944 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
9001492e:	8026      	strh	r6, [r4, #0]
90014930:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
90014934:	8063      	strh	r3, [r4, #2]
90014936:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
9001493a:	80a3      	strh	r3, [r4, #4]
9001493c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90014940:	80e3      	strh	r3, [r4, #6]
90014942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014944:	f9b4 1000 	ldrsh.w	r1, [r4]
90014948:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
9001494c:	42b1      	cmp	r1, r6
9001494e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
90014952:	f8b5 c004 	ldrh.w	ip, [r5, #4]
90014956:	460f      	mov	r7, r1
90014958:	88ed      	ldrh	r5, [r5, #6]
9001495a:	bfa8      	it	ge
9001495c:	4637      	movge	r7, r6
9001495e:	4293      	cmp	r3, r2
90014960:	4618      	mov	r0, r3
90014962:	4466      	add	r6, ip
90014964:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90014968:	bfa8      	it	ge
9001496a:	4610      	movge	r0, r2
9001496c:	442a      	add	r2, r5
9001496e:	88e5      	ldrh	r5, [r4, #6]
90014970:	4461      	add	r1, ip
90014972:	b236      	sxth	r6, r6
90014974:	8027      	strh	r7, [r4, #0]
90014976:	442b      	add	r3, r5
90014978:	b209      	sxth	r1, r1
9001497a:	b212      	sxth	r2, r2
9001497c:	8060      	strh	r0, [r4, #2]
9001497e:	b21b      	sxth	r3, r3
90014980:	428e      	cmp	r6, r1
90014982:	bfac      	ite	ge
90014984:	ebc7 0106 	rsbge	r1, r7, r6
90014988:	ebc7 0101 	rsblt	r1, r7, r1
9001498c:	429a      	cmp	r2, r3
9001498e:	bfac      	ite	ge
90014990:	ebc0 0202 	rsbge	r2, r0, r2
90014994:	ebc0 0203 	rsblt	r2, r0, r3
90014998:	80a1      	strh	r1, [r4, #4]
9001499a:	80e2      	strh	r2, [r4, #6]
9001499c:	e7d1      	b.n	90014942 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

900149a0 <_ZN8touchgfx11Application11getInstanceEv>:
900149a0:	4b01      	ldr	r3, [pc, #4]	; (900149a8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
900149a2:	6818      	ldr	r0, [r3, #0]
900149a4:	4770      	bx	lr
900149a6:	bf00      	nop
900149a8:	240264a8 	.word	0x240264a8

900149ac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
900149ac:	2300      	movs	r3, #0
900149ae:	b510      	push	{r4, lr}
900149b0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
900149b4:	4604      	mov	r4, r0
900149b6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
900149ba:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
900149be:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
900149c2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
900149c6:	429a      	cmp	r2, r3
900149c8:	d90e      	bls.n	900149e8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
900149ca:	18e2      	adds	r2, r4, r3
900149cc:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
900149d0:	b122      	cbz	r2, 900149dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
900149d2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
900149d6:	6803      	ldr	r3, [r0, #0]
900149d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900149da:	4798      	blx	r3
900149dc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
900149e0:	3301      	adds	r3, #1
900149e2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
900149e6:	e7ea      	b.n	900149be <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
900149e8:	bd10      	pop	{r4, pc}

900149ea <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
900149ea:	2300      	movs	r3, #0
900149ec:	f100 0284 	add.w	r2, r0, #132	; 0x84
900149f0:	30a4      	adds	r0, #164	; 0xa4
900149f2:	f820 3c24 	strh.w	r3, [r0, #-36]
900149f6:	f802 3b01 	strb.w	r3, [r2], #1
900149fa:	4282      	cmp	r2, r0
900149fc:	d1fb      	bne.n	900149f6 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
900149fe:	4770      	bx	lr

90014a00 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
90014a00:	b570      	push	{r4, r5, r6, lr}
90014a02:	4c0b      	ldr	r4, [pc, #44]	; (90014a30 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
90014a04:	4605      	mov	r5, r0
90014a06:	460e      	mov	r6, r1
90014a08:	6820      	ldr	r0, [r4, #0]
90014a0a:	b110      	cbz	r0, 90014a12 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
90014a0c:	6803      	ldr	r3, [r0, #0]
90014a0e:	695b      	ldr	r3, [r3, #20]
90014a10:	4798      	blx	r3
90014a12:	1d28      	adds	r0, r5, #4
90014a14:	f7ff ffe9 	bl	900149ea <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90014a18:	6026      	str	r6, [r4, #0]
90014a1a:	6833      	ldr	r3, [r6, #0]
90014a1c:	4630      	mov	r0, r6
90014a1e:	68db      	ldr	r3, [r3, #12]
90014a20:	4798      	blx	r3
90014a22:	682b      	ldr	r3, [r5, #0]
90014a24:	4628      	mov	r0, r5
90014a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90014a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014a2c:	4718      	bx	r3
90014a2e:	bf00      	nop
90014a30:	24026498 	.word	0x24026498

90014a34 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
90014a34:	2300      	movs	r3, #0
90014a36:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
90014a3a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
90014a3e:	461a      	mov	r2, r3
90014a40:	b5f0      	push	{r4, r5, r6, r7, lr}
90014a42:	461c      	mov	r4, r3
90014a44:	461d      	mov	r5, r3
90014a46:	459c      	cmp	ip, r3
90014a48:	dd1a      	ble.n	90014a80 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
90014a4a:	18c6      	adds	r6, r0, r3
90014a4c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
90014a50:	b16e      	cbz	r6, 90014a6e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
90014a52:	429a      	cmp	r2, r3
90014a54:	d008      	beq.n	90014a68 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
90014a56:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
90014a5a:	fa1f fe82 	uxth.w	lr, r2
90014a5e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
90014a62:	1887      	adds	r7, r0, r2
90014a64:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
90014a68:	3201      	adds	r2, #1
90014a6a:	3301      	adds	r3, #1
90014a6c:	e7eb      	b.n	90014a46 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
90014a6e:	4299      	cmp	r1, r3
90014a70:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
90014a74:	bfa8      	it	ge
90014a76:	3501      	addge	r5, #1
90014a78:	429e      	cmp	r6, r3
90014a7a:	bfc8      	it	gt
90014a7c:	3401      	addgt	r4, #1
90014a7e:	e7f4      	b.n	90014a6a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90014a80:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
90014a84:	1b49      	subs	r1, r1, r5
90014a86:	1b1b      	subs	r3, r3, r4
90014a88:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
90014a8c:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90014a90:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
90014a94:	4293      	cmp	r3, r2
90014a96:	dd03      	ble.n	90014aa0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90014a98:	3b01      	subs	r3, #1
90014a9a:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
90014a9e:	e7f7      	b.n	90014a90 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90014aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

90014aa4 <_ZN8touchgfx11Application15handleTickEventEv>:
90014aa4:	b570      	push	{r4, r5, r6, lr}
90014aa6:	4d16      	ldr	r5, [pc, #88]	; (90014b00 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90014aa8:	4604      	mov	r4, r0
90014aaa:	6828      	ldr	r0, [r5, #0]
90014aac:	b140      	cbz	r0, 90014ac0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90014aae:	7a03      	ldrb	r3, [r0, #8]
90014ab0:	b933      	cbnz	r3, 90014ac0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90014ab2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90014ab6:	6803      	ldr	r3, [r0, #0]
90014ab8:	689b      	ldr	r3, [r3, #8]
90014aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014abe:	4718      	bx	r3
90014ac0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
90014ac4:	4e0f      	ldr	r6, [pc, #60]	; (90014b04 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
90014ac6:	b973      	cbnz	r3, 90014ae6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90014ac8:	b168      	cbz	r0, 90014ae6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90014aca:	7a03      	ldrb	r3, [r0, #8]
90014acc:	b15b      	cbz	r3, 90014ae6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
90014ace:	6830      	ldr	r0, [r6, #0]
90014ad0:	b110      	cbz	r0, 90014ad8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
90014ad2:	6803      	ldr	r3, [r0, #0]
90014ad4:	691b      	ldr	r3, [r3, #16]
90014ad6:	4798      	blx	r3
90014ad8:	6828      	ldr	r0, [r5, #0]
90014ada:	6803      	ldr	r3, [r0, #0]
90014adc:	68db      	ldr	r3, [r3, #12]
90014ade:	4798      	blx	r3
90014ae0:	2301      	movs	r3, #1
90014ae2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
90014ae6:	3404      	adds	r4, #4
90014ae8:	4620      	mov	r0, r4
90014aea:	f7ff ff5f 	bl	900149ac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
90014aee:	4620      	mov	r0, r4
90014af0:	f7ff ffa0 	bl	90014a34 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
90014af4:	6830      	ldr	r0, [r6, #0]
90014af6:	b110      	cbz	r0, 90014afe <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
90014af8:	6803      	ldr	r3, [r0, #0]
90014afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014afc:	e7dd      	b.n	90014aba <_ZN8touchgfx11Application15handleTickEventEv+0x16>
90014afe:	bd70      	pop	{r4, r5, r6, pc}
90014b00:	2402649c 	.word	0x2402649c
90014b04:	24026498 	.word	0x24026498

90014b08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
90014b08:	4603      	mov	r3, r0
90014b0a:	f100 0140 	add.w	r1, r0, #64	; 0x40
90014b0e:	2200      	movs	r2, #0
90014b10:	801a      	strh	r2, [r3, #0]
90014b12:	3308      	adds	r3, #8
90014b14:	f823 2c06 	strh.w	r2, [r3, #-6]
90014b18:	f823 2c04 	strh.w	r2, [r3, #-4]
90014b1c:	f823 2c02 	strh.w	r2, [r3, #-2]
90014b20:	428b      	cmp	r3, r1
90014b22:	d1f5      	bne.n	90014b10 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
90014b24:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90014b28:	4770      	bx	lr
	...

90014b2c <_ZN8touchgfx11ApplicationC1Ev>:
90014b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90014b2e:	4b1d      	ldr	r3, [pc, #116]	; (90014ba4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90014b30:	4606      	mov	r6, r0
90014b32:	4604      	mov	r4, r0
90014b34:	2500      	movs	r5, #0
90014b36:	f846 3b04 	str.w	r3, [r6], #4
90014b3a:	22a8      	movs	r2, #168	; 0xa8
90014b3c:	2100      	movs	r1, #0
90014b3e:	4630      	mov	r0, r6
90014b40:	f00f f82c 	bl	90023b9c <memset>
90014b44:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
90014b48:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90014b4c:	4f16      	ldr	r7, [pc, #88]	; (90014ba8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
90014b4e:	f7ff ffdb 	bl	90014b08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90014b52:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90014b56:	f7ff ffd7 	bl	90014b08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90014b5a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
90014b5e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
90014b62:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
90014b66:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
90014b6a:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
90014b6e:	490f      	ldr	r1, [pc, #60]	; (90014bac <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90014b70:	480f      	ldr	r0, [pc, #60]	; (90014bb0 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
90014b72:	f00e fc41 	bl	900233f8 <CRC_Lock>
90014b76:	4b0f      	ldr	r3, [pc, #60]	; (90014bb4 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90014b78:	b158      	cbz	r0, 90014b92 <_ZN8touchgfx11ApplicationC1Ev+0x66>
90014b7a:	801d      	strh	r5, [r3, #0]
90014b7c:	2300      	movs	r3, #0
90014b7e:	4a0e      	ldr	r2, [pc, #56]	; (90014bb8 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90014b80:	4630      	mov	r0, r6
90014b82:	6013      	str	r3, [r2, #0]
90014b84:	4a0d      	ldr	r2, [pc, #52]	; (90014bbc <_ZN8touchgfx11ApplicationC1Ev+0x90>)
90014b86:	603b      	str	r3, [r7, #0]
90014b88:	6013      	str	r3, [r2, #0]
90014b8a:	f7ff ff2e 	bl	900149ea <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90014b8e:	4620      	mov	r0, r4
90014b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90014b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
90014b96:	2002      	movs	r0, #2
90014b98:	801a      	strh	r2, [r3, #0]
90014b9a:	6038      	str	r0, [r7, #0]
90014b9c:	f001 fa48 	bl	90016030 <_ZN8touchgfx6Screen4drawEv>
90014ba0:	e7ec      	b.n	90014b7c <_ZN8touchgfx11ApplicationC1Ev+0x50>
90014ba2:	bf00      	nop
90014ba4:	90027734 	.word	0x90027734
90014ba8:	24026498 	.word	0x24026498
90014bac:	b5e8b5cd 	.word	0xb5e8b5cd
90014bb0:	f407a5c2 	.word	0xf407a5c2
90014bb4:	2400006c 	.word	0x2400006c
90014bb8:	240264a8 	.word	0x240264a8
90014bbc:	2402649c 	.word	0x2402649c

90014bc0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
90014bc0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
90014bc4:	3b01      	subs	r3, #1
90014bc6:	b29b      	uxth	r3, r3
90014bc8:	428b      	cmp	r3, r1
90014bca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
90014bce:	b510      	push	{r4, lr}
90014bd0:	d908      	bls.n	90014be4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
90014bd2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
90014bd6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
90014bda:	681a      	ldr	r2, [r3, #0]
90014bdc:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
90014be0:	685a      	ldr	r2, [r3, #4]
90014be2:	6062      	str	r2, [r4, #4]
90014be4:	bd10      	pop	{r4, pc}
	...

90014be8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
90014be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014bec:	b08f      	sub	sp, #60	; 0x3c
90014bee:	4b8f      	ldr	r3, [pc, #572]	; (90014e2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
90014bf0:	4683      	mov	fp, r0
90014bf2:	ac0a      	add	r4, sp, #40	; 0x28
90014bf4:	e884 0006 	stmia.w	r4, {r1, r2}
90014bf8:	f9b3 2000 	ldrsh.w	r2, [r3]
90014bfc:	4620      	mov	r0, r4
90014bfe:	4b8c      	ldr	r3, [pc, #560]	; (90014e30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
90014c00:	f9b3 1000 	ldrsh.w	r1, [r3]
90014c04:	f7ff fe0f 	bl	90014826 <_ZN8touchgfx4Rect10restrictToEss>
90014c08:	4620      	mov	r0, r4
90014c0a:	f7fb feb6 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90014c0e:	2800      	cmp	r0, #0
90014c10:	d16a      	bne.n	90014ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90014c12:	9403      	str	r4, [sp, #12]
90014c14:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90014c18:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90014c1c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90014c20:	9301      	str	r3, [sp, #4]
90014c22:	35a4      	adds	r5, #164	; 0xa4
90014c24:	b15c      	cbz	r4, 90014c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
90014c26:	4629      	mov	r1, r5
90014c28:	9803      	ldr	r0, [sp, #12]
90014c2a:	f7ff fe4d 	bl	900148c8 <_ZNK8touchgfx4Rect8includesERKS0_>
90014c2e:	3c01      	subs	r4, #1
90014c30:	b118      	cbz	r0, 90014c3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
90014c32:	b2a1      	uxth	r1, r4
90014c34:	9801      	ldr	r0, [sp, #4]
90014c36:	f7ff ffc3 	bl	90014bc0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014c3a:	3d08      	subs	r5, #8
90014c3c:	e7f2      	b.n	90014c24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
90014c3e:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
90014c42:	f108 33ff 	add.w	r3, r8, #4294967295
90014c46:	f8cd 8010 	str.w	r8, [sp, #16]
90014c4a:	9302      	str	r3, [sp, #8]
90014c4c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90014c50:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
90014c54:	9306      	str	r3, [sp, #24]
90014c56:	445c      	add	r4, fp
90014c58:	2500      	movs	r5, #0
90014c5a:	4626      	mov	r6, r4
90014c5c:	f8cd 8014 	str.w	r8, [sp, #20]
90014c60:	462f      	mov	r7, r5
90014c62:	9b05      	ldr	r3, [sp, #20]
90014c64:	2b00      	cmp	r3, #0
90014c66:	d073      	beq.n	90014d50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90014c68:	9903      	ldr	r1, [sp, #12]
90014c6a:	4630      	mov	r0, r6
90014c6c:	f7ff fdb9 	bl	900147e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
90014c70:	b350      	cbz	r0, 90014cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90014c72:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
90014c76:	f9b6 c000 	ldrsh.w	ip, [r6]
90014c7a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90014c7e:	45e6      	cmp	lr, ip
90014c80:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
90014c84:	db33      	blt.n	90014cee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90014c86:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90014c8a:	88b3      	ldrh	r3, [r6, #4]
90014c8c:	4472      	add	r2, lr
90014c8e:	4463      	add	r3, ip
90014c90:	b212      	sxth	r2, r2
90014c92:	b21b      	sxth	r3, r3
90014c94:	429a      	cmp	r2, r3
90014c96:	dc2a      	bgt.n	90014cee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90014c98:	fa1f f289 	uxth.w	r2, r9
90014c9c:	88f3      	ldrh	r3, [r6, #6]
90014c9e:	45ca      	cmp	sl, r9
90014ca0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
90014ca4:	4413      	add	r3, r2
90014ca6:	fa1f fc8a 	uxth.w	ip, sl
90014caa:	b29b      	uxth	r3, r3
90014cac:	fa0f fe83 	sxth.w	lr, r3
90014cb0:	db0f      	blt.n	90014cd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
90014cb2:	eba3 030c 	sub.w	r3, r3, ip
90014cb6:	1ac9      	subs	r1, r1, r3
90014cb8:	b209      	sxth	r1, r1
90014cba:	2900      	cmp	r1, #0
90014cbc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90014cc0:	dd12      	ble.n	90014ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90014cc2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
90014cc6:	4605      	mov	r5, r0
90014cc8:	9b05      	ldr	r3, [sp, #20]
90014cca:	3e08      	subs	r6, #8
90014ccc:	3b01      	subs	r3, #1
90014cce:	9305      	str	r3, [sp, #20]
90014cd0:	e7c7      	b.n	90014c62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
90014cd2:	4461      	add	r1, ip
90014cd4:	b209      	sxth	r1, r1
90014cd6:	4571      	cmp	r1, lr
90014cd8:	dc38      	bgt.n	90014d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014cda:	eba2 020c 	sub.w	r2, r2, ip
90014cde:	b212      	sxth	r2, r2
90014ce0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
90014ce4:	2a00      	cmp	r2, #0
90014ce6:	dcee      	bgt.n	90014cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90014ce8:	b00f      	add	sp, #60	; 0x3c
90014cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014cee:	45ca      	cmp	sl, r9
90014cf0:	db2c      	blt.n	90014d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014cf2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
90014cf6:	449a      	add	sl, r3
90014cf8:	88f3      	ldrh	r3, [r6, #6]
90014cfa:	4499      	add	r9, r3
90014cfc:	fa0f fa8a 	sxth.w	sl, sl
90014d00:	fa0f f989 	sxth.w	r9, r9
90014d04:	45ca      	cmp	sl, r9
90014d06:	dc21      	bgt.n	90014d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014d08:	fa1f f28c 	uxth.w	r2, ip
90014d0c:	88b3      	ldrh	r3, [r6, #4]
90014d0e:	45e6      	cmp	lr, ip
90014d10:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
90014d14:	4413      	add	r3, r2
90014d16:	fa1f f98e 	uxth.w	r9, lr
90014d1a:	b29b      	uxth	r3, r3
90014d1c:	fa0f fa83 	sxth.w	sl, r3
90014d20:	db0a      	blt.n	90014d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
90014d22:	eba3 0309 	sub.w	r3, r3, r9
90014d26:	1ac9      	subs	r1, r1, r3
90014d28:	b209      	sxth	r1, r1
90014d2a:	2900      	cmp	r1, #0
90014d2c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
90014d30:	ddda      	ble.n	90014ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90014d32:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
90014d36:	e7c6      	b.n	90014cc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90014d38:	4449      	add	r1, r9
90014d3a:	b209      	sxth	r1, r1
90014d3c:	4551      	cmp	r1, sl
90014d3e:	dc05      	bgt.n	90014d4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90014d40:	eba2 0209 	sub.w	r2, r2, r9
90014d44:	b212      	sxth	r2, r2
90014d46:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
90014d4a:	e7cb      	b.n	90014ce4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
90014d4c:	4607      	mov	r7, r0
90014d4e:	e7bb      	b.n	90014cc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90014d50:	2d00      	cmp	r5, #0
90014d52:	d181      	bne.n	90014c58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
90014d54:	2f00      	cmp	r7, #0
90014d56:	f000 81dd 	beq.w	90015114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90014d5a:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
90014d5e:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
90014d62:	b2b3      	uxth	r3, r6
90014d64:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90014d68:	b2b9      	uxth	r1, r7
90014d6a:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
90014d6e:	441a      	add	r2, r3
90014d70:	448a      	add	sl, r1
90014d72:	9105      	str	r1, [sp, #20]
90014d74:	b292      	uxth	r2, r2
90014d76:	fa1f fa8a 	uxth.w	sl, sl
90014d7a:	fa0f f882 	sxth.w	r8, r2
90014d7e:	fa0f f98a 	sxth.w	r9, sl
90014d82:	e9cd 2307 	strd	r2, r3, [sp, #28]
90014d86:	9b04      	ldr	r3, [sp, #16]
90014d88:	2b00      	cmp	r3, #0
90014d8a:	d053      	beq.n	90014e34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
90014d8c:	9903      	ldr	r1, [sp, #12]
90014d8e:	4620      	mov	r0, r4
90014d90:	f7ff fd27 	bl	900147e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
90014d94:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90014d98:	b1c0      	cbz	r0, 90014dcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014d9a:	f9b4 e000 	ldrsh.w	lr, [r4]
90014d9e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90014da2:	4576      	cmp	r6, lr
90014da4:	dc23      	bgt.n	90014dee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90014da6:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90014daa:	44f4      	add	ip, lr
90014dac:	fa0f fc8c 	sxth.w	ip, ip
90014db0:	45e0      	cmp	r8, ip
90014db2:	db1c      	blt.n	90014dee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
90014db4:	428f      	cmp	r7, r1
90014db6:	fa1f fc81 	uxth.w	ip, r1
90014dba:	88e1      	ldrh	r1, [r4, #6]
90014dbc:	dc0d      	bgt.n	90014dda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
90014dbe:	ebaa 0c0c 	sub.w	ip, sl, ip
90014dc2:	f8a4 9002 	strh.w	r9, [r4, #2]
90014dc6:	eba1 010c 	sub.w	r1, r1, ip
90014dca:	80e1      	strh	r1, [r4, #6]
90014dcc:	4628      	mov	r0, r5
90014dce:	9904      	ldr	r1, [sp, #16]
90014dd0:	3c08      	subs	r4, #8
90014dd2:	4605      	mov	r5, r0
90014dd4:	3901      	subs	r1, #1
90014dd6:	9104      	str	r1, [sp, #16]
90014dd8:	e7d3      	b.n	90014d82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
90014dda:	4461      	add	r1, ip
90014ddc:	b209      	sxth	r1, r1
90014dde:	4549      	cmp	r1, r9
90014de0:	dcf5      	bgt.n	90014dce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90014de2:	9905      	ldr	r1, [sp, #20]
90014de4:	eba1 0c0c 	sub.w	ip, r1, ip
90014de8:	f8a4 c006 	strh.w	ip, [r4, #6]
90014dec:	e7ee      	b.n	90014dcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014dee:	428f      	cmp	r7, r1
90014df0:	dced      	bgt.n	90014dce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90014df2:	f8b4 c006 	ldrh.w	ip, [r4, #6]
90014df6:	4461      	add	r1, ip
90014df8:	b209      	sxth	r1, r1
90014dfa:	4589      	cmp	r9, r1
90014dfc:	dbe7      	blt.n	90014dce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90014dfe:	4576      	cmp	r6, lr
90014e00:	fa1f fc8e 	uxth.w	ip, lr
90014e04:	88a1      	ldrh	r1, [r4, #4]
90014e06:	dc07      	bgt.n	90014e18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
90014e08:	eba2 0c0c 	sub.w	ip, r2, ip
90014e0c:	f8a4 8000 	strh.w	r8, [r4]
90014e10:	eba1 010c 	sub.w	r1, r1, ip
90014e14:	80a1      	strh	r1, [r4, #4]
90014e16:	e7d9      	b.n	90014dcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014e18:	4461      	add	r1, ip
90014e1a:	b209      	sxth	r1, r1
90014e1c:	4588      	cmp	r8, r1
90014e1e:	dbd6      	blt.n	90014dce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90014e20:	eba3 0c0c 	sub.w	ip, r3, ip
90014e24:	f8a4 c004 	strh.w	ip, [r4, #4]
90014e28:	e7d0      	b.n	90014dcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90014e2a:	bf00      	nop
90014e2c:	24026452 	.word	0x24026452
90014e30:	24026450 	.word	0x24026450
90014e34:	2d00      	cmp	r5, #0
90014e36:	f000 816d 	beq.w	90015114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90014e3a:	9b06      	ldr	r3, [sp, #24]
90014e3c:	445b      	add	r3, fp
90014e3e:	461c      	mov	r4, r3
90014e40:	9b02      	ldr	r3, [sp, #8]
90014e42:	3301      	adds	r3, #1
90014e44:	f000 8166 	beq.w	90015114 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90014e48:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
90014e4c:	9803      	ldr	r0, [sp, #12]
90014e4e:	4629      	mov	r1, r5
90014e50:	f7ff fd3a 	bl	900148c8 <_ZNK8touchgfx4Rect8includesERKS0_>
90014e54:	b120      	cbz	r0, 90014e60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
90014e56:	f8bd 1008 	ldrh.w	r1, [sp, #8]
90014e5a:	9801      	ldr	r0, [sp, #4]
90014e5c:	f7ff feb0 	bl	90014bc0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90014e60:	9903      	ldr	r1, [sp, #12]
90014e62:	4628      	mov	r0, r5
90014e64:	f7ff fcbd 	bl	900147e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
90014e68:	2800      	cmp	r0, #0
90014e6a:	f000 809c 	beq.w	90014fa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90014e6e:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
90014e72:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90014e76:	fa1f f189 	uxth.w	r1, r9
90014e7a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90014e7e:	9309      	str	r3, [sp, #36]	; 0x24
90014e80:	eb01 0c03 	add.w	ip, r1, r3
90014e84:	b283      	uxth	r3, r0
90014e86:	4548      	cmp	r0, r9
90014e88:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
90014e8c:	fa1f fa8c 	uxth.w	sl, ip
90014e90:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
90014e94:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90014e98:	eb03 050c 	add.w	r5, r3, ip
90014e9c:	b2ad      	uxth	r5, r5
90014e9e:	9505      	str	r5, [sp, #20]
90014ea0:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
90014ea4:	9504      	str	r5, [sp, #16]
90014ea6:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
90014eaa:	f340 8099 	ble.w	90014fe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
90014eae:	1a5b      	subs	r3, r3, r1
90014eb0:	4596      	cmp	lr, r2
90014eb2:	fa0f f08a 	sxth.w	r0, sl
90014eb6:	b29b      	uxth	r3, r3
90014eb8:	b21e      	sxth	r6, r3
90014eba:	dd2e      	ble.n	90014f1a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
90014ebc:	9f02      	ldr	r7, [sp, #8]
90014ebe:	fa1f fe8e 	uxth.w	lr, lr
90014ec2:	b292      	uxth	r2, r2
90014ec4:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
90014ec8:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
90014ecc:	9f04      	ldr	r7, [sp, #16]
90014ece:	ebae 0102 	sub.w	r1, lr, r2
90014ed2:	44a6      	add	lr, r4
90014ed4:	1a3f      	subs	r7, r7, r0
90014ed6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
90014eda:	b289      	uxth	r1, r1
90014edc:	4402      	add	r2, r0
90014ede:	fa0f fe8e 	sxth.w	lr, lr
90014ee2:	b20d      	sxth	r5, r1
90014ee4:	b212      	sxth	r2, r2
90014ee6:	436f      	muls	r7, r5
90014ee8:	ebae 0202 	sub.w	r2, lr, r2
90014eec:	4372      	muls	r2, r6
90014eee:	4297      	cmp	r7, r2
90014ef0:	db09      	blt.n	90014f06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
90014ef2:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
90014ef6:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
90014efa:	449c      	add	ip, r3
90014efc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90014f00:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90014f04:	e686      	b.n	90014c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014f06:	4421      	add	r1, r4
90014f08:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
90014f0c:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
90014f10:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90014f14:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90014f18:	e67c      	b.n	90014c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014f1a:	9f04      	ldr	r7, [sp, #16]
90014f1c:	42b8      	cmp	r0, r7
90014f1e:	da27      	bge.n	90014f70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
90014f20:	9902      	ldr	r1, [sp, #8]
90014f22:	1a3f      	subs	r7, r7, r0
90014f24:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90014f28:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
90014f2c:	eb05 010e 	add.w	r1, r5, lr
90014f30:	fa1f f881 	uxth.w	r8, r1
90014f34:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
90014f38:	4411      	add	r1, r2
90014f3a:	fa0f f988 	sxth.w	r9, r8
90014f3e:	eba2 020e 	sub.w	r2, r2, lr
90014f42:	eba1 0108 	sub.w	r1, r1, r8
90014f46:	4372      	muls	r2, r6
90014f48:	b289      	uxth	r1, r1
90014f4a:	fa0f f881 	sxth.w	r8, r1
90014f4e:	fb08 f707 	mul.w	r7, r8, r7
90014f52:	42ba      	cmp	r2, r7
90014f54:	dc06      	bgt.n	90014f64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
90014f56:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
90014f5a:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
90014f5e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
90014f62:	e7ca      	b.n	90014efa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
90014f64:	4429      	add	r1, r5
90014f66:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
90014f6a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90014f6e:	e651      	b.n	90014c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014f70:	9805      	ldr	r0, [sp, #20]
90014f72:	2d06      	cmp	r5, #6
90014f74:	ebaa 0000 	sub.w	r0, sl, r0
90014f78:	b280      	uxth	r0, r0
90014f7a:	fa0f fe80 	sxth.w	lr, r0
90014f7e:	d817      	bhi.n	90014fb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
90014f80:	9b04      	ldr	r3, [sp, #16]
90014f82:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
90014f86:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90014f8a:	1c6b      	adds	r3, r5, #1
90014f8c:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
90014f90:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
90014f94:	9b01      	ldr	r3, [sp, #4]
90014f96:	9801      	ldr	r0, [sp, #4]
90014f98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90014f9c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90014fa0:	805a      	strh	r2, [r3, #2]
90014fa2:	809e      	strh	r6, [r3, #4]
90014fa4:	80d9      	strh	r1, [r3, #6]
90014fa6:	9b02      	ldr	r3, [sp, #8]
90014fa8:	3c08      	subs	r4, #8
90014faa:	3b01      	subs	r3, #1
90014fac:	9302      	str	r3, [sp, #8]
90014fae:	e747      	b.n	90014e40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
90014fb0:	9a02      	ldr	r2, [sp, #8]
90014fb2:	45b6      	cmp	lr, r6
90014fb4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90014fb8:	db0d      	blt.n	90014fd6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
90014fba:	449c      	add	ip, r3
90014fbc:	445a      	add	r2, fp
90014fbe:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
90014fc2:	fa1f fc8c 	uxth.w	ip, ip
90014fc6:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
90014fca:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
90014fce:	448c      	add	ip, r1
90014fd0:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
90014fd4:	e61e      	b.n	90014c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90014fd6:	445a      	add	r2, fp
90014fd8:	4484      	add	ip, r0
90014fda:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
90014fde:	e78f      	b.n	90014f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90014fe0:	fa1f f18e 	uxth.w	r1, lr
90014fe4:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
90014fe8:	b293      	uxth	r3, r2
90014fea:	4596      	cmp	lr, r2
90014fec:	eb01 0806 	add.w	r8, r1, r6
90014ff0:	9306      	str	r3, [sp, #24]
90014ff2:	fa1f f888 	uxth.w	r8, r8
90014ff6:	9f06      	ldr	r7, [sp, #24]
90014ff8:	fa0f f388 	sxth.w	r3, r8
90014ffc:	9307      	str	r3, [sp, #28]
90014ffe:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
90015002:	443b      	add	r3, r7
90015004:	b29b      	uxth	r3, r3
90015006:	9308      	str	r3, [sp, #32]
90015008:	da24      	bge.n	90015054 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
9001500a:	9905      	ldr	r1, [sp, #20]
9001500c:	eba3 0308 	sub.w	r3, r3, r8
90015010:	eba2 020e 	sub.w	r2, r2, lr
90015014:	eba9 0000 	sub.w	r0, r9, r0
90015018:	ebaa 0401 	sub.w	r4, sl, r1
9001501c:	b29b      	uxth	r3, r3
9001501e:	b2a4      	uxth	r4, r4
90015020:	b219      	sxth	r1, r3
90015022:	b225      	sxth	r5, r4
90015024:	4348      	muls	r0, r1
90015026:	436a      	muls	r2, r5
90015028:	4282      	cmp	r2, r0
9001502a:	9a02      	ldr	r2, [sp, #8]
9001502c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90015030:	445a      	add	r2, fp
90015032:	dc06      	bgt.n	90015042 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
90015034:	9b07      	ldr	r3, [sp, #28]
90015036:	44a4      	add	ip, r4
90015038:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
9001503c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
90015040:	e75e      	b.n	90014f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90015042:	9904      	ldr	r1, [sp, #16]
90015044:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
90015048:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
9001504c:	4433      	add	r3, r6
9001504e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90015052:	e5df      	b.n	90014c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90015054:	9f06      	ldr	r7, [sp, #24]
90015056:	9b04      	ldr	r3, [sp, #16]
90015058:	1bc9      	subs	r1, r1, r7
9001505a:	fa0f f78a 	sxth.w	r7, sl
9001505e:	b289      	uxth	r1, r1
90015060:	429f      	cmp	r7, r3
90015062:	fa0f fe81 	sxth.w	lr, r1
90015066:	dd23      	ble.n	900150b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
90015068:	9a05      	ldr	r2, [sp, #20]
9001506a:	eba9 0000 	sub.w	r0, r9, r0
9001506e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90015072:	ebaa 0202 	sub.w	r2, sl, r2
90015076:	9d07      	ldr	r5, [sp, #28]
90015078:	fb0e f000 	mul.w	r0, lr, r0
9001507c:	b292      	uxth	r2, r2
9001507e:	eba5 0a03 	sub.w	sl, r5, r3
90015082:	9b02      	ldr	r3, [sp, #8]
90015084:	b214      	sxth	r4, r2
90015086:	00db      	lsls	r3, r3, #3
90015088:	fb04 fa0a 	mul.w	sl, r4, sl
9001508c:	445b      	add	r3, fp
9001508e:	4550      	cmp	r0, sl
90015090:	db03      	blt.n	9001509a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
90015092:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
90015096:	4494      	add	ip, r2
90015098:	e732      	b.n	90014f00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001509a:	9a04      	ldr	r2, [sp, #16]
9001509c:	4431      	add	r1, r6
9001509e:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
900150a2:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
900150a6:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
900150aa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
900150ae:	e75c      	b.n	90014f6a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
900150b0:	9b08      	ldr	r3, [sp, #32]
900150b2:	2d06      	cmp	r5, #6
900150b4:	eba3 0308 	sub.w	r3, r3, r8
900150b8:	b29b      	uxth	r3, r3
900150ba:	b218      	sxth	r0, r3
900150bc:	d813      	bhi.n	900150e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
900150be:	9b07      	ldr	r3, [sp, #28]
900150c0:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
900150c4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
900150c8:	1c6b      	adds	r3, r5, #1
900150ca:	9901      	ldr	r1, [sp, #4]
900150cc:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
900150d0:	9b01      	ldr	r3, [sp, #4]
900150d2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
900150d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900150da:	805a      	strh	r2, [r3, #2]
900150dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
900150de:	f8a3 e006 	strh.w	lr, [r3, #6]
900150e2:	809a      	strh	r2, [r3, #4]
900150e4:	e75f      	b.n	90014fa6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900150e6:	9c02      	ldr	r4, [sp, #8]
900150e8:	4570      	cmp	r0, lr
900150ea:	ea4f 04c4 	mov.w	r4, r4, lsl #3
900150ee:	db0d      	blt.n	9001510c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
900150f0:	4431      	add	r1, r6
900150f2:	9b06      	ldr	r3, [sp, #24]
900150f4:	445c      	add	r4, fp
900150f6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
900150fa:	b289      	uxth	r1, r1
900150fc:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
90015100:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90015104:	4419      	add	r1, r3
90015106:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
9001510a:	e583      	b.n	90014c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001510c:	445c      	add	r4, fp
9001510e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
90015112:	e79b      	b.n	9001504c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
90015114:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90015118:	2e07      	cmp	r6, #7
9001511a:	ea4f 04c6 	mov.w	r4, r6, lsl #3
9001511e:	d812      	bhi.n	90015146 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
90015120:	1c75      	adds	r5, r6, #1
90015122:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90015126:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
9001512a:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
9001512e:	9d01      	ldr	r5, [sp, #4]
90015130:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90015134:	442c      	add	r4, r5
90015136:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
9001513a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
9001513e:	8061      	strh	r1, [r4, #2]
90015140:	80a2      	strh	r2, [r4, #4]
90015142:	80e3      	strh	r3, [r4, #6]
90015144:	e5d0      	b.n	90014ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90015146:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
9001514a:	3e01      	subs	r6, #1
9001514c:	445c      	add	r4, fp
9001514e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
90015152:	f04f 37ff 	mov.w	r7, #4294967295
90015156:	2500      	movs	r5, #0
90015158:	9305      	str	r3, [sp, #20]
9001515a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
9001515e:	1e72      	subs	r2, r6, #1
90015160:	9302      	str	r3, [sp, #8]
90015162:	4691      	mov	r9, r2
90015164:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
90015168:	9304      	str	r3, [sp, #16]
9001516a:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
9001516e:	f1b9 3fff 	cmp.w	r9, #4294967295
90015172:	6818      	ldr	r0, [r3, #0]
90015174:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90015178:	9207      	str	r2, [sp, #28]
9001517a:	bf16      	itet	ne
9001517c:	9905      	ldrne	r1, [sp, #20]
9001517e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
90015182:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
90015186:	9306      	str	r3, [sp, #24]
90015188:	f8be 1006 	ldrh.w	r1, [lr, #6]
9001518c:	f8be 8004 	ldrh.w	r8, [lr, #4]
90015190:	fb18 f801 	smulbb	r8, r8, r1
90015194:	6859      	ldr	r1, [r3, #4]
90015196:	e8ac 0003 	stmia.w	ip!, {r0, r1}
9001519a:	4671      	mov	r1, lr
9001519c:	a80c      	add	r0, sp, #48	; 0x30
9001519e:	f7ff fbb9 	bl	90014914 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900151a2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
900151a6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
900151aa:	f04f 0c08 	mov.w	ip, #8
900151ae:	9b04      	ldr	r3, [sp, #16]
900151b0:	9a02      	ldr	r2, [sp, #8]
900151b2:	fb10 f001 	smulbb	r0, r0, r1
900151b6:	fb02 8803 	mla	r8, r2, r3, r8
900151ba:	eba0 0108 	sub.w	r1, r0, r8
900151be:	fb90 f0fc 	sdiv	r0, r0, ip
900151c2:	4288      	cmp	r0, r1
900151c4:	dc20      	bgt.n	90015208 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900151c6:	4551      	cmp	r1, sl
900151c8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
900151cc:	da03      	bge.n	900151d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
900151ce:	b1d9      	cbz	r1, 90015208 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
900151d0:	468a      	mov	sl, r1
900151d2:	464f      	mov	r7, r9
900151d4:	4635      	mov	r5, r6
900151d6:	f109 39ff 	add.w	r9, r9, #4294967295
900151da:	f119 0f02 	cmn.w	r9, #2
900151de:	d1c6      	bne.n	9001516e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
900151e0:	4616      	mov	r6, r2
900151e2:	3201      	adds	r2, #1
900151e4:	f1a4 0408 	sub.w	r4, r4, #8
900151e8:	d1b7      	bne.n	9001515a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
900151ea:	9b01      	ldr	r3, [sp, #4]
900151ec:	b2ac      	uxth	r4, r5
900151ee:	00ed      	lsls	r5, r5, #3
900151f0:	1958      	adds	r0, r3, r5
900151f2:	1c7b      	adds	r3, r7, #1
900151f4:	d10b      	bne.n	9001520e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
900151f6:	4601      	mov	r1, r0
900151f8:	9803      	ldr	r0, [sp, #12]
900151fa:	f7ff fb8b 	bl	90014914 <_ZN8touchgfx4Rect11expandToFitERKS0_>
900151fe:	4621      	mov	r1, r4
90015200:	9801      	ldr	r0, [sp, #4]
90015202:	f7ff fcdd 	bl	90014bc0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90015206:	e505      	b.n	90014c14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90015208:	464f      	mov	r7, r9
9001520a:	4635      	mov	r5, r6
9001520c:	e7ed      	b.n	900151ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
9001520e:	9b01      	ldr	r3, [sp, #4]
90015210:	00ff      	lsls	r7, r7, #3
90015212:	445d      	add	r5, fp
90015214:	19d9      	adds	r1, r3, r7
90015216:	445f      	add	r7, fp
90015218:	f7ff fb7c 	bl	90014914 <_ZN8touchgfx4Rect11expandToFitERKS0_>
9001521c:	9b03      	ldr	r3, [sp, #12]
9001521e:	cb03      	ldmia	r3!, {r0, r1}
90015220:	9b03      	ldr	r3, [sp, #12]
90015222:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90015226:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
9001522a:	f855 0fac 	ldr.w	r0, [r5, #172]!
9001522e:	6869      	ldr	r1, [r5, #4]
90015230:	c303      	stmia	r3!, {r0, r1}
90015232:	e7e4      	b.n	900151fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90015234 <_ZN8touchgfx11Application10invalidateEv>:
90015234:	4b09      	ldr	r3, [pc, #36]	; (9001525c <_ZN8touchgfx11Application10invalidateEv+0x28>)
90015236:	b082      	sub	sp, #8
90015238:	2100      	movs	r1, #0
9001523a:	f9b3 2000 	ldrsh.w	r2, [r3]
9001523e:	4b08      	ldr	r3, [pc, #32]	; (90015260 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
90015240:	9100      	str	r1, [sp, #0]
90015242:	f9b3 3000 	ldrsh.w	r3, [r3]
90015246:	f8ad 2004 	strh.w	r2, [sp, #4]
9001524a:	f8ad 3006 	strh.w	r3, [sp, #6]
9001524e:	ab02      	add	r3, sp, #8
90015250:	e913 0006 	ldmdb	r3, {r1, r2}
90015254:	b002      	add	sp, #8
90015256:	f7ff bcc7 	b.w	90014be8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
9001525a:	bf00      	nop
9001525c:	24026450 	.word	0x24026450
90015260:	24026452 	.word	0x24026452

90015264 <_ZN8touchgfx11Application15drawCachedAreasEv>:
90015264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015268:	f500 7698 	add.w	r6, r0, #304	; 0x130
9001526c:	b09b      	sub	sp, #108	; 0x6c
9001526e:	4604      	mov	r4, r0
90015270:	4630      	mov	r0, r6
90015272:	f7fb fb82 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90015276:	4605      	mov	r5, r0
90015278:	b940      	cbnz	r0, 9001528c <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
9001527a:	4620      	mov	r0, r4
9001527c:	e896 0006 	ldmia.w	r6, {r1, r2}
90015280:	f7ff fcb2 	bl	90014be8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90015284:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90015288:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
9001528c:	4bc8      	ldr	r3, [pc, #800]	; (900155b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
9001528e:	681b      	ldr	r3, [r3, #0]
90015290:	2b00      	cmp	r3, #0
90015292:	d03e      	beq.n	90015312 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90015294:	4dc7      	ldr	r5, [pc, #796]	; (900155b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90015296:	4628      	mov	r0, r5
90015298:	f7fb fb6f 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
9001529c:	4606      	mov	r6, r0
9001529e:	2800      	cmp	r0, #0
900152a0:	d137      	bne.n	90015312 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
900152a2:	4628      	mov	r0, r5
900152a4:	f7ff f9c4 	bl	90014630 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
900152a8:	6829      	ldr	r1, [r5, #0]
900152aa:	686a      	ldr	r2, [r5, #4]
900152ac:	4620      	mov	r0, r4
900152ae:	f7ff fc9b 	bl	90014be8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
900152b2:	802e      	strh	r6, [r5, #0]
900152b4:	806e      	strh	r6, [r5, #2]
900152b6:	80ae      	strh	r6, [r5, #4]
900152b8:	80ee      	strh	r6, [r5, #6]
900152ba:	ae09      	add	r6, sp, #36	; 0x24
900152bc:	4630      	mov	r0, r6
900152be:	f7ff fc23 	bl	90014b08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
900152c2:	4abd      	ldr	r2, [pc, #756]	; (900155b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
900152c4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
900152c8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
900152cc:	8815      	ldrh	r5, [r2, #0]
900152ce:	9202      	str	r2, [sp, #8]
900152d0:	462b      	mov	r3, r5
900152d2:	429f      	cmp	r7, r3
900152d4:	d924      	bls.n	90015320 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
900152d6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
900152da:	2907      	cmp	r1, #7
900152dc:	d816      	bhi.n	9001530c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
900152de:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
900152e2:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
900152e6:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
900152ea:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
900152ee:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
900152f2:	1c4a      	adds	r2, r1, #1
900152f4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
900152f8:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
900152fc:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
90015300:	f8a2 9002 	strh.w	r9, [r2, #2]
90015304:	f8a2 e004 	strh.w	lr, [r2, #4]
90015308:	f8a2 c006 	strh.w	ip, [r2, #6]
9001530c:	3301      	adds	r3, #1
9001530e:	b29b      	uxth	r3, r3
90015310:	e7df      	b.n	900152d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90015312:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90015316:	2b00      	cmp	r3, #0
90015318:	d1cf      	bne.n	900152ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
9001531a:	b01b      	add	sp, #108	; 0x6c
9001531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015320:	462f      	mov	r7, r5
90015322:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90015326:	42bb      	cmp	r3, r7
90015328:	d90b      	bls.n	90015342 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
9001532a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
9001532e:	3701      	adds	r7, #1
90015330:	4620      	mov	r0, r4
90015332:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90015336:	b2bf      	uxth	r7, r7
90015338:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
9001533c:	f7ff fc54 	bl	90014be8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90015340:	e7ef      	b.n	90015322 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
90015342:	4a9e      	ldr	r2, [pc, #632]	; (900155bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90015344:	6813      	ldr	r3, [r2, #0]
90015346:	4690      	mov	r8, r2
90015348:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
9001534c:	2b01      	cmp	r3, #1
9001534e:	f040 80e4 	bne.w	9001551a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
90015352:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90015356:	4629      	mov	r1, r5
90015358:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
9001535c:	2500      	movs	r5, #0
9001535e:	33ae      	adds	r3, #174	; 0xae
90015360:	428f      	cmp	r7, r1
90015362:	f103 0308 	add.w	r3, r3, #8
90015366:	dd0a      	ble.n	9001537e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90015368:	f833 2c08 	ldrh.w	r2, [r3, #-8]
9001536c:	3101      	adds	r1, #1
9001536e:	f833 0c04 	ldrh.w	r0, [r3, #-4]
90015372:	4402      	add	r2, r0
90015374:	b212      	sxth	r2, r2
90015376:	4295      	cmp	r5, r2
90015378:	bfb8      	it	lt
9001537a:	4615      	movlt	r5, r2
9001537c:	e7f0      	b.n	90015360 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
9001537e:	4b90      	ldr	r3, [pc, #576]	; (900155c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90015380:	f8df b238 	ldr.w	fp, [pc, #568]	; 900155bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90015384:	881b      	ldrh	r3, [r3, #0]
90015386:	46d8      	mov	r8, fp
90015388:	2b0f      	cmp	r3, #15
9001538a:	bf8c      	ite	hi
9001538c:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90015390:	f04f 0a01 	movls.w	sl, #1
90015394:	2300      	movs	r3, #0
90015396:	e9cd 3305 	strd	r3, r3, [sp, #20]
9001539a:	f8bd 701a 	ldrh.w	r7, [sp, #26]
9001539e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
900153a2:	4438      	add	r0, r7
900153a4:	b207      	sxth	r7, r0
900153a6:	f8db 0000 	ldr.w	r0, [fp]
900153aa:	42bd      	cmp	r5, r7
900153ac:	6803      	ldr	r3, [r0, #0]
900153ae:	f340 8084 	ble.w	900154ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
900153b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
900153b6:	4798      	blx	r3
900153b8:	eb07 030a 	add.w	r3, r7, sl
900153bc:	4298      	cmp	r0, r3
900153be:	da07      	bge.n	900153d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
900153c0:	4285      	cmp	r5, r0
900153c2:	dd05      	ble.n	900153d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
900153c4:	4287      	cmp	r7, r0
900153c6:	dd6d      	ble.n	900154a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
900153c8:	2f00      	cmp	r7, #0
900153ca:	dd6b      	ble.n	900154a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
900153cc:	4628      	mov	r0, r5
900153ce:	e004      	b.n	900153da <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
900153d0:	4287      	cmp	r7, r0
900153d2:	dcfb      	bgt.n	900153cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
900153d4:	42a8      	cmp	r0, r5
900153d6:	bfa8      	it	ge
900153d8:	4628      	movge	r0, r5
900153da:	4b7a      	ldr	r3, [pc, #488]	; (900155c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
900153dc:	1bc0      	subs	r0, r0, r7
900153de:	2200      	movs	r2, #0
900153e0:	f8ad 7016 	strh.w	r7, [sp, #22]
900153e4:	f9b3 3000 	ldrsh.w	r3, [r3]
900153e8:	f8ad 2014 	strh.w	r2, [sp, #20]
900153ec:	f8ad 3018 	strh.w	r3, [sp, #24]
900153f0:	9b02      	ldr	r3, [sp, #8]
900153f2:	f8ad 001a 	strh.w	r0, [sp, #26]
900153f6:	881f      	ldrh	r7, [r3, #0]
900153f8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
900153fc:	42bb      	cmp	r3, r7
900153fe:	d9cc      	bls.n	9001539a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90015400:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90015404:	ab07      	add	r3, sp, #28
90015406:	f852 0fac 	ldr.w	r0, [r2, #172]!
9001540a:	6851      	ldr	r1, [r2, #4]
9001540c:	c303      	stmia	r3!, {r0, r1}
9001540e:	a905      	add	r1, sp, #20
90015410:	a807      	add	r0, sp, #28
90015412:	f7ff f9e6 	bl	900147e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
90015416:	2800      	cmp	r0, #0
90015418:	d04c      	beq.n	900154b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
9001541a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
9001541e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90015422:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90015426:	4686      	mov	lr, r0
90015428:	4290      	cmp	r0, r2
9001542a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
9001542e:	4448      	add	r0, r9
90015430:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90015434:	bfb8      	it	lt
90015436:	4696      	movlt	lr, r2
90015438:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
9001543c:	444a      	add	r2, r9
9001543e:	b280      	uxth	r0, r0
90015440:	4299      	cmp	r1, r3
90015442:	468c      	mov	ip, r1
90015444:	b292      	uxth	r2, r2
90015446:	9303      	str	r3, [sp, #12]
90015448:	bfb8      	it	lt
9001544a:	469c      	movlt	ip, r3
9001544c:	b203      	sxth	r3, r0
9001544e:	fa0f f982 	sxth.w	r9, r2
90015452:	f8ad e01c 	strh.w	lr, [sp, #28]
90015456:	f8ad c01e 	strh.w	ip, [sp, #30]
9001545a:	454b      	cmp	r3, r9
9001545c:	bfb8      	it	lt
9001545e:	4602      	movlt	r2, r0
90015460:	9b03      	ldr	r3, [sp, #12]
90015462:	eba2 020e 	sub.w	r2, r2, lr
90015466:	f8ad 2020 	strh.w	r2, [sp, #32]
9001546a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001546e:	4411      	add	r1, r2
90015470:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90015474:	4413      	add	r3, r2
90015476:	b289      	uxth	r1, r1
90015478:	b29b      	uxth	r3, r3
9001547a:	b208      	sxth	r0, r1
9001547c:	b21a      	sxth	r2, r3
9001547e:	4290      	cmp	r0, r2
90015480:	bfb8      	it	lt
90015482:	460b      	movlt	r3, r1
90015484:	eba3 030c 	sub.w	r3, r3, ip
90015488:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001548c:	a807      	add	r0, sp, #28
9001548e:	f7fb fa74 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90015492:	b920      	cbnz	r0, 9001549e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90015494:	6823      	ldr	r3, [r4, #0]
90015496:	a907      	add	r1, sp, #28
90015498:	4620      	mov	r0, r4
9001549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001549c:	4798      	blx	r3
9001549e:	3701      	adds	r7, #1
900154a0:	b2bf      	uxth	r7, r7
900154a2:	e7a9      	b.n	900153f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
900154a4:	f8d8 0000 	ldr.w	r0, [r8]
900154a8:	2101      	movs	r1, #1
900154aa:	6803      	ldr	r3, [r0, #0]
900154ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
900154b0:	4798      	blx	r3
900154b2:	e772      	b.n	9001539a <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
900154b4:	e9cd 0007 	strd	r0, r0, [sp, #28]
900154b8:	e7e8      	b.n	9001548c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
900154ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900154bc:	4798      	blx	r3
900154be:	4b42      	ldr	r3, [pc, #264]	; (900155c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
900154c0:	781b      	ldrb	r3, [r3, #0]
900154c2:	2b00      	cmp	r3, #0
900154c4:	f43f af29 	beq.w	9001531a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
900154c8:	2300      	movs	r3, #0
900154ca:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
900154ce:	f104 00ee 	add.w	r0, r4, #238	; 0xee
900154d2:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
900154d6:	9b02      	ldr	r3, [sp, #8]
900154d8:	881b      	ldrh	r3, [r3, #0]
900154da:	429d      	cmp	r5, r3
900154dc:	f67f af1d 	bls.w	9001531a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
900154e0:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
900154e4:	2907      	cmp	r1, #7
900154e6:	d815      	bhi.n	90015514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
900154e8:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
900154ec:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
900154f0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
900154f4:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
900154f8:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
900154fc:	1c4a      	adds	r2, r1, #1
900154fe:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
90015502:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90015506:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
9001550a:	f8a2 e002 	strh.w	lr, [r2, #2]
9001550e:	f8a2 c004 	strh.w	ip, [r2, #4]
90015512:	80d7      	strh	r7, [r2, #6]
90015514:	3301      	adds	r3, #1
90015516:	b29b      	uxth	r3, r3
90015518:	e7df      	b.n	900154da <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
9001551a:	2b02      	cmp	r3, #2
9001551c:	f040 8135 	bne.w	9001578a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90015520:	4b2a      	ldr	r3, [pc, #168]	; (900155cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90015522:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90015526:	781b      	ldrb	r3, [r3, #0]
90015528:	2b01      	cmp	r3, #1
9001552a:	f000 809c 	beq.w	90015666 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001552e:	9b02      	ldr	r3, [sp, #8]
90015530:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90015534:	f8b3 b000 	ldrh.w	fp, [r3]
90015538:	f10b 0b01 	add.w	fp, fp, #1
9001553c:	fa1f fb8b 	uxth.w	fp, fp
90015540:	2a00      	cmp	r2, #0
90015542:	d0bc      	beq.n	900154be <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90015544:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90015548:	4659      	mov	r1, fp
9001554a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
9001554e:	f04f 0800 	mov.w	r8, #0
90015552:	441d      	add	r5, r3
90015554:	b22d      	sxth	r5, r5
90015556:	b28b      	uxth	r3, r1
90015558:	ea4f 07c8 	mov.w	r7, r8, lsl #3
9001555c:	429a      	cmp	r2, r3
9001555e:	f240 80c0 	bls.w	900156e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
90015562:	4427      	add	r7, r4
90015564:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90015568:	4608      	mov	r0, r1
9001556a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
9001556e:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
90015572:	4563      	cmp	r3, ip
90015574:	f340 80a2 	ble.w	900156bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90015578:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
9001557c:	4465      	add	r5, ip
9001557e:	b22d      	sxth	r5, r5
90015580:	429d      	cmp	r5, r3
90015582:	bfa8      	it	ge
90015584:	461d      	movge	r5, r3
90015586:	3101      	adds	r1, #1
90015588:	4680      	mov	r8, r0
9001558a:	e7e4      	b.n	90015556 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
9001558c:	d10b      	bne.n	900155a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
9001558e:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90015592:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90015596:	458c      	cmp	ip, r1
90015598:	bfb4      	ite	lt
9001559a:	469c      	movlt	ip, r3
9001559c:	46bc      	movge	ip, r7
9001559e:	4572      	cmp	r2, lr
900155a0:	bfb8      	it	lt
900155a2:	4672      	movlt	r2, lr
900155a4:	e087      	b.n	900156b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
900155a6:	428a      	cmp	r2, r1
900155a8:	46bc      	mov	ip, r7
900155aa:	bfb8      	it	lt
900155ac:	460a      	movlt	r2, r1
900155ae:	e082      	b.n	900156b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
900155b0:	24026494 	.word	0x24026494
900155b4:	240264a0 	.word	0x240264a0
900155b8:	2400006c 	.word	0x2400006c
900155bc:	2402645c 	.word	0x2402645c
900155c0:	24026452 	.word	0x24026452
900155c4:	24026450 	.word	0x24026450
900155c8:	2402645a 	.word	0x2402645a
900155cc:	24026454 	.word	0x24026454
900155d0:	1961      	adds	r1, r4, r5
900155d2:	ab07      	add	r3, sp, #28
900155d4:	f851 0fac 	ldr.w	r0, [r1, #172]!
900155d8:	6849      	ldr	r1, [r1, #4]
900155da:	c303      	stmia	r3!, {r0, r1}
900155dc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
900155e0:	a807      	add	r0, sp, #28
900155e2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
900155e6:	2b13      	cmp	r3, #19
900155e8:	440b      	add	r3, r1
900155ea:	bfd8      	it	le
900155ec:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
900155f0:	1a9b      	subs	r3, r3, r2
900155f2:	f8ad 201c 	strh.w	r2, [sp, #28]
900155f6:	f8ad 3020 	strh.w	r3, [sp, #32]
900155fa:	f7ff f833 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
900155fe:	a807      	add	r0, sp, #28
90015600:	f7fb f9bb 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90015604:	bb78      	cbnz	r0, 90015666 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90015606:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
9001560a:	4425      	add	r5, r4
9001560c:	f8d8 0000 	ldr.w	r0, [r8]
90015610:	f1bc 0f14 	cmp.w	ip, #20
90015614:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90015618:	f8d0 e000 	ldr.w	lr, [r0]
9001561c:	bfa8      	it	ge
9001561e:	f04f 0c14 	movge.w	ip, #20
90015622:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90015626:	f8bd 101c 	ldrh.w	r1, [sp, #28]
9001562a:	fa1f fc8c 	uxth.w	ip, ip
9001562e:	f8cd c000 	str.w	ip, [sp]
90015632:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90015636:	47d0      	blx	sl
90015638:	4682      	mov	sl, r0
9001563a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
9001563e:	a807      	add	r0, sp, #28
90015640:	f7fe fff6 	bl	90014630 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90015644:	6823      	ldr	r3, [r4, #0]
90015646:	4620      	mov	r0, r4
90015648:	a907      	add	r1, sp, #28
9001564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001564c:	4798      	blx	r3
9001564e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
90015652:	eba0 000a 	sub.w	r0, r0, sl
90015656:	b200      	sxth	r0, r0
90015658:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
9001565c:	b918      	cbnz	r0, 90015666 <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
9001565e:	b2b9      	uxth	r1, r7
90015660:	4648      	mov	r0, r9
90015662:	f7ff faad 	bl	90014bc0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90015666:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
9001566a:	f1bb 0f00 	cmp.w	fp, #0
9001566e:	f43f af26 	beq.w	900154be <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90015672:	9b02      	ldr	r3, [sp, #8]
90015674:	2700      	movs	r7, #0
90015676:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
9001567a:	881b      	ldrh	r3, [r3, #0]
9001567c:	3301      	adds	r3, #1
9001567e:	b29b      	uxth	r3, r3
90015680:	b299      	uxth	r1, r3
90015682:	00fd      	lsls	r5, r7, #3
90015684:	458b      	cmp	fp, r1
90015686:	d9a3      	bls.n	900155d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90015688:	4425      	add	r5, r4
9001568a:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
9001568e:	469c      	mov	ip, r3
90015690:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90015694:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90015698:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
9001569c:	4408      	add	r0, r1
9001569e:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
900156a2:	4471      	add	r1, lr
900156a4:	b200      	sxth	r0, r0
900156a6:	b209      	sxth	r1, r1
900156a8:	4288      	cmp	r0, r1
900156aa:	f6bf af6f 	bge.w	9001558c <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
900156ae:	4586      	cmp	lr, r0
900156b0:	4672      	mov	r2, lr
900156b2:	bfb8      	it	lt
900156b4:	4602      	movlt	r2, r0
900156b6:	3301      	adds	r3, #1
900156b8:	4667      	mov	r7, ip
900156ba:	e7e1      	b.n	90015680 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
900156bc:	d10c      	bne.n	900156d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
900156be:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
900156c2:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
900156c6:	4287      	cmp	r7, r0
900156c8:	bfb4      	ite	lt
900156ca:	4608      	movlt	r0, r1
900156cc:	4640      	movge	r0, r8
900156ce:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
900156d2:	443b      	add	r3, r7
900156d4:	b21b      	sxth	r3, r3
900156d6:	e753      	b.n	90015580 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
900156d8:	4565      	cmp	r5, ip
900156da:	4640      	mov	r0, r8
900156dc:	bfa8      	it	ge
900156de:	4665      	movge	r5, ip
900156e0:	e751      	b.n	90015586 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
900156e2:	eb09 0007 	add.w	r0, r9, r7
900156e6:	4427      	add	r7, r4
900156e8:	9203      	str	r2, [sp, #12]
900156ea:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
900156ee:	f1ba 0f13 	cmp.w	sl, #19
900156f2:	bfde      	ittt	le
900156f4:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
900156f8:	4455      	addle	r5, sl
900156fa:	b22d      	sxthle	r5, r5
900156fc:	f7fb f93d 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
90015700:	9a03      	ldr	r2, [sp, #12]
90015702:	2800      	cmp	r0, #0
90015704:	f47f af1c 	bne.w	90015540 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90015708:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
9001570c:	fa1f fa8a 	uxth.w	sl, sl
90015710:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90015714:	1aad      	subs	r5, r5, r2
90015716:	4829      	ldr	r0, [pc, #164]	; (900157bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90015718:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
9001571c:	2d14      	cmp	r5, #20
9001571e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
90015722:	6800      	ldr	r0, [r0, #0]
90015724:	bfa8      	it	ge
90015726:	2514      	movge	r5, #20
90015728:	f8ad 101c 	strh.w	r1, [sp, #28]
9001572c:	f8ad 201e 	strh.w	r2, [sp, #30]
90015730:	b289      	uxth	r1, r1
90015732:	f8ad 3020 	strh.w	r3, [sp, #32]
90015736:	b2ad      	uxth	r5, r5
90015738:	f8d0 c000 	ldr.w	ip, [r0]
9001573c:	b292      	uxth	r2, r2
9001573e:	4555      	cmp	r5, sl
90015740:	bf94      	ite	ls
90015742:	9500      	strls	r5, [sp, #0]
90015744:	f8cd a000 	strhi.w	sl, [sp]
90015748:	b29b      	uxth	r3, r3
9001574a:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
9001574e:	47a8      	blx	r5
90015750:	6823      	ldr	r3, [r4, #0]
90015752:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90015756:	a907      	add	r1, sp, #28
90015758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001575a:	4620      	mov	r0, r4
9001575c:	4798      	blx	r3
9001575e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
90015762:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
90015766:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
9001576a:	1a5b      	subs	r3, r3, r1
9001576c:	440a      	add	r2, r1
9001576e:	b21b      	sxth	r3, r3
90015770:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
90015774:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90015778:	2b00      	cmp	r3, #0
9001577a:	f47f aed8 	bne.w	9001552e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
9001577e:	fa1f f188 	uxth.w	r1, r8
90015782:	4648      	mov	r0, r9
90015784:	f7ff fa1c 	bl	90014bc0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90015788:	e6d1      	b.n	9001552e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
9001578a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
9001578e:	42ab      	cmp	r3, r5
90015790:	f67f ae95 	bls.w	900154be <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90015794:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90015798:	ab07      	add	r3, sp, #28
9001579a:	f852 0fac 	ldr.w	r0, [r2, #172]!
9001579e:	6851      	ldr	r1, [r2, #4]
900157a0:	c303      	stmia	r3!, {r0, r1}
900157a2:	a807      	add	r0, sp, #28
900157a4:	f7fb f8e9 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
900157a8:	b920      	cbnz	r0, 900157b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
900157aa:	6823      	ldr	r3, [r4, #0]
900157ac:	a907      	add	r1, sp, #28
900157ae:	4620      	mov	r0, r4
900157b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
900157b2:	4798      	blx	r3
900157b4:	3501      	adds	r5, #1
900157b6:	b2ad      	uxth	r5, r5
900157b8:	e7e7      	b.n	9001578a <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
900157ba:	bf00      	nop
900157bc:	2402645c 	.word	0x2402645c

900157c0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
900157c0:	4b03      	ldr	r3, [pc, #12]	; (900157d0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
900157c2:	2200      	movs	r2, #0
900157c4:	801a      	strh	r2, [r3, #0]
900157c6:	805a      	strh	r2, [r3, #2]
900157c8:	809a      	strh	r2, [r3, #4]
900157ca:	80da      	strh	r2, [r3, #6]
900157cc:	4770      	bx	lr
900157ce:	bf00      	nop
900157d0:	240264a0 	.word	0x240264a0

900157d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
900157d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900157d8:	b09d      	sub	sp, #116	; 0x74
900157da:	4606      	mov	r6, r0
900157dc:	4614      	mov	r4, r2
900157de:	468a      	mov	sl, r1
900157e0:	a803      	add	r0, sp, #12
900157e2:	461d      	mov	r5, r3
900157e4:	f000 fd9e 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
900157e8:	6833      	ldr	r3, [r6, #0]
900157ea:	4630      	mov	r0, r6
900157ec:	f242 0b0b 	movw	fp, #8203	; 0x200b
900157f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900157f2:	4798      	blx	r3
900157f4:	6833      	ldr	r3, [r6, #0]
900157f6:	4607      	mov	r7, r0
900157f8:	4630      	mov	r0, r6
900157fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900157fc:	4798      	blx	r3
900157fe:	462a      	mov	r2, r5
90015800:	2500      	movs	r5, #0
90015802:	4621      	mov	r1, r4
90015804:	9000      	str	r0, [sp, #0]
90015806:	463b      	mov	r3, r7
90015808:	462c      	mov	r4, r5
9001580a:	46a9      	mov	r9, r5
9001580c:	46a8      	mov	r8, r5
9001580e:	a803      	add	r0, sp, #12
90015810:	f000 fde3 	bl	900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90015814:	2300      	movs	r3, #0
90015816:	9302      	str	r3, [sp, #8]
90015818:	f64f 63ff 	movw	r3, #65279	; 0xfeff
9001581c:	429c      	cmp	r4, r3
9001581e:	d002      	beq.n	90015826 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90015820:	455c      	cmp	r4, fp
90015822:	bf18      	it	ne
90015824:	4625      	movne	r5, r4
90015826:	ab02      	add	r3, sp, #8
90015828:	4632      	mov	r2, r6
9001582a:	4651      	mov	r1, sl
9001582c:	a803      	add	r0, sp, #12
9001582e:	f001 f8d9 	bl	900169e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015832:	4604      	mov	r4, r0
90015834:	b108      	cbz	r0, 9001583a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
90015836:	280a      	cmp	r0, #10
90015838:	d10a      	bne.n	90015850 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
9001583a:	45c1      	cmp	r9, r8
9001583c:	bf38      	it	cc
9001583e:	46c1      	movcc	r9, r8
90015840:	f04f 0800 	mov.w	r8, #0
90015844:	2c00      	cmp	r4, #0
90015846:	d1e5      	bne.n	90015814 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90015848:	4648      	mov	r0, r9
9001584a:	b01d      	add	sp, #116	; 0x74
9001584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015850:	9a02      	ldr	r2, [sp, #8]
90015852:	2a00      	cmp	r2, #0
90015854:	d0de      	beq.n	90015814 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90015856:	7b57      	ldrb	r7, [r2, #13]
90015858:	4629      	mov	r1, r5
9001585a:	6833      	ldr	r3, [r6, #0]
9001585c:	007f      	lsls	r7, r7, #1
9001585e:	8894      	ldrh	r4, [r2, #4]
90015860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015862:	f407 7080 	and.w	r0, r7, #256	; 0x100
90015866:	7a97      	ldrb	r7, [r2, #10]
90015868:	4307      	orrs	r7, r0
9001586a:	4630      	mov	r0, r6
9001586c:	4798      	blx	r3
9001586e:	4438      	add	r0, r7
90015870:	4480      	add	r8, r0
90015872:	fa1f f888 	uxth.w	r8, r8
90015876:	e7e5      	b.n	90015844 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90015878 <_ZNK8touchgfx4Font12getCharWidthEt>:
90015878:	b508      	push	{r3, lr}
9001587a:	6803      	ldr	r3, [r0, #0]
9001587c:	68db      	ldr	r3, [r3, #12]
9001587e:	4798      	blx	r3
90015880:	b128      	cbz	r0, 9001588e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
90015882:	7b43      	ldrb	r3, [r0, #13]
90015884:	7a80      	ldrb	r0, [r0, #10]
90015886:	005b      	lsls	r3, r3, #1
90015888:	f403 7380 	and.w	r3, r3, #256	; 0x100
9001588c:	4318      	orrs	r0, r3
9001588e:	bd08      	pop	{r3, pc}

90015890 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90015890:	b40e      	push	{r1, r2, r3}
90015892:	b5f0      	push	{r4, r5, r6, r7, lr}
90015894:	b09e      	sub	sp, #120	; 0x78
90015896:	4605      	mov	r5, r0
90015898:	ab23      	add	r3, sp, #140	; 0x8c
9001589a:	a805      	add	r0, sp, #20
9001589c:	f853 4b04 	ldr.w	r4, [r3], #4
900158a0:	9303      	str	r3, [sp, #12]
900158a2:	f000 fd3f 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
900158a6:	682b      	ldr	r3, [r5, #0]
900158a8:	4628      	mov	r0, r5
900158aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900158ac:	4798      	blx	r3
900158ae:	682b      	ldr	r3, [r5, #0]
900158b0:	4606      	mov	r6, r0
900158b2:	4628      	mov	r0, r5
900158b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900158b6:	4798      	blx	r3
900158b8:	4633      	mov	r3, r6
900158ba:	4621      	mov	r1, r4
900158bc:	ae1e      	add	r6, sp, #120	; 0x78
900158be:	2400      	movs	r4, #0
900158c0:	9000      	str	r0, [sp, #0]
900158c2:	9a03      	ldr	r2, [sp, #12]
900158c4:	a805      	add	r0, sp, #20
900158c6:	f000 fd88 	bl	900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900158ca:	f846 4d68 	str.w	r4, [r6, #-104]!
900158ce:	462a      	mov	r2, r5
900158d0:	4633      	mov	r3, r6
900158d2:	4621      	mov	r1, r4
900158d4:	a805      	add	r0, sp, #20
900158d6:	f001 f885 	bl	900169e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900158da:	b300      	cbz	r0, 9001591e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
900158dc:	280a      	cmp	r0, #10
900158de:	d01a      	beq.n	90015916 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
900158e0:	9f04      	ldr	r7, [sp, #16]
900158e2:	b1c7      	cbz	r7, 90015916 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
900158e4:	7b78      	ldrb	r0, [r7, #13]
900158e6:	7a3b      	ldrb	r3, [r7, #8]
900158e8:	00c1      	lsls	r1, r0, #3
900158ea:	88ea      	ldrh	r2, [r5, #6]
900158ec:	f401 7180 	and.w	r1, r1, #256	; 0x100
900158f0:	4319      	orrs	r1, r3
900158f2:	0643      	lsls	r3, r0, #25
900158f4:	ea4f 1000 	mov.w	r0, r0, lsl #4
900158f8:	bf48      	it	mi
900158fa:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
900158fe:	f400 7080 	and.w	r0, r0, #256	; 0x100
90015902:	bf48      	it	mi
90015904:	b219      	sxthmi	r1, r3
90015906:	79fb      	ldrb	r3, [r7, #7]
90015908:	4303      	orrs	r3, r0
9001590a:	4413      	add	r3, r2
9001590c:	1a5b      	subs	r3, r3, r1
9001590e:	b21b      	sxth	r3, r3
90015910:	429c      	cmp	r4, r3
90015912:	bfb8      	it	lt
90015914:	461c      	movlt	r4, r3
90015916:	4633      	mov	r3, r6
90015918:	462a      	mov	r2, r5
9001591a:	2100      	movs	r1, #0
9001591c:	e7da      	b.n	900158d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
9001591e:	b2a0      	uxth	r0, r4
90015920:	b01e      	add	sp, #120	; 0x78
90015922:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90015926:	b003      	add	sp, #12
90015928:	4770      	bx	lr

9001592a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
9001592a:	7a43      	ldrb	r3, [r0, #9]
9001592c:	8880      	ldrh	r0, [r0, #4]
9001592e:	4418      	add	r0, r3
90015930:	b280      	uxth	r0, r0
90015932:	4770      	bx	lr

90015934 <_ZNK8touchgfx4Font13getFontHeightEv>:
90015934:	6803      	ldr	r3, [r0, #0]
90015936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90015938:	4718      	bx	r3

9001593a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
9001593a:	b40e      	push	{r1, r2, r3}
9001593c:	b570      	push	{r4, r5, r6, lr}
9001593e:	b09d      	sub	sp, #116	; 0x74
90015940:	4604      	mov	r4, r0
90015942:	ab21      	add	r3, sp, #132	; 0x84
90015944:	a803      	add	r0, sp, #12
90015946:	f853 5b04 	ldr.w	r5, [r3], #4
9001594a:	9302      	str	r3, [sp, #8]
9001594c:	f000 fcea 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
90015950:	6823      	ldr	r3, [r4, #0]
90015952:	4620      	mov	r0, r4
90015954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015956:	4798      	blx	r3
90015958:	6823      	ldr	r3, [r4, #0]
9001595a:	4606      	mov	r6, r0
9001595c:	4620      	mov	r0, r4
9001595e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90015960:	2401      	movs	r4, #1
90015962:	4798      	blx	r3
90015964:	4633      	mov	r3, r6
90015966:	9000      	str	r0, [sp, #0]
90015968:	4629      	mov	r1, r5
9001596a:	9a02      	ldr	r2, [sp, #8]
9001596c:	a803      	add	r0, sp, #12
9001596e:	f000 fd34 	bl	900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90015972:	a803      	add	r0, sp, #12
90015974:	f001 f902 	bl	90016b7c <_ZN8touchgfx12TextProvider11getNextCharEv>
90015978:	b2a3      	uxth	r3, r4
9001597a:	b138      	cbz	r0, 9001598c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
9001597c:	280a      	cmp	r0, #10
9001597e:	a803      	add	r0, sp, #12
90015980:	bf04      	itt	eq
90015982:	3301      	addeq	r3, #1
90015984:	b21c      	sxtheq	r4, r3
90015986:	f001 f8f9 	bl	90016b7c <_ZN8touchgfx12TextProvider11getNextCharEv>
9001598a:	e7f5      	b.n	90015978 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
9001598c:	4618      	mov	r0, r3
9001598e:	b01d      	add	sp, #116	; 0x74
90015990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015994:	b003      	add	sp, #12
90015996:	4770      	bx	lr

90015998 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90015998:	b40e      	push	{r1, r2, r3}
9001599a:	b5f0      	push	{r4, r5, r6, r7, lr}
9001599c:	b09e      	sub	sp, #120	; 0x78
9001599e:	4604      	mov	r4, r0
900159a0:	ab23      	add	r3, sp, #140	; 0x8c
900159a2:	a805      	add	r0, sp, #20
900159a4:	f853 5b04 	ldr.w	r5, [r3], #4
900159a8:	9303      	str	r3, [sp, #12]
900159aa:	f000 fcbb 	bl	90016324 <_ZN8touchgfx12TextProviderC1Ev>
900159ae:	6823      	ldr	r3, [r4, #0]
900159b0:	4620      	mov	r0, r4
900159b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900159b4:	4798      	blx	r3
900159b6:	6823      	ldr	r3, [r4, #0]
900159b8:	4606      	mov	r6, r0
900159ba:	4620      	mov	r0, r4
900159bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900159be:	4798      	blx	r3
900159c0:	4633      	mov	r3, r6
900159c2:	4629      	mov	r1, r5
900159c4:	9000      	str	r0, [sp, #0]
900159c6:	9a03      	ldr	r2, [sp, #12]
900159c8:	a805      	add	r0, sp, #20
900159ca:	f000 fd06 	bl	900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900159ce:	ad1e      	add	r5, sp, #120	; 0x78
900159d0:	2100      	movs	r1, #0
900159d2:	f647 76ff 	movw	r6, #32767	; 0x7fff
900159d6:	4622      	mov	r2, r4
900159d8:	a805      	add	r0, sp, #20
900159da:	f845 1d68 	str.w	r1, [r5, #-104]!
900159de:	462b      	mov	r3, r5
900159e0:	f001 f800 	bl	900169e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900159e4:	b1d8      	cbz	r0, 90015a1e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
900159e6:	280a      	cmp	r0, #10
900159e8:	d012      	beq.n	90015a10 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
900159ea:	9804      	ldr	r0, [sp, #16]
900159ec:	b180      	cbz	r0, 90015a10 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
900159ee:	7b47      	ldrb	r7, [r0, #13]
900159f0:	88e2      	ldrh	r2, [r4, #6]
900159f2:	00fb      	lsls	r3, r7, #3
900159f4:	f403 7180 	and.w	r1, r3, #256	; 0x100
900159f8:	7a03      	ldrb	r3, [r0, #8]
900159fa:	430b      	orrs	r3, r1
900159fc:	0679      	lsls	r1, r7, #25
900159fe:	bf44      	itt	mi
90015a00:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90015a04:	b21b      	sxthmi	r3, r3
90015a06:	1ad3      	subs	r3, r2, r3
90015a08:	b21b      	sxth	r3, r3
90015a0a:	429e      	cmp	r6, r3
90015a0c:	bfa8      	it	ge
90015a0e:	461e      	movge	r6, r3
90015a10:	462b      	mov	r3, r5
90015a12:	4622      	mov	r2, r4
90015a14:	2100      	movs	r1, #0
90015a16:	a805      	add	r0, sp, #20
90015a18:	f000 ffe4 	bl	900169e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90015a1c:	e7e2      	b.n	900159e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
90015a1e:	4630      	mov	r0, r6
90015a20:	b01e      	add	sp, #120	; 0x78
90015a22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
90015a26:	b003      	add	sp, #12
90015a28:	4770      	bx	lr

90015a2a <_ZNK8touchgfx8Drawable10invalidateEv>:
90015a2a:	b513      	push	{r0, r1, r4, lr}
90015a2c:	6803      	ldr	r3, [r0, #0]
90015a2e:	2400      	movs	r4, #0
90015a30:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90015a34:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90015a38:	f8ad 1004 	strh.w	r1, [sp, #4]
90015a3c:	4669      	mov	r1, sp
90015a3e:	691b      	ldr	r3, [r3, #16]
90015a40:	9400      	str	r4, [sp, #0]
90015a42:	f8ad 2006 	strh.w	r2, [sp, #6]
90015a46:	4798      	blx	r3
90015a48:	b002      	add	sp, #8
90015a4a:	bd10      	pop	{r4, pc}

90015a4c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90015a4c:	b538      	push	{r3, r4, r5, lr}
90015a4e:	680b      	ldr	r3, [r1, #0]
90015a50:	460c      	mov	r4, r1
90015a52:	4605      	mov	r5, r0
90015a54:	68db      	ldr	r3, [r3, #12]
90015a56:	4798      	blx	r3
90015a58:	6823      	ldr	r3, [r4, #0]
90015a5a:	4620      	mov	r0, r4
90015a5c:	4629      	mov	r1, r5
90015a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015a60:	4798      	blx	r3
90015a62:	4628      	mov	r0, r5
90015a64:	bd38      	pop	{r3, r4, r5, pc}

90015a66 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
90015a66:	b410      	push	{r4}
90015a68:	880a      	ldrh	r2, [r1, #0]
90015a6a:	8884      	ldrh	r4, [r0, #4]
90015a6c:	4422      	add	r2, r4
90015a6e:	800a      	strh	r2, [r1, #0]
90015a70:	884a      	ldrh	r2, [r1, #2]
90015a72:	88c4      	ldrh	r4, [r0, #6]
90015a74:	4422      	add	r2, r4
90015a76:	804a      	strh	r2, [r1, #2]
90015a78:	6940      	ldr	r0, [r0, #20]
90015a7a:	b120      	cbz	r0, 90015a86 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90015a7c:	6803      	ldr	r3, [r0, #0]
90015a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
90015a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015a84:	4718      	bx	r3
90015a86:	f85d 4b04 	ldr.w	r4, [sp], #4
90015a8a:	4770      	bx	lr

90015a8c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90015a8c:	b570      	push	{r4, r5, r6, lr}
90015a8e:	8882      	ldrh	r2, [r0, #4]
90015a90:	460c      	mov	r4, r1
90015a92:	880b      	ldrh	r3, [r1, #0]
90015a94:	4605      	mov	r5, r0
90015a96:	4413      	add	r3, r2
90015a98:	800b      	strh	r3, [r1, #0]
90015a9a:	884b      	ldrh	r3, [r1, #2]
90015a9c:	88c2      	ldrh	r2, [r0, #6]
90015a9e:	4413      	add	r3, r2
90015aa0:	804b      	strh	r3, [r1, #2]
90015aa2:	1d01      	adds	r1, r0, #4
90015aa4:	4620      	mov	r0, r4
90015aa6:	f7fa ff25 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
90015aaa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90015aae:	2b00      	cmp	r3, #0
90015ab0:	dd0b      	ble.n	90015aca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90015ab2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90015ab6:	2b00      	cmp	r3, #0
90015ab8:	dd07      	ble.n	90015aca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90015aba:	6968      	ldr	r0, [r5, #20]
90015abc:	b128      	cbz	r0, 90015aca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
90015abe:	6803      	ldr	r3, [r0, #0]
90015ac0:	4621      	mov	r1, r4
90015ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90015ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015ac8:	4718      	bx	r3
90015aca:	bd70      	pop	{r4, r5, r6, pc}

90015acc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
90015acc:	b570      	push	{r4, r5, r6, lr}
90015ace:	8882      	ldrh	r2, [r0, #4]
90015ad0:	460c      	mov	r4, r1
90015ad2:	880b      	ldrh	r3, [r1, #0]
90015ad4:	4605      	mov	r5, r0
90015ad6:	4413      	add	r3, r2
90015ad8:	800b      	strh	r3, [r1, #0]
90015ada:	884b      	ldrh	r3, [r1, #2]
90015adc:	88c2      	ldrh	r2, [r0, #6]
90015ade:	4413      	add	r3, r2
90015ae0:	804b      	strh	r3, [r1, #2]
90015ae2:	1d01      	adds	r1, r0, #4
90015ae4:	4620      	mov	r0, r4
90015ae6:	f7fa ff05 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
90015aea:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90015aee:	2b00      	cmp	r3, #0
90015af0:	dd18      	ble.n	90015b24 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90015af2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90015af6:	2b00      	cmp	r3, #0
90015af8:	dd14      	ble.n	90015b24 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90015afa:	6968      	ldr	r0, [r5, #20]
90015afc:	b128      	cbz	r0, 90015b0a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
90015afe:	6803      	ldr	r3, [r0, #0]
90015b00:	4621      	mov	r1, r4
90015b02:	691b      	ldr	r3, [r3, #16]
90015b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015b08:	4718      	bx	r3
90015b0a:	4b07      	ldr	r3, [pc, #28]	; (90015b28 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
90015b0c:	681b      	ldr	r3, [r3, #0]
90015b0e:	3304      	adds	r3, #4
90015b10:	429d      	cmp	r5, r3
90015b12:	d107      	bne.n	90015b24 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
90015b14:	f7fe ff44 	bl	900149a0 <_ZN8touchgfx11Application11getInstanceEv>
90015b18:	6821      	ldr	r1, [r4, #0]
90015b1a:	6862      	ldr	r2, [r4, #4]
90015b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015b20:	f7ff b862 	b.w	90014be8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90015b24:	bd70      	pop	{r4, r5, r6, pc}
90015b26:	bf00      	nop
90015b28:	24026498 	.word	0x24026498

90015b2c <_ZN8touchgfx8Drawable12moveRelativeEss>:
90015b2c:	b570      	push	{r4, r5, r6, lr}
90015b2e:	4604      	mov	r4, r0
90015b30:	4616      	mov	r6, r2
90015b32:	460d      	mov	r5, r1
90015b34:	b901      	cbnz	r1, 90015b38 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
90015b36:	b192      	cbz	r2, 90015b5e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90015b38:	6823      	ldr	r3, [r4, #0]
90015b3a:	4620      	mov	r0, r4
90015b3c:	699b      	ldr	r3, [r3, #24]
90015b3e:	4798      	blx	r3
90015b40:	88e2      	ldrh	r2, [r4, #6]
90015b42:	88a1      	ldrh	r1, [r4, #4]
90015b44:	4620      	mov	r0, r4
90015b46:	4432      	add	r2, r6
90015b48:	4429      	add	r1, r5
90015b4a:	b212      	sxth	r2, r2
90015b4c:	b209      	sxth	r1, r1
90015b4e:	f7fb f8ed 	bl	90010d2c <_ZN8touchgfx8Drawable5setXYEss>
90015b52:	6823      	ldr	r3, [r4, #0]
90015b54:	4620      	mov	r0, r4
90015b56:	699b      	ldr	r3, [r3, #24]
90015b58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015b5c:	4718      	bx	r3
90015b5e:	bd70      	pop	{r4, r5, r6, pc}

90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90015b60:	b510      	push	{r4, lr}
90015b62:	2300      	movs	r3, #0
90015b64:	4604      	mov	r4, r0
90015b66:	4608      	mov	r0, r1
90015b68:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90015b6c:	8023      	strh	r3, [r4, #0]
90015b6e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90015b72:	8063      	strh	r3, [r4, #2]
90015b74:	6803      	ldr	r3, [r0, #0]
90015b76:	80a1      	strh	r1, [r4, #4]
90015b78:	4621      	mov	r1, r4
90015b7a:	80e2      	strh	r2, [r4, #6]
90015b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015b7e:	4798      	blx	r3
90015b80:	4620      	mov	r0, r4
90015b82:	bd10      	pop	{r4, pc}

90015b84 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
90015b84:	b530      	push	{r4, r5, lr}
90015b86:	8083      	strh	r3, [r0, #4]
90015b88:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90015b8c:	f89d 5018 	ldrb.w	r5, [sp, #24]
90015b90:	80c3      	strh	r3, [r0, #6]
90015b92:	f89d 3010 	ldrb.w	r3, [sp, #16]
90015b96:	6141      	str	r1, [r0, #20]
90015b98:	7203      	strb	r3, [r0, #8]
90015b9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
90015b9e:	8302      	strh	r2, [r0, #24]
90015ba0:	7243      	strb	r3, [r0, #9]
90015ba2:	7a83      	ldrb	r3, [r0, #10]
90015ba4:	f365 0306 	bfi	r3, r5, #0, #7
90015ba8:	f89d 501c 	ldrb.w	r5, [sp, #28]
90015bac:	f365 13c7 	bfi	r3, r5, #7, #1
90015bb0:	7283      	strb	r3, [r0, #10]
90015bb2:	f89d 3020 	ldrb.w	r3, [sp, #32]
90015bb6:	72c3      	strb	r3, [r0, #11]
90015bb8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
90015bbc:	7303      	strb	r3, [r0, #12]
90015bbe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
90015bc2:	81c3      	strh	r3, [r0, #14]
90015bc4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
90015bc8:	8203      	strh	r3, [r0, #16]
90015bca:	4b01      	ldr	r3, [pc, #4]	; (90015bd0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
90015bcc:	6003      	str	r3, [r0, #0]
90015bce:	bd30      	pop	{r4, r5, pc}
90015bd0:	900277e8 	.word	0x900277e8

90015bd4 <_ZNK8touchgfx9ConstFont4findEt>:
90015bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
90015bd6:	6944      	ldr	r4, [r0, #20]
90015bd8:	b3bc      	cbz	r4, 90015c4a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015bda:	88a3      	ldrh	r3, [r4, #4]
90015bdc:	8b02      	ldrh	r2, [r0, #24]
90015bde:	1acb      	subs	r3, r1, r3
90015be0:	f102 32ff 	add.w	r2, r2, #4294967295
90015be4:	d431      	bmi.n	90015c4a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015be6:	4293      	cmp	r3, r2
90015be8:	dd0c      	ble.n	90015c04 <_ZNK8touchgfx9ConstFont4findEt+0x30>
90015bea:	230e      	movs	r3, #14
90015bec:	fb03 4302 	mla	r3, r3, r2, r4
90015bf0:	889b      	ldrh	r3, [r3, #4]
90015bf2:	1a5b      	subs	r3, r3, r1
90015bf4:	1ad3      	subs	r3, r2, r3
90015bf6:	429a      	cmp	r2, r3
90015bf8:	db27      	blt.n	90015c4a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015bfa:	2b00      	cmp	r3, #0
90015bfc:	bfbc      	itt	lt
90015bfe:	2302      	movlt	r3, #2
90015c00:	fb92 f3f3 	sdivlt	r3, r2, r3
90015c04:	2500      	movs	r5, #0
90015c06:	260e      	movs	r6, #14
90015c08:	4295      	cmp	r5, r2
90015c0a:	dc1e      	bgt.n	90015c4a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015c0c:	fb06 4003 	mla	r0, r6, r3, r4
90015c10:	8887      	ldrh	r7, [r0, #4]
90015c12:	42b9      	cmp	r1, r7
90015c14:	d01a      	beq.n	90015c4c <_ZNK8touchgfx9ConstFont4findEt+0x78>
90015c16:	d20d      	bcs.n	90015c34 <_ZNK8touchgfx9ConstFont4findEt+0x60>
90015c18:	1e5a      	subs	r2, r3, #1
90015c1a:	4295      	cmp	r5, r2
90015c1c:	dc15      	bgt.n	90015c4a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015c1e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
90015c22:	1a5b      	subs	r3, r3, r1
90015c24:	1ad3      	subs	r3, r2, r3
90015c26:	429a      	cmp	r2, r3
90015c28:	db0f      	blt.n	90015c4a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015c2a:	429d      	cmp	r5, r3
90015c2c:	ddec      	ble.n	90015c08 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90015c2e:	1953      	adds	r3, r2, r5
90015c30:	105b      	asrs	r3, r3, #1
90015c32:	e7e9      	b.n	90015c08 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90015c34:	1c5d      	adds	r5, r3, #1
90015c36:	42aa      	cmp	r2, r5
90015c38:	db07      	blt.n	90015c4a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015c3a:	8a43      	ldrh	r3, [r0, #18]
90015c3c:	1acb      	subs	r3, r1, r3
90015c3e:	442b      	add	r3, r5
90015c40:	429d      	cmp	r5, r3
90015c42:	dc02      	bgt.n	90015c4a <_ZNK8touchgfx9ConstFont4findEt+0x76>
90015c44:	429a      	cmp	r2, r3
90015c46:	dadf      	bge.n	90015c08 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90015c48:	e7f1      	b.n	90015c2e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90015c4a:	2000      	movs	r0, #0
90015c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

90015c4e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
90015c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90015c50:	4604      	mov	r4, r0
90015c52:	4617      	mov	r7, r2
90015c54:	461e      	mov	r6, r3
90015c56:	b911      	cbnz	r1, 90015c5e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90015c58:	2500      	movs	r5, #0
90015c5a:	4628      	mov	r0, r5
90015c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90015c5e:	290a      	cmp	r1, #10
90015c60:	d0fa      	beq.n	90015c58 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90015c62:	f64f 62ff 	movw	r2, #65279	; 0xfeff
90015c66:	4291      	cmp	r1, r2
90015c68:	d0f6      	beq.n	90015c58 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90015c6a:	f242 020b 	movw	r2, #8203	; 0x200b
90015c6e:	4291      	cmp	r1, r2
90015c70:	d0f2      	beq.n	90015c58 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90015c72:	f7ff ffaf 	bl	90015bd4 <_ZNK8touchgfx9ConstFont4findEt>
90015c76:	4605      	mov	r5, r0
90015c78:	b950      	cbnz	r0, 90015c90 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90015c7a:	6823      	ldr	r3, [r4, #0]
90015c7c:	4620      	mov	r0, r4
90015c7e:	691b      	ldr	r3, [r3, #16]
90015c80:	4798      	blx	r3
90015c82:	4601      	mov	r1, r0
90015c84:	4620      	mov	r0, r4
90015c86:	f7ff ffa5 	bl	90015bd4 <_ZNK8touchgfx9ConstFont4findEt>
90015c8a:	4605      	mov	r5, r0
90015c8c:	2800      	cmp	r0, #0
90015c8e:	d0e3      	beq.n	90015c58 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90015c90:	6823      	ldr	r3, [r4, #0]
90015c92:	4629      	mov	r1, r5
90015c94:	4620      	mov	r0, r4
90015c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90015c98:	4798      	blx	r3
90015c9a:	6038      	str	r0, [r7, #0]
90015c9c:	6823      	ldr	r3, [r4, #0]
90015c9e:	4620      	mov	r0, r4
90015ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015ca2:	4798      	blx	r3
90015ca4:	7030      	strb	r0, [r6, #0]
90015ca6:	e7d8      	b.n	90015c5a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90015ca8 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
90015ca8:	b538      	push	{r3, r4, r5, lr}
90015caa:	4605      	mov	r5, r0
90015cac:	f002 f83c 	bl	90017d28 <_ZNK8touchgfx6Bitmap9getFormatEv>
90015cb0:	4604      	mov	r4, r0
90015cb2:	4628      	mov	r0, r5
90015cb4:	f001 ff7c 	bl	90017bb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
90015cb8:	2800      	cmp	r0, #0
90015cba:	bf14      	ite	ne
90015cbc:	2002      	movne	r0, #2
90015cbe:	2000      	moveq	r0, #0
90015cc0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
90015cc4:	b280      	uxth	r0, r0
90015cc6:	bd38      	pop	{r3, r4, r5, pc}

90015cc8 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
90015cc8:	b538      	push	{r3, r4, r5, lr}
90015cca:	4605      	mov	r5, r0
90015ccc:	f002 f82c 	bl	90017d28 <_ZNK8touchgfx6Bitmap9getFormatEv>
90015cd0:	4604      	mov	r4, r0
90015cd2:	4628      	mov	r0, r5
90015cd4:	f001 ff6c 	bl	90017bb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
90015cd8:	2800      	cmp	r0, #0
90015cda:	bf14      	ite	ne
90015cdc:	2002      	movne	r0, #2
90015cde:	2000      	moveq	r0, #0
90015ce0:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
90015ce4:	f040 0001 	orr.w	r0, r0, #1
90015ce8:	b280      	uxth	r0, r0
90015cea:	bd38      	pop	{r3, r4, r5, pc}

90015cec <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
90015cec:	2000      	movs	r0, #0
90015cee:	4770      	bx	lr

90015cf0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
90015cf0:	2001      	movs	r0, #1
90015cf2:	4770      	bx	lr

90015cf4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
90015cf4:	2002      	movs	r0, #2
90015cf6:	4770      	bx	lr

90015cf8 <_ZN8touchgfx6ScreenD1Ev>:
90015cf8:	4770      	bx	lr

90015cfa <_ZN8touchgfx6Screen11setupScreenEv>:
90015cfa:	4770      	bx	lr

90015cfc <_ZN8touchgfx12GestureEventD1Ev>:
90015cfc:	4770      	bx	lr

90015cfe <_ZN8touchgfx9DragEventD1Ev>:
90015cfe:	4770      	bx	lr

90015d00 <_ZN8touchgfx10ClickEventD1Ev>:
90015d00:	4770      	bx	lr

90015d02 <_ZN8touchgfx10ClickEventD0Ev>:
90015d02:	b510      	push	{r4, lr}
90015d04:	4604      	mov	r4, r0
90015d06:	210c      	movs	r1, #12
90015d08:	f00d fc7f 	bl	9002360a <_ZdlPvj>
90015d0c:	4620      	mov	r0, r4
90015d0e:	bd10      	pop	{r4, pc}

90015d10 <_ZN8touchgfx9DragEventD0Ev>:
90015d10:	b510      	push	{r4, lr}
90015d12:	4604      	mov	r4, r0
90015d14:	2110      	movs	r1, #16
90015d16:	f00d fc78 	bl	9002360a <_ZdlPvj>
90015d1a:	4620      	mov	r0, r4
90015d1c:	bd10      	pop	{r4, pc}

90015d1e <_ZN8touchgfx12GestureEventD0Ev>:
90015d1e:	b510      	push	{r4, lr}
90015d20:	4604      	mov	r4, r0
90015d22:	210c      	movs	r1, #12
90015d24:	f00d fc71 	bl	9002360a <_ZdlPvj>
90015d28:	4620      	mov	r0, r4
90015d2a:	bd10      	pop	{r4, pc}

90015d2c <_ZN8touchgfx6ScreenD0Ev>:
90015d2c:	b510      	push	{r4, lr}
90015d2e:	4604      	mov	r4, r0
90015d30:	213c      	movs	r1, #60	; 0x3c
90015d32:	f00d fc6a 	bl	9002360a <_ZdlPvj>
90015d36:	4620      	mov	r0, r4
90015d38:	bd10      	pop	{r4, pc}
	...

90015d3c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
90015d3c:	b530      	push	{r4, r5, lr}
90015d3e:	460d      	mov	r5, r1
90015d40:	6b01      	ldr	r1, [r0, #48]	; 0x30
90015d42:	b087      	sub	sp, #28
90015d44:	4604      	mov	r4, r0
90015d46:	b301      	cbz	r1, 90015d8a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90015d48:	a801      	add	r0, sp, #4
90015d4a:	f7ff ff09 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015d4e:	892a      	ldrh	r2, [r5, #8]
90015d50:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90015d54:	7928      	ldrb	r0, [r5, #4]
90015d56:	1ad2      	subs	r2, r2, r3
90015d58:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90015d5a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
90015d5e:	441a      	add	r2, r3
90015d60:	896b      	ldrh	r3, [r5, #10]
90015d62:	f8bd 5006 	ldrh.w	r5, [sp, #6]
90015d66:	f88d 0010 	strb.w	r0, [sp, #16]
90015d6a:	1b5b      	subs	r3, r3, r5
90015d6c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
90015d6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
90015d70:	442b      	add	r3, r5
90015d72:	4d07      	ldr	r5, [pc, #28]	; (90015d90 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
90015d74:	f8ad 1012 	strh.w	r1, [sp, #18]
90015d78:	a903      	add	r1, sp, #12
90015d7a:	9503      	str	r5, [sp, #12]
90015d7c:	f8ad 2014 	strh.w	r2, [sp, #20]
90015d80:	f8ad 3016 	strh.w	r3, [sp, #22]
90015d84:	6803      	ldr	r3, [r0, #0]
90015d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90015d88:	4798      	blx	r3
90015d8a:	b007      	add	sp, #28
90015d8c:	bd30      	pop	{r4, r5, pc}
90015d8e:	bf00      	nop
90015d90:	90027870 	.word	0x90027870

90015d94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
90015d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015d98:	6b03      	ldr	r3, [r0, #48]	; 0x30
90015d9a:	b08a      	sub	sp, #40	; 0x28
90015d9c:	4604      	mov	r4, r0
90015d9e:	460d      	mov	r5, r1
90015da0:	b113      	cbz	r3, 90015da8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
90015da2:	790b      	ldrb	r3, [r1, #4]
90015da4:	2b00      	cmp	r3, #0
90015da6:	d044      	beq.n	90015e32 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90015da8:	f104 0804 	add.w	r8, r4, #4
90015dac:	a803      	add	r0, sp, #12
90015dae:	4641      	mov	r1, r8
90015db0:	f7ff fed6 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015db4:	792b      	ldrb	r3, [r5, #4]
90015db6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
90015dba:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
90015dbe:	b983      	cbnz	r3, 90015de2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
90015dc0:	f104 0336 	add.w	r3, r4, #54	; 0x36
90015dc4:	892a      	ldrh	r2, [r5, #8]
90015dc6:	88e9      	ldrh	r1, [r5, #6]
90015dc8:	4640      	mov	r0, r8
90015dca:	1b92      	subs	r2, r2, r6
90015dcc:	9301      	str	r3, [sp, #4]
90015dce:	1bc9      	subs	r1, r1, r7
90015dd0:	f104 0334 	add.w	r3, r4, #52	; 0x34
90015dd4:	b212      	sxth	r2, r2
90015dd6:	9300      	str	r3, [sp, #0]
90015dd8:	b209      	sxth	r1, r1
90015dda:	f104 0330 	add.w	r3, r4, #48	; 0x30
90015dde:	f7fa fca7 	bl	90010730 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
90015de2:	6b21      	ldr	r1, [r4, #48]	; 0x30
90015de4:	b329      	cbz	r1, 90015e32 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90015de6:	a805      	add	r0, sp, #20
90015de8:	f7ff feba 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015dec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
90015df0:	792b      	ldrb	r3, [r5, #4]
90015df2:	a907      	add	r1, sp, #28
90015df4:	1abf      	subs	r7, r7, r2
90015df6:	88ea      	ldrh	r2, [r5, #6]
90015df8:	6b20      	ldr	r0, [r4, #48]	; 0x30
90015dfa:	4417      	add	r7, r2
90015dfc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
90015dfe:	f88d 3020 	strb.w	r3, [sp, #32]
90015e02:	4417      	add	r7, r2
90015e04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
90015e08:	1ab6      	subs	r6, r6, r2
90015e0a:	892a      	ldrh	r2, [r5, #8]
90015e0c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
90015e10:	4416      	add	r6, r2
90015e12:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90015e14:	4416      	add	r6, r2
90015e16:	4a08      	ldr	r2, [pc, #32]	; (90015e38 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
90015e18:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
90015e1c:	2600      	movs	r6, #0
90015e1e:	9207      	str	r2, [sp, #28]
90015e20:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
90015e24:	6803      	ldr	r3, [r0, #0]
90015e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015e28:	4798      	blx	r3
90015e2a:	792b      	ldrb	r3, [r5, #4]
90015e2c:	b10b      	cbz	r3, 90015e32 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90015e2e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
90015e32:	b00a      	add	sp, #40	; 0x28
90015e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015e38:	90027848 	.word	0x90027848

90015e3c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
90015e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015e40:	460c      	mov	r4, r1
90015e42:	6b01      	ldr	r1, [r0, #48]	; 0x30
90015e44:	b088      	sub	sp, #32
90015e46:	4605      	mov	r5, r0
90015e48:	2900      	cmp	r1, #0
90015e4a:	d06d      	beq.n	90015f28 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
90015e4c:	4668      	mov	r0, sp
90015e4e:	f7ff fe87 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015e52:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
90015e54:	88e3      	ldrh	r3, [r4, #6]
90015e56:	f9bd 8000 	ldrsh.w	r8, [sp]
90015e5a:	440b      	add	r3, r1
90015e5c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90015e60:	b21b      	sxth	r3, r3
90015e62:	4543      	cmp	r3, r8
90015e64:	db31      	blt.n	90015eca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015e66:	f8bd c004 	ldrh.w	ip, [sp, #4]
90015e6a:	44c4      	add	ip, r8
90015e6c:	fa0f fc8c 	sxth.w	ip, ip
90015e70:	4563      	cmp	r3, ip
90015e72:	da2a      	bge.n	90015eca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015e74:	8eea      	ldrh	r2, [r5, #54]	; 0x36
90015e76:	8926      	ldrh	r6, [r4, #8]
90015e78:	4416      	add	r6, r2
90015e7a:	b236      	sxth	r6, r6
90015e7c:	42be      	cmp	r6, r7
90015e7e:	db24      	blt.n	90015eca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015e80:	f8bd 0006 	ldrh.w	r0, [sp, #6]
90015e84:	4438      	add	r0, r7
90015e86:	b200      	sxth	r0, r0
90015e88:	4286      	cmp	r6, r0
90015e8a:	da1e      	bge.n	90015eca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015e8c:	8963      	ldrh	r3, [r4, #10]
90015e8e:	4419      	add	r1, r3
90015e90:	b209      	sxth	r1, r1
90015e92:	4541      	cmp	r1, r8
90015e94:	db08      	blt.n	90015ea8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90015e96:	4561      	cmp	r1, ip
90015e98:	da06      	bge.n	90015ea8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90015e9a:	89a3      	ldrh	r3, [r4, #12]
90015e9c:	441a      	add	r2, r3
90015e9e:	b212      	sxth	r2, r2
90015ea0:	42ba      	cmp	r2, r7
90015ea2:	db01      	blt.n	90015ea8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90015ea4:	4282      	cmp	r2, r0
90015ea6:	db10      	blt.n	90015eca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90015ea8:	4b21      	ldr	r3, [pc, #132]	; (90015f30 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
90015eaa:	a904      	add	r1, sp, #16
90015eac:	6b28      	ldr	r0, [r5, #48]	; 0x30
90015eae:	9304      	str	r3, [sp, #16]
90015eb0:	2302      	movs	r3, #2
90015eb2:	f88d 3014 	strb.w	r3, [sp, #20]
90015eb6:	2300      	movs	r3, #0
90015eb8:	f8ad 3016 	strh.w	r3, [sp, #22]
90015ebc:	f8ad 3018 	strh.w	r3, [sp, #24]
90015ec0:	f8ad 301a 	strh.w	r3, [sp, #26]
90015ec4:	6803      	ldr	r3, [r0, #0]
90015ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90015ec8:	4798      	blx	r3
90015eca:	1d29      	adds	r1, r5, #4
90015ecc:	a802      	add	r0, sp, #8
90015ece:	f7ff fe47 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015ed2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90015ed6:	88e0      	ldrh	r0, [r4, #6]
90015ed8:	eba3 0808 	sub.w	r8, r3, r8
90015edc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
90015ee0:	7921      	ldrb	r1, [r4, #4]
90015ee2:	fa1f f888 	uxth.w	r8, r8
90015ee6:	1bdf      	subs	r7, r3, r7
90015ee8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
90015eec:	b2bb      	uxth	r3, r7
90015eee:	4440      	add	r0, r8
90015ef0:	8922      	ldrh	r2, [r4, #8]
90015ef2:	8967      	ldrh	r7, [r4, #10]
90015ef4:	4460      	add	r0, ip
90015ef6:	89a4      	ldrh	r4, [r4, #12]
90015ef8:	441a      	add	r2, r3
90015efa:	8eee      	ldrh	r6, [r5, #54]	; 0x36
90015efc:	44b8      	add	r8, r7
90015efe:	4423      	add	r3, r4
90015f00:	f8ad 0016 	strh.w	r0, [sp, #22]
90015f04:	4432      	add	r2, r6
90015f06:	44e0      	add	r8, ip
90015f08:	4433      	add	r3, r6
90015f0a:	4c0a      	ldr	r4, [pc, #40]	; (90015f34 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
90015f0c:	6b28      	ldr	r0, [r5, #48]	; 0x30
90015f0e:	f88d 1014 	strb.w	r1, [sp, #20]
90015f12:	a904      	add	r1, sp, #16
90015f14:	9404      	str	r4, [sp, #16]
90015f16:	f8ad 2018 	strh.w	r2, [sp, #24]
90015f1a:	f8ad 801a 	strh.w	r8, [sp, #26]
90015f1e:	f8ad 301c 	strh.w	r3, [sp, #28]
90015f22:	6803      	ldr	r3, [r0, #0]
90015f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015f26:	4798      	blx	r3
90015f28:	b008      	add	sp, #32
90015f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015f2e:	bf00      	nop
90015f30:	90027848 	.word	0x90027848
90015f34:	9002785c 	.word	0x9002785c

90015f38 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90015f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
90015f3a:	4604      	mov	r4, r0
90015f3c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90015f40:	3201      	adds	r2, #1
90015f42:	d112      	bne.n	90015f6a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
90015f44:	2500      	movs	r5, #0
90015f46:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90015f4a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90015f4e:	6803      	ldr	r3, [r0, #0]
90015f50:	9500      	str	r5, [sp, #0]
90015f52:	466d      	mov	r5, sp
90015f54:	f8ad 1004 	strh.w	r1, [sp, #4]
90015f58:	f8ad 2006 	strh.w	r2, [sp, #6]
90015f5c:	4629      	mov	r1, r5
90015f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90015f60:	4798      	blx	r3
90015f62:	e895 0003 	ldmia.w	r5, {r0, r1}
90015f66:	e884 0003 	stmia.w	r4, {r0, r1}
90015f6a:	4620      	mov	r0, r4
90015f6c:	b003      	add	sp, #12
90015f6e:	bd30      	pop	{r4, r5, pc}

90015f70 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90015f70:	b513      	push	{r0, r1, r4, lr}
90015f72:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
90015f76:	4604      	mov	r4, r0
90015f78:	3301      	adds	r3, #1
90015f7a:	d109      	bne.n	90015f90 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
90015f7c:	4601      	mov	r1, r0
90015f7e:	4668      	mov	r0, sp
90015f80:	f7ff fdee 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015f84:	f8bd 3000 	ldrh.w	r3, [sp]
90015f88:	8423      	strh	r3, [r4, #32]
90015f8a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90015f8e:	8463      	strh	r3, [r4, #34]	; 0x22
90015f90:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
90015f94:	b002      	add	sp, #8
90015f96:	bd10      	pop	{r4, pc}

90015f98 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
90015f98:	b513      	push	{r0, r1, r4, lr}
90015f9a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
90015f9e:	4604      	mov	r4, r0
90015fa0:	3301      	adds	r3, #1
90015fa2:	d109      	bne.n	90015fb8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
90015fa4:	4601      	mov	r1, r0
90015fa6:	4668      	mov	r0, sp
90015fa8:	f7ff fdda 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015fac:	f8bd 3000 	ldrh.w	r3, [sp]
90015fb0:	8423      	strh	r3, [r4, #32]
90015fb2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90015fb6:	8463      	strh	r3, [r4, #34]	; 0x22
90015fb8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
90015fbc:	b002      	add	sp, #8
90015fbe:	bd10      	pop	{r4, pc}

90015fc0 <_ZN8touchgfx6ScreenC1Ev>:
90015fc0:	b570      	push	{r4, r5, r6, lr}
90015fc2:	4b17      	ldr	r3, [pc, #92]	; (90016020 <_ZN8touchgfx6ScreenC1Ev+0x60>)
90015fc4:	4605      	mov	r5, r0
90015fc6:	4a17      	ldr	r2, [pc, #92]	; (90016024 <_ZN8touchgfx6ScreenC1Ev+0x64>)
90015fc8:	2101      	movs	r1, #1
90015fca:	f845 3b04 	str.w	r3, [r5], #4
90015fce:	2300      	movs	r3, #0
90015fd0:	6042      	str	r2, [r0, #4]
90015fd2:	4604      	mov	r4, r0
90015fd4:	8103      	strh	r3, [r0, #8]
90015fd6:	8143      	strh	r3, [r0, #10]
90015fd8:	8183      	strh	r3, [r0, #12]
90015fda:	81c3      	strh	r3, [r0, #14]
90015fdc:	8203      	strh	r3, [r0, #16]
90015fde:	8243      	strh	r3, [r0, #18]
90015fe0:	8283      	strh	r3, [r0, #20]
90015fe2:	82c3      	strh	r3, [r0, #22]
90015fe4:	6203      	str	r3, [r0, #32]
90015fe6:	8483      	strh	r3, [r0, #36]	; 0x24
90015fe8:	84c3      	strh	r3, [r0, #38]	; 0x26
90015fea:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
90015fee:	6343      	str	r3, [r0, #52]	; 0x34
90015ff0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
90015ff4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
90015ff8:	e9c0 3306 	strd	r3, r3, [r0, #24]
90015ffc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
90016000:	4b09      	ldr	r3, [pc, #36]	; (90016028 <_ZN8touchgfx6ScreenC1Ev+0x68>)
90016002:	4628      	mov	r0, r5
90016004:	f9b3 6000 	ldrsh.w	r6, [r3]
90016008:	6b93      	ldr	r3, [r2, #56]	; 0x38
9001600a:	4a08      	ldr	r2, [pc, #32]	; (9001602c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
9001600c:	f9b2 1000 	ldrsh.w	r1, [r2]
90016010:	4798      	blx	r3
90016012:	6863      	ldr	r3, [r4, #4]
90016014:	4628      	mov	r0, r5
90016016:	4631      	mov	r1, r6
90016018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001601a:	4798      	blx	r3
9001601c:	4620      	mov	r0, r4
9001601e:	bd70      	pop	{r4, r5, r6, pc}
90016020:	90027884 	.word	0x90027884
90016024:	9002734c 	.word	0x9002734c
90016028:	24026452 	.word	0x24026452
9001602c:	24026450 	.word	0x24026450

90016030 <_ZN8touchgfx6Screen4drawEv>:
90016030:	4b09      	ldr	r3, [pc, #36]	; (90016058 <_ZN8touchgfx6Screen4drawEv+0x28>)
90016032:	b507      	push	{r0, r1, r2, lr}
90016034:	f9b3 2000 	ldrsh.w	r2, [r3]
90016038:	2100      	movs	r1, #0
9001603a:	4b08      	ldr	r3, [pc, #32]	; (9001605c <_ZN8touchgfx6Screen4drawEv+0x2c>)
9001603c:	9100      	str	r1, [sp, #0]
9001603e:	4669      	mov	r1, sp
90016040:	f9b3 3000 	ldrsh.w	r3, [r3]
90016044:	f8ad 2004 	strh.w	r2, [sp, #4]
90016048:	f8ad 3006 	strh.w	r3, [sp, #6]
9001604c:	6803      	ldr	r3, [r0, #0]
9001604e:	689b      	ldr	r3, [r3, #8]
90016050:	4798      	blx	r3
90016052:	b003      	add	sp, #12
90016054:	f85d fb04 	ldr.w	pc, [sp], #4
90016058:	24026450 	.word	0x24026450
9001605c:	24026452 	.word	0x24026452

90016060 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90016060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016064:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90016068:	b089      	sub	sp, #36	; 0x24
9001606a:	4680      	mov	r8, r0
9001606c:	460c      	mov	r4, r1
9001606e:	2b00      	cmp	r3, #0
90016070:	4615      	mov	r5, r2
90016072:	dd0e      	ble.n	90016092 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90016074:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
90016078:	2b00      	cmp	r3, #0
9001607a:	dd0a      	ble.n	90016092 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001607c:	4628      	mov	r0, r5
9001607e:	f7ff ff5b 	bl	90015f38 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90016082:	4621      	mov	r1, r4
90016084:	f7fe fbad 	bl	900147e2 <_ZNK8touchgfx4Rect9intersectERKS0_>
90016088:	69eb      	ldr	r3, [r5, #28]
9001608a:	b928      	cbnz	r0, 90016098 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
9001608c:	461d      	mov	r5, r3
9001608e:	2b00      	cmp	r3, #0
90016090:	d1f4      	bne.n	9001607c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
90016092:	b009      	add	sp, #36	; 0x24
90016094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016098:	ae04      	add	r6, sp, #16
9001609a:	2b00      	cmp	r3, #0
9001609c:	f000 80b5 	beq.w	9001620a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900160a0:	682b      	ldr	r3, [r5, #0]
900160a2:	4629      	mov	r1, r5
900160a4:	a802      	add	r0, sp, #8
900160a6:	68db      	ldr	r3, [r3, #12]
900160a8:	4798      	blx	r3
900160aa:	4628      	mov	r0, r5
900160ac:	f7ff ff60 	bl	90015f70 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
900160b0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
900160b4:	4407      	add	r7, r0
900160b6:	4628      	mov	r0, r5
900160b8:	f7ff ff6e 	bl	90015f98 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
900160bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900160c0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
900160c4:	b23f      	sxth	r7, r7
900160c6:	4418      	add	r0, r3
900160c8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900160cc:	4621      	mov	r1, r4
900160ce:	f8ad 2014 	strh.w	r2, [sp, #20]
900160d2:	f8ad 0012 	strh.w	r0, [sp, #18]
900160d6:	4630      	mov	r0, r6
900160d8:	f8ad 3016 	strh.w	r3, [sp, #22]
900160dc:	f8ad 7010 	strh.w	r7, [sp, #16]
900160e0:	f7fa fc08 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
900160e4:	4628      	mov	r0, r5
900160e6:	f7ff ff27 	bl	90015f38 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900160ea:	ab06      	add	r3, sp, #24
900160ec:	4602      	mov	r2, r0
900160ee:	e896 0003 	ldmia.w	r6, {r0, r1}
900160f2:	e883 0003 	stmia.w	r3, {r0, r1}
900160f6:	4611      	mov	r1, r2
900160f8:	4618      	mov	r0, r3
900160fa:	f7fa fbfb 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
900160fe:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90016102:	f9b4 1000 	ldrsh.w	r1, [r4]
90016106:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
9001610a:	4299      	cmp	r1, r3
9001610c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
90016110:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
90016114:	d10b      	bne.n	9001612e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90016116:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001611a:	4552      	cmp	r2, sl
9001611c:	d107      	bne.n	9001612e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
9001611e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
90016122:	455a      	cmp	r2, fp
90016124:	d103      	bne.n	9001612e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90016126:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
9001612a:	454a      	cmp	r2, r9
9001612c:	d06d      	beq.n	9001620a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
9001612e:	f1bb 0f00 	cmp.w	fp, #0
90016132:	dd65      	ble.n	90016200 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90016134:	f1b9 0f00 	cmp.w	r9, #0
90016138:	dd62      	ble.n	90016200 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
9001613a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001613e:	fa1f f08a 	uxth.w	r0, sl
90016142:	4552      	cmp	r2, sl
90016144:	9000      	str	r0, [sp, #0]
90016146:	da12      	bge.n	9001616e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90016148:	9301      	str	r3, [sp, #4]
9001614a:	9b00      	ldr	r3, [sp, #0]
9001614c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90016150:	f8ad 2012 	strh.w	r2, [sp, #18]
90016154:	1a9a      	subs	r2, r3, r2
90016156:	f8ad 1010 	strh.w	r1, [sp, #16]
9001615a:	4631      	mov	r1, r6
9001615c:	f8ad 0014 	strh.w	r0, [sp, #20]
90016160:	4640      	mov	r0, r8
90016162:	f8ad 2016 	strh.w	r2, [sp, #22]
90016166:	69ea      	ldr	r2, [r5, #28]
90016168:	f7ff ff7a 	bl	90016060 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001616c:	9b01      	ldr	r3, [sp, #4]
9001616e:	f9b4 2000 	ldrsh.w	r2, [r4]
90016172:	b29f      	uxth	r7, r3
90016174:	429a      	cmp	r2, r3
90016176:	da0d      	bge.n	90016194 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90016178:	f8ad 2010 	strh.w	r2, [sp, #16]
9001617c:	1aba      	subs	r2, r7, r2
9001617e:	f8ad a012 	strh.w	sl, [sp, #18]
90016182:	4631      	mov	r1, r6
90016184:	f8ad 2014 	strh.w	r2, [sp, #20]
90016188:	4640      	mov	r0, r8
9001618a:	f8ad 9016 	strh.w	r9, [sp, #22]
9001618e:	69ea      	ldr	r2, [r5, #28]
90016190:	f7ff ff66 	bl	90016060 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90016194:	8822      	ldrh	r2, [r4, #0]
90016196:	445f      	add	r7, fp
90016198:	88a3      	ldrh	r3, [r4, #4]
9001619a:	b2bf      	uxth	r7, r7
9001619c:	4413      	add	r3, r2
9001619e:	b23a      	sxth	r2, r7
900161a0:	b29b      	uxth	r3, r3
900161a2:	b219      	sxth	r1, r3
900161a4:	4291      	cmp	r1, r2
900161a6:	dd0d      	ble.n	900161c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
900161a8:	1bdb      	subs	r3, r3, r7
900161aa:	f8ad 2010 	strh.w	r2, [sp, #16]
900161ae:	f8ad a012 	strh.w	sl, [sp, #18]
900161b2:	4631      	mov	r1, r6
900161b4:	f8ad 3014 	strh.w	r3, [sp, #20]
900161b8:	4640      	mov	r0, r8
900161ba:	f8ad 9016 	strh.w	r9, [sp, #22]
900161be:	69ea      	ldr	r2, [r5, #28]
900161c0:	f7ff ff4e 	bl	90016060 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900161c4:	88e2      	ldrh	r2, [r4, #6]
900161c6:	8863      	ldrh	r3, [r4, #2]
900161c8:	4413      	add	r3, r2
900161ca:	9a00      	ldr	r2, [sp, #0]
900161cc:	444a      	add	r2, r9
900161ce:	b29b      	uxth	r3, r3
900161d0:	fa1f f982 	uxth.w	r9, r2
900161d4:	b219      	sxth	r1, r3
900161d6:	fa0f f289 	sxth.w	r2, r9
900161da:	428a      	cmp	r2, r1
900161dc:	da15      	bge.n	9001620a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
900161de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900161e2:	eba3 0309 	sub.w	r3, r3, r9
900161e6:	f9b4 0000 	ldrsh.w	r0, [r4]
900161ea:	f8ad 1014 	strh.w	r1, [sp, #20]
900161ee:	4631      	mov	r1, r6
900161f0:	f8ad 0010 	strh.w	r0, [sp, #16]
900161f4:	f8ad 2012 	strh.w	r2, [sp, #18]
900161f8:	f8ad 3016 	strh.w	r3, [sp, #22]
900161fc:	69ea      	ldr	r2, [r5, #28]
900161fe:	e001      	b.n	90016204 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90016200:	69ea      	ldr	r2, [r5, #28]
90016202:	4621      	mov	r1, r4
90016204:	4640      	mov	r0, r8
90016206:	f7ff ff2b 	bl	90016060 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
9001620a:	4628      	mov	r0, r5
9001620c:	f7ff fe94 	bl	90015f38 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90016210:	6861      	ldr	r1, [r4, #4]
90016212:	4602      	mov	r2, r0
90016214:	4633      	mov	r3, r6
90016216:	6820      	ldr	r0, [r4, #0]
90016218:	c303      	stmia	r3!, {r0, r1}
9001621a:	4611      	mov	r1, r2
9001621c:	4630      	mov	r0, r6
9001621e:	f7fa fb69 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
90016222:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90016226:	2b00      	cmp	r3, #0
90016228:	f77f af33 	ble.w	90016092 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001622c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90016230:	2b00      	cmp	r3, #0
90016232:	f77f af2e 	ble.w	90016092 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90016236:	4628      	mov	r0, r5
90016238:	f7ff fe9a 	bl	90015f70 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
9001623c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90016240:	1a18      	subs	r0, r3, r0
90016242:	f8ad 0010 	strh.w	r0, [sp, #16]
90016246:	4628      	mov	r0, r5
90016248:	f7ff fea6 	bl	90015f98 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
9001624c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90016250:	4631      	mov	r1, r6
90016252:	1a18      	subs	r0, r3, r0
90016254:	f8ad 0012 	strh.w	r0, [sp, #18]
90016258:	4628      	mov	r0, r5
9001625a:	682b      	ldr	r3, [r5, #0]
9001625c:	689b      	ldr	r3, [r3, #8]
9001625e:	4798      	blx	r3
90016260:	e717      	b.n	90016092 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90016262 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90016262:	b570      	push	{r4, r5, r6, lr}
90016264:	1d06      	adds	r6, r0, #4
90016266:	b086      	sub	sp, #24
90016268:	460c      	mov	r4, r1
9001626a:	2300      	movs	r3, #0
9001626c:	4631      	mov	r1, r6
9001626e:	4605      	mov	r5, r0
90016270:	a802      	add	r0, sp, #8
90016272:	9301      	str	r3, [sp, #4]
90016274:	f7ff fc74 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90016278:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001627c:	8822      	ldrh	r2, [r4, #0]
9001627e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90016282:	1ad2      	subs	r2, r2, r3
90016284:	8863      	ldrh	r3, [r4, #2]
90016286:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001628a:	1a5b      	subs	r3, r3, r1
9001628c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90016290:	f8ad 2010 	strh.w	r2, [sp, #16]
90016294:	aa01      	add	r2, sp, #4
90016296:	f8ad 0014 	strh.w	r0, [sp, #20]
9001629a:	4630      	mov	r0, r6
9001629c:	f8ad 1016 	strh.w	r1, [sp, #22]
900162a0:	a904      	add	r1, sp, #16
900162a2:	f8ad 3012 	strh.w	r3, [sp, #18]
900162a6:	f7fa fbfd 	bl	90010aa4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
900162aa:	9a01      	ldr	r2, [sp, #4]
900162ac:	b11a      	cbz	r2, 900162b6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
900162ae:	4621      	mov	r1, r4
900162b0:	4628      	mov	r0, r5
900162b2:	f7ff fed5 	bl	90016060 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
900162b6:	b006      	add	sp, #24
900162b8:	bd70      	pop	{r4, r5, r6, pc}

900162ba <_ZN8touchgfx6Screen4drawERNS_4RectE>:
900162ba:	4602      	mov	r2, r0
900162bc:	b530      	push	{r4, r5, lr}
900162be:	4604      	mov	r4, r0
900162c0:	b085      	sub	sp, #20
900162c2:	f852 0f08 	ldr.w	r0, [r2, #8]!
900162c6:	460d      	mov	r5, r1
900162c8:	466b      	mov	r3, sp
900162ca:	6851      	ldr	r1, [r2, #4]
900162cc:	c303      	stmia	r3!, {r0, r1}
900162ce:	4629      	mov	r1, r5
900162d0:	4668      	mov	r0, sp
900162d2:	f7fa fb0f 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
900162d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900162da:	b12b      	cbz	r3, 900162e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
900162dc:	4669      	mov	r1, sp
900162de:	4620      	mov	r0, r4
900162e0:	f7ff ffbf 	bl	90016262 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
900162e4:	b005      	add	sp, #20
900162e6:	bd30      	pop	{r4, r5, pc}
900162e8:	3404      	adds	r4, #4
900162ea:	a802      	add	r0, sp, #8
900162ec:	4621      	mov	r1, r4
900162ee:	f7ff fc37 	bl	90015b60 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900162f2:	f8bd 3000 	ldrh.w	r3, [sp]
900162f6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
900162fa:	4669      	mov	r1, sp
900162fc:	4620      	mov	r0, r4
900162fe:	1a9b      	subs	r3, r3, r2
90016300:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90016304:	f8ad 3000 	strh.w	r3, [sp]
90016308:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001630c:	1a9b      	subs	r3, r3, r2
9001630e:	f8ad 3002 	strh.w	r3, [sp, #2]
90016312:	f7fa fb8e 	bl	90010a32 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90016316:	e7e5      	b.n	900162e4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90016318 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90016318:	460b      	mov	r3, r1
9001631a:	680a      	ldr	r2, [r1, #0]
9001631c:	1d01      	adds	r1, r0, #4
9001631e:	6992      	ldr	r2, [r2, #24]
90016320:	4618      	mov	r0, r3
90016322:	4710      	bx	r2

90016324 <_ZN8touchgfx12TextProviderC1Ev>:
90016324:	b538      	push	{r3, r4, r5, lr}
90016326:	2500      	movs	r5, #0
90016328:	2302      	movs	r3, #2
9001632a:	4604      	mov	r4, r0
9001632c:	220e      	movs	r2, #14
9001632e:	7403      	strb	r3, [r0, #16]
90016330:	4629      	mov	r1, r5
90016332:	6145      	str	r5, [r0, #20]
90016334:	7605      	strb	r5, [r0, #24]
90016336:	83c5      	strh	r5, [r0, #30]
90016338:	8405      	strh	r5, [r0, #32]
9001633a:	86c5      	strh	r5, [r0, #54]	; 0x36
9001633c:	8705      	strh	r5, [r0, #56]	; 0x38
9001633e:	87c5      	strh	r5, [r0, #62]	; 0x3e
90016340:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
90016344:	e9c0 5500 	strd	r5, r5, [r0]
90016348:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
9001634c:	304c      	adds	r0, #76	; 0x4c
9001634e:	f00d fc25 	bl	90023b9c <memset>
90016352:	2301      	movs	r3, #1
90016354:	4620      	mov	r0, r4
90016356:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
9001635a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001635e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90016362:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
90016366:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
9001636a:	f7ef fc6b 	bl	90005c44 <_ZN8touchgfx12TextProvider18initializeInternalEv>
9001636e:	4620      	mov	r0, r4
90016370:	bd38      	pop	{r3, r4, r5, pc}

90016372 <_ZN8touchgfx12TextProvider11endOfStringEv>:
90016372:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90016374:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90016378:	8c40      	ldrh	r0, [r0, #34]	; 0x22
9001637a:	fab0 f080 	clz	r0, r0
9001637e:	0940      	lsrs	r0, r0, #5
90016380:	4770      	bx	lr

90016382 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90016382:	b530      	push	{r4, r5, lr}
90016384:	2500      	movs	r5, #0
90016386:	2401      	movs	r4, #1
90016388:	6843      	ldr	r3, [r0, #4]
9001638a:	b913      	cbnz	r3, 90016392 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
9001638c:	6803      	ldr	r3, [r0, #0]
9001638e:	b313      	cbz	r3, 900163d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90016390:	6043      	str	r3, [r0, #4]
90016392:	7e03      	ldrb	r3, [r0, #24]
90016394:	b143      	cbz	r3, 900163a8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
90016396:	6943      	ldr	r3, [r0, #20]
90016398:	b12b      	cbz	r3, 900163a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
9001639a:	881a      	ldrh	r2, [r3, #0]
9001639c:	b11a      	cbz	r2, 900163a6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
9001639e:	1c9a      	adds	r2, r3, #2
900163a0:	6142      	str	r2, [r0, #20]
900163a2:	8818      	ldrh	r0, [r3, #0]
900163a4:	bd30      	pop	{r4, r5, pc}
900163a6:	7605      	strb	r5, [r0, #24]
900163a8:	6843      	ldr	r3, [r0, #4]
900163aa:	8819      	ldrh	r1, [r3, #0]
900163ac:	b199      	cbz	r1, 900163d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
900163ae:	1c9a      	adds	r2, r3, #2
900163b0:	2902      	cmp	r1, #2
900163b2:	6042      	str	r2, [r0, #4]
900163b4:	d1f5      	bne.n	900163a2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
900163b6:	7c03      	ldrb	r3, [r0, #16]
900163b8:	2b01      	cmp	r3, #1
900163ba:	d8e5      	bhi.n	90016388 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900163bc:	1c5a      	adds	r2, r3, #1
900163be:	3302      	adds	r3, #2
900163c0:	7402      	strb	r2, [r0, #16]
900163c2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
900163c6:	6143      	str	r3, [r0, #20]
900163c8:	2b00      	cmp	r3, #0
900163ca:	d0dd      	beq.n	90016388 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900163cc:	881b      	ldrh	r3, [r3, #0]
900163ce:	2b00      	cmp	r3, #0
900163d0:	d0da      	beq.n	90016388 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900163d2:	7604      	strb	r4, [r0, #24]
900163d4:	e7d8      	b.n	90016388 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
900163d6:	2000      	movs	r0, #0
900163d8:	e7e4      	b.n	900163a4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
900163da:	6001      	str	r1, [r0, #0]
900163dc:	2100      	movs	r1, #0
900163de:	b430      	push	{r4, r5}
900163e0:	6041      	str	r1, [r0, #4]
900163e2:	6815      	ldr	r5, [r2, #0]
900163e4:	6085      	str	r5, [r0, #8]
900163e6:	6852      	ldr	r2, [r2, #4]
900163e8:	6443      	str	r3, [r0, #68]	; 0x44
900163ea:	9b02      	ldr	r3, [sp, #8]
900163ec:	60c2      	str	r2, [r0, #12]
900163ee:	7401      	strb	r1, [r0, #16]
900163f0:	6141      	str	r1, [r0, #20]
900163f2:	7601      	strb	r1, [r0, #24]
900163f4:	8701      	strh	r1, [r0, #56]	; 0x38
900163f6:	8401      	strh	r1, [r0, #32]
900163f8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
900163fc:	6483      	str	r3, [r0, #72]	; 0x48
900163fe:	bc30      	pop	{r4, r5}
90016400:	f7ef bc20 	b.w	90005c44 <_ZN8touchgfx12TextProvider18initializeInternalEv>

90016404 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
90016404:	b408      	push	{r3}
90016406:	b510      	push	{r4, lr}
90016408:	b085      	sub	sp, #20
9001640a:	ac07      	add	r4, sp, #28
9001640c:	f854 3b04 	ldr.w	r3, [r4], #4
90016410:	9300      	str	r3, [sp, #0]
90016412:	4613      	mov	r3, r2
90016414:	4622      	mov	r2, r4
90016416:	9403      	str	r4, [sp, #12]
90016418:	f7ff ffdf 	bl	900163da <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001641c:	b005      	add	sp, #20
9001641e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90016422:	b001      	add	sp, #4
90016424:	4770      	bx	lr

90016426 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90016426:	b5f0      	push	{r4, r5, r6, r7, lr}
90016428:	4605      	mov	r5, r0
9001642a:	4608      	mov	r0, r1
9001642c:	b1f1      	cbz	r1, 9001646c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
9001642e:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90016432:	460b      	mov	r3, r1
90016434:	f101 0708 	add.w	r7, r1, #8
90016438:	4622      	mov	r2, r4
9001643a:	6818      	ldr	r0, [r3, #0]
9001643c:	3308      	adds	r3, #8
9001643e:	f853 1c04 	ldr.w	r1, [r3, #-4]
90016442:	4626      	mov	r6, r4
90016444:	42bb      	cmp	r3, r7
90016446:	c603      	stmia	r6!, {r0, r1}
90016448:	4634      	mov	r4, r6
9001644a:	d1f6      	bne.n	9001643a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
9001644c:	6818      	ldr	r0, [r3, #0]
9001644e:	6030      	str	r0, [r6, #0]
90016450:	4610      	mov	r0, r2
90016452:	889b      	ldrh	r3, [r3, #4]
90016454:	80b3      	strh	r3, [r6, #4]
90016456:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
9001645a:	015b      	lsls	r3, r3, #5
9001645c:	f403 7180 	and.w	r1, r3, #256	; 0x100
90016460:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
90016464:	430b      	orrs	r3, r1
90016466:	425b      	negs	r3, r3
90016468:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
9001646c:	bdf0      	pop	{r4, r5, r6, r7, pc}

9001646e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
9001646e:	b538      	push	{r3, r4, r5, lr}
90016470:	460c      	mov	r4, r1
90016472:	6811      	ldr	r1, [r2, #0]
90016474:	4610      	mov	r0, r2
90016476:	68cd      	ldr	r5, [r1, #12]
90016478:	4619      	mov	r1, r3
9001647a:	47a8      	blx	r5
9001647c:	2800      	cmp	r0, #0
9001647e:	bf08      	it	eq
90016480:	4620      	moveq	r0, r4
90016482:	bd38      	pop	{r3, r4, r5, pc}

90016484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
90016484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90016486:	4604      	mov	r4, r0
90016488:	4615      	mov	r5, r2
9001648a:	4608      	mov	r0, r1
9001648c:	b93a      	cbnz	r2, 9001649e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
9001648e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90016492:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
90016496:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
9001649a:	4628      	mov	r0, r5
9001649c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001649e:	f892 c00d 	ldrb.w	ip, [r2, #13]
900164a2:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
900164a6:	8893      	ldrh	r3, [r2, #4]
900164a8:	ea4f 160c 	mov.w	r6, ip, lsl #4
900164ac:	f406 7280 	and.w	r2, r6, #256	; 0x100
900164b0:	79ee      	ldrb	r6, [r5, #7]
900164b2:	4316      	orrs	r6, r2
900164b4:	19da      	adds	r2, r3, r7
900164b6:	b291      	uxth	r1, r2
900164b8:	b2b7      	uxth	r7, r6
900164ba:	291d      	cmp	r1, #29
900164bc:	d87b      	bhi.n	900165b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
900164be:	2201      	movs	r2, #1
900164c0:	10f6      	asrs	r6, r6, #3
900164c2:	408a      	lsls	r2, r1
900164c4:	4974      	ldr	r1, [pc, #464]	; (90016698 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
900164c6:	420a      	tst	r2, r1
900164c8:	d12e      	bne.n	90016528 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
900164ca:	f412 7f60 	tst.w	r2, #896	; 0x380
900164ce:	d072      	beq.n	900165b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
900164d0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
900164d4:	462b      	mov	r3, r5
900164d6:	f105 0e08 	add.w	lr, r5, #8
900164da:	4615      	mov	r5, r2
900164dc:	6818      	ldr	r0, [r3, #0]
900164de:	3308      	adds	r3, #8
900164e0:	f853 1c04 	ldr.w	r1, [r3, #-4]
900164e4:	4694      	mov	ip, r2
900164e6:	4573      	cmp	r3, lr
900164e8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
900164ec:	4662      	mov	r2, ip
900164ee:	d1f5      	bne.n	900164dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
900164f0:	6818      	ldr	r0, [r3, #0]
900164f2:	f8cc 0000 	str.w	r0, [ip]
900164f6:	889b      	ldrh	r3, [r3, #4]
900164f8:	f8ac 3004 	strh.w	r3, [ip, #4]
900164fc:	b2b3      	uxth	r3, r6
900164fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90016502:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
90016506:	1aca      	subs	r2, r1, r3
90016508:	1bcf      	subs	r7, r1, r7
9001650a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
9001650e:	b292      	uxth	r2, r2
90016510:	1afb      	subs	r3, r7, r3
90016512:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
90016516:	10d2      	asrs	r2, r2, #3
90016518:	f002 0260 	and.w	r2, r2, #96	; 0x60
9001651c:	4302      	orrs	r2, r0
9001651e:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
90016522:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90016526:	e7b8      	b.n	9001649a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90016528:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
9001652a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001652e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90016530:	f640 6333 	movw	r3, #3635	; 0xe33
90016534:	4299      	cmp	r1, r3
90016536:	d110      	bne.n	9001655a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90016538:	6803      	ldr	r3, [r0, #0]
9001653a:	68db      	ldr	r3, [r3, #12]
9001653c:	4798      	blx	r3
9001653e:	7b41      	ldrb	r1, [r0, #13]
90016540:	00cb      	lsls	r3, r1, #3
90016542:	f403 7280 	and.w	r2, r3, #256	; 0x100
90016546:	7a03      	ldrb	r3, [r0, #8]
90016548:	0648      	lsls	r0, r1, #25
9001654a:	ea43 0302 	orr.w	r3, r3, r2
9001654e:	bf44      	itt	mi
90016550:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90016554:	b21b      	sxthmi	r3, r3
90016556:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001655a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
9001655e:	462a      	mov	r2, r5
90016560:	f105 0c08 	add.w	ip, r5, #8
90016564:	443b      	add	r3, r7
90016566:	4433      	add	r3, r6
90016568:	f104 064c 	add.w	r6, r4, #76	; 0x4c
9001656c:	b29b      	uxth	r3, r3
9001656e:	4635      	mov	r5, r6
90016570:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90016574:	6810      	ldr	r0, [r2, #0]
90016576:	3208      	adds	r2, #8
90016578:	f852 1c04 	ldr.w	r1, [r2, #-4]
9001657c:	4637      	mov	r7, r6
9001657e:	4562      	cmp	r2, ip
90016580:	c703      	stmia	r7!, {r0, r1}
90016582:	463e      	mov	r6, r7
90016584:	d1f6      	bne.n	90016574 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
90016586:	6810      	ldr	r0, [r2, #0]
90016588:	6038      	str	r0, [r7, #0]
9001658a:	8892      	ldrh	r2, [r2, #4]
9001658c:	80ba      	strh	r2, [r7, #4]
9001658e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90016592:	10db      	asrs	r3, r3, #3
90016594:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90016598:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001659c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
900165a0:	4313      	orrs	r3, r2
900165a2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
900165a6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900165aa:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
900165ae:	1a9b      	subs	r3, r3, r2
900165b0:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
900165b4:	e771      	b.n	9001649a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
900165b6:	f023 0204 	bic.w	r2, r3, #4
900165ba:	f640 611b 	movw	r1, #3611	; 0xe1b
900165be:	428a      	cmp	r2, r1
900165c0:	d003      	beq.n	900165ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
900165c2:	f640 621d 	movw	r2, #3613	; 0xe1d
900165c6:	4293      	cmp	r3, r2
900165c8:	d120      	bne.n	9001660c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
900165ca:	3b01      	subs	r3, #1
900165cc:	4602      	mov	r2, r0
900165ce:	4629      	mov	r1, r5
900165d0:	4620      	mov	r0, r4
900165d2:	b29b      	uxth	r3, r3
900165d4:	f7ff ff4b 	bl	9001646e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
900165d8:	7b41      	ldrb	r1, [r0, #13]
900165da:	00cb      	lsls	r3, r1, #3
900165dc:	0649      	lsls	r1, r1, #25
900165de:	f403 7280 	and.w	r2, r3, #256	; 0x100
900165e2:	7a03      	ldrb	r3, [r0, #8]
900165e4:	ea43 0302 	orr.w	r3, r3, r2
900165e8:	bf44      	itt	mi
900165ea:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900165ee:	b21b      	sxthmi	r3, r3
900165f0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900165f4:	7b6b      	ldrb	r3, [r5, #13]
900165f6:	7aaa      	ldrb	r2, [r5, #10]
900165f8:	005b      	lsls	r3, r3, #1
900165fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
900165fe:	4313      	orrs	r3, r2
90016600:	115a      	asrs	r2, r3, #5
90016602:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90016606:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
9001660a:	e035      	b.n	90016678 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
9001660c:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90016610:	f01c 0f40 	tst.w	ip, #64	; 0x40
90016614:	f402 7180 	and.w	r1, r2, #256	; 0x100
90016618:	7a2a      	ldrb	r2, [r5, #8]
9001661a:	ea42 0201 	orr.w	r2, r2, r1
9001661e:	f640 6109 	movw	r1, #3593	; 0xe09
90016622:	bf1c      	itt	ne
90016624:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90016628:	b212      	sxthne	r2, r2
9001662a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
9001662e:	f023 0210 	bic.w	r2, r3, #16
90016632:	428a      	cmp	r2, r1
90016634:	d003      	beq.n	9001663e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90016636:	f640 6213 	movw	r2, #3603	; 0xe13
9001663a:	4293      	cmp	r3, r2
9001663c:	d129      	bne.n	90016692 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
9001663e:	7b6e      	ldrb	r6, [r5, #13]
90016640:	4629      	mov	r1, r5
90016642:	0076      	lsls	r6, r6, #1
90016644:	f406 7280 	and.w	r2, r6, #256	; 0x100
90016648:	7aae      	ldrb	r6, [r5, #10]
9001664a:	4316      	orrs	r6, r2
9001664c:	f640 6213 	movw	r2, #3603	; 0xe13
90016650:	4293      	cmp	r3, r2
90016652:	4602      	mov	r2, r0
90016654:	4620      	mov	r0, r4
90016656:	bf16      	itet	ne
90016658:	f103 33ff 	addne.w	r3, r3, #4294967295
9001665c:	f640 630c 	movweq	r3, #3596	; 0xe0c
90016660:	b29b      	uxthne	r3, r3
90016662:	f7ff ff04 	bl	9001646e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90016666:	7b43      	ldrb	r3, [r0, #13]
90016668:	7a82      	ldrb	r2, [r0, #10]
9001666a:	005b      	lsls	r3, r3, #1
9001666c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90016670:	4313      	orrs	r3, r2
90016672:	1af6      	subs	r6, r6, r3
90016674:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90016678:	7b69      	ldrb	r1, [r5, #13]
9001667a:	00cb      	lsls	r3, r1, #3
9001667c:	f403 7280 	and.w	r2, r3, #256	; 0x100
90016680:	7a2b      	ldrb	r3, [r5, #8]
90016682:	4313      	orrs	r3, r2
90016684:	064a      	lsls	r2, r1, #25
90016686:	bf44      	itt	mi
90016688:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001668c:	b21b      	sxthmi	r3, r3
9001668e:	1bdb      	subs	r3, r3, r7
90016690:	e747      	b.n	90016522 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
90016692:	2300      	movs	r3, #0
90016694:	e7b7      	b.n	90016606 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
90016696:	bf00      	nop
90016698:	3fc00079 	.word	0x3fc00079

9001669c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
9001669c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900166a0:	4604      	mov	r4, r0
900166a2:	b942      	cbnz	r2, 900166b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
900166a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
900166a8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
900166ac:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
900166b0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
900166b4:	e047      	b.n	90016746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
900166b6:	7b51      	ldrb	r1, [r2, #13]
900166b8:	8893      	ldrh	r3, [r2, #4]
900166ba:	010d      	lsls	r5, r1, #4
900166bc:	f405 7080 	and.w	r0, r5, #256	; 0x100
900166c0:	79d5      	ldrb	r5, [r2, #7]
900166c2:	4305      	orrs	r5, r0
900166c4:	2d04      	cmp	r5, #4
900166c6:	bfcc      	ite	gt
900166c8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
900166cc:	f04f 0e01 	movle.w	lr, #1
900166d0:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
900166d4:	f200 80ab 	bhi.w	9001682e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
900166d8:	f240 60e7 	movw	r0, #1767	; 0x6e7
900166dc:	4283      	cmp	r3, r0
900166de:	d216      	bcs.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900166e0:	f240 605b 	movw	r0, #1627	; 0x65b
900166e4:	4283      	cmp	r3, r0
900166e6:	d859      	bhi.n	9001679c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
900166e8:	f240 6057 	movw	r0, #1623	; 0x657
900166ec:	4283      	cmp	r3, r0
900166ee:	d20e      	bcs.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900166f0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
900166f4:	d24a      	bcs.n	9001678c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
900166f6:	f240 604e 	movw	r0, #1614	; 0x64e
900166fa:	4283      	cmp	r3, r0
900166fc:	d207      	bcs.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900166fe:	f240 601a 	movw	r0, #1562	; 0x61a
90016702:	4283      	cmp	r3, r0
90016704:	d02a      	beq.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016706:	d821      	bhi.n	9001674c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90016708:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
9001670c:	d35b      	bcc.n	900167c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001670e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
90016712:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90016716:	f040 80d0 	bne.w	900168ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
9001671a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
9001671e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90016722:	f040 80ca 	bne.w	900168ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
90016726:	00cb      	lsls	r3, r1, #3
90016728:	0649      	lsls	r1, r1, #25
9001672a:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001672e:	7a13      	ldrb	r3, [r2, #8]
90016730:	ea43 0300 	orr.w	r3, r3, r0
90016734:	bf44      	itt	mi
90016736:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001673a:	b21b      	sxthmi	r3, r3
9001673c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90016740:	1b5d      	subs	r5, r3, r5
90016742:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90016746:	4610      	mov	r0, r2
90016748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001674c:	f240 604b 	movw	r0, #1611	; 0x64b
90016750:	4283      	cmp	r3, r0
90016752:	d338      	bcc.n	900167c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90016754:	f240 604c 	movw	r0, #1612	; 0x64c
90016758:	4283      	cmp	r3, r0
9001675a:	d9d8      	bls.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001675c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
90016760:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
90016764:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90016768:	f040 80f3 	bne.w	90016952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
9001676c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90016770:	f040 80ef 	bne.w	90016952 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
90016774:	00cb      	lsls	r3, r1, #3
90016776:	064e      	lsls	r6, r1, #25
90016778:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001677c:	7a13      	ldrb	r3, [r2, #8]
9001677e:	ea43 0300 	orr.w	r3, r3, r0
90016782:	bf44      	itt	mi
90016784:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90016788:	b21b      	sxthmi	r3, r3
9001678a:	e7d9      	b.n	90016740 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
9001678c:	f240 6054 	movw	r0, #1620	; 0x654
90016790:	4283      	cmp	r3, r0
90016792:	d8e3      	bhi.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016794:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90016798:	d9e0      	bls.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001679a:	e7b8      	b.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001679c:	f240 6074 	movw	r0, #1652	; 0x674
900167a0:	4283      	cmp	r3, r0
900167a2:	d0b4      	beq.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900167a4:	d82d      	bhi.n	90016802 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
900167a6:	f240 605e 	movw	r0, #1630	; 0x65e
900167aa:	4283      	cmp	r3, r0
900167ac:	d804      	bhi.n	900167b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
900167ae:	f240 605d 	movw	r0, #1629	; 0x65d
900167b2:	4283      	cmp	r3, r0
900167b4:	d3d2      	bcc.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900167b6:	e7aa      	b.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900167b8:	f240 605f 	movw	r0, #1631	; 0x65f
900167bc:	4283      	cmp	r3, r0
900167be:	d0cd      	beq.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900167c0:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
900167c4:	d0a3      	beq.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900167c6:	00cb      	lsls	r3, r1, #3
900167c8:	0649      	lsls	r1, r1, #25
900167ca:	f403 7080 	and.w	r0, r3, #256	; 0x100
900167ce:	7a13      	ldrb	r3, [r2, #8]
900167d0:	ea43 0300 	orr.w	r3, r3, r0
900167d4:	bf44      	itt	mi
900167d6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900167da:	b21b      	sxthmi	r3, r3
900167dc:	1b5d      	subs	r5, r3, r5
900167de:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
900167e2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
900167e6:	7b53      	ldrb	r3, [r2, #13]
900167e8:	015b      	lsls	r3, r3, #5
900167ea:	f403 7180 	and.w	r1, r3, #256	; 0x100
900167ee:	7993      	ldrb	r3, [r2, #6]
900167f0:	430b      	orrs	r3, r1
900167f2:	2105      	movs	r1, #5
900167f4:	005b      	lsls	r3, r3, #1
900167f6:	fb93 f3f1 	sdiv	r3, r3, r1
900167fa:	f992 1009 	ldrsb.w	r1, [r2, #9]
900167fe:	440b      	add	r3, r1
90016800:	e756      	b.n	900166b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
90016802:	f240 60e2 	movw	r0, #1762	; 0x6e2
90016806:	4283      	cmp	r3, r0
90016808:	d809      	bhi.n	9001681e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
9001680a:	f240 60df 	movw	r0, #1759	; 0x6df
9001680e:	4283      	cmp	r3, r0
90016810:	f4bf af7d 	bcs.w	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016814:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
90016818:	2b05      	cmp	r3, #5
9001681a:	d8d4      	bhi.n	900167c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001681c:	e777      	b.n	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001681e:	f240 60e3 	movw	r0, #1763	; 0x6e3
90016822:	4283      	cmp	r3, r0
90016824:	d09a      	beq.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016826:	f240 60e4 	movw	r0, #1764	; 0x6e4
9001682a:	4283      	cmp	r3, r0
9001682c:	e7ca      	b.n	900167c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
9001682e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
90016832:	d22b      	bcs.n	9001688c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
90016834:	f640 00ed 	movw	r0, #2285	; 0x8ed
90016838:	4283      	cmp	r3, r0
9001683a:	d28f      	bcs.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001683c:	f640 00e5 	movw	r0, #2277	; 0x8e5
90016840:	4283      	cmp	r3, r0
90016842:	d816      	bhi.n	90016872 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
90016844:	f640 00e4 	movw	r0, #2276	; 0x8e4
90016848:	4283      	cmp	r3, r0
9001684a:	f4bf af60 	bcs.w	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001684e:	f240 60ec 	movw	r0, #1772	; 0x6ec
90016852:	4283      	cmp	r3, r0
90016854:	d80a      	bhi.n	9001686c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
90016856:	f240 60eb 	movw	r0, #1771	; 0x6eb
9001685a:	4283      	cmp	r3, r0
9001685c:	f4bf af57 	bcs.w	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90016860:	f240 60ea 	movw	r0, #1770	; 0x6ea
90016864:	4283      	cmp	r3, r0
90016866:	f43f af79 	beq.w	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001686a:	e7ac      	b.n	900167c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001686c:	f240 60ed 	movw	r0, #1773	; 0x6ed
90016870:	e7f8      	b.n	90016864 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
90016872:	f640 00e8 	movw	r0, #2280	; 0x8e8
90016876:	4283      	cmp	r3, r0
90016878:	d802      	bhi.n	90016880 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
9001687a:	f640 00e7 	movw	r0, #2279	; 0x8e7
9001687e:	e798      	b.n	900167b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
90016880:	f640 00e9 	movw	r0, #2281	; 0x8e9
90016884:	4283      	cmp	r3, r0
90016886:	f47f af42 	bne.w	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001688a:	e767      	b.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001688c:	f640 00f6 	movw	r0, #2294	; 0x8f6
90016890:	4283      	cmp	r3, r0
90016892:	f43f af63 	beq.w	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90016896:	d802      	bhi.n	9001689e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
90016898:	f640 00f2 	movw	r0, #2290	; 0x8f2
9001689c:	e7f2      	b.n	90016884 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
9001689e:	f640 00fa 	movw	r0, #2298	; 0x8fa
900168a2:	4283      	cmp	r3, r0
900168a4:	d805      	bhi.n	900168b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
900168a6:	f640 00f9 	movw	r0, #2297	; 0x8f9
900168aa:	4283      	cmp	r3, r0
900168ac:	f4ff af2f 	bcc.w	9001670e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
900168b0:	e754      	b.n	9001675c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
900168b2:	f640 00fe 	movw	r0, #2302	; 0x8fe
900168b6:	4283      	cmp	r3, r0
900168b8:	e7af      	b.n	9001681a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
900168ba:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
900168be:	4617      	mov	r7, r2
900168c0:	f102 0808 	add.w	r8, r2, #8
900168c4:	4666      	mov	r6, ip
900168c6:	6838      	ldr	r0, [r7, #0]
900168c8:	3708      	adds	r7, #8
900168ca:	f857 1c04 	ldr.w	r1, [r7, #-4]
900168ce:	46e6      	mov	lr, ip
900168d0:	4547      	cmp	r7, r8
900168d2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
900168d6:	46f4      	mov	ip, lr
900168d8:	d1f5      	bne.n	900168c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
900168da:	6838      	ldr	r0, [r7, #0]
900168dc:	f8ce 0000 	str.w	r0, [lr]
900168e0:	88b9      	ldrh	r1, [r7, #4]
900168e2:	f8ae 1004 	strh.w	r1, [lr, #4]
900168e6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
900168ea:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
900168ee:	d009      	beq.n	90016904 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
900168f0:	7b51      	ldrb	r1, [r2, #13]
900168f2:	7992      	ldrb	r2, [r2, #6]
900168f4:	0149      	lsls	r1, r1, #5
900168f6:	f401 7180 	and.w	r1, r1, #256	; 0x100
900168fa:	4311      	orrs	r1, r2
900168fc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90016900:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
90016904:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90016908:	b2ad      	uxth	r5, r5
9001690a:	d00d      	beq.n	90016928 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
9001690c:	442b      	add	r3, r5
9001690e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90016912:	b29b      	uxth	r3, r3
90016914:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90016918:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001691c:	10db      	asrs	r3, r3, #3
9001691e:	f003 0360 	and.w	r3, r3, #96	; 0x60
90016922:	4313      	orrs	r3, r2
90016924:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90016928:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001692c:	00cb      	lsls	r3, r1, #3
9001692e:	064f      	lsls	r7, r1, #25
90016930:	f403 7280 	and.w	r2, r3, #256	; 0x100
90016934:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
90016938:	ea43 0302 	orr.w	r3, r3, r2
9001693c:	bf44      	itt	mi
9001693e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90016942:	b21b      	sxthmi	r3, r3
90016944:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90016948:	1b5b      	subs	r3, r3, r5
9001694a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
9001694e:	4632      	mov	r2, r6
90016950:	e6f9      	b.n	90016746 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90016952:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
90016956:	4617      	mov	r7, r2
90016958:	f102 0908 	add.w	r9, r2, #8
9001695c:	4666      	mov	r6, ip
9001695e:	6838      	ldr	r0, [r7, #0]
90016960:	3708      	adds	r7, #8
90016962:	f857 1c04 	ldr.w	r1, [r7, #-4]
90016966:	46e0      	mov	r8, ip
90016968:	454f      	cmp	r7, r9
9001696a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
9001696e:	46c4      	mov	ip, r8
90016970:	d1f5      	bne.n	9001695e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
90016972:	6838      	ldr	r0, [r7, #0]
90016974:	f8c8 0000 	str.w	r0, [r8]
90016978:	88b9      	ldrh	r1, [r7, #4]
9001697a:	f8a8 1004 	strh.w	r1, [r8, #4]
9001697e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
90016982:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
90016986:	d009      	beq.n	9001699c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
90016988:	7b51      	ldrb	r1, [r2, #13]
9001698a:	7992      	ldrb	r2, [r2, #6]
9001698c:	0149      	lsls	r1, r1, #5
9001698e:	f401 7180 	and.w	r1, r1, #256	; 0x100
90016992:	4311      	orrs	r1, r2
90016994:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
90016998:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001699c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
900169a0:	d00e      	beq.n	900169c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
900169a2:	eba3 030e 	sub.w	r3, r3, lr
900169a6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
900169aa:	b29b      	uxth	r3, r3
900169ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
900169b0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
900169b4:	10db      	asrs	r3, r3, #3
900169b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
900169ba:	4313      	orrs	r3, r2
900169bc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
900169c0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
900169c4:	00cb      	lsls	r3, r1, #3
900169c6:	0648      	lsls	r0, r1, #25
900169c8:	f403 7280 	and.w	r2, r3, #256	; 0x100
900169cc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
900169d0:	ea43 0302 	orr.w	r3, r3, r2
900169d4:	bf44      	itt	mi
900169d6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900169da:	b21b      	sxthmi	r3, r3
900169dc:	1b5d      	subs	r5, r3, r5
900169de:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
900169e2:	e7b4      	b.n	9001694e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

900169e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
900169e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900169e8:	461e      	mov	r6, r3
900169ea:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
900169ec:	4604      	mov	r4, r0
900169ee:	4617      	mov	r7, r2
900169f0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
900169f4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
900169f8:	f7ef f8d4 	bl	90005ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
900169fc:	4605      	mov	r5, r0
900169fe:	b918      	cbnz	r0, 90016a08 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
90016a00:	6030      	str	r0, [r6, #0]
90016a02:	4628      	mov	r0, r5
90016a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90016a08:	683b      	ldr	r3, [r7, #0]
90016a0a:	4601      	mov	r1, r0
90016a0c:	4638      	mov	r0, r7
90016a0e:	68db      	ldr	r3, [r3, #12]
90016a10:	4798      	blx	r3
90016a12:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90016a16:	4602      	mov	r2, r0
90016a18:	6030      	str	r0, [r6, #0]
90016a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90016a1e:	d213      	bcs.n	90016a48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
90016a20:	4643      	mov	r3, r8
90016a22:	4639      	mov	r1, r7
90016a24:	4620      	mov	r0, r4
90016a26:	f7ff fe39 	bl	9001669c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90016a2a:	6030      	str	r0, [r6, #0]
90016a2c:	6833      	ldr	r3, [r6, #0]
90016a2e:	b143      	cbz	r3, 90016a42 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
90016a30:	7b5a      	ldrb	r2, [r3, #13]
90016a32:	7a9b      	ldrb	r3, [r3, #10]
90016a34:	0052      	lsls	r2, r2, #1
90016a36:	f402 7280 	and.w	r2, r2, #256	; 0x100
90016a3a:	4313      	orrs	r3, r2
90016a3c:	bf0c      	ite	eq
90016a3e:	2301      	moveq	r3, #1
90016a40:	2300      	movne	r3, #0
90016a42:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90016a46:	e7dc      	b.n	90016a02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
90016a48:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90016a4c:	b29b      	uxth	r3, r3
90016a4e:	2b7f      	cmp	r3, #127	; 0x7f
90016a50:	d804      	bhi.n	90016a5c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
90016a52:	4639      	mov	r1, r7
90016a54:	4620      	mov	r0, r4
90016a56:	f7ff fd15 	bl	90016484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90016a5a:	e7e6      	b.n	90016a2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
90016a5c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90016a60:	2b00      	cmp	r3, #0
90016a62:	d0e3      	beq.n	90016a2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90016a64:	f640 1302 	movw	r3, #2306	; 0x902
90016a68:	429d      	cmp	r5, r3
90016a6a:	d1df      	bne.n	90016a2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
90016a6c:	4601      	mov	r1, r0
90016a6e:	4620      	mov	r0, r4
90016a70:	f7ff fcd9 	bl	90016426 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90016a74:	e7d9      	b.n	90016a2a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

90016a76 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
90016a76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90016a7a:	461e      	mov	r6, r3
90016a7c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90016a7e:	4604      	mov	r4, r0
90016a80:	4617      	mov	r7, r2
90016a82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
90016a86:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90016a8a:	f7ef f88b 	bl	90005ba4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90016a8e:	4605      	mov	r5, r0
90016a90:	b918      	cbnz	r0, 90016a9a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
90016a92:	6030      	str	r0, [r6, #0]
90016a94:	4628      	mov	r0, r5
90016a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90016a9a:	683b      	ldr	r3, [r7, #0]
90016a9c:	4601      	mov	r1, r0
90016a9e:	4638      	mov	r0, r7
90016aa0:	f8d3 9008 	ldr.w	r9, [r3, #8]
90016aa4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
90016aa8:	47c8      	blx	r9
90016aaa:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
90016aae:	4602      	mov	r2, r0
90016ab0:	6030      	str	r0, [r6, #0]
90016ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
90016ab6:	d213      	bcs.n	90016ae0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
90016ab8:	4643      	mov	r3, r8
90016aba:	4639      	mov	r1, r7
90016abc:	4620      	mov	r0, r4
90016abe:	f7ff fded 	bl	9001669c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
90016ac2:	6030      	str	r0, [r6, #0]
90016ac4:	6833      	ldr	r3, [r6, #0]
90016ac6:	b143      	cbz	r3, 90016ada <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
90016ac8:	7b5a      	ldrb	r2, [r3, #13]
90016aca:	7a9b      	ldrb	r3, [r3, #10]
90016acc:	0052      	lsls	r2, r2, #1
90016ace:	f402 7280 	and.w	r2, r2, #256	; 0x100
90016ad2:	4313      	orrs	r3, r2
90016ad4:	bf0c      	ite	eq
90016ad6:	2301      	moveq	r3, #1
90016ad8:	2300      	movne	r3, #0
90016ada:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
90016ade:	e7d9      	b.n	90016a94 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
90016ae0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
90016ae4:	b29b      	uxth	r3, r3
90016ae6:	2b7f      	cmp	r3, #127	; 0x7f
90016ae8:	d804      	bhi.n	90016af4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
90016aea:	4639      	mov	r1, r7
90016aec:	4620      	mov	r0, r4
90016aee:	f7ff fcc9 	bl	90016484 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
90016af2:	e7e6      	b.n	90016ac2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
90016af4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
90016af8:	2b00      	cmp	r3, #0
90016afa:	d0e3      	beq.n	90016ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90016afc:	f640 1302 	movw	r3, #2306	; 0x902
90016b00:	429d      	cmp	r5, r3
90016b02:	d1df      	bne.n	90016ac4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
90016b04:	4601      	mov	r1, r0
90016b06:	4620      	mov	r0, r4
90016b08:	f7ff fc8d 	bl	90016426 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
90016b0c:	e7d9      	b.n	90016ac2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

90016b0e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
90016b0e:	b510      	push	{r4, lr}
90016b10:	4604      	mov	r4, r0
90016b12:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
90016b16:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90016b18:	b1e1      	cbz	r1, 90016b54 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90016b1a:	2b0a      	cmp	r3, #10
90016b1c:	d02d      	beq.n	90016b7a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90016b1e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
90016b20:	3901      	subs	r1, #1
90016b22:	eb04 0042 	add.w	r0, r4, r2, lsl #1
90016b26:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
90016b28:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
90016b2c:	1c51      	adds	r1, r2, #1
90016b2e:	b289      	uxth	r1, r1
90016b30:	2901      	cmp	r1, #1
90016b32:	bf8a      	itet	hi
90016b34:	f102 32ff 	addhi.w	r2, r2, #4294967295
90016b38:	87e1      	strhls	r1, [r4, #62]	; 0x3e
90016b3a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
90016b3c:	1c5a      	adds	r2, r3, #1
90016b3e:	8722      	strh	r2, [r4, #56]	; 0x38
90016b40:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90016b42:	4413      	add	r3, r2
90016b44:	b29b      	uxth	r3, r3
90016b46:	2b09      	cmp	r3, #9
90016b48:	bf88      	it	hi
90016b4a:	3b0a      	subhi	r3, #10
90016b4c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90016b50:	8458      	strh	r0, [r3, #34]	; 0x22
90016b52:	e7de      	b.n	90016b12 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
90016b54:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90016b56:	2b0a      	cmp	r3, #10
90016b58:	d00f      	beq.n	90016b7a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
90016b5a:	4620      	mov	r0, r4
90016b5c:	f7ff fc11 	bl	90016382 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
90016b60:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90016b62:	1c5a      	adds	r2, r3, #1
90016b64:	8722      	strh	r2, [r4, #56]	; 0x38
90016b66:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90016b68:	4413      	add	r3, r2
90016b6a:	b29b      	uxth	r3, r3
90016b6c:	2b09      	cmp	r3, #9
90016b6e:	bf88      	it	hi
90016b70:	3b0a      	subhi	r3, #10
90016b72:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90016b76:	8458      	strh	r0, [r3, #34]	; 0x22
90016b78:	e7ec      	b.n	90016b54 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
90016b7a:	bd10      	pop	{r4, pc}

90016b7c <_ZN8touchgfx12TextProvider11getNextCharEv>:
90016b7c:	b538      	push	{r3, r4, r5, lr}
90016b7e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90016b80:	4604      	mov	r4, r0
90016b82:	eb00 0243 	add.w	r2, r0, r3, lsl #1
90016b86:	8c55      	ldrh	r5, [r2, #34]	; 0x22
90016b88:	8f02      	ldrh	r2, [r0, #56]	; 0x38
90016b8a:	3a01      	subs	r2, #1
90016b8c:	8702      	strh	r2, [r0, #56]	; 0x38
90016b8e:	1c5a      	adds	r2, r3, #1
90016b90:	b292      	uxth	r2, r2
90016b92:	2a09      	cmp	r2, #9
90016b94:	bf8a      	itet	hi
90016b96:	3b09      	subhi	r3, #9
90016b98:	86c2      	strhls	r2, [r0, #54]	; 0x36
90016b9a:	86c3      	strhhi	r3, [r0, #54]	; 0x36
90016b9c:	f7ff ffb7 	bl	90016b0e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
90016ba0:	8c23      	ldrh	r3, [r4, #32]
90016ba2:	2b01      	cmp	r3, #1
90016ba4:	bf9c      	itt	ls
90016ba6:	3301      	addls	r3, #1
90016ba8:	8423      	strhls	r3, [r4, #32]
90016baa:	8be3      	ldrh	r3, [r4, #30]
90016bac:	b90b      	cbnz	r3, 90016bb2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
90016bae:	2302      	movs	r3, #2
90016bb0:	83e3      	strh	r3, [r4, #30]
90016bb2:	8be3      	ldrh	r3, [r4, #30]
90016bb4:	4628      	mov	r0, r5
90016bb6:	3b01      	subs	r3, #1
90016bb8:	b29b      	uxth	r3, r3
90016bba:	83e3      	strh	r3, [r4, #30]
90016bbc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90016bc0:	8365      	strh	r5, [r4, #26]
90016bc2:	bd38      	pop	{r3, r4, r5, pc}

90016bc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
90016bc4:	428a      	cmp	r2, r1
90016bc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016bca:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
90016bcc:	d932      	bls.n	90016c34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
90016bce:	8f05      	ldrh	r5, [r0, #56]	; 0x38
90016bd0:	1a54      	subs	r4, r2, r1
90016bd2:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
90016bd6:	19ee      	adds	r6, r5, r7
90016bd8:	fa1f fe84 	uxth.w	lr, r4
90016bdc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
90016be0:	3e01      	subs	r6, #1
90016be2:	b2b4      	uxth	r4, r6
90016be4:	eba4 090e 	sub.w	r9, r4, lr
90016be8:	fa1f f989 	uxth.w	r9, r9
90016bec:	2c09      	cmp	r4, #9
90016bee:	4626      	mov	r6, r4
90016bf0:	bf88      	it	hi
90016bf2:	f1a4 060a 	subhi.w	r6, r4, #10
90016bf6:	f1bc 0f00 	cmp.w	ip, #0
90016bfa:	f104 34ff 	add.w	r4, r4, #4294967295
90016bfe:	bf08      	it	eq
90016c00:	f04f 0c02 	moveq.w	ip, #2
90016c04:	eb00 0646 	add.w	r6, r0, r6, lsl #1
90016c08:	b2a4      	uxth	r4, r4
90016c0a:	f10c 3cff 	add.w	ip, ip, #4294967295
90016c0e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
90016c12:	454c      	cmp	r4, r9
90016c14:	fa1f fc8c 	uxth.w	ip, ip
90016c18:	eb00 064c 	add.w	r6, r0, ip, lsl #1
90016c1c:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
90016c20:	d1e4      	bne.n	90016bec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
90016c22:	eba5 050e 	sub.w	r5, r5, lr
90016c26:	eb0e 0408 	add.w	r4, lr, r8
90016c2a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
90016c2e:	8705      	strh	r5, [r0, #56]	; 0x38
90016c30:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
90016c34:	8f04      	ldrh	r4, [r0, #56]	; 0x38
90016c36:	250a      	movs	r5, #10
90016c38:	1a64      	subs	r4, r4, r1
90016c3a:	4439      	add	r1, r7
90016c3c:	b289      	uxth	r1, r1
90016c3e:	8704      	strh	r4, [r0, #56]	; 0x38
90016c40:	2909      	cmp	r1, #9
90016c42:	bf88      	it	hi
90016c44:	390a      	subhi	r1, #10
90016c46:	86c1      	strh	r1, [r0, #54]	; 0x36
90016c48:	b18a      	cbz	r2, 90016c6e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
90016c4a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
90016c4c:	3a01      	subs	r2, #1
90016c4e:	3101      	adds	r1, #1
90016c50:	b292      	uxth	r2, r2
90016c52:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
90016c56:	8701      	strh	r1, [r0, #56]	; 0x38
90016c58:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90016c5a:	b901      	cbnz	r1, 90016c5e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
90016c5c:	86c5      	strh	r5, [r0, #54]	; 0x36
90016c5e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
90016c60:	3901      	subs	r1, #1
90016c62:	b289      	uxth	r1, r1
90016c64:	86c1      	strh	r1, [r0, #54]	; 0x36
90016c66:	eb00 0141 	add.w	r1, r0, r1, lsl #1
90016c6a:	844c      	strh	r4, [r1, #34]	; 0x22
90016c6c:	e7ec      	b.n	90016c48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
90016c6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90016c72:	f7ff bf4c 	b.w	90016b0e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

90016c76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
90016c76:	b570      	push	{r4, r5, r6, lr}
90016c78:	2500      	movs	r5, #0
90016c7a:	4295      	cmp	r5, r2
90016c7c:	d011      	beq.n	90016ca2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
90016c7e:	8bc4      	ldrh	r4, [r0, #30]
90016c80:	f831 6b02 	ldrh.w	r6, [r1], #2
90016c84:	4414      	add	r4, r2
90016c86:	3c01      	subs	r4, #1
90016c88:	1b64      	subs	r4, r4, r5
90016c8a:	b2a4      	uxth	r4, r4
90016c8c:	2c01      	cmp	r4, #1
90016c8e:	bf88      	it	hi
90016c90:	3c02      	subhi	r4, #2
90016c92:	eb00 0444 	add.w	r4, r0, r4, lsl #1
90016c96:	8b64      	ldrh	r4, [r4, #26]
90016c98:	42b4      	cmp	r4, r6
90016c9a:	d117      	bne.n	90016ccc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
90016c9c:	3501      	adds	r5, #1
90016c9e:	b2ad      	uxth	r5, r5
90016ca0:	e7eb      	b.n	90016c7a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
90016ca2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
90016ca6:	2400      	movs	r4, #0
90016ca8:	4413      	add	r3, r2
90016caa:	b2a2      	uxth	r2, r4
90016cac:	429a      	cmp	r2, r3
90016cae:	da0f      	bge.n	90016cd0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
90016cb0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
90016cb2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
90016cb6:	3401      	adds	r4, #1
90016cb8:	4432      	add	r2, r6
90016cba:	b292      	uxth	r2, r2
90016cbc:	2a09      	cmp	r2, #9
90016cbe:	bf88      	it	hi
90016cc0:	3a0a      	subhi	r2, #10
90016cc2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
90016cc6:	8c52      	ldrh	r2, [r2, #34]	; 0x22
90016cc8:	42aa      	cmp	r2, r5
90016cca:	d0ee      	beq.n	90016caa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
90016ccc:	2000      	movs	r0, #0
90016cce:	bd70      	pop	{r4, r5, r6, pc}
90016cd0:	2001      	movs	r0, #1
90016cd2:	e7fc      	b.n	90016cce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

90016cd4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
90016cd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016cd8:	4605      	mov	r5, r0
90016cda:	4616      	mov	r6, r2
90016cdc:	1c8c      	adds	r4, r1, #2
90016cde:	8809      	ldrh	r1, [r1, #0]
90016ce0:	ea4f 3a11 	mov.w	sl, r1, lsr #12
90016ce4:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
90016ce8:	42b3      	cmp	r3, r6
90016cea:	d124      	bne.n	90016d36 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
90016cec:	f3c1 2903 	ubfx	r9, r1, #8, #4
90016cf0:	f3c1 1803 	ubfx	r8, r1, #4, #4
90016cf4:	f001 070f 	and.w	r7, r1, #15
90016cf8:	4652      	mov	r2, sl
90016cfa:	f8cd 8000 	str.w	r8, [sp]
90016cfe:	464b      	mov	r3, r9
90016d00:	4621      	mov	r1, r4
90016d02:	4628      	mov	r0, r5
90016d04:	f7ff ffb7 	bl	90016c76 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
90016d08:	4683      	mov	fp, r0
90016d0a:	b168      	cbz	r0, 90016d28 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
90016d0c:	eb0a 0109 	add.w	r1, sl, r9
90016d10:	463a      	mov	r2, r7
90016d12:	4628      	mov	r0, r5
90016d14:	4441      	add	r1, r8
90016d16:	eb04 0341 	add.w	r3, r4, r1, lsl #1
90016d1a:	4649      	mov	r1, r9
90016d1c:	f7ff ff52 	bl	90016bc4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
90016d20:	4658      	mov	r0, fp
90016d22:	b003      	add	sp, #12
90016d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016d28:	eb07 010a 	add.w	r1, r7, sl
90016d2c:	4449      	add	r1, r9
90016d2e:	4441      	add	r1, r8
90016d30:	eb04 0141 	add.w	r1, r4, r1, lsl #1
90016d34:	e7d2      	b.n	90016cdc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
90016d36:	f04f 0b00 	mov.w	fp, #0
90016d3a:	e7f1      	b.n	90016d20 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

90016d3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
90016d3c:	b570      	push	{r4, r5, r6, lr}
90016d3e:	8810      	ldrh	r0, [r2, #0]
90016d40:	4298      	cmp	r0, r3
90016d42:	d817      	bhi.n	90016d74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90016d44:	1e48      	subs	r0, r1, #1
90016d46:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
90016d4a:	4298      	cmp	r0, r3
90016d4c:	d312      	bcc.n	90016d74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90016d4e:	2400      	movs	r4, #0
90016d50:	428c      	cmp	r4, r1
90016d52:	d20f      	bcs.n	90016d74 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
90016d54:	1860      	adds	r0, r4, r1
90016d56:	1040      	asrs	r0, r0, #1
90016d58:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
90016d5c:	0085      	lsls	r5, r0, #2
90016d5e:	42b3      	cmp	r3, r6
90016d60:	d902      	bls.n	90016d68 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
90016d62:	3001      	adds	r0, #1
90016d64:	b284      	uxth	r4, r0
90016d66:	e7f3      	b.n	90016d50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90016d68:	d201      	bcs.n	90016d6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
90016d6a:	b281      	uxth	r1, r0
90016d6c:	e7f0      	b.n	90016d50 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
90016d6e:	442a      	add	r2, r5
90016d70:	8850      	ldrh	r0, [r2, #2]
90016d72:	bd70      	pop	{r4, r5, r6, pc}
90016d74:	2000      	movs	r0, #0
90016d76:	e7fc      	b.n	90016d72 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

90016d78 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
90016d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90016d7c:	6c45      	ldr	r5, [r0, #68]	; 0x44
90016d7e:	4604      	mov	r4, r0
90016d80:	260b      	movs	r6, #11
90016d82:	886f      	ldrh	r7, [r5, #2]
90016d84:	087f      	lsrs	r7, r7, #1
90016d86:	3e01      	subs	r6, #1
90016d88:	d013      	beq.n	90016db2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90016d8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90016d8c:	462a      	mov	r2, r5
90016d8e:	4639      	mov	r1, r7
90016d90:	4620      	mov	r0, r4
90016d92:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90016d96:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
90016d9a:	4643      	mov	r3, r8
90016d9c:	f7ff ffce 	bl	90016d3c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
90016da0:	b138      	cbz	r0, 90016db2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
90016da2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
90016da6:	4642      	mov	r2, r8
90016da8:	4620      	mov	r0, r4
90016daa:	f7ff ff93 	bl	90016cd4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
90016dae:	2800      	cmp	r0, #0
90016db0:	d1e9      	bne.n	90016d86 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
90016db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

90016db8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
90016db8:	b570      	push	{r4, r5, r6, lr}
90016dba:	694a      	ldr	r2, [r1, #20]
90016dbc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
90016dbe:	684b      	ldr	r3, [r1, #4]
90016dc0:	1b54      	subs	r4, r2, r5
90016dc2:	6ace      	ldr	r6, [r1, #44]	; 0x2c
90016dc4:	f000 8106 	beq.w	90016fd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
90016dc8:	1b9b      	subs	r3, r3, r6
90016dca:	d003      	beq.n	90016dd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90016dcc:	4363      	muls	r3, r4
90016dce:	2210      	movs	r2, #16
90016dd0:	fb93 f3f2 	sdiv	r3, r3, r2
90016dd4:	680c      	ldr	r4, [r1, #0]
90016dd6:	698a      	ldr	r2, [r1, #24]
90016dd8:	1b65      	subs	r5, r4, r5
90016dda:	f000 80fd 	beq.w	90016fd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
90016dde:	1b92      	subs	r2, r2, r6
90016de0:	d003      	beq.n	90016dea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
90016de2:	436a      	muls	r2, r5
90016de4:	2410      	movs	r4, #16
90016de6:	fb92 f2f4 	sdiv	r2, r2, r4
90016dea:	1a9b      	subs	r3, r3, r2
90016dec:	ed9f 4a89 	vldr	s8, [pc, #548]	; 90017014 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
90016df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90016df4:	460a      	mov	r2, r1
90016df6:	ee07 3a90 	vmov	s15, r3
90016dfa:	f100 040c 	add.w	r4, r0, #12
90016dfe:	4603      	mov	r3, r0
90016e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90016e04:	ee67 7a84 	vmul.f32	s15, s15, s8
90016e08:	ee87 3a27 	vdiv.f32	s6, s14, s15
90016e0c:	eeb1 6a43 	vneg.f32	s12, s6
90016e10:	edd2 7a02 	vldr	s15, [r2, #8]
90016e14:	3214      	adds	r2, #20
90016e16:	eec7 6a27 	vdiv.f32	s13, s14, s15
90016e1a:	ece3 6a01 	vstmia	r3!, {s13}
90016e1e:	429c      	cmp	r4, r3
90016e20:	ed52 7a02 	vldr	s15, [r2, #-8]
90016e24:	ee67 7aa6 	vmul.f32	s15, s15, s13
90016e28:	edc3 7a02 	vstr	s15, [r3, #8]
90016e2c:	ed52 7a01 	vldr	s15, [r2, #-4]
90016e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
90016e34:	edc3 7a05 	vstr	s15, [r3, #20]
90016e38:	d1ea      	bne.n	90016e10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
90016e3a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016e3c:	698b      	ldr	r3, [r1, #24]
90016e3e:	edd0 4a02 	vldr	s9, [r0, #8]
90016e42:	1a9b      	subs	r3, r3, r2
90016e44:	edd0 3a00 	vldr	s7, [r0]
90016e48:	edd0 6a01 	vldr	s13, [r0, #4]
90016e4c:	ee07 3a90 	vmov	s15, r3
90016e50:	684b      	ldr	r3, [r1, #4]
90016e52:	ee76 6ae4 	vsub.f32	s13, s13, s9
90016e56:	ed90 5a05 	vldr	s10, [r0, #20]
90016e5a:	1a9b      	subs	r3, r3, r2
90016e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90016e60:	ee73 4ae4 	vsub.f32	s9, s7, s9
90016e64:	ed90 2a03 	vldr	s4, [r0, #12]
90016e68:	ee07 3a10 	vmov	s14, r3
90016e6c:	edd0 5a04 	vldr	s11, [r0, #16]
90016e70:	ee67 7a84 	vmul.f32	s15, s15, s8
90016e74:	ed90 1a07 	vldr	s2, [r0, #28]
90016e78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016e7c:	edd0 2a06 	vldr	s5, [r0, #24]
90016e80:	ee75 5ac5 	vsub.f32	s11, s11, s10
90016e84:	ee64 7ae7 	vnmul.f32	s15, s9, s15
90016e88:	ee27 7a04 	vmul.f32	s14, s14, s8
90016e8c:	ee32 5a45 	vsub.f32	s10, s4, s10
90016e90:	eee6 7a87 	vfma.f32	s15, s13, s14
90016e94:	ee67 7a83 	vmul.f32	s15, s15, s6
90016e98:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
90016e9c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
90016e9e:	694a      	ldr	r2, [r1, #20]
90016ea0:	1b13      	subs	r3, r2, r4
90016ea2:	ee07 3a10 	vmov	s14, r3
90016ea6:	680b      	ldr	r3, [r1, #0]
90016ea8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016eac:	1b1b      	subs	r3, r3, r4
90016eae:	ee27 7a04 	vmul.f32	s14, s14, s8
90016eb2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
90016eb6:	ee07 3a10 	vmov	s14, r3
90016eba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016ebe:	ee27 7a04 	vmul.f32	s14, s14, s8
90016ec2:	eee6 4a87 	vfma.f32	s9, s13, s14
90016ec6:	ee64 4a86 	vmul.f32	s9, s9, s12
90016eca:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
90016ece:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016ed0:	698b      	ldr	r3, [r1, #24]
90016ed2:	1a9b      	subs	r3, r3, r2
90016ed4:	ee06 3a90 	vmov	s13, r3
90016ed8:	684b      	ldr	r3, [r1, #4]
90016eda:	1a9b      	subs	r3, r3, r2
90016edc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90016ee0:	ee07 3a10 	vmov	s14, r3
90016ee4:	ee66 6a84 	vmul.f32	s13, s13, s8
90016ee8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016eec:	ee65 6a66 	vnmul.f32	s13, s10, s13
90016ef0:	ee27 7a04 	vmul.f32	s14, s14, s8
90016ef4:	eee5 6a87 	vfma.f32	s13, s11, s14
90016ef8:	ee66 6a83 	vmul.f32	s13, s13, s6
90016efc:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
90016f00:	6a8c      	ldr	r4, [r1, #40]	; 0x28
90016f02:	694a      	ldr	r2, [r1, #20]
90016f04:	1b13      	subs	r3, r2, r4
90016f06:	ee07 3a10 	vmov	s14, r3
90016f0a:	680b      	ldr	r3, [r1, #0]
90016f0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016f10:	1b1b      	subs	r3, r3, r4
90016f12:	ee27 7a04 	vmul.f32	s14, s14, s8
90016f16:	ee25 5a47 	vnmul.f32	s10, s10, s14
90016f1a:	ee07 3a10 	vmov	s14, r3
90016f1e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016f22:	ee27 7a04 	vmul.f32	s14, s14, s8
90016f26:	eea5 5a87 	vfma.f32	s10, s11, s14
90016f2a:	edd0 5a08 	vldr	s11, [r0, #32]
90016f2e:	ee31 1a65 	vsub.f32	s2, s2, s11
90016f32:	ee72 5ae5 	vsub.f32	s11, s5, s11
90016f36:	ee25 5a06 	vmul.f32	s10, s10, s12
90016f3a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
90016f3e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
90016f40:	698b      	ldr	r3, [r1, #24]
90016f42:	1a9b      	subs	r3, r3, r2
90016f44:	ee07 3a10 	vmov	s14, r3
90016f48:	684b      	ldr	r3, [r1, #4]
90016f4a:	1a9b      	subs	r3, r3, r2
90016f4c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016f50:	ee01 3a90 	vmov	s3, r3
90016f54:	ee27 7a04 	vmul.f32	s14, s14, s8
90016f58:	eef8 1ae1 	vcvt.f32.s32	s3, s3
90016f5c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
90016f60:	ee61 1a84 	vmul.f32	s3, s3, s8
90016f64:	eea1 7a21 	vfma.f32	s14, s2, s3
90016f68:	ee27 7a03 	vmul.f32	s14, s14, s6
90016f6c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
90016f70:	6a8c      	ldr	r4, [r1, #40]	; 0x28
90016f72:	694a      	ldr	r2, [r1, #20]
90016f74:	1b13      	subs	r3, r2, r4
90016f76:	ee03 3a10 	vmov	s6, r3
90016f7a:	680b      	ldr	r3, [r1, #0]
90016f7c:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90016f80:	1b1b      	subs	r3, r3, r4
90016f82:	ee23 3a04 	vmul.f32	s6, s6, s8
90016f86:	ee65 5ac3 	vnmul.f32	s11, s11, s6
90016f8a:	ee03 3a10 	vmov	s6, r3
90016f8e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
90016f92:	ee23 4a04 	vmul.f32	s8, s6, s8
90016f96:	eee1 5a04 	vfma.f32	s11, s2, s8
90016f9a:	ee25 6a86 	vmul.f32	s12, s11, s12
90016f9e:	ee62 5a67 	vnmul.f32	s11, s4, s15
90016fa2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
90016fa6:	eee3 5aa6 	vfma.f32	s11, s7, s13
90016faa:	eef5 5ac0 	vcmpe.f32	s11, #0.0
90016fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016fb2:	dd13      	ble.n	90016fdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
90016fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90016fb8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
90016fbc:	63c3      	str	r3, [r0, #60]	; 0x3c
90016fbe:	eee3 7a87 	vfma.f32	s15, s7, s14
90016fc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
90016fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016fca:	dd15      	ble.n	90016ff8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
90016fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90016fd0:	6403      	str	r3, [r0, #64]	; 0x40
90016fd2:	bd70      	pop	{r4, r5, r6, pc}
90016fd4:	4623      	mov	r3, r4
90016fd6:	e6fd      	b.n	90016dd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
90016fd8:	462a      	mov	r2, r5
90016fda:	e706      	b.n	90016dea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
90016fdc:	d502      	bpl.n	90016fe4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
90016fde:	f647 73ff 	movw	r3, #32767	; 0x7fff
90016fe2:	e7e9      	b.n	90016fb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
90016fe4:	ee22 2a64 	vnmul.f32	s4, s4, s9
90016fe8:	eea3 2a85 	vfma.f32	s4, s7, s10
90016fec:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
90016ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016ff4:	dade      	bge.n	90016fb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
90016ff6:	e7f2      	b.n	90016fde <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
90016ff8:	d502      	bpl.n	90017000 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
90016ffa:	f647 73ff 	movw	r3, #32767	; 0x7fff
90016ffe:	e7e7      	b.n	90016fd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
90017000:	ee62 4ae4 	vnmul.f32	s9, s5, s9
90017004:	eee3 4a86 	vfma.f32	s9, s7, s12
90017008:	eef5 4ac0 	vcmpe.f32	s9, #0.0
9001700c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90017010:	dadc      	bge.n	90016fcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
90017012:	e7f2      	b.n	90016ffa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
90017014:	3d800000 	.word	0x3d800000

90017018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
90017018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001701c:	2714      	movs	r7, #20
9001701e:	435f      	muls	r7, r3
90017020:	eb02 0c07 	add.w	ip, r2, r7
90017024:	f8dc 5004 	ldr.w	r5, [ip, #4]
90017028:	f115 0e0f 	adds.w	lr, r5, #15
9001702c:	f100 80a2 	bmi.w	90017174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
90017030:	ea4f 1e2e 	mov.w	lr, lr, asr #4
90017034:	9c08      	ldr	r4, [sp, #32]
90017036:	2614      	movs	r6, #20
90017038:	f8c0 e014 	str.w	lr, [r0, #20]
9001703c:	4366      	muls	r6, r4
9001703e:	eb02 0806 	add.w	r8, r2, r6
90017042:	f8d8 5004 	ldr.w	r5, [r8, #4]
90017046:	f115 040f 	adds.w	r4, r5, #15
9001704a:	f100 809f 	bmi.w	9001718c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
9001704e:	1124      	asrs	r4, r4, #4
90017050:	eba4 040e 	sub.w	r4, r4, lr
90017054:	6184      	str	r4, [r0, #24]
90017056:	2c00      	cmp	r4, #0
90017058:	f000 808a 	beq.w	90017170 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
9001705c:	f8dc 9004 	ldr.w	r9, [ip, #4]
90017060:	f8d8 4004 	ldr.w	r4, [r8, #4]
90017064:	5995      	ldr	r5, [r2, r6]
90017066:	eba4 0809 	sub.w	r8, r4, r9
9001706a:	59d4      	ldr	r4, [r2, r7]
9001706c:	eba5 0a04 	sub.w	sl, r5, r4
90017070:	ea4f 1608 	mov.w	r6, r8, lsl #4
90017074:	ea4f 150a 	mov.w	r5, sl, lsl #4
90017078:	fb0e fe05 	mul.w	lr, lr, r5
9001707c:	fb0a ee19 	mls	lr, sl, r9, lr
90017080:	fb08 e404 	mla	r4, r8, r4, lr
90017084:	3c01      	subs	r4, #1
90017086:	19a4      	adds	r4, r4, r6
90017088:	f100 808c 	bmi.w	900171a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
9001708c:	fb94 fef6 	sdiv	lr, r4, r6
90017090:	fb06 441e 	mls	r4, r6, lr, r4
90017094:	f8c0 e000 	str.w	lr, [r0]
90017098:	6104      	str	r4, [r0, #16]
9001709a:	2d00      	cmp	r5, #0
9001709c:	f2c0 8095 	blt.w	900171ca <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
900170a0:	fb95 f4f6 	sdiv	r4, r5, r6
900170a4:	fb06 5514 	mls	r5, r6, r4, r5
900170a8:	6044      	str	r4, [r0, #4]
900170aa:	6085      	str	r5, [r0, #8]
900170ac:	60c6      	str	r6, [r0, #12]
900170ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
900170b2:	f8dc 4004 	ldr.w	r4, [ip, #4]
900170b6:	6945      	ldr	r5, [r0, #20]
900170b8:	59d2      	ldr	r2, [r2, r7]
900170ba:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
900170be:	eddf 6a4b 	vldr	s13, [pc, #300]	; 900171ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
900170c2:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
900170c6:	ee07 4a10 	vmov	s14, r4
900170ca:	6804      	ldr	r4, [r0, #0]
900170cc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
900170d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
900170d4:	ee07 2a90 	vmov	s15, r2
900170d8:	ee27 7a26 	vmul.f32	s14, s14, s13
900170dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
900170e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
900170e4:	edd3 6a00 	vldr	s13, [r3]
900170e8:	eee6 6a07 	vfma.f32	s13, s12, s14
900170ec:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
900170f0:	eee6 6a27 	vfma.f32	s13, s12, s15
900170f4:	edc0 6a07 	vstr	s13, [r0, #28]
900170f8:	edd0 6a01 	vldr	s13, [r0, #4]
900170fc:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
90017100:	eef8 6ae6 	vcvt.f32.s32	s13, s13
90017104:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
90017108:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001710c:	ed80 6a08 	vstr	s12, [r0, #32]
90017110:	6a4a      	ldr	r2, [r1, #36]	; 0x24
90017112:	6242      	str	r2, [r0, #36]	; 0x24
90017114:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
90017118:	ed93 6a03 	vldr	s12, [r3, #12]
9001711c:	eea5 6a87 	vfma.f32	s12, s11, s14
90017120:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
90017124:	eea5 6aa7 	vfma.f32	s12, s11, s15
90017128:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
9001712c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
90017130:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
90017134:	eea6 6aa5 	vfma.f32	s12, s13, s11
90017138:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
9001713c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001713e:	6302      	str	r2, [r0, #48]	; 0x30
90017140:	ed93 6a06 	vldr	s12, [r3, #24]
90017144:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
90017148:	eea5 6a87 	vfma.f32	s12, s11, s14
9001714c:	eeb0 7a46 	vmov.f32	s14, s12
90017150:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
90017154:	eea6 7a27 	vfma.f32	s14, s12, s15
90017158:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001715c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
90017160:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
90017164:	eee6 7a87 	vfma.f32	s15, s13, s14
90017168:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
9001716c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
9001716e:	63c3      	str	r3, [r0, #60]	; 0x3c
90017170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90017174:	2410      	movs	r4, #16
90017176:	f1c5 0501 	rsb	r5, r5, #1
9001717a:	fb9e fef4 	sdiv	lr, lr, r4
9001717e:	f015 050f 	ands.w	r5, r5, #15
90017182:	bf18      	it	ne
90017184:	2501      	movne	r5, #1
90017186:	ebae 0e05 	sub.w	lr, lr, r5
9001718a:	e753      	b.n	90017034 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
9001718c:	f04f 0910 	mov.w	r9, #16
90017190:	f1c5 0501 	rsb	r5, r5, #1
90017194:	fb94 f4f9 	sdiv	r4, r4, r9
90017198:	f015 050f 	ands.w	r5, r5, #15
9001719c:	bf18      	it	ne
9001719e:	2501      	movne	r5, #1
900171a0:	1b64      	subs	r4, r4, r5
900171a2:	e755      	b.n	90017050 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
900171a4:	4264      	negs	r4, r4
900171a6:	fb94 fef6 	sdiv	lr, r4, r6
900171aa:	f1ce 0800 	rsb	r8, lr, #0
900171ae:	fb06 441e 	mls	r4, r6, lr, r4
900171b2:	f8c0 8000 	str.w	r8, [r0]
900171b6:	6104      	str	r4, [r0, #16]
900171b8:	2c00      	cmp	r4, #0
900171ba:	f43f af6e 	beq.w	9001709a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
900171be:	ea6f 0e0e 	mvn.w	lr, lr
900171c2:	1b34      	subs	r4, r6, r4
900171c4:	f8c0 e000 	str.w	lr, [r0]
900171c8:	e766      	b.n	90017098 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
900171ca:	426d      	negs	r5, r5
900171cc:	fb95 f4f6 	sdiv	r4, r5, r6
900171d0:	f1c4 0e00 	rsb	lr, r4, #0
900171d4:	fb06 5514 	mls	r5, r6, r4, r5
900171d8:	f8c0 e004 	str.w	lr, [r0, #4]
900171dc:	6085      	str	r5, [r0, #8]
900171de:	2d00      	cmp	r5, #0
900171e0:	f43f af64 	beq.w	900170ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
900171e4:	43e4      	mvns	r4, r4
900171e6:	1b75      	subs	r5, r6, r5
900171e8:	6044      	str	r4, [r0, #4]
900171ea:	e75e      	b.n	900170aa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
900171ec:	3d800000 	.word	0x3d800000

900171f0 <_ZN8touchgfx7Unicode6strlenEPKt>:
900171f0:	4602      	mov	r2, r0
900171f2:	b148      	cbz	r0, 90017208 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
900171f4:	2300      	movs	r3, #0
900171f6:	b298      	uxth	r0, r3
900171f8:	3301      	adds	r3, #1
900171fa:	eb02 0143 	add.w	r1, r2, r3, lsl #1
900171fe:	f831 1c02 	ldrh.w	r1, [r1, #-2]
90017202:	2900      	cmp	r1, #0
90017204:	d1f7      	bne.n	900171f6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
90017206:	4770      	bx	lr
90017208:	4770      	bx	lr

9001720a <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
9001720a:	b530      	push	{r4, r5, lr}
9001720c:	4604      	mov	r4, r0
9001720e:	b159      	cbz	r1, 90017228 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
90017210:	b148      	cbz	r0, 90017226 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
90017212:	2300      	movs	r3, #0
90017214:	b298      	uxth	r0, r3
90017216:	4282      	cmp	r2, r0
90017218:	d905      	bls.n	90017226 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001721a:	5ccd      	ldrb	r5, [r1, r3]
9001721c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
90017220:	3301      	adds	r3, #1
90017222:	2d00      	cmp	r5, #0
90017224:	d1f6      	bne.n	90017214 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
90017226:	bd30      	pop	{r4, r5, pc}
90017228:	4608      	mov	r0, r1
9001722a:	e7fc      	b.n	90017226 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

9001722c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
9001722c:	b5f0      	push	{r4, r5, r6, r7, lr}
9001722e:	468c      	mov	ip, r1
90017230:	b08b      	sub	sp, #44	; 0x2c
90017232:	2100      	movs	r1, #0
90017234:	ae01      	add	r6, sp, #4
90017236:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001723a:	211f      	movs	r1, #31
9001723c:	fbb0 f7f3 	udiv	r7, r0, r3
90017240:	fb03 0517 	mls	r5, r3, r7, r0
90017244:	4638      	mov	r0, r7
90017246:	b2ec      	uxtb	r4, r5
90017248:	2d09      	cmp	r5, #9
9001724a:	bfd4      	ite	le
9001724c:	3430      	addle	r4, #48	; 0x30
9001724e:	3457      	addgt	r4, #87	; 0x57
90017250:	b2e4      	uxtb	r4, r4
90017252:	558c      	strb	r4, [r1, r6]
90017254:	1e4c      	subs	r4, r1, #1
90017256:	b92f      	cbnz	r7, 90017264 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
90017258:	4431      	add	r1, r6
9001725a:	4660      	mov	r0, ip
9001725c:	f7ff ffd5 	bl	9001720a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
90017260:	b00b      	add	sp, #44	; 0x2c
90017262:	bdf0      	pop	{r4, r5, r6, r7, pc}
90017264:	4621      	mov	r1, r4
90017266:	e7e9      	b.n	9001723c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

90017268 <_ZN8touchgfx7Unicode4itoaElPtti>:
90017268:	b5f0      	push	{r4, r5, r6, r7, lr}
9001726a:	4607      	mov	r7, r0
9001726c:	b08b      	sub	sp, #44	; 0x2c
9001726e:	4608      	mov	r0, r1
90017270:	b341      	cbz	r1, 900172c4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90017272:	1e99      	subs	r1, r3, #2
90017274:	2922      	cmp	r1, #34	; 0x22
90017276:	d825      	bhi.n	900172c4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
90017278:	2100      	movs	r1, #0
9001727a:	463c      	mov	r4, r7
9001727c:	261f      	movs	r6, #31
9001727e:	f10d 0c04 	add.w	ip, sp, #4
90017282:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
90017286:	1e71      	subs	r1, r6, #1
90017288:	fb94 fef3 	sdiv	lr, r4, r3
9001728c:	fb03 441e 	mls	r4, r3, lr, r4
90017290:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
90017294:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
90017298:	b2ec      	uxtb	r4, r5
9001729a:	2d09      	cmp	r5, #9
9001729c:	bfd4      	ite	le
9001729e:	3430      	addle	r4, #48	; 0x30
900172a0:	3457      	addgt	r4, #87	; 0x57
900172a2:	b2e4      	uxtb	r4, r4
900172a4:	f80c 4006 	strb.w	r4, [ip, r6]
900172a8:	4674      	mov	r4, lr
900172aa:	b96c      	cbnz	r4, 900172c8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
900172ac:	2f00      	cmp	r7, #0
900172ae:	da05      	bge.n	900172bc <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
900172b0:	ab0a      	add	r3, sp, #40	; 0x28
900172b2:	4419      	add	r1, r3
900172b4:	232d      	movs	r3, #45	; 0x2d
900172b6:	f801 3c24 	strb.w	r3, [r1, #-36]
900172ba:	1eb1      	subs	r1, r6, #2
900172bc:	3101      	adds	r1, #1
900172be:	4461      	add	r1, ip
900172c0:	f7ff ffa3 	bl	9001720a <_ZN8touchgfx7Unicode7strncpyEPtPKct>
900172c4:	b00b      	add	sp, #44	; 0x2c
900172c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
900172c8:	460e      	mov	r6, r1
900172ca:	e7dc      	b.n	90017286 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

900172cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
900172cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900172d0:	b085      	sub	sp, #20
900172d2:	4691      	mov	r9, r2
900172d4:	6802      	ldr	r2, [r0, #0]
900172d6:	4688      	mov	r8, r1
900172d8:	461c      	mov	r4, r3
900172da:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
900172de:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
900172e2:	4683      	mov	fp, r0
900172e4:	4610      	mov	r0, r2
900172e6:	9103      	str	r1, [sp, #12]
900172e8:	9302      	str	r3, [sp, #8]
900172ea:	9201      	str	r2, [sp, #4]
900172ec:	f7ff ff80 	bl	900171f0 <_ZN8touchgfx7Unicode6strlenEPKt>
900172f0:	f1b8 0f00 	cmp.w	r8, #0
900172f4:	bf0c      	ite	eq
900172f6:	4684      	moveq	ip, r0
900172f8:	f100 0c01 	addne.w	ip, r0, #1
900172fc:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
90017300:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
90017304:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
90017306:	fa1f fc8c 	uxth.w	ip, ip
9001730a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001730c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
90017310:	9903      	ldr	r1, [sp, #12]
90017312:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
90017316:	d041      	beq.n	9001739c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90017318:	d834      	bhi.n	90017384 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
9001731a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
9001731e:	d059      	beq.n	900173d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
90017320:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
90017324:	d03a      	beq.n	9001739c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
90017326:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
9001732a:	d034      	beq.n	90017396 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001732c:	2400      	movs	r4, #0
9001732e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
90017332:	3a01      	subs	r2, #1
90017334:	b169      	cbz	r1, 90017352 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90017336:	9911      	ldr	r1, [sp, #68]	; 0x44
90017338:	458c      	cmp	ip, r1
9001733a:	da09      	bge.n	90017350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001733c:	eba1 010c 	sub.w	r1, r1, ip
90017340:	b289      	uxth	r1, r1
90017342:	b933      	cbnz	r3, 90017352 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
90017344:	2e00      	cmp	r6, #0
90017346:	d051      	beq.n	900173ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
90017348:	2800      	cmp	r0, #0
9001734a:	d04f      	beq.n	900173ec <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001734c:	440c      	add	r4, r1
9001734e:	b2a4      	uxth	r4, r4
90017350:	2100      	movs	r1, #0
90017352:	682b      	ldr	r3, [r5, #0]
90017354:	4293      	cmp	r3, r2
90017356:	da07      	bge.n	90017368 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
90017358:	f1b8 0f00 	cmp.w	r8, #0
9001735c:	d004      	beq.n	90017368 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001735e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
90017362:	682b      	ldr	r3, [r5, #0]
90017364:	3301      	adds	r3, #1
90017366:	602b      	str	r3, [r5, #0]
90017368:	2730      	movs	r7, #48	; 0x30
9001736a:	2c00      	cmp	r4, #0
9001736c:	d04e      	beq.n	9001740c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001736e:	682e      	ldr	r6, [r5, #0]
90017370:	3c01      	subs	r4, #1
90017372:	42b2      	cmp	r2, r6
90017374:	b2a4      	uxth	r4, r4
90017376:	dd49      	ble.n	9001740c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90017378:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001737c:	682b      	ldr	r3, [r5, #0]
9001737e:	3301      	adds	r3, #1
90017380:	602b      	str	r3, [r5, #0]
90017382:	e7f2      	b.n	9001736a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
90017384:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
90017388:	d01d      	beq.n	900173c6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
9001738a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
9001738e:	d002      	beq.n	90017396 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
90017390:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
90017394:	e7c9      	b.n	9001732a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
90017396:	4684      	mov	ip, r0
90017398:	f04f 0800 	mov.w	r8, #0
9001739c:	2c00      	cmp	r4, #0
9001739e:	d0c6      	beq.n	9001732e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
900173a0:	b947      	cbnz	r7, 900173b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
900173a2:	2801      	cmp	r0, #1
900173a4:	d106      	bne.n	900173b4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
900173a6:	8814      	ldrh	r4, [r2, #0]
900173a8:	2c30      	cmp	r4, #48	; 0x30
900173aa:	bf02      	ittt	eq
900173ac:	3202      	addeq	r2, #2
900173ae:	4638      	moveq	r0, r7
900173b0:	f8cb 2000 	streq.w	r2, [fp]
900173b4:	45bc      	cmp	ip, r7
900173b6:	da14      	bge.n	900173e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
900173b8:	b2bf      	uxth	r7, r7
900173ba:	eba7 040c 	sub.w	r4, r7, ip
900173be:	46bc      	mov	ip, r7
900173c0:	b2a4      	uxth	r4, r4
900173c2:	2600      	movs	r6, #0
900173c4:	e7b3      	b.n	9001732e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
900173c6:	4684      	mov	ip, r0
900173c8:	b16c      	cbz	r4, 900173e6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
900173ca:	42b8      	cmp	r0, r7
900173cc:	dd00      	ble.n	900173d0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
900173ce:	b2b8      	uxth	r0, r7
900173d0:	2400      	movs	r4, #0
900173d2:	e003      	b.n	900173dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
900173d4:	f04f 0c01 	mov.w	ip, #1
900173d8:	2400      	movs	r4, #0
900173da:	4660      	mov	r0, ip
900173dc:	4626      	mov	r6, r4
900173de:	46a0      	mov	r8, r4
900173e0:	e7a5      	b.n	9001732e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
900173e2:	2400      	movs	r4, #0
900173e4:	e7ed      	b.n	900173c2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
900173e6:	4626      	mov	r6, r4
900173e8:	46a0      	mov	r8, r4
900173ea:	e7a0      	b.n	9001732e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
900173ec:	2900      	cmp	r1, #0
900173ee:	d0b0      	beq.n	90017352 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
900173f0:	2720      	movs	r7, #32
900173f2:	682e      	ldr	r6, [r5, #0]
900173f4:	2900      	cmp	r1, #0
900173f6:	d0ac      	beq.n	90017352 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
900173f8:	3901      	subs	r1, #1
900173fa:	4296      	cmp	r6, r2
900173fc:	b289      	uxth	r1, r1
900173fe:	daa7      	bge.n	90017350 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
90017400:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
90017404:	682b      	ldr	r3, [r5, #0]
90017406:	3301      	adds	r3, #1
90017408:	602b      	str	r3, [r5, #0]
9001740a:	e7f2      	b.n	900173f2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
9001740c:	b188      	cbz	r0, 90017432 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001740e:	682b      	ldr	r3, [r5, #0]
90017410:	3801      	subs	r0, #1
90017412:	429a      	cmp	r2, r3
90017414:	b280      	uxth	r0, r0
90017416:	dd0c      	ble.n	90017432 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
90017418:	f8db 3000 	ldr.w	r3, [fp]
9001741c:	1c9c      	adds	r4, r3, #2
9001741e:	f8cb 4000 	str.w	r4, [fp]
90017422:	881c      	ldrh	r4, [r3, #0]
90017424:	682b      	ldr	r3, [r5, #0]
90017426:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
9001742a:	682b      	ldr	r3, [r5, #0]
9001742c:	3301      	adds	r3, #1
9001742e:	602b      	str	r3, [r5, #0]
90017430:	e7ec      	b.n	9001740c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
90017432:	2620      	movs	r6, #32
90017434:	b151      	cbz	r1, 9001744c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90017436:	6828      	ldr	r0, [r5, #0]
90017438:	3901      	subs	r1, #1
9001743a:	4282      	cmp	r2, r0
9001743c:	b289      	uxth	r1, r1
9001743e:	dd05      	ble.n	9001744c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
90017440:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
90017444:	682b      	ldr	r3, [r5, #0]
90017446:	3301      	adds	r3, #1
90017448:	602b      	str	r3, [r5, #0]
9001744a:	e7f3      	b.n	90017434 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
9001744c:	b005      	add	sp, #20
9001744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017452 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
90017452:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90017456:	2400      	movs	r4, #0
90017458:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
9001745c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
90017460:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
90017464:	8014      	strh	r4, [r2, #0]
90017466:	701c      	strb	r4, [r3, #0]
90017468:	f888 4000 	strb.w	r4, [r8]
9001746c:	f88c 4000 	strb.w	r4, [ip]
90017470:	f88e 4000 	strb.w	r4, [lr]
90017474:	703c      	strb	r4, [r7, #0]
90017476:	6804      	ldr	r4, [r0, #0]
90017478:	b1a4      	cbz	r4, 900174a4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
9001747a:	8824      	ldrh	r4, [r4, #0]
9001747c:	f04f 0901 	mov.w	r9, #1
90017480:	b314      	cbz	r4, 900174c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
90017482:	2c2b      	cmp	r4, #43	; 0x2b
90017484:	d001      	beq.n	9001748a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
90017486:	2c20      	cmp	r4, #32
90017488:	d110      	bne.n	900174ac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
9001748a:	8014      	strh	r4, [r2, #0]
9001748c:	6804      	ldr	r4, [r0, #0]
9001748e:	b10c      	cbz	r4, 90017494 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
90017490:	3402      	adds	r4, #2
90017492:	6004      	str	r4, [r0, #0]
90017494:	680c      	ldr	r4, [r1, #0]
90017496:	b10c      	cbz	r4, 9001749c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
90017498:	3401      	adds	r4, #1
9001749a:	600c      	str	r4, [r1, #0]
9001749c:	6804      	ldr	r4, [r0, #0]
9001749e:	b17c      	cbz	r4, 900174c0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
900174a0:	8824      	ldrh	r4, [r4, #0]
900174a2:	e7ed      	b.n	90017480 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
900174a4:	680c      	ldr	r4, [r1, #0]
900174a6:	b17c      	cbz	r4, 900174c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
900174a8:	7824      	ldrb	r4, [r4, #0]
900174aa:	e7e7      	b.n	9001747c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
900174ac:	2c2d      	cmp	r4, #45	; 0x2d
900174ae:	d102      	bne.n	900174b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
900174b0:	f883 9000 	strb.w	r9, [r3]
900174b4:	e7ea      	b.n	9001748c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
900174b6:	2c23      	cmp	r4, #35	; 0x23
900174b8:	d107      	bne.n	900174ca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
900174ba:	f888 9000 	strb.w	r9, [r8]
900174be:	e7e5      	b.n	9001748c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
900174c0:	680c      	ldr	r4, [r1, #0]
900174c2:	b10c      	cbz	r4, 900174c8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
900174c4:	7824      	ldrb	r4, [r4, #0]
900174c6:	e7db      	b.n	90017480 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
900174c8:	2400      	movs	r4, #0
900174ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
900174ce:	2b09      	cmp	r3, #9
900174d0:	d901      	bls.n	900174d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
900174d2:	2c2a      	cmp	r4, #42	; 0x2a
900174d4:	d122      	bne.n	9001751c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
900174d6:	2301      	movs	r3, #1
900174d8:	2c30      	cmp	r4, #48	; 0x30
900174da:	f88e 3000 	strb.w	r3, [lr]
900174de:	d10d      	bne.n	900174fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
900174e0:	f88c 3000 	strb.w	r3, [ip]
900174e4:	6803      	ldr	r3, [r0, #0]
900174e6:	b10b      	cbz	r3, 900174ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
900174e8:	3302      	adds	r3, #2
900174ea:	6003      	str	r3, [r0, #0]
900174ec:	680b      	ldr	r3, [r1, #0]
900174ee:	b10b      	cbz	r3, 900174f4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
900174f0:	3301      	adds	r3, #1
900174f2:	600b      	str	r3, [r1, #0]
900174f4:	6803      	ldr	r3, [r0, #0]
900174f6:	2b00      	cmp	r3, #0
900174f8:	d02f      	beq.n	9001755a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
900174fa:	881c      	ldrh	r4, [r3, #0]
900174fc:	2c2a      	cmp	r4, #42	; 0x2a
900174fe:	d135      	bne.n	9001756c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
90017500:	f04f 33ff 	mov.w	r3, #4294967295
90017504:	6033      	str	r3, [r6, #0]
90017506:	6803      	ldr	r3, [r0, #0]
90017508:	b10b      	cbz	r3, 9001750e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
9001750a:	3302      	adds	r3, #2
9001750c:	6003      	str	r3, [r0, #0]
9001750e:	680b      	ldr	r3, [r1, #0]
90017510:	b10b      	cbz	r3, 90017516 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
90017512:	3301      	adds	r3, #1
90017514:	600b      	str	r3, [r1, #0]
90017516:	6803      	ldr	r3, [r0, #0]
90017518:	b31b      	cbz	r3, 90017562 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
9001751a:	881c      	ldrh	r4, [r3, #0]
9001751c:	2c2e      	cmp	r4, #46	; 0x2e
9001751e:	d11a      	bne.n	90017556 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90017520:	2301      	movs	r3, #1
90017522:	703b      	strb	r3, [r7, #0]
90017524:	6803      	ldr	r3, [r0, #0]
90017526:	b10b      	cbz	r3, 9001752c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
90017528:	3302      	adds	r3, #2
9001752a:	6003      	str	r3, [r0, #0]
9001752c:	680b      	ldr	r3, [r1, #0]
9001752e:	b10b      	cbz	r3, 90017534 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
90017530:	3301      	adds	r3, #1
90017532:	600b      	str	r3, [r1, #0]
90017534:	6803      	ldr	r3, [r0, #0]
90017536:	2b00      	cmp	r3, #0
90017538:	d036      	beq.n	900175a8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
9001753a:	881b      	ldrh	r3, [r3, #0]
9001753c:	2b2a      	cmp	r3, #42	; 0x2a
9001753e:	d137      	bne.n	900175b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
90017540:	f04f 33ff 	mov.w	r3, #4294967295
90017544:	602b      	str	r3, [r5, #0]
90017546:	6803      	ldr	r3, [r0, #0]
90017548:	b10b      	cbz	r3, 9001754e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
9001754a:	3302      	adds	r3, #2
9001754c:	6003      	str	r3, [r0, #0]
9001754e:	680b      	ldr	r3, [r1, #0]
90017550:	b10b      	cbz	r3, 90017556 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90017552:	3301      	adds	r3, #1
90017554:	600b      	str	r3, [r1, #0]
90017556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001755a:	680c      	ldr	r4, [r1, #0]
9001755c:	b134      	cbz	r4, 9001756c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001755e:	7824      	ldrb	r4, [r4, #0]
90017560:	e7cc      	b.n	900174fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
90017562:	680b      	ldr	r3, [r1, #0]
90017564:	2b00      	cmp	r3, #0
90017566:	d0f6      	beq.n	90017556 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
90017568:	781c      	ldrb	r4, [r3, #0]
9001756a:	e7d7      	b.n	9001751c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001756c:	2300      	movs	r3, #0
9001756e:	220a      	movs	r2, #10
90017570:	6033      	str	r3, [r6, #0]
90017572:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
90017576:	fa1f f38c 	uxth.w	r3, ip
9001757a:	2b09      	cmp	r3, #9
9001757c:	d8ce      	bhi.n	9001751c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001757e:	6833      	ldr	r3, [r6, #0]
90017580:	fb02 c303 	mla	r3, r2, r3, ip
90017584:	6033      	str	r3, [r6, #0]
90017586:	6803      	ldr	r3, [r0, #0]
90017588:	b10b      	cbz	r3, 9001758e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
9001758a:	3302      	adds	r3, #2
9001758c:	6003      	str	r3, [r0, #0]
9001758e:	680b      	ldr	r3, [r1, #0]
90017590:	b10b      	cbz	r3, 90017596 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
90017592:	3301      	adds	r3, #1
90017594:	600b      	str	r3, [r1, #0]
90017596:	6803      	ldr	r3, [r0, #0]
90017598:	b10b      	cbz	r3, 9001759e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
9001759a:	881c      	ldrh	r4, [r3, #0]
9001759c:	e7e9      	b.n	90017572 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001759e:	680c      	ldr	r4, [r1, #0]
900175a0:	2c00      	cmp	r4, #0
900175a2:	d0e6      	beq.n	90017572 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
900175a4:	7824      	ldrb	r4, [r4, #0]
900175a6:	e7e4      	b.n	90017572 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
900175a8:	680b      	ldr	r3, [r1, #0]
900175aa:	b10b      	cbz	r3, 900175b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
900175ac:	781b      	ldrb	r3, [r3, #0]
900175ae:	e7c5      	b.n	9001753c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
900175b0:	2200      	movs	r2, #0
900175b2:	240a      	movs	r4, #10
900175b4:	602a      	str	r2, [r5, #0]
900175b6:	3b30      	subs	r3, #48	; 0x30
900175b8:	682a      	ldr	r2, [r5, #0]
900175ba:	b29e      	uxth	r6, r3
900175bc:	2e09      	cmp	r6, #9
900175be:	d813      	bhi.n	900175e8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
900175c0:	fb04 3302 	mla	r3, r4, r2, r3
900175c4:	602b      	str	r3, [r5, #0]
900175c6:	6803      	ldr	r3, [r0, #0]
900175c8:	b10b      	cbz	r3, 900175ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
900175ca:	3302      	adds	r3, #2
900175cc:	6003      	str	r3, [r0, #0]
900175ce:	680b      	ldr	r3, [r1, #0]
900175d0:	b10b      	cbz	r3, 900175d6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
900175d2:	3301      	adds	r3, #1
900175d4:	600b      	str	r3, [r1, #0]
900175d6:	6803      	ldr	r3, [r0, #0]
900175d8:	b10b      	cbz	r3, 900175de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
900175da:	881b      	ldrh	r3, [r3, #0]
900175dc:	e7eb      	b.n	900175b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
900175de:	680b      	ldr	r3, [r1, #0]
900175e0:	2b00      	cmp	r3, #0
900175e2:	d0e8      	beq.n	900175b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
900175e4:	781b      	ldrb	r3, [r3, #0]
900175e6:	e7e6      	b.n	900175b6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
900175e8:	2a06      	cmp	r2, #6
900175ea:	bfa8      	it	ge
900175ec:	2206      	movge	r2, #6
900175ee:	602a      	str	r2, [r5, #0]
900175f0:	e7b1      	b.n	90017556 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

900175f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
900175f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900175f6:	b0a3      	sub	sp, #140	; 0x8c
900175f8:	2600      	movs	r6, #0
900175fa:	4607      	mov	r7, r0
900175fc:	4688      	mov	r8, r1
900175fe:	f10d 0944 	add.w	r9, sp, #68	; 0x44
90017602:	4631      	mov	r1, r6
90017604:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
90017606:	4648      	mov	r0, r9
90017608:	960d      	str	r6, [sp, #52]	; 0x34
9001760a:	e9cd 3208 	strd	r3, r2, [sp, #32]
9001760e:	2242      	movs	r2, #66	; 0x42
90017610:	f00c fac4 	bl	90023b9c <memset>
90017614:	b15f      	cbz	r7, 9001762e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
90017616:	f108 3aff 	add.w	sl, r8, #4294967295
9001761a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001761c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001761e:	b152      	cbz	r2, 90017636 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
90017620:	8812      	ldrh	r2, [r2, #0]
90017622:	b10a      	cbz	r2, 90017628 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
90017624:	459a      	cmp	sl, r3
90017626:	dc2e      	bgt.n	90017686 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
90017628:	2200      	movs	r2, #0
9001762a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001762e:	4638      	mov	r0, r7
90017630:	b023      	add	sp, #140	; 0x8c
90017632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017636:	9a08      	ldr	r2, [sp, #32]
90017638:	2a00      	cmp	r2, #0
9001763a:	d0f5      	beq.n	90017628 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001763c:	7812      	ldrb	r2, [r2, #0]
9001763e:	e7f0      	b.n	90017622 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
90017640:	2d00      	cmp	r5, #0
90017642:	d0ea      	beq.n	9001761a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
90017644:	782a      	ldrb	r2, [r5, #0]
90017646:	b142      	cbz	r2, 9001765a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
90017648:	2a25      	cmp	r2, #37	; 0x25
9001764a:	d001      	beq.n	90017650 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
9001764c:	459a      	cmp	sl, r3
9001764e:	dc08      	bgt.n	90017662 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
90017650:	f1bb 0f00 	cmp.w	fp, #0
90017654:	d121      	bne.n	9001769a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
90017656:	2d00      	cmp	r5, #0
90017658:	d0df      	beq.n	9001761a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001765a:	782a      	ldrb	r2, [r5, #0]
9001765c:	f04f 0b00 	mov.w	fp, #0
90017660:	e01d      	b.n	9001769e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
90017662:	f1bb 0f00 	cmp.w	fp, #0
90017666:	d077      	beq.n	90017758 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
90017668:	f8bb 2000 	ldrh.w	r2, [fp]
9001766c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
90017670:	f1bb 0f00 	cmp.w	fp, #0
90017674:	d002      	beq.n	9001767c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
90017676:	f10b 0202 	add.w	r2, fp, #2
9001767a:	9209      	str	r2, [sp, #36]	; 0x24
9001767c:	b10d      	cbz	r5, 90017682 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
9001767e:	3501      	adds	r5, #1
90017680:	9508      	str	r5, [sp, #32]
90017682:	3301      	adds	r3, #1
90017684:	930d      	str	r3, [sp, #52]	; 0x34
90017686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90017688:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
9001768c:	f1bb 0f00 	cmp.w	fp, #0
90017690:	d0d6      	beq.n	90017640 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
90017692:	f8bb 2000 	ldrh.w	r2, [fp]
90017696:	2a00      	cmp	r2, #0
90017698:	d1d6      	bne.n	90017648 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
9001769a:	f8bb 2000 	ldrh.w	r2, [fp]
9001769e:	2a00      	cmp	r2, #0
900176a0:	d0bb      	beq.n	9001761a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
900176a2:	459a      	cmp	sl, r3
900176a4:	ddb9      	ble.n	9001761a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
900176a6:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
900176aa:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
900176ae:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
900176b2:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
900176b6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
900176ba:	960e      	str	r6, [sp, #56]	; 0x38
900176bc:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
900176c0:	960f      	str	r6, [sp, #60]	; 0x3c
900176c2:	f1bb 0f00 	cmp.w	fp, #0
900176c6:	d002      	beq.n	900176ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
900176c8:	f10b 0302 	add.w	r3, fp, #2
900176cc:	9309      	str	r3, [sp, #36]	; 0x24
900176ce:	b10d      	cbz	r5, 900176d4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
900176d0:	1c6b      	adds	r3, r5, #1
900176d2:	9308      	str	r3, [sp, #32]
900176d4:	ab0f      	add	r3, sp, #60	; 0x3c
900176d6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
900176da:	a908      	add	r1, sp, #32
900176dc:	a809      	add	r0, sp, #36	; 0x24
900176de:	9305      	str	r3, [sp, #20]
900176e0:	f10d 0331 	add.w	r3, sp, #49	; 0x31
900176e4:	9304      	str	r3, [sp, #16]
900176e6:	ab0e      	add	r3, sp, #56	; 0x38
900176e8:	9303      	str	r3, [sp, #12]
900176ea:	ab0c      	add	r3, sp, #48	; 0x30
900176ec:	9302      	str	r3, [sp, #8]
900176ee:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
900176f2:	9301      	str	r3, [sp, #4]
900176f4:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
900176f8:	9300      	str	r3, [sp, #0]
900176fa:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
900176fe:	f7ff fea8 	bl	90017452 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
90017702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017704:	2b00      	cmp	r3, #0
90017706:	bfbf      	itttt	lt
90017708:	6823      	ldrlt	r3, [r4, #0]
9001770a:	3404      	addlt	r4, #4
9001770c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90017710:	930e      	strlt	r3, [sp, #56]	; 0x38
90017712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90017714:	2b00      	cmp	r3, #0
90017716:	bfbe      	ittt	lt
90017718:	6823      	ldrlt	r3, [r4, #0]
9001771a:	3404      	addlt	r4, #4
9001771c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
90017720:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
90017724:	bfb8      	it	lt
90017726:	930f      	strlt	r3, [sp, #60]	; 0x3c
90017728:	b1d9      	cbz	r1, 90017762 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
9001772a:	880b      	ldrh	r3, [r1, #0]
9001772c:	2b69      	cmp	r3, #105	; 0x69
9001772e:	d01f      	beq.n	90017770 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90017730:	d82f      	bhi.n	90017792 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
90017732:	2b58      	cmp	r3, #88	; 0x58
90017734:	d01c      	beq.n	90017770 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90017736:	d818      	bhi.n	9001776a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
90017738:	2b25      	cmp	r3, #37	; 0x25
9001773a:	d034      	beq.n	900177a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
9001773c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001773e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
90017742:	f1bb 0f00 	cmp.w	fp, #0
90017746:	f000 80b7 	beq.w	900178b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
9001774a:	f8bb 5000 	ldrh.w	r5, [fp]
9001774e:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
90017752:	3301      	adds	r3, #1
90017754:	930d      	str	r3, [sp, #52]	; 0x34
90017756:	e029      	b.n	900177ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
90017758:	b10d      	cbz	r5, 9001775e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
9001775a:	782a      	ldrb	r2, [r5, #0]
9001775c:	e786      	b.n	9001766c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001775e:	462a      	mov	r2, r5
90017760:	e784      	b.n	9001766c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
90017762:	2a00      	cmp	r2, #0
90017764:	d0ea      	beq.n	9001773c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90017766:	7813      	ldrb	r3, [r2, #0]
90017768:	e7e0      	b.n	9001772c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
9001776a:	3b63      	subs	r3, #99	; 0x63
9001776c:	2b01      	cmp	r3, #1
9001776e:	d8e5      	bhi.n	9001773c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
90017770:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
90017774:	b329      	cbz	r1, 900177c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
90017776:	880b      	ldrh	r3, [r1, #0]
90017778:	2b69      	cmp	r3, #105	; 0x69
9001777a:	d063      	beq.n	90017844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001777c:	d825      	bhi.n	900177ca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
9001777e:	2b63      	cmp	r3, #99	; 0x63
90017780:	d038      	beq.n	900177f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
90017782:	2b64      	cmp	r3, #100	; 0x64
90017784:	d05e      	beq.n	90017844 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
90017786:	2b58      	cmp	r3, #88	; 0x58
90017788:	d07a      	beq.n	90017880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
9001778a:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
9001778e:	4625      	mov	r5, r4
90017790:	e036      	b.n	90017800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90017792:	2b73      	cmp	r3, #115	; 0x73
90017794:	d0ec      	beq.n	90017770 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
90017796:	d802      	bhi.n	9001779e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
90017798:	2b6f      	cmp	r3, #111	; 0x6f
9001779a:	d1cf      	bne.n	9001773c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001779c:	e7e8      	b.n	90017770 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001779e:	2b75      	cmp	r3, #117	; 0x75
900177a0:	d0e6      	beq.n	90017770 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
900177a2:	2b78      	cmp	r3, #120	; 0x78
900177a4:	e7f9      	b.n	9001779a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
900177a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900177a8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
900177ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
900177ae:	b10b      	cbz	r3, 900177b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
900177b0:	3302      	adds	r3, #2
900177b2:	9309      	str	r3, [sp, #36]	; 0x24
900177b4:	9b08      	ldr	r3, [sp, #32]
900177b6:	2b00      	cmp	r3, #0
900177b8:	f43f af2f 	beq.w	9001761a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
900177bc:	3301      	adds	r3, #1
900177be:	9308      	str	r3, [sp, #32]
900177c0:	e72b      	b.n	9001761a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
900177c2:	2a00      	cmp	r2, #0
900177c4:	d0e1      	beq.n	9001778a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
900177c6:	7813      	ldrb	r3, [r2, #0]
900177c8:	e7d6      	b.n	90017778 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
900177ca:	2b73      	cmp	r3, #115	; 0x73
900177cc:	d036      	beq.n	9001783c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
900177ce:	d807      	bhi.n	900177e0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
900177d0:	2b6f      	cmp	r3, #111	; 0x6f
900177d2:	d1da      	bne.n	9001778a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
900177d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900177d6:	1d25      	adds	r5, r4, #4
900177d8:	2308      	movs	r3, #8
900177da:	eba8 0202 	sub.w	r2, r8, r2
900177de:	e049      	b.n	90017874 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
900177e0:	2b75      	cmp	r3, #117	; 0x75
900177e2:	d042      	beq.n	9001786a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
900177e4:	2b78      	cmp	r3, #120	; 0x78
900177e6:	d1d0      	bne.n	9001778a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
900177e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900177ea:	1d25      	adds	r5, r4, #4
900177ec:	2310      	movs	r3, #16
900177ee:	eba8 0202 	sub.w	r2, r8, r2
900177f2:	e03f      	b.n	90017874 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
900177f4:	6823      	ldr	r3, [r4, #0]
900177f6:	1d25      	adds	r5, r4, #4
900177f8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
900177fc:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
90017800:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017802:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
90017806:	2b00      	cmp	r3, #0
90017808:	d051      	beq.n	900178ae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
9001780a:	881a      	ldrh	r2, [r3, #0]
9001780c:	a80d      	add	r0, sp, #52	; 0x34
9001780e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
90017812:	462c      	mov	r4, r5
90017814:	9005      	str	r0, [sp, #20]
90017816:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
9001781a:	9004      	str	r0, [sp, #16]
9001781c:	980e      	ldr	r0, [sp, #56]	; 0x38
9001781e:	9003      	str	r0, [sp, #12]
90017820:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
90017824:	9002      	str	r0, [sp, #8]
90017826:	980f      	ldr	r0, [sp, #60]	; 0x3c
90017828:	9001      	str	r0, [sp, #4]
9001782a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
9001782e:	e9cd 8706 	strd	r8, r7, [sp, #24]
90017832:	9000      	str	r0, [sp, #0]
90017834:	a810      	add	r0, sp, #64	; 0x40
90017836:	f7ff fd49 	bl	900172cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
9001783a:	e7b7      	b.n	900177ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001783c:	1d25      	adds	r5, r4, #4
9001783e:	6823      	ldr	r3, [r4, #0]
90017840:	9310      	str	r3, [sp, #64]	; 0x40
90017842:	e7dd      	b.n	90017800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90017844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90017846:	230a      	movs	r3, #10
90017848:	4649      	mov	r1, r9
9001784a:	6820      	ldr	r0, [r4, #0]
9001784c:	eba8 0202 	sub.w	r2, r8, r2
90017850:	1d25      	adds	r5, r4, #4
90017852:	b292      	uxth	r2, r2
90017854:	f7ff fd08 	bl	90017268 <_ZN8touchgfx7Unicode4itoaElPtti>
90017858:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001785c:	2b2d      	cmp	r3, #45	; 0x2d
9001785e:	d1cf      	bne.n	90017800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90017860:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017864:	9b10      	ldr	r3, [sp, #64]	; 0x40
90017866:	3302      	adds	r3, #2
90017868:	e7ea      	b.n	90017840 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
9001786a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001786c:	1d25      	adds	r5, r4, #4
9001786e:	230a      	movs	r3, #10
90017870:	eba8 0202 	sub.w	r2, r8, r2
90017874:	b292      	uxth	r2, r2
90017876:	4649      	mov	r1, r9
90017878:	6820      	ldr	r0, [r4, #0]
9001787a:	f7ff fcd7 	bl	9001722c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001787e:	e7bf      	b.n	90017800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
90017880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90017882:	2310      	movs	r3, #16
90017884:	4649      	mov	r1, r9
90017886:	6820      	ldr	r0, [r4, #0]
90017888:	eba8 0202 	sub.w	r2, r8, r2
9001788c:	1d25      	adds	r5, r4, #4
9001788e:	b292      	uxth	r2, r2
90017890:	f7ff fccc 	bl	9001722c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
90017894:	f10d 0242 	add.w	r2, sp, #66	; 0x42
90017898:	f832 3f02 	ldrh.w	r3, [r2, #2]!
9001789c:	2b00      	cmp	r3, #0
9001789e:	d0af      	beq.n	90017800 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
900178a0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
900178a4:	2919      	cmp	r1, #25
900178a6:	d8f7      	bhi.n	90017898 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
900178a8:	3b20      	subs	r3, #32
900178aa:	8013      	strh	r3, [r2, #0]
900178ac:	e7f4      	b.n	90017898 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
900178ae:	9a08      	ldr	r2, [sp, #32]
900178b0:	2a00      	cmp	r2, #0
900178b2:	d0ab      	beq.n	9001780c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
900178b4:	7812      	ldrb	r2, [r2, #0]
900178b6:	e7a9      	b.n	9001780c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
900178b8:	2d00      	cmp	r5, #0
900178ba:	f43f af48 	beq.w	9001774e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
900178be:	782d      	ldrb	r5, [r5, #0]
900178c0:	e745      	b.n	9001774e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

900178c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
900178c2:	b507      	push	{r0, r1, r2, lr}
900178c4:	9300      	str	r3, [sp, #0]
900178c6:	4613      	mov	r3, r2
900178c8:	2200      	movs	r2, #0
900178ca:	f7ff fe92 	bl	900175f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
900178ce:	b003      	add	sp, #12
900178d0:	f85d fb04 	ldr.w	pc, [sp], #4

900178d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
900178d4:	b40c      	push	{r2, r3}
900178d6:	b507      	push	{r0, r1, r2, lr}
900178d8:	ab04      	add	r3, sp, #16
900178da:	f853 2b04 	ldr.w	r2, [r3], #4
900178de:	9301      	str	r3, [sp, #4]
900178e0:	f7ff ffef 	bl	900178c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
900178e4:	b003      	add	sp, #12
900178e6:	f85d eb04 	ldr.w	lr, [sp], #4
900178ea:	b002      	add	sp, #8
900178ec:	4770      	bx	lr
	...

900178f0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
900178f0:	4b01      	ldr	r3, [pc, #4]	; (900178f8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
900178f2:	6018      	str	r0, [r3, #0]
900178f4:	4770      	bx	lr
900178f6:	bf00      	nop
900178f8:	240264bc 	.word	0x240264bc

900178fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
900178fc:	4b06      	ldr	r3, [pc, #24]	; (90017918 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
900178fe:	881a      	ldrh	r2, [r3, #0]
90017900:	4282      	cmp	r2, r0
90017902:	d807      	bhi.n	90017914 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
90017904:	4b05      	ldr	r3, [pc, #20]	; (9001791c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
90017906:	881b      	ldrh	r3, [r3, #0]
90017908:	4413      	add	r3, r2
9001790a:	4298      	cmp	r0, r3
9001790c:	bfac      	ite	ge
9001790e:	2000      	movge	r0, #0
90017910:	2001      	movlt	r0, #1
90017912:	4770      	bx	lr
90017914:	2000      	movs	r0, #0
90017916:	4770      	bx	lr
90017918:	240264dc 	.word	0x240264dc
9001791c:	240264e0 	.word	0x240264e0

90017920 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
90017920:	b508      	push	{r3, lr}
90017922:	4601      	mov	r1, r0
90017924:	f7ff ffea 	bl	900178fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
90017928:	b118      	cbz	r0, 90017932 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
9001792a:	4b02      	ldr	r3, [pc, #8]	; (90017934 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
9001792c:	681b      	ldr	r3, [r3, #0]
9001792e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
90017932:	bd08      	pop	{r3, pc}
90017934:	240264c0 	.word	0x240264c0

90017938 <_ZN8touchgfx6Bitmap10clearCacheEv>:
90017938:	b5f0      	push	{r4, r5, r6, r7, lr}
9001793a:	4c24      	ldr	r4, [pc, #144]	; (900179cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
9001793c:	6823      	ldr	r3, [r4, #0]
9001793e:	2b00      	cmp	r3, #0
90017940:	d042      	beq.n	900179c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
90017942:	4a23      	ldr	r2, [pc, #140]	; (900179d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
90017944:	4d23      	ldr	r5, [pc, #140]	; (900179d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
90017946:	8811      	ldrh	r1, [r2, #0]
90017948:	f8b5 c000 	ldrh.w	ip, [r5]
9001794c:	4822      	ldr	r0, [pc, #136]	; (900179d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
9001794e:	4461      	add	r1, ip
90017950:	1c4a      	adds	r2, r1, #1
90017952:	008f      	lsls	r7, r1, #2
90017954:	f022 0201 	bic.w	r2, r2, #1
90017958:	19de      	adds	r6, r3, r7
9001795a:	0412      	lsls	r2, r2, #16
9001795c:	6006      	str	r6, [r0, #0]
9001795e:	4e1f      	ldr	r6, [pc, #124]	; (900179dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
90017960:	0c12      	lsrs	r2, r2, #16
90017962:	eb07 0742 	add.w	r7, r7, r2, lsl #1
90017966:	19da      	adds	r2, r3, r7
90017968:	6032      	str	r2, [r6, #0]
9001796a:	220e      	movs	r2, #14
9001796c:	fb02 f20c 	mul.w	r2, r2, ip
90017970:	3203      	adds	r2, #3
90017972:	f022 0203 	bic.w	r2, r2, #3
90017976:	443a      	add	r2, r7
90017978:	4f19      	ldr	r7, [pc, #100]	; (900179e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
9001797a:	4413      	add	r3, r2
9001797c:	603b      	str	r3, [r7, #0]
9001797e:	2300      	movs	r3, #0
90017980:	4f18      	ldr	r7, [pc, #96]	; (900179e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
90017982:	469c      	mov	ip, r3
90017984:	803b      	strh	r3, [r7, #0]
90017986:	4f18      	ldr	r7, [pc, #96]	; (900179e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
90017988:	683f      	ldr	r7, [r7, #0]
9001798a:	1aba      	subs	r2, r7, r2
9001798c:	4f17      	ldr	r7, [pc, #92]	; (900179ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
9001798e:	603a      	str	r2, [r7, #0]
90017990:	f64f 77ff 	movw	r7, #65535	; 0xffff
90017994:	4a16      	ldr	r2, [pc, #88]	; (900179f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
90017996:	8013      	strh	r3, [r2, #0]
90017998:	428b      	cmp	r3, r1
9001799a:	d10d      	bne.n	900179b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
9001799c:	882d      	ldrh	r5, [r5, #0]
9001799e:	2300      	movs	r3, #0
900179a0:	6830      	ldr	r0, [r6, #0]
900179a2:	240e      	movs	r4, #14
900179a4:	429d      	cmp	r5, r3
900179a6:	d90f      	bls.n	900179c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
900179a8:	fb04 0203 	mla	r2, r4, r3, r0
900179ac:	3301      	adds	r3, #1
900179ae:	7b11      	ldrb	r1, [r2, #12]
900179b0:	f36f 1145 	bfc	r1, #5, #1
900179b4:	7311      	strb	r1, [r2, #12]
900179b6:	e7f5      	b.n	900179a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
900179b8:	6822      	ldr	r2, [r4, #0]
900179ba:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
900179be:	6802      	ldr	r2, [r0, #0]
900179c0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
900179c4:	3301      	adds	r3, #1
900179c6:	e7e7      	b.n	90017998 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
900179c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
900179ca:	bf00      	nop
900179cc:	240264c0 	.word	0x240264c0
900179d0:	240264dc 	.word	0x240264dc
900179d4:	240264e0 	.word	0x240264e0
900179d8:	240264d4 	.word	0x240264d4
900179dc:	240264c4 	.word	0x240264c4
900179e0:	240264cc 	.word	0x240264cc
900179e4:	240264de 	.word	0x240264de
900179e8:	240264c8 	.word	0x240264c8
900179ec:	240264d8 	.word	0x240264d8
900179f0:	240264d0 	.word	0x240264d0

900179f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
900179f4:	4b06      	ldr	r3, [pc, #24]	; (90017a10 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
900179f6:	681b      	ldr	r3, [r3, #0]
900179f8:	b943      	cbnz	r3, 90017a0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
900179fa:	b139      	cbz	r1, 90017a0c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
900179fc:	4b05      	ldr	r3, [pc, #20]	; (90017a14 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
900179fe:	801a      	strh	r2, [r3, #0]
90017a00:	4b05      	ldr	r3, [pc, #20]	; (90017a18 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
90017a02:	6019      	str	r1, [r3, #0]
90017a04:	4b05      	ldr	r3, [pc, #20]	; (90017a1c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
90017a06:	6018      	str	r0, [r3, #0]
90017a08:	f7ff bf96 	b.w	90017938 <_ZN8touchgfx6Bitmap10clearCacheEv>
90017a0c:	4770      	bx	lr
90017a0e:	bf00      	nop
90017a10:	240264cc 	.word	0x240264cc
90017a14:	240264e0 	.word	0x240264e0
90017a18:	240264c8 	.word	0x240264c8
90017a1c:	240264c0 	.word	0x240264c0

90017a20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
90017a20:	b470      	push	{r4, r5, r6}
90017a22:	4c07      	ldr	r4, [pc, #28]	; (90017a40 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
90017a24:	4605      	mov	r5, r0
90017a26:	4610      	mov	r0, r2
90017a28:	9a03      	ldr	r2, [sp, #12]
90017a2a:	6826      	ldr	r6, [r4, #0]
90017a2c:	b936      	cbnz	r6, 90017a3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
90017a2e:	6025      	str	r5, [r4, #0]
90017a30:	4c04      	ldr	r4, [pc, #16]	; (90017a44 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
90017a32:	8021      	strh	r1, [r4, #0]
90017a34:	4619      	mov	r1, r3
90017a36:	bc70      	pop	{r4, r5, r6}
90017a38:	f7ff bfdc 	b.w	900179f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
90017a3c:	bc70      	pop	{r4, r5, r6}
90017a3e:	4770      	bx	lr
90017a40:	240264e4 	.word	0x240264e4
90017a44:	240264dc 	.word	0x240264dc

90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>:
90017a48:	4a12      	ldr	r2, [pc, #72]	; (90017a94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
90017a4a:	8803      	ldrh	r3, [r0, #0]
90017a4c:	8812      	ldrh	r2, [r2, #0]
90017a4e:	4293      	cmp	r3, r2
90017a50:	d207      	bcs.n	90017a62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
90017a52:	4a11      	ldr	r2, [pc, #68]	; (90017a98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
90017a54:	2114      	movs	r1, #20
90017a56:	6812      	ldr	r2, [r2, #0]
90017a58:	fb01 2303 	mla	r3, r1, r3, r2
90017a5c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
90017a60:	4770      	bx	lr
90017a62:	490e      	ldr	r1, [pc, #56]	; (90017a9c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
90017a64:	8809      	ldrh	r1, [r1, #0]
90017a66:	4411      	add	r1, r2
90017a68:	428b      	cmp	r3, r1
90017a6a:	da04      	bge.n	90017a76 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
90017a6c:	1a9b      	subs	r3, r3, r2
90017a6e:	4a0c      	ldr	r2, [pc, #48]	; (90017aa0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
90017a70:	210e      	movs	r1, #14
90017a72:	6812      	ldr	r2, [r2, #0]
90017a74:	e7f0      	b.n	90017a58 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
90017a76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017a7a:	4293      	cmp	r3, r2
90017a7c:	d108      	bne.n	90017a90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
90017a7e:	4b09      	ldr	r3, [pc, #36]	; (90017aa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
90017a80:	781b      	ldrb	r3, [r3, #0]
90017a82:	b91b      	cbnz	r3, 90017a8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
90017a84:	4b08      	ldr	r3, [pc, #32]	; (90017aa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
90017a86:	f9b3 0000 	ldrsh.w	r0, [r3]
90017a8a:	4770      	bx	lr
90017a8c:	4b07      	ldr	r3, [pc, #28]	; (90017aac <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
90017a8e:	e7fa      	b.n	90017a86 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
90017a90:	2000      	movs	r0, #0
90017a92:	4770      	bx	lr
90017a94:	240264dc 	.word	0x240264dc
90017a98:	240264e4 	.word	0x240264e4
90017a9c:	240264e0 	.word	0x240264e0
90017aa0:	240264c4 	.word	0x240264c4
90017aa4:	24026454 	.word	0x24026454
90017aa8:	24026456 	.word	0x24026456
90017aac:	24026458 	.word	0x24026458

90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>:
90017ab0:	4a12      	ldr	r2, [pc, #72]	; (90017afc <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
90017ab2:	8803      	ldrh	r3, [r0, #0]
90017ab4:	8812      	ldrh	r2, [r2, #0]
90017ab6:	4293      	cmp	r3, r2
90017ab8:	d207      	bcs.n	90017aca <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
90017aba:	4a11      	ldr	r2, [pc, #68]	; (90017b00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
90017abc:	2114      	movs	r1, #20
90017abe:	6812      	ldr	r2, [r2, #0]
90017ac0:	fb01 2303 	mla	r3, r1, r3, r2
90017ac4:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
90017ac8:	4770      	bx	lr
90017aca:	490e      	ldr	r1, [pc, #56]	; (90017b04 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
90017acc:	8809      	ldrh	r1, [r1, #0]
90017ace:	4411      	add	r1, r2
90017ad0:	428b      	cmp	r3, r1
90017ad2:	da04      	bge.n	90017ade <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
90017ad4:	1a9b      	subs	r3, r3, r2
90017ad6:	4a0c      	ldr	r2, [pc, #48]	; (90017b08 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
90017ad8:	210e      	movs	r1, #14
90017ada:	6812      	ldr	r2, [r2, #0]
90017adc:	e7f0      	b.n	90017ac0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
90017ade:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017ae2:	4293      	cmp	r3, r2
90017ae4:	d108      	bne.n	90017af8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
90017ae6:	4b09      	ldr	r3, [pc, #36]	; (90017b0c <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
90017ae8:	781b      	ldrb	r3, [r3, #0]
90017aea:	b91b      	cbnz	r3, 90017af4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
90017aec:	4b08      	ldr	r3, [pc, #32]	; (90017b10 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
90017aee:	f9b3 0000 	ldrsh.w	r0, [r3]
90017af2:	4770      	bx	lr
90017af4:	4b07      	ldr	r3, [pc, #28]	; (90017b14 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
90017af6:	e7fa      	b.n	90017aee <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
90017af8:	2000      	movs	r0, #0
90017afa:	4770      	bx	lr
90017afc:	240264dc 	.word	0x240264dc
90017b00:	240264e4 	.word	0x240264e4
90017b04:	240264e0 	.word	0x240264e0
90017b08:	240264c4 	.word	0x240264c4
90017b0c:	24026454 	.word	0x24026454
90017b10:	24026458 	.word	0x24026458
90017b14:	24026456 	.word	0x24026456

90017b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
90017b18:	4a1f      	ldr	r2, [pc, #124]	; (90017b98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
90017b1a:	b510      	push	{r4, lr}
90017b1c:	880b      	ldrh	r3, [r1, #0]
90017b1e:	8812      	ldrh	r2, [r2, #0]
90017b20:	4293      	cmp	r3, r2
90017b22:	d213      	bcs.n	90017b4c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
90017b24:	4a1d      	ldr	r2, [pc, #116]	; (90017b9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
90017b26:	2114      	movs	r1, #20
90017b28:	6812      	ldr	r2, [r2, #0]
90017b2a:	fb01 2303 	mla	r3, r1, r3, r2
90017b2e:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
90017b32:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
90017b36:	8a1a      	ldrh	r2, [r3, #16]
90017b38:	8a5b      	ldrh	r3, [r3, #18]
90017b3a:	f3c2 020c 	ubfx	r2, r2, #0, #13
90017b3e:	8004      	strh	r4, [r0, #0]
90017b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
90017b44:	8041      	strh	r1, [r0, #2]
90017b46:	8082      	strh	r2, [r0, #4]
90017b48:	80c3      	strh	r3, [r0, #6]
90017b4a:	e00e      	b.n	90017b6a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90017b4c:	4914      	ldr	r1, [pc, #80]	; (90017ba0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
90017b4e:	8809      	ldrh	r1, [r1, #0]
90017b50:	4411      	add	r1, r2
90017b52:	428b      	cmp	r3, r1
90017b54:	da0a      	bge.n	90017b6c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
90017b56:	1a9b      	subs	r3, r3, r2
90017b58:	4a12      	ldr	r2, [pc, #72]	; (90017ba4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
90017b5a:	210e      	movs	r1, #14
90017b5c:	6812      	ldr	r2, [r2, #0]
90017b5e:	fb01 2303 	mla	r3, r1, r3, r2
90017b62:	681a      	ldr	r2, [r3, #0]
90017b64:	6002      	str	r2, [r0, #0]
90017b66:	685a      	ldr	r2, [r3, #4]
90017b68:	6042      	str	r2, [r0, #4]
90017b6a:	bd10      	pop	{r4, pc}
90017b6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017b70:	4293      	cmp	r3, r2
90017b72:	d10b      	bne.n	90017b8c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
90017b74:	4b0c      	ldr	r3, [pc, #48]	; (90017ba8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
90017b76:	f9b3 1000 	ldrsh.w	r1, [r3]
90017b7a:	4b0c      	ldr	r3, [pc, #48]	; (90017bac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
90017b7c:	8081      	strh	r1, [r0, #4]
90017b7e:	f9b3 2000 	ldrsh.w	r2, [r3]
90017b82:	2300      	movs	r3, #0
90017b84:	80c2      	strh	r2, [r0, #6]
90017b86:	8003      	strh	r3, [r0, #0]
90017b88:	8043      	strh	r3, [r0, #2]
90017b8a:	e7ee      	b.n	90017b6a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
90017b8c:	2300      	movs	r3, #0
90017b8e:	8003      	strh	r3, [r0, #0]
90017b90:	8043      	strh	r3, [r0, #2]
90017b92:	8083      	strh	r3, [r0, #4]
90017b94:	e7d8      	b.n	90017b48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
90017b96:	bf00      	nop
90017b98:	240264dc 	.word	0x240264dc
90017b9c:	240264e4 	.word	0x240264e4
90017ba0:	240264e0 	.word	0x240264e0
90017ba4:	240264c4 	.word	0x240264c4
90017ba8:	24026450 	.word	0x24026450
90017bac:	24026452 	.word	0x24026452

90017bb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
90017bb0:	4a17      	ldr	r2, [pc, #92]	; (90017c10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
90017bb2:	8803      	ldrh	r3, [r0, #0]
90017bb4:	8812      	ldrh	r2, [r2, #0]
90017bb6:	4293      	cmp	r3, r2
90017bb8:	d213      	bcs.n	90017be2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
90017bba:	4a16      	ldr	r2, [pc, #88]	; (90017c14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
90017bbc:	2114      	movs	r1, #20
90017bbe:	6812      	ldr	r2, [r2, #0]
90017bc0:	fb01 2303 	mla	r3, r1, r3, r2
90017bc4:	8a1a      	ldrh	r2, [r3, #16]
90017bc6:	8919      	ldrh	r1, [r3, #8]
90017bc8:	f3c2 020c 	ubfx	r2, r2, #0, #13
90017bcc:	428a      	cmp	r2, r1
90017bce:	db1d      	blt.n	90017c0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
90017bd0:	8a58      	ldrh	r0, [r3, #18]
90017bd2:	f3c0 000c 	ubfx	r0, r0, #0, #13
90017bd6:	895b      	ldrh	r3, [r3, #10]
90017bd8:	4298      	cmp	r0, r3
90017bda:	bfac      	ite	ge
90017bdc:	2000      	movge	r0, #0
90017bde:	2001      	movlt	r0, #1
90017be0:	4770      	bx	lr
90017be2:	490d      	ldr	r1, [pc, #52]	; (90017c18 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
90017be4:	8809      	ldrh	r1, [r1, #0]
90017be6:	4411      	add	r1, r2
90017be8:	428b      	cmp	r3, r1
90017bea:	da0d      	bge.n	90017c08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
90017bec:	1a9b      	subs	r3, r3, r2
90017bee:	4a0b      	ldr	r2, [pc, #44]	; (90017c1c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
90017bf0:	210e      	movs	r1, #14
90017bf2:	6812      	ldr	r2, [r2, #0]
90017bf4:	fb01 2303 	mla	r3, r1, r3, r2
90017bf8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
90017bfc:	891a      	ldrh	r2, [r3, #8]
90017bfe:	4291      	cmp	r1, r2
90017c00:	db04      	blt.n	90017c0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
90017c02:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
90017c06:	e7e6      	b.n	90017bd6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
90017c08:	2000      	movs	r0, #0
90017c0a:	4770      	bx	lr
90017c0c:	2001      	movs	r0, #1
90017c0e:	4770      	bx	lr
90017c10:	240264dc 	.word	0x240264dc
90017c14:	240264e4 	.word	0x240264e4
90017c18:	240264e0 	.word	0x240264e0
90017c1c:	240264c4 	.word	0x240264c4

90017c20 <_ZNK8touchgfx6Bitmap7getDataEv>:
90017c20:	4a12      	ldr	r2, [pc, #72]	; (90017c6c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
90017c22:	8803      	ldrh	r3, [r0, #0]
90017c24:	8811      	ldrh	r1, [r2, #0]
90017c26:	428b      	cmp	r3, r1
90017c28:	d20b      	bcs.n	90017c42 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
90017c2a:	4a11      	ldr	r2, [pc, #68]	; (90017c70 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90017c2c:	6812      	ldr	r2, [r2, #0]
90017c2e:	b112      	cbz	r2, 90017c36 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
90017c30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90017c34:	b9c0      	cbnz	r0, 90017c68 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
90017c36:	4a0f      	ldr	r2, [pc, #60]	; (90017c74 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
90017c38:	6811      	ldr	r1, [r2, #0]
90017c3a:	2214      	movs	r2, #20
90017c3c:	4353      	muls	r3, r2
90017c3e:	58c8      	ldr	r0, [r1, r3]
90017c40:	4770      	bx	lr
90017c42:	4a0d      	ldr	r2, [pc, #52]	; (90017c78 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
90017c44:	8812      	ldrh	r2, [r2, #0]
90017c46:	440a      	add	r2, r1
90017c48:	4293      	cmp	r3, r2
90017c4a:	da04      	bge.n	90017c56 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
90017c4c:	4a08      	ldr	r2, [pc, #32]	; (90017c70 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
90017c4e:	6812      	ldr	r2, [r2, #0]
90017c50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
90017c54:	4770      	bx	lr
90017c56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017c5a:	4293      	cmp	r3, r2
90017c5c:	d103      	bne.n	90017c66 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
90017c5e:	4b07      	ldr	r3, [pc, #28]	; (90017c7c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
90017c60:	681b      	ldr	r3, [r3, #0]
90017c62:	6c58      	ldr	r0, [r3, #68]	; 0x44
90017c64:	4770      	bx	lr
90017c66:	2000      	movs	r0, #0
90017c68:	4770      	bx	lr
90017c6a:	bf00      	nop
90017c6c:	240264dc 	.word	0x240264dc
90017c70:	240264c0 	.word	0x240264c0
90017c74:	240264e4 	.word	0x240264e4
90017c78:	240264e0 	.word	0x240264e0
90017c7c:	2402645c 	.word	0x2402645c

90017c80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
90017c80:	4b24      	ldr	r3, [pc, #144]	; (90017d14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
90017c82:	8802      	ldrh	r2, [r0, #0]
90017c84:	8818      	ldrh	r0, [r3, #0]
90017c86:	4282      	cmp	r2, r0
90017c88:	d221      	bcs.n	90017cce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
90017c8a:	4b23      	ldr	r3, [pc, #140]	; (90017d18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
90017c8c:	6819      	ldr	r1, [r3, #0]
90017c8e:	2314      	movs	r3, #20
90017c90:	fb03 1302 	mla	r3, r3, r2, r1
90017c94:	6858      	ldr	r0, [r3, #4]
90017c96:	2800      	cmp	r0, #0
90017c98:	d03a      	beq.n	90017d10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90017c9a:	4920      	ldr	r1, [pc, #128]	; (90017d1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
90017c9c:	6809      	ldr	r1, [r1, #0]
90017c9e:	2900      	cmp	r1, #0
90017ca0:	d036      	beq.n	90017d10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90017ca2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
90017ca6:	2900      	cmp	r1, #0
90017ca8:	d032      	beq.n	90017d10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
90017caa:	891a      	ldrh	r2, [r3, #8]
90017cac:	8958      	ldrh	r0, [r3, #10]
90017cae:	4350      	muls	r0, r2
90017cb0:	7c5a      	ldrb	r2, [r3, #17]
90017cb2:	7cdb      	ldrb	r3, [r3, #19]
90017cb4:	0952      	lsrs	r2, r2, #5
90017cb6:	f3c3 1342 	ubfx	r3, r3, #5, #3
90017cba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
90017cbe:	2b0b      	cmp	r3, #11
90017cc0:	bf18      	it	ne
90017cc2:	0040      	lslne	r0, r0, #1
90017cc4:	3003      	adds	r0, #3
90017cc6:	f020 0003 	bic.w	r0, r0, #3
90017cca:	4408      	add	r0, r1
90017ccc:	4770      	bx	lr
90017cce:	4b14      	ldr	r3, [pc, #80]	; (90017d20 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
90017cd0:	881b      	ldrh	r3, [r3, #0]
90017cd2:	4403      	add	r3, r0
90017cd4:	429a      	cmp	r2, r3
90017cd6:	da1a      	bge.n	90017d0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90017cd8:	4b12      	ldr	r3, [pc, #72]	; (90017d24 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
90017cda:	1a10      	subs	r0, r2, r0
90017cdc:	210e      	movs	r1, #14
90017cde:	681b      	ldr	r3, [r3, #0]
90017ce0:	fb01 3000 	mla	r0, r1, r0, r3
90017ce4:	7b03      	ldrb	r3, [r0, #12]
90017ce6:	f003 031f 	and.w	r3, r3, #31
90017cea:	2b0b      	cmp	r3, #11
90017cec:	d10b      	bne.n	90017d06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
90017cee:	8903      	ldrh	r3, [r0, #8]
90017cf0:	8940      	ldrh	r0, [r0, #10]
90017cf2:	4358      	muls	r0, r3
90017cf4:	4b09      	ldr	r3, [pc, #36]	; (90017d1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
90017cf6:	3003      	adds	r0, #3
90017cf8:	6819      	ldr	r1, [r3, #0]
90017cfa:	f020 0303 	bic.w	r3, r0, #3
90017cfe:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
90017d02:	4418      	add	r0, r3
90017d04:	4770      	bx	lr
90017d06:	2b0d      	cmp	r3, #13
90017d08:	d101      	bne.n	90017d0e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
90017d0a:	300d      	adds	r0, #13
90017d0c:	4770      	bx	lr
90017d0e:	2000      	movs	r0, #0
90017d10:	4770      	bx	lr
90017d12:	bf00      	nop
90017d14:	240264dc 	.word	0x240264dc
90017d18:	240264e4 	.word	0x240264e4
90017d1c:	240264c0 	.word	0x240264c0
90017d20:	240264e0 	.word	0x240264e0
90017d24:	240264c4 	.word	0x240264c4

90017d28 <_ZNK8touchgfx6Bitmap9getFormatEv>:
90017d28:	4a17      	ldr	r2, [pc, #92]	; (90017d88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
90017d2a:	b510      	push	{r4, lr}
90017d2c:	8803      	ldrh	r3, [r0, #0]
90017d2e:	8812      	ldrh	r2, [r2, #0]
90017d30:	4293      	cmp	r3, r2
90017d32:	d20c      	bcs.n	90017d4e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
90017d34:	4a15      	ldr	r2, [pc, #84]	; (90017d8c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
90017d36:	2114      	movs	r1, #20
90017d38:	6812      	ldr	r2, [r2, #0]
90017d3a:	fb01 2303 	mla	r3, r1, r3, r2
90017d3e:	7c58      	ldrb	r0, [r3, #17]
90017d40:	0942      	lsrs	r2, r0, #5
90017d42:	7cd8      	ldrb	r0, [r3, #19]
90017d44:	f3c0 1042 	ubfx	r0, r0, #5, #3
90017d48:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
90017d4c:	bd10      	pop	{r4, pc}
90017d4e:	4910      	ldr	r1, [pc, #64]	; (90017d90 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
90017d50:	8809      	ldrh	r1, [r1, #0]
90017d52:	4411      	add	r1, r2
90017d54:	428b      	cmp	r3, r1
90017d56:	da09      	bge.n	90017d6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
90017d58:	1a9b      	subs	r3, r3, r2
90017d5a:	4a0e      	ldr	r2, [pc, #56]	; (90017d94 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
90017d5c:	210e      	movs	r1, #14
90017d5e:	6812      	ldr	r2, [r2, #0]
90017d60:	fb01 2303 	mla	r3, r1, r3, r2
90017d64:	7b18      	ldrb	r0, [r3, #12]
90017d66:	f000 001f 	and.w	r0, r0, #31
90017d6a:	e7ef      	b.n	90017d4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90017d6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
90017d70:	4293      	cmp	r3, r2
90017d72:	d106      	bne.n	90017d82 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
90017d74:	f7f9 fb64 	bl	90011440 <_ZN8touchgfx3HAL3lcdEv>
90017d78:	6803      	ldr	r3, [r0, #0]
90017d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90017d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90017d80:	4718      	bx	r3
90017d82:	2000      	movs	r0, #0
90017d84:	e7e2      	b.n	90017d4c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
90017d86:	bf00      	nop
90017d88:	240264dc 	.word	0x240264dc
90017d8c:	240264e4 	.word	0x240264e4
90017d90:	240264e0 	.word	0x240264e0
90017d94:	240264c4 	.word	0x240264c4

90017d98 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
90017d98:	2010      	movs	r0, #16
90017d9a:	4770      	bx	lr

90017d9c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
90017d9c:	4b02      	ldr	r3, [pc, #8]	; (90017da8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
90017d9e:	8818      	ldrh	r0, [r3, #0]
90017da0:	0040      	lsls	r0, r0, #1
90017da2:	b280      	uxth	r0, r0
90017da4:	4770      	bx	lr
90017da6:	bf00      	nop
90017da8:	24026456 	.word	0x24026456

90017dac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
90017dac:	2bff      	cmp	r3, #255	; 0xff
90017dae:	d050      	beq.n	90017e52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
90017db0:	2a0b      	cmp	r2, #11
90017db2:	d04a      	beq.n	90017e4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
90017db4:	d80e      	bhi.n	90017dd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
90017db6:	2a03      	cmp	r2, #3
90017db8:	d03f      	beq.n	90017e3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
90017dba:	d804      	bhi.n	90017dc6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
90017dbc:	2a01      	cmp	r2, #1
90017dbe:	d03e      	beq.n	90017e3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
90017dc0:	d93f      	bls.n	90017e42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
90017dc2:	6b80      	ldr	r0, [r0, #56]	; 0x38
90017dc4:	4770      	bx	lr
90017dc6:	2a09      	cmp	r2, #9
90017dc8:	d03f      	beq.n	90017e4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
90017dca:	d83c      	bhi.n	90017e46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
90017dcc:	2a08      	cmp	r2, #8
90017dce:	d03a      	beq.n	90017e46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
90017dd0:	2000      	movs	r0, #0
90017dd2:	4770      	bx	lr
90017dd4:	2a2f      	cmp	r2, #47	; 0x2f
90017dd6:	d024      	beq.n	90017e22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
90017dd8:	d80d      	bhi.n	90017df6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
90017dda:	2a2d      	cmp	r2, #45	; 0x2d
90017ddc:	d014      	beq.n	90017e08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
90017dde:	d826      	bhi.n	90017e2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
90017de0:	2a2c      	cmp	r2, #44	; 0x2c
90017de2:	d1f5      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017de4:	684b      	ldr	r3, [r1, #4]
90017de6:	781b      	ldrb	r3, [r3, #0]
90017de8:	2b01      	cmp	r3, #1
90017dea:	d018      	beq.n	90017e1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
90017dec:	d323      	bcc.n	90017e36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
90017dee:	2b02      	cmp	r3, #2
90017df0:	d1ee      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017df2:	6880      	ldr	r0, [r0, #8]
90017df4:	4770      	bx	lr
90017df6:	2a31      	cmp	r2, #49	; 0x31
90017df8:	d004      	beq.n	90017e04 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
90017dfa:	d328      	bcc.n	90017e4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
90017dfc:	2a32      	cmp	r2, #50	; 0x32
90017dfe:	d026      	beq.n	90017e4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
90017e00:	2a33      	cmp	r2, #51	; 0x33
90017e02:	d1e5      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017e04:	6f00      	ldr	r0, [r0, #112]	; 0x70
90017e06:	4770      	bx	lr
90017e08:	684b      	ldr	r3, [r1, #4]
90017e0a:	781b      	ldrb	r3, [r3, #0]
90017e0c:	2b01      	cmp	r3, #1
90017e0e:	d004      	beq.n	90017e1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
90017e10:	d30b      	bcc.n	90017e2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
90017e12:	2b02      	cmp	r3, #2
90017e14:	d1dc      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017e16:	6900      	ldr	r0, [r0, #16]
90017e18:	4770      	bx	lr
90017e1a:	6a00      	ldr	r0, [r0, #32]
90017e1c:	4770      	bx	lr
90017e1e:	6980      	ldr	r0, [r0, #24]
90017e20:	4770      	bx	lr
90017e22:	684b      	ldr	r3, [r1, #4]
90017e24:	781b      	ldrb	r3, [r3, #0]
90017e26:	2b00      	cmp	r3, #0
90017e28:	d1d2      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017e2a:	6b00      	ldr	r0, [r0, #48]	; 0x30
90017e2c:	4770      	bx	lr
90017e2e:	684b      	ldr	r3, [r1, #4]
90017e30:	781b      	ldrb	r3, [r3, #0]
90017e32:	2b00      	cmp	r3, #0
90017e34:	d1cc      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017e36:	6a80      	ldr	r0, [r0, #40]	; 0x28
90017e38:	4770      	bx	lr
90017e3a:	6c80      	ldr	r0, [r0, #72]	; 0x48
90017e3c:	4770      	bx	lr
90017e3e:	6d00      	ldr	r0, [r0, #80]	; 0x50
90017e40:	4770      	bx	lr
90017e42:	6c00      	ldr	r0, [r0, #64]	; 0x40
90017e44:	4770      	bx	lr
90017e46:	6d80      	ldr	r0, [r0, #88]	; 0x58
90017e48:	4770      	bx	lr
90017e4a:	6e00      	ldr	r0, [r0, #96]	; 0x60
90017e4c:	4770      	bx	lr
90017e4e:	6e80      	ldr	r0, [r0, #104]	; 0x68
90017e50:	4770      	bx	lr
90017e52:	2a0b      	cmp	r2, #11
90017e54:	d049      	beq.n	90017eea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90017e56:	d80e      	bhi.n	90017e76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
90017e58:	2a03      	cmp	r2, #3
90017e5a:	d040      	beq.n	90017ede <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
90017e5c:	d804      	bhi.n	90017e68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
90017e5e:	2a01      	cmp	r2, #1
90017e60:	d03f      	beq.n	90017ee2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
90017e62:	d940      	bls.n	90017ee6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
90017e64:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90017e66:	4770      	bx	lr
90017e68:	2a09      	cmp	r2, #9
90017e6a:	d03e      	beq.n	90017eea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
90017e6c:	d801      	bhi.n	90017e72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
90017e6e:	2a08      	cmp	r2, #8
90017e70:	d1ae      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017e72:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
90017e74:	4770      	bx	lr
90017e76:	2a2f      	cmp	r2, #47	; 0x2f
90017e78:	d024      	beq.n	90017ec4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
90017e7a:	d80d      	bhi.n	90017e98 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
90017e7c:	2a2d      	cmp	r2, #45	; 0x2d
90017e7e:	d014      	beq.n	90017eaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
90017e80:	d826      	bhi.n	90017ed0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
90017e82:	2a2c      	cmp	r2, #44	; 0x2c
90017e84:	d1a4      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017e86:	684b      	ldr	r3, [r1, #4]
90017e88:	781b      	ldrb	r3, [r3, #0]
90017e8a:	2b01      	cmp	r3, #1
90017e8c:	d018      	beq.n	90017ec0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
90017e8e:	d324      	bcc.n	90017eda <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
90017e90:	2b02      	cmp	r3, #2
90017e92:	d19d      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017e94:	68c0      	ldr	r0, [r0, #12]
90017e96:	4770      	bx	lr
90017e98:	2a31      	cmp	r2, #49	; 0x31
90017e9a:	d004      	beq.n	90017ea6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
90017e9c:	d327      	bcc.n	90017eee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
90017e9e:	2a32      	cmp	r2, #50	; 0x32
90017ea0:	d025      	beq.n	90017eee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
90017ea2:	2a33      	cmp	r2, #51	; 0x33
90017ea4:	d194      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017ea6:	6f40      	ldr	r0, [r0, #116]	; 0x74
90017ea8:	4770      	bx	lr
90017eaa:	684b      	ldr	r3, [r1, #4]
90017eac:	781b      	ldrb	r3, [r3, #0]
90017eae:	2b01      	cmp	r3, #1
90017eb0:	d004      	beq.n	90017ebc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
90017eb2:	d30b      	bcc.n	90017ecc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
90017eb4:	2b02      	cmp	r3, #2
90017eb6:	d18b      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017eb8:	6940      	ldr	r0, [r0, #20]
90017eba:	4770      	bx	lr
90017ebc:	6a40      	ldr	r0, [r0, #36]	; 0x24
90017ebe:	4770      	bx	lr
90017ec0:	69c0      	ldr	r0, [r0, #28]
90017ec2:	4770      	bx	lr
90017ec4:	684b      	ldr	r3, [r1, #4]
90017ec6:	781b      	ldrb	r3, [r3, #0]
90017ec8:	2b00      	cmp	r3, #0
90017eca:	d181      	bne.n	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017ecc:	6b40      	ldr	r0, [r0, #52]	; 0x34
90017ece:	4770      	bx	lr
90017ed0:	684b      	ldr	r3, [r1, #4]
90017ed2:	781b      	ldrb	r3, [r3, #0]
90017ed4:	2b00      	cmp	r3, #0
90017ed6:	f47f af7b 	bne.w	90017dd0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
90017eda:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
90017edc:	4770      	bx	lr
90017ede:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
90017ee0:	4770      	bx	lr
90017ee2:	6d40      	ldr	r0, [r0, #84]	; 0x54
90017ee4:	4770      	bx	lr
90017ee6:	6c40      	ldr	r0, [r0, #68]	; 0x44
90017ee8:	4770      	bx	lr
90017eea:	6e40      	ldr	r0, [r0, #100]	; 0x64
90017eec:	4770      	bx	lr
90017eee:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
90017ef0:	4770      	bx	lr

90017ef2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90017ef2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017ef6:	b087      	sub	sp, #28
90017ef8:	9815      	ldr	r0, [sp, #84]	; 0x54
90017efa:	9205      	str	r2, [sp, #20]
90017efc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90017f00:	9101      	str	r1, [sp, #4]
90017f02:	9202      	str	r2, [sp, #8]
90017f04:	6841      	ldr	r1, [r0, #4]
90017f06:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90017f0a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90017f0e:	fb01 2404 	mla	r4, r1, r4, r2
90017f12:	6802      	ldr	r2, [r0, #0]
90017f14:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90017f18:	f8de 2000 	ldr.w	r2, [lr]
90017f1c:	9203      	str	r2, [sp, #12]
90017f1e:	f8de 2004 	ldr.w	r2, [lr, #4]
90017f22:	3204      	adds	r2, #4
90017f24:	9204      	str	r2, [sp, #16]
90017f26:	9a02      	ldr	r2, [sp, #8]
90017f28:	43d6      	mvns	r6, r2
90017f2a:	b2f6      	uxtb	r6, r6
90017f2c:	9a01      	ldr	r2, [sp, #4]
90017f2e:	2a00      	cmp	r2, #0
90017f30:	dc03      	bgt.n	90017f3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90017f32:	9a05      	ldr	r2, [sp, #20]
90017f34:	2a00      	cmp	r2, #0
90017f36:	f340 8129 	ble.w	9001818c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90017f3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
90017f3c:	f9be c008 	ldrsh.w	ip, [lr, #8]
90017f40:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90017f44:	9a12      	ldr	r2, [sp, #72]	; 0x48
90017f46:	f9be 700c 	ldrsh.w	r7, [lr, #12]
90017f4a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90017f4e:	2b00      	cmp	r3, #0
90017f50:	dd0e      	ble.n	90017f70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
90017f52:	1408      	asrs	r0, r1, #16
90017f54:	d405      	bmi.n	90017f62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017f56:	4560      	cmp	r0, ip
90017f58:	da03      	bge.n	90017f62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017f5a:	1410      	asrs	r0, r2, #16
90017f5c:	d401      	bmi.n	90017f62 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90017f5e:	42b8      	cmp	r0, r7
90017f60:	db07      	blt.n	90017f72 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90017f62:	9813      	ldr	r0, [sp, #76]	; 0x4c
90017f64:	3b01      	subs	r3, #1
90017f66:	3402      	adds	r4, #2
90017f68:	4401      	add	r1, r0
90017f6a:	9814      	ldr	r0, [sp, #80]	; 0x50
90017f6c:	4402      	add	r2, r0
90017f6e:	e7ee      	b.n	90017f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
90017f70:	d071      	beq.n	90018056 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90017f72:	1e58      	subs	r0, r3, #1
90017f74:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90017f76:	fb05 1500 	mla	r5, r5, r0, r1
90017f7a:	142d      	asrs	r5, r5, #16
90017f7c:	d45f      	bmi.n	9001803e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017f7e:	4565      	cmp	r5, ip
90017f80:	da5d      	bge.n	9001803e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017f82:	9d14      	ldr	r5, [sp, #80]	; 0x50
90017f84:	fb05 2000 	mla	r0, r5, r0, r2
90017f88:	1400      	asrs	r0, r0, #16
90017f8a:	d458      	bmi.n	9001803e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017f8c:	42b8      	cmp	r0, r7
90017f8e:	da56      	bge.n	9001803e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
90017f90:	4699      	mov	r9, r3
90017f92:	46a2      	mov	sl, r4
90017f94:	f8bd b008 	ldrh.w	fp, [sp, #8]
90017f98:	f1b9 0f00 	cmp.w	r9, #0
90017f9c:	dd57      	ble.n	9001804e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
90017f9e:	ea4f 4c22 	mov.w	ip, r2, asr #16
90017fa2:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90017fa6:	9803      	ldr	r0, [sp, #12]
90017fa8:	140d      	asrs	r5, r1, #16
90017faa:	f109 39ff 	add.w	r9, r9, #4294967295
90017fae:	fb07 000c 	mla	r0, r7, ip, r0
90017fb2:	5d40      	ldrb	r0, [r0, r5]
90017fb4:	9d04      	ldr	r5, [sp, #16]
90017fb6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
90017fba:	f8ba 5000 	ldrh.w	r5, [sl]
90017fbe:	ea4f 2c20 	mov.w	ip, r0, asr #8
90017fc2:	122f      	asrs	r7, r5, #8
90017fc4:	ea4f 08e5 	mov.w	r8, r5, asr #3
90017fc8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90017fcc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90017fd0:	00ed      	lsls	r5, r5, #3
90017fd2:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
90017fd6:	fb17 f706 	smulbb	r7, r7, r6
90017fda:	b2ed      	uxtb	r5, r5
90017fdc:	fb18 f806 	smulbb	r8, r8, r6
90017fe0:	fb0c 7c0b 	mla	ip, ip, fp, r7
90017fe4:	10c7      	asrs	r7, r0, #3
90017fe6:	fb15 f506 	smulbb	r5, r5, r6
90017fea:	00c0      	lsls	r0, r0, #3
90017fec:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90017ff0:	fa1f fc8c 	uxth.w	ip, ip
90017ff4:	b2c0      	uxtb	r0, r0
90017ff6:	fb07 870b 	mla	r7, r7, fp, r8
90017ffa:	fb00 500b 	mla	r0, r0, fp, r5
90017ffe:	f10c 0501 	add.w	r5, ip, #1
90018002:	b2bf      	uxth	r7, r7
90018004:	b280      	uxth	r0, r0
90018006:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001800a:	f107 0801 	add.w	r8, r7, #1
9001800e:	1c45      	adds	r5, r0, #1
90018010:	eb08 2817 	add.w	r8, r8, r7, lsr #8
90018014:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018018:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001801c:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001801e:	ea4f 1858 	mov.w	r8, r8, lsr #5
90018022:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90018026:	4401      	add	r1, r0
90018028:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001802c:	9814      	ldr	r0, [sp, #80]	; 0x50
9001802e:	ea45 0c0c 	orr.w	ip, r5, ip
90018032:	4402      	add	r2, r0
90018034:	ea4c 0c08 	orr.w	ip, ip, r8
90018038:	f82a cb02 	strh.w	ip, [sl], #2
9001803c:	e7ac      	b.n	90017f98 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001803e:	f04f 0800 	mov.w	r8, #0
90018042:	f8bd a008 	ldrh.w	sl, [sp, #8]
90018046:	eb03 0008 	add.w	r0, r3, r8
9001804a:	2800      	cmp	r0, #0
9001804c:	dc41      	bgt.n	900180d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001804e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018052:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018056:	9b01      	ldr	r3, [sp, #4]
90018058:	2b00      	cmp	r3, #0
9001805a:	f340 8097 	ble.w	9001818c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001805e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90018062:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018064:	ee30 0a04 	vadd.f32	s0, s0, s8
90018068:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001806c:	eef0 6a62 	vmov.f32	s13, s5
90018070:	eec7 7a00 	vdiv.f32	s15, s14, s0
90018074:	ee31 1a05 	vadd.f32	s2, s2, s10
90018078:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001807c:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
90018080:	eef0 6a43 	vmov.f32	s13, s6
90018084:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90018088:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001808c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018090:	ee61 7a27 	vmul.f32	s15, s2, s15
90018094:	ee77 2a62 	vsub.f32	s5, s14, s5
90018098:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001809c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900180a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900180a4:	ee12 2a90 	vmov	r2, s5
900180a8:	eef0 2a47 	vmov.f32	s5, s14
900180ac:	fb92 f3f3 	sdiv	r3, r2, r3
900180b0:	ee13 2a10 	vmov	r2, s6
900180b4:	9313      	str	r3, [sp, #76]	; 0x4c
900180b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
900180b8:	eeb0 3a67 	vmov.f32	s6, s15
900180bc:	fb92 f3f3 	sdiv	r3, r2, r3
900180c0:	9314      	str	r3, [sp, #80]	; 0x50
900180c2:	9b01      	ldr	r3, [sp, #4]
900180c4:	9a05      	ldr	r2, [sp, #20]
900180c6:	3b01      	subs	r3, #1
900180c8:	9301      	str	r3, [sp, #4]
900180ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
900180cc:	bf08      	it	eq
900180ce:	4613      	moveq	r3, r2
900180d0:	e72c      	b.n	90017f2c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900180d2:	140f      	asrs	r7, r1, #16
900180d4:	d453      	bmi.n	9001817e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900180d6:	f8de 5008 	ldr.w	r5, [lr, #8]
900180da:	42bd      	cmp	r5, r7
900180dc:	dd4f      	ble.n	9001817e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900180de:	ea5f 4c22 	movs.w	ip, r2, asr #16
900180e2:	d44c      	bmi.n	9001817e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900180e4:	f8de 000c 	ldr.w	r0, [lr, #12]
900180e8:	4560      	cmp	r0, ip
900180ea:	dd48      	ble.n	9001817e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900180ec:	9803      	ldr	r0, [sp, #12]
900180ee:	b22d      	sxth	r5, r5
900180f0:	fb0c 0505 	mla	r5, ip, r5, r0
900180f4:	5de8      	ldrb	r0, [r5, r7]
900180f6:	9d04      	ldr	r5, [sp, #16]
900180f8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900180fc:	f06f 0501 	mvn.w	r5, #1
90018100:	fb05 fb08 	mul.w	fp, r5, r8
90018104:	ea4f 2c20 	mov.w	ip, r0, asr #8
90018108:	f834 500b 	ldrh.w	r5, [r4, fp]
9001810c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018110:	122f      	asrs	r7, r5, #8
90018112:	ea4f 09e5 	mov.w	r9, r5, asr #3
90018116:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001811a:	00ed      	lsls	r5, r5, #3
9001811c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90018120:	fb17 f706 	smulbb	r7, r7, r6
90018124:	b2ed      	uxtb	r5, r5
90018126:	fb19 f906 	smulbb	r9, r9, r6
9001812a:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001812e:	10c7      	asrs	r7, r0, #3
90018130:	fb15 f506 	smulbb	r5, r5, r6
90018134:	00c0      	lsls	r0, r0, #3
90018136:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001813a:	fa1f fc8c 	uxth.w	ip, ip
9001813e:	b2c0      	uxtb	r0, r0
90018140:	fb07 970a 	mla	r7, r7, sl, r9
90018144:	fb00 500a 	mla	r0, r0, sl, r5
90018148:	f10c 0501 	add.w	r5, ip, #1
9001814c:	b2bf      	uxth	r7, r7
9001814e:	b280      	uxth	r0, r0
90018150:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018154:	f107 0901 	add.w	r9, r7, #1
90018158:	1c45      	adds	r5, r0, #1
9001815a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001815e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018162:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90018166:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001816a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001816e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90018172:	ea45 0c0c 	orr.w	ip, r5, ip
90018176:	ea4c 0c09 	orr.w	ip, ip, r9
9001817a:	f824 c00b 	strh.w	ip, [r4, fp]
9001817e:	9813      	ldr	r0, [sp, #76]	; 0x4c
90018180:	f108 38ff 	add.w	r8, r8, #4294967295
90018184:	4401      	add	r1, r0
90018186:	9814      	ldr	r0, [sp, #80]	; 0x50
90018188:	4402      	add	r2, r0
9001818a:	e75c      	b.n	90018046 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001818c:	b007      	add	sp, #28
9001818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018192 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018192:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018196:	b085      	sub	sp, #20
90018198:	4693      	mov	fp, r2
9001819a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001819e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
900181a0:	9d16      	ldr	r5, [sp, #88]	; 0x58
900181a2:	6870      	ldr	r0, [r6, #4]
900181a4:	9100      	str	r1, [sp, #0]
900181a6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900181aa:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
900181ae:	fb00 2404 	mla	r4, r0, r4, r2
900181b2:	6832      	ldr	r2, [r6, #0]
900181b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900181b8:	682a      	ldr	r2, [r5, #0]
900181ba:	9201      	str	r2, [sp, #4]
900181bc:	686a      	ldr	r2, [r5, #4]
900181be:	3204      	adds	r2, #4
900181c0:	9202      	str	r2, [sp, #8]
900181c2:	9a00      	ldr	r2, [sp, #0]
900181c4:	2a00      	cmp	r2, #0
900181c6:	dc03      	bgt.n	900181d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900181c8:	f1bb 0f00 	cmp.w	fp, #0
900181cc:	f340 80a0 	ble.w	90018310 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
900181d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900181d2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900181d6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900181da:	9a10      	ldr	r2, [sp, #64]	; 0x40
900181dc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900181e0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900181e4:	2b00      	cmp	r3, #0
900181e6:	dd0c      	ble.n	90018202 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
900181e8:	1406      	asrs	r6, r0, #16
900181ea:	d405      	bmi.n	900181f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900181ec:	454e      	cmp	r6, r9
900181ee:	da03      	bge.n	900181f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900181f0:	1416      	asrs	r6, r2, #16
900181f2:	d401      	bmi.n	900181f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
900181f4:	4546      	cmp	r6, r8
900181f6:	db05      	blt.n	90018204 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900181f8:	4470      	add	r0, lr
900181fa:	4462      	add	r2, ip
900181fc:	3b01      	subs	r3, #1
900181fe:	3402      	adds	r4, #2
90018200:	e7f0      	b.n	900181e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90018202:	d00f      	beq.n	90018224 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90018204:	1e5e      	subs	r6, r3, #1
90018206:	fb0e 0706 	mla	r7, lr, r6, r0
9001820a:	143f      	asrs	r7, r7, #16
9001820c:	d541      	bpl.n	90018292 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
9001820e:	eb04 0643 	add.w	r6, r4, r3, lsl #1
90018212:	4698      	mov	r8, r3
90018214:	9603      	str	r6, [sp, #12]
90018216:	f1b8 0f00 	cmp.w	r8, #0
9001821a:	dc59      	bgt.n	900182d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001821c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018220:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018224:	9b00      	ldr	r3, [sp, #0]
90018226:	2b00      	cmp	r3, #0
90018228:	dd72      	ble.n	90018310 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001822a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001822e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018230:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018234:	eeb0 6a62 	vmov.f32	s12, s5
90018238:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001823c:	ee31 1a05 	vadd.f32	s2, s2, s10
90018240:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018244:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018248:	eeb0 6a43 	vmov.f32	s12, s6
9001824c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018250:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90018254:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018258:	ee61 7a27 	vmul.f32	s15, s2, s15
9001825c:	ee77 2a62 	vsub.f32	s5, s14, s5
90018260:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018264:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018268:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001826c:	ee12 2a90 	vmov	r2, s5
90018270:	eef0 2a47 	vmov.f32	s5, s14
90018274:	fb92 fef3 	sdiv	lr, r2, r3
90018278:	ee13 2a10 	vmov	r2, s6
9001827c:	eeb0 3a67 	vmov.f32	s6, s15
90018280:	fb92 fcf3 	sdiv	ip, r2, r3
90018284:	9b00      	ldr	r3, [sp, #0]
90018286:	3b01      	subs	r3, #1
90018288:	9300      	str	r3, [sp, #0]
9001828a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001828c:	bf08      	it	eq
9001828e:	465b      	moveq	r3, fp
90018290:	e797      	b.n	900181c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90018292:	454f      	cmp	r7, r9
90018294:	dabb      	bge.n	9001820e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90018296:	fb0c 2606 	mla	r6, ip, r6, r2
9001829a:	1436      	asrs	r6, r6, #16
9001829c:	d4b7      	bmi.n	9001820e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001829e:	4546      	cmp	r6, r8
900182a0:	dab5      	bge.n	9001820e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900182a2:	461e      	mov	r6, r3
900182a4:	46a0      	mov	r8, r4
900182a6:	2e00      	cmp	r6, #0
900182a8:	ddb8      	ble.n	9001821c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900182aa:	1417      	asrs	r7, r2, #16
900182ac:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
900182b0:	9901      	ldr	r1, [sp, #4]
900182b2:	ea4f 4920 	mov.w	r9, r0, asr #16
900182b6:	4462      	add	r2, ip
900182b8:	4470      	add	r0, lr
900182ba:	fb0a 1707 	mla	r7, sl, r7, r1
900182be:	9902      	ldr	r1, [sp, #8]
900182c0:	3e01      	subs	r6, #1
900182c2:	f817 7009 	ldrb.w	r7, [r7, r9]
900182c6:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
900182ca:	f828 7b02 	strh.w	r7, [r8], #2
900182ce:	e7ea      	b.n	900182a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
900182d0:	ea5f 4920 	movs.w	r9, r0, asr #16
900182d4:	d417      	bmi.n	90018306 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900182d6:	68ae      	ldr	r6, [r5, #8]
900182d8:	454e      	cmp	r6, r9
900182da:	dd14      	ble.n	90018306 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900182dc:	ea5f 4a22 	movs.w	sl, r2, asr #16
900182e0:	d411      	bmi.n	90018306 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900182e2:	68ef      	ldr	r7, [r5, #12]
900182e4:	4557      	cmp	r7, sl
900182e6:	dd0e      	ble.n	90018306 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
900182e8:	9f01      	ldr	r7, [sp, #4]
900182ea:	b236      	sxth	r6, r6
900182ec:	f06f 0101 	mvn.w	r1, #1
900182f0:	fb0a 7606 	mla	r6, sl, r6, r7
900182f4:	9f02      	ldr	r7, [sp, #8]
900182f6:	f816 6009 	ldrb.w	r6, [r6, r9]
900182fa:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
900182fe:	fb01 f608 	mul.w	r6, r1, r8
90018302:	9903      	ldr	r1, [sp, #12]
90018304:	538f      	strh	r7, [r1, r6]
90018306:	4470      	add	r0, lr
90018308:	4462      	add	r2, ip
9001830a:	f108 38ff 	add.w	r8, r8, #4294967295
9001830e:	e782      	b.n	90018216 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90018310:	b005      	add	sp, #20
90018312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018316 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018316:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001831a:	b087      	sub	sp, #28
9001831c:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001831e:	9205      	str	r2, [sp, #20]
90018320:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018324:	9102      	str	r1, [sp, #8]
90018326:	9203      	str	r2, [sp, #12]
90018328:	6861      	ldr	r1, [r4, #4]
9001832a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001832e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90018332:	fb01 2000 	mla	r0, r1, r0, r2
90018336:	6822      	ldr	r2, [r4, #0]
90018338:	eb02 0240 	add.w	r2, r2, r0, lsl #1
9001833c:	9200      	str	r2, [sp, #0]
9001833e:	f8dc 2000 	ldr.w	r2, [ip]
90018342:	9204      	str	r2, [sp, #16]
90018344:	f8dc 2004 	ldr.w	r2, [ip, #4]
90018348:	3204      	adds	r2, #4
9001834a:	9201      	str	r2, [sp, #4]
9001834c:	9a03      	ldr	r2, [sp, #12]
9001834e:	43d5      	mvns	r5, r2
90018350:	b2ed      	uxtb	r5, r5
90018352:	9a02      	ldr	r2, [sp, #8]
90018354:	2a00      	cmp	r2, #0
90018356:	dc03      	bgt.n	90018360 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90018358:	9a05      	ldr	r2, [sp, #20]
9001835a:	2a00      	cmp	r2, #0
9001835c:	f340 812c 	ble.w	900185b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90018360:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018362:	f9bc e008 	ldrsh.w	lr, [ip, #8]
90018366:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001836a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001836c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
90018370:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018374:	2b00      	cmp	r3, #0
90018376:	dd10      	ble.n	9001839a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90018378:	140c      	asrs	r4, r1, #16
9001837a:	d405      	bmi.n	90018388 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001837c:	4574      	cmp	r4, lr
9001837e:	da03      	bge.n	90018388 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90018380:	1414      	asrs	r4, r2, #16
90018382:	d401      	bmi.n	90018388 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90018384:	42bc      	cmp	r4, r7
90018386:	db09      	blt.n	9001839c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90018388:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001838a:	3b01      	subs	r3, #1
9001838c:	9800      	ldr	r0, [sp, #0]
9001838e:	4421      	add	r1, r4
90018390:	9c14      	ldr	r4, [sp, #80]	; 0x50
90018392:	3002      	adds	r0, #2
90018394:	4422      	add	r2, r4
90018396:	9000      	str	r0, [sp, #0]
90018398:	e7ec      	b.n	90018374 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001839a:	d071      	beq.n	90018480 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
9001839c:	1e5c      	subs	r4, r3, #1
9001839e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
900183a0:	fb06 1604 	mla	r6, r6, r4, r1
900183a4:	1436      	asrs	r6, r6, #16
900183a6:	d45d      	bmi.n	90018464 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
900183a8:	4576      	cmp	r6, lr
900183aa:	da5b      	bge.n	90018464 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
900183ac:	9e14      	ldr	r6, [sp, #80]	; 0x50
900183ae:	fb06 2404 	mla	r4, r6, r4, r2
900183b2:	1424      	asrs	r4, r4, #16
900183b4:	d456      	bmi.n	90018464 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
900183b6:	42bc      	cmp	r4, r7
900183b8:	da54      	bge.n	90018464 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
900183ba:	4698      	mov	r8, r3
900183bc:	f8dd 9000 	ldr.w	r9, [sp]
900183c0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
900183c4:	f1b8 0f00 	cmp.w	r8, #0
900183c8:	dd54      	ble.n	90018474 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
900183ca:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
900183ce:	1414      	asrs	r4, r2, #16
900183d0:	9804      	ldr	r0, [sp, #16]
900183d2:	140e      	asrs	r6, r1, #16
900183d4:	f108 38ff 	add.w	r8, r8, #4294967295
900183d8:	fb07 0404 	mla	r4, r7, r4, r0
900183dc:	9801      	ldr	r0, [sp, #4]
900183de:	f814 e006 	ldrb.w	lr, [r4, r6]
900183e2:	f8b9 4000 	ldrh.w	r4, [r9]
900183e6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
900183ea:	1227      	asrs	r7, r4, #8
900183ec:	eb00 0b0e 	add.w	fp, r0, lr
900183f0:	f810 e00e 	ldrb.w	lr, [r0, lr]
900183f4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900183f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
900183fa:	f89b 6002 	ldrb.w	r6, [fp, #2]
900183fe:	f89b b001 	ldrb.w	fp, [fp, #1]
90018402:	4401      	add	r1, r0
90018404:	fb16 f60a 	smulbb	r6, r6, sl
90018408:	9814      	ldr	r0, [sp, #80]	; 0x50
9001840a:	fb1b fb0a 	smulbb	fp, fp, sl
9001840e:	fb07 6705 	mla	r7, r7, r5, r6
90018412:	10e6      	asrs	r6, r4, #3
90018414:	00e4      	lsls	r4, r4, #3
90018416:	4402      	add	r2, r0
90018418:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001841c:	b2bf      	uxth	r7, r7
9001841e:	b2e4      	uxtb	r4, r4
90018420:	fb06 b605 	mla	r6, r6, r5, fp
90018424:	fb14 f405 	smulbb	r4, r4, r5
90018428:	b2b6      	uxth	r6, r6
9001842a:	fb0e 4e0a 	mla	lr, lr, sl, r4
9001842e:	1c7c      	adds	r4, r7, #1
90018430:	f106 0b01 	add.w	fp, r6, #1
90018434:	fa1f fe8e 	uxth.w	lr, lr
90018438:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001843c:	f10e 0401 	add.w	r4, lr, #1
90018440:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
90018444:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90018448:	eb04 241e 	add.w	r4, r4, lr, lsr #8
9001844c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90018450:	f3c4 24c4 	ubfx	r4, r4, #11, #5
90018454:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90018458:	4327      	orrs	r7, r4
9001845a:	ea47 070b 	orr.w	r7, r7, fp
9001845e:	f829 7b02 	strh.w	r7, [r9], #2
90018462:	e7af      	b.n	900183c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
90018464:	f04f 0e00 	mov.w	lr, #0
90018468:	f8bd 900c 	ldrh.w	r9, [sp, #12]
9001846c:	eb03 040e 	add.w	r4, r3, lr
90018470:	2c00      	cmp	r4, #0
90018472:	dc43      	bgt.n	900184fc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
90018474:	9a00      	ldr	r2, [sp, #0]
90018476:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001847a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001847e:	9300      	str	r3, [sp, #0]
90018480:	9b02      	ldr	r3, [sp, #8]
90018482:	2b00      	cmp	r3, #0
90018484:	f340 8098 	ble.w	900185b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90018488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001848c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001848e:	ee30 0a04 	vadd.f32	s0, s0, s8
90018492:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018496:	eef0 6a62 	vmov.f32	s13, s5
9001849a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001849e:	ee31 1a05 	vadd.f32	s2, s2, s10
900184a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900184a6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
900184aa:	eef0 6a43 	vmov.f32	s13, s6
900184ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900184b2:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
900184b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900184ba:	ee61 7a27 	vmul.f32	s15, s2, s15
900184be:	ee77 2a62 	vsub.f32	s5, s14, s5
900184c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900184c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900184ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900184ce:	ee12 2a90 	vmov	r2, s5
900184d2:	eef0 2a47 	vmov.f32	s5, s14
900184d6:	fb92 f3f3 	sdiv	r3, r2, r3
900184da:	ee13 2a10 	vmov	r2, s6
900184de:	9313      	str	r3, [sp, #76]	; 0x4c
900184e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900184e2:	eeb0 3a67 	vmov.f32	s6, s15
900184e6:	fb92 f3f3 	sdiv	r3, r2, r3
900184ea:	9314      	str	r3, [sp, #80]	; 0x50
900184ec:	9b02      	ldr	r3, [sp, #8]
900184ee:	9a05      	ldr	r2, [sp, #20]
900184f0:	3b01      	subs	r3, #1
900184f2:	9302      	str	r3, [sp, #8]
900184f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
900184f6:	bf08      	it	eq
900184f8:	4613      	moveq	r3, r2
900184fa:	e72a      	b.n	90018352 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900184fc:	140f      	asrs	r7, r1, #16
900184fe:	d454      	bmi.n	900185aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90018500:	f8dc 6008 	ldr.w	r6, [ip, #8]
90018504:	42be      	cmp	r6, r7
90018506:	dd50      	ble.n	900185aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90018508:	ea5f 4822 	movs.w	r8, r2, asr #16
9001850c:	d44d      	bmi.n	900185aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001850e:	f8dc 400c 	ldr.w	r4, [ip, #12]
90018512:	4544      	cmp	r4, r8
90018514:	dd49      	ble.n	900185aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90018516:	9c04      	ldr	r4, [sp, #16]
90018518:	b236      	sxth	r6, r6
9001851a:	f06f 0001 	mvn.w	r0, #1
9001851e:	fb08 4606 	mla	r6, r8, r6, r4
90018522:	9c01      	ldr	r4, [sp, #4]
90018524:	fb00 fa0e 	mul.w	sl, r0, lr
90018528:	9800      	ldr	r0, [sp, #0]
9001852a:	f816 8007 	ldrb.w	r8, [r6, r7]
9001852e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90018532:	eb04 0b08 	add.w	fp, r4, r8
90018536:	f830 400a 	ldrh.w	r4, [r0, sl]
9001853a:	9801      	ldr	r0, [sp, #4]
9001853c:	f89b 6002 	ldrb.w	r6, [fp, #2]
90018540:	1227      	asrs	r7, r4, #8
90018542:	f89b b001 	ldrb.w	fp, [fp, #1]
90018546:	fb16 f609 	smulbb	r6, r6, r9
9001854a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001854e:	f810 8008 	ldrb.w	r8, [r0, r8]
90018552:	fb1b fb09 	smulbb	fp, fp, r9
90018556:	fb07 6705 	mla	r7, r7, r5, r6
9001855a:	10e6      	asrs	r6, r4, #3
9001855c:	00e4      	lsls	r4, r4, #3
9001855e:	9800      	ldr	r0, [sp, #0]
90018560:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018564:	b2bf      	uxth	r7, r7
90018566:	b2e4      	uxtb	r4, r4
90018568:	fb06 b605 	mla	r6, r6, r5, fp
9001856c:	fb14 f405 	smulbb	r4, r4, r5
90018570:	b2b6      	uxth	r6, r6
90018572:	fb08 4809 	mla	r8, r8, r9, r4
90018576:	1c7c      	adds	r4, r7, #1
90018578:	f106 0b01 	add.w	fp, r6, #1
9001857c:	fa1f f888 	uxth.w	r8, r8
90018580:	eb04 2717 	add.w	r7, r4, r7, lsr #8
90018584:	f108 0401 	add.w	r4, r8, #1
90018588:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001858c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90018590:	eb04 2418 	add.w	r4, r4, r8, lsr #8
90018594:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
90018598:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001859c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
900185a0:	4327      	orrs	r7, r4
900185a2:	ea47 070b 	orr.w	r7, r7, fp
900185a6:	f820 700a 	strh.w	r7, [r0, sl]
900185aa:	9813      	ldr	r0, [sp, #76]	; 0x4c
900185ac:	f10e 3eff 	add.w	lr, lr, #4294967295
900185b0:	4401      	add	r1, r0
900185b2:	9814      	ldr	r0, [sp, #80]	; 0x50
900185b4:	4402      	add	r2, r0
900185b6:	e759      	b.n	9001846c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
900185b8:	b007      	add	sp, #28
900185ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

900185c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900185c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900185c4:	b085      	sub	sp, #20
900185c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900185ca:	9e13      	ldr	r6, [sp, #76]	; 0x4c
900185cc:	9d16      	ldr	r5, [sp, #88]	; 0x58
900185ce:	9203      	str	r2, [sp, #12]
900185d0:	6870      	ldr	r0, [r6, #4]
900185d2:	686f      	ldr	r7, [r5, #4]
900185d4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
900185d8:	3704      	adds	r7, #4
900185da:	9101      	str	r1, [sp, #4]
900185dc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900185e0:	fb00 2404 	mla	r4, r0, r4, r2
900185e4:	6832      	ldr	r2, [r6, #0]
900185e6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900185ea:	682a      	ldr	r2, [r5, #0]
900185ec:	9202      	str	r2, [sp, #8]
900185ee:	9a01      	ldr	r2, [sp, #4]
900185f0:	2a00      	cmp	r2, #0
900185f2:	dc03      	bgt.n	900185fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900185f4:	9a03      	ldr	r2, [sp, #12]
900185f6:	2a00      	cmp	r2, #0
900185f8:	f340 80cc 	ble.w	90018794 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
900185fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900185fe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
90018602:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90018606:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018608:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001860c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018610:	2b00      	cmp	r3, #0
90018612:	dd0d      	ble.n	90018630 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90018614:	1406      	asrs	r6, r0, #16
90018616:	d405      	bmi.n	90018624 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90018618:	454e      	cmp	r6, r9
9001861a:	da03      	bge.n	90018624 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001861c:	1416      	asrs	r6, r2, #16
9001861e:	d401      	bmi.n	90018624 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
90018620:	4546      	cmp	r6, r8
90018622:	db06      	blt.n	90018632 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90018624:	9e12      	ldr	r6, [sp, #72]	; 0x48
90018626:	4460      	add	r0, ip
90018628:	3b01      	subs	r3, #1
9001862a:	3402      	adds	r4, #2
9001862c:	4432      	add	r2, r6
9001862e:	e7ef      	b.n	90018610 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
90018630:	d00f      	beq.n	90018652 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90018632:	1e5e      	subs	r6, r3, #1
90018634:	fb0c 0e06 	mla	lr, ip, r6, r0
90018638:	ea5f 4e2e 	movs.w	lr, lr, asr #16
9001863c:	d543      	bpl.n	900186c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
9001863e:	4698      	mov	r8, r3
90018640:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
90018644:	f1b8 0f00 	cmp.w	r8, #0
90018648:	dc71      	bgt.n	9001872e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
9001864a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001864e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018652:	9b01      	ldr	r3, [sp, #4]
90018654:	2b00      	cmp	r3, #0
90018656:	f340 809d 	ble.w	90018794 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001865a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001865e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018660:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018664:	eeb0 6a62 	vmov.f32	s12, s5
90018668:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001866c:	ee31 1a05 	vadd.f32	s2, s2, s10
90018670:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018674:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018678:	eeb0 6a43 	vmov.f32	s12, s6
9001867c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018680:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90018684:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018688:	ee61 7a27 	vmul.f32	s15, s2, s15
9001868c:	ee77 2a62 	vsub.f32	s5, s14, s5
90018690:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018694:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018698:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001869c:	ee12 2a90 	vmov	r2, s5
900186a0:	eef0 2a47 	vmov.f32	s5, s14
900186a4:	fb92 fcf3 	sdiv	ip, r2, r3
900186a8:	ee13 2a10 	vmov	r2, s6
900186ac:	eeb0 3a67 	vmov.f32	s6, s15
900186b0:	fb92 f3f3 	sdiv	r3, r2, r3
900186b4:	9312      	str	r3, [sp, #72]	; 0x48
900186b6:	9b01      	ldr	r3, [sp, #4]
900186b8:	9a03      	ldr	r2, [sp, #12]
900186ba:	3b01      	subs	r3, #1
900186bc:	9301      	str	r3, [sp, #4]
900186be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900186c0:	bf08      	it	eq
900186c2:	4613      	moveq	r3, r2
900186c4:	e793      	b.n	900185ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
900186c6:	45ce      	cmp	lr, r9
900186c8:	dab9      	bge.n	9001863e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900186ca:	9912      	ldr	r1, [sp, #72]	; 0x48
900186cc:	fb01 2606 	mla	r6, r1, r6, r2
900186d0:	1436      	asrs	r6, r6, #16
900186d2:	d4b4      	bmi.n	9001863e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900186d4:	4546      	cmp	r6, r8
900186d6:	dab2      	bge.n	9001863e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900186d8:	4698      	mov	r8, r3
900186da:	46a2      	mov	sl, r4
900186dc:	f1b8 0f00 	cmp.w	r8, #0
900186e0:	ddb3      	ble.n	9001864a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900186e2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900186e6:	1416      	asrs	r6, r2, #16
900186e8:	9902      	ldr	r1, [sp, #8]
900186ea:	ea4f 4e20 	mov.w	lr, r0, asr #16
900186ee:	f108 38ff 	add.w	r8, r8, #4294967295
900186f2:	4460      	add	r0, ip
900186f4:	fb09 1606 	mla	r6, r9, r6, r1
900186f8:	4928      	ldr	r1, [pc, #160]	; (9001879c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
900186fa:	f816 e00e 	ldrb.w	lr, [r6, lr]
900186fe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90018702:	eb07 0b0e 	add.w	fp, r7, lr
90018706:	f89b 6001 	ldrb.w	r6, [fp, #1]
9001870a:	f89b 9002 	ldrb.w	r9, [fp, #2]
9001870e:	00f6      	lsls	r6, r6, #3
90018710:	ea01 2909 	and.w	r9, r1, r9, lsl #8
90018714:	9912      	ldr	r1, [sp, #72]	; 0x48
90018716:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001871a:	440a      	add	r2, r1
9001871c:	ea49 0606 	orr.w	r6, r9, r6
90018720:	f817 900e 	ldrb.w	r9, [r7, lr]
90018724:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
90018728:	f82a 6b02 	strh.w	r6, [sl], #2
9001872c:	e7d6      	b.n	900186dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001872e:	ea5f 4920 	movs.w	r9, r0, asr #16
90018732:	d429      	bmi.n	90018788 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90018734:	68ae      	ldr	r6, [r5, #8]
90018736:	454e      	cmp	r6, r9
90018738:	dd26      	ble.n	90018788 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001873a:	ea5f 4b22 	movs.w	fp, r2, asr #16
9001873e:	d423      	bmi.n	90018788 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90018740:	68e9      	ldr	r1, [r5, #12]
90018742:	4559      	cmp	r1, fp
90018744:	dd20      	ble.n	90018788 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90018746:	fa0f fe86 	sxth.w	lr, r6
9001874a:	9902      	ldr	r1, [sp, #8]
9001874c:	fb0b 1e0e 	mla	lr, fp, lr, r1
90018750:	f06f 0101 	mvn.w	r1, #1
90018754:	f81e e009 	ldrb.w	lr, [lr, r9]
90018758:	fb01 f908 	mul.w	r9, r1, r8
9001875c:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
90018760:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
90018764:	eb07 060e 	add.w	r6, r7, lr
90018768:	f896 b002 	ldrb.w	fp, [r6, #2]
9001876c:	7876      	ldrb	r6, [r6, #1]
9001876e:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
90018772:	00f6      	lsls	r6, r6, #3
90018774:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90018778:	ea4b 0606 	orr.w	r6, fp, r6
9001877c:	f817 b00e 	ldrb.w	fp, [r7, lr]
90018780:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
90018784:	f82a 6009 	strh.w	r6, [sl, r9]
90018788:	9912      	ldr	r1, [sp, #72]	; 0x48
9001878a:	4460      	add	r0, ip
9001878c:	f108 38ff 	add.w	r8, r8, #4294967295
90018790:	440a      	add	r2, r1
90018792:	e757      	b.n	90018644 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90018794:	b005      	add	sp, #20
90018796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001879a:	bf00      	nop
9001879c:	fffff800 	.word	0xfffff800

900187a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900187a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900187a4:	b087      	sub	sp, #28
900187a6:	468b      	mov	fp, r1
900187a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900187ac:	9815      	ldr	r0, [sp, #84]	; 0x54
900187ae:	9204      	str	r2, [sp, #16]
900187b0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900187b4:	6841      	ldr	r1, [r0, #4]
900187b6:	9205      	str	r2, [sp, #20]
900187b8:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
900187bc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
900187c0:	fb01 2404 	mla	r4, r1, r4, r2
900187c4:	6802      	ldr	r2, [r0, #0]
900187c6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
900187ca:	f8dc 2000 	ldr.w	r2, [ip]
900187ce:	9201      	str	r2, [sp, #4]
900187d0:	f8dc 2004 	ldr.w	r2, [ip, #4]
900187d4:	3204      	adds	r2, #4
900187d6:	9202      	str	r2, [sp, #8]
900187d8:	f1bb 0f00 	cmp.w	fp, #0
900187dc:	dc03      	bgt.n	900187e6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
900187de:	9a04      	ldr	r2, [sp, #16]
900187e0:	2a00      	cmp	r2, #0
900187e2:	f340 8138 	ble.w	90018a56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
900187e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
900187e8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
900187ec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900187f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
900187f2:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
900187f6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
900187fa:	2b00      	cmp	r3, #0
900187fc:	dd0e      	ble.n	9001881c <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900187fe:	1402      	asrs	r2, r0, #16
90018800:	d405      	bmi.n	9001880e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90018802:	42ba      	cmp	r2, r7
90018804:	da03      	bge.n	9001880e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90018806:	140a      	asrs	r2, r1, #16
90018808:	d401      	bmi.n	9001880e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001880a:	42b2      	cmp	r2, r6
9001880c:	db07      	blt.n	9001881e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001880e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018810:	3b01      	subs	r3, #1
90018812:	3402      	adds	r4, #2
90018814:	4410      	add	r0, r2
90018816:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018818:	4411      	add	r1, r2
9001881a:	e7ee      	b.n	900187fa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001881c:	d019      	beq.n	90018852 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001881e:	1e5a      	subs	r2, r3, #1
90018820:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90018822:	fb05 0502 	mla	r5, r5, r2, r0
90018826:	142d      	asrs	r5, r5, #16
90018828:	d409      	bmi.n	9001883e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001882a:	42bd      	cmp	r5, r7
9001882c:	da07      	bge.n	9001883e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001882e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90018830:	fb05 1202 	mla	r2, r5, r2, r1
90018834:	1412      	asrs	r2, r2, #16
90018836:	d402      	bmi.n	9001883e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90018838:	42b2      	cmp	r2, r6
9001883a:	f2c0 80ac 	blt.w	90018996 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001883e:	f04f 0e00 	mov.w	lr, #0
90018842:	eb03 020e 	add.w	r2, r3, lr
90018846:	2a00      	cmp	r2, #0
90018848:	dc3e      	bgt.n	900188c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001884a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001884e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018852:	f1bb 0f00 	cmp.w	fp, #0
90018856:	f340 80fe 	ble.w	90018a56 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001885a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001885e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018860:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018864:	f1bb 0b01 	subs.w	fp, fp, #1
90018868:	eeb0 6a62 	vmov.f32	s12, s5
9001886c:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018870:	ee31 1a05 	vadd.f32	s2, s2, s10
90018874:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018878:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001887c:	eeb0 6a43 	vmov.f32	s12, s6
90018880:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018884:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90018888:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001888c:	ee61 7a27 	vmul.f32	s15, s2, s15
90018890:	ee77 2a62 	vsub.f32	s5, s14, s5
90018894:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018898:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001889c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900188a0:	ee12 2a90 	vmov	r2, s5
900188a4:	eef0 2a47 	vmov.f32	s5, s14
900188a8:	fb92 f3f3 	sdiv	r3, r2, r3
900188ac:	ee13 2a10 	vmov	r2, s6
900188b0:	9313      	str	r3, [sp, #76]	; 0x4c
900188b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
900188b4:	eeb0 3a67 	vmov.f32	s6, s15
900188b8:	fb92 f3f3 	sdiv	r3, r2, r3
900188bc:	9a04      	ldr	r2, [sp, #16]
900188be:	9314      	str	r3, [sp, #80]	; 0x50
900188c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900188c2:	bf08      	it	eq
900188c4:	4613      	moveq	r3, r2
900188c6:	e787      	b.n	900187d8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900188c8:	1406      	asrs	r6, r0, #16
900188ca:	d45d      	bmi.n	90018988 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900188cc:	f8dc 5008 	ldr.w	r5, [ip, #8]
900188d0:	42b5      	cmp	r5, r6
900188d2:	dd59      	ble.n	90018988 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900188d4:	140f      	asrs	r7, r1, #16
900188d6:	d457      	bmi.n	90018988 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900188d8:	f8dc 200c 	ldr.w	r2, [ip, #12]
900188dc:	42ba      	cmp	r2, r7
900188de:	dd53      	ble.n	90018988 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900188e0:	9a01      	ldr	r2, [sp, #4]
900188e2:	b22d      	sxth	r5, r5
900188e4:	fb07 2505 	mla	r5, r7, r5, r2
900188e8:	5daa      	ldrb	r2, [r5, r6]
900188ea:	9d02      	ldr	r5, [sp, #8]
900188ec:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
900188f0:	0e2e      	lsrs	r6, r5, #24
900188f2:	d049      	beq.n	90018988 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
900188f4:	f06f 0201 	mvn.w	r2, #1
900188f8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900188fc:	fb02 f20e 	mul.w	r2, r2, lr
90018900:	f834 8002 	ldrh.w	r8, [r4, r2]
90018904:	9203      	str	r2, [sp, #12]
90018906:	9a05      	ldr	r2, [sp, #20]
90018908:	ea4f 2728 	mov.w	r7, r8, asr #8
9001890c:	4356      	muls	r6, r2
9001890e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018912:	1c72      	adds	r2, r6, #1
90018914:	eb02 2226 	add.w	r2, r2, r6, asr #8
90018918:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001891c:	b2ed      	uxtb	r5, r5
9001891e:	1212      	asrs	r2, r2, #8
90018920:	fa1f f982 	uxth.w	r9, r2
90018924:	43d2      	mvns	r2, r2
90018926:	fb16 f609 	smulbb	r6, r6, r9
9001892a:	b2d2      	uxtb	r2, r2
9001892c:	fb15 f509 	smulbb	r5, r5, r9
90018930:	fb07 6702 	mla	r7, r7, r2, r6
90018934:	ea4f 06e8 	mov.w	r6, r8, asr #3
90018938:	fb1a fa09 	smulbb	sl, sl, r9
9001893c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018940:	b2bf      	uxth	r7, r7
90018942:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018946:	fa5f f888 	uxtb.w	r8, r8
9001894a:	fb06 a602 	mla	r6, r6, r2, sl
9001894e:	fb08 5502 	mla	r5, r8, r2, r5
90018952:	1c7a      	adds	r2, r7, #1
90018954:	b2b6      	uxth	r6, r6
90018956:	b2ad      	uxth	r5, r5
90018958:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001895c:	9a03      	ldr	r2, [sp, #12]
9001895e:	f105 0a01 	add.w	sl, r5, #1
90018962:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90018966:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001896a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001896e:	ea4a 0707 	orr.w	r7, sl, r7
90018972:	f106 0a01 	add.w	sl, r6, #1
90018976:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001897a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001897e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018982:	ea47 070a 	orr.w	r7, r7, sl
90018986:	52a7      	strh	r7, [r4, r2]
90018988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001898a:	f10e 3eff 	add.w	lr, lr, #4294967295
9001898e:	4410      	add	r0, r2
90018990:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018992:	4411      	add	r1, r2
90018994:	e755      	b.n	90018842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90018996:	f04f 0800 	mov.w	r8, #0
9001899a:	eba3 0208 	sub.w	r2, r3, r8
9001899e:	2a00      	cmp	r2, #0
900189a0:	f77f af53 	ble.w	9001884a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
900189a4:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
900189a8:	140a      	asrs	r2, r1, #16
900189aa:	9f01      	ldr	r7, [sp, #4]
900189ac:	1405      	asrs	r5, r0, #16
900189ae:	fb06 7202 	mla	r2, r6, r2, r7
900189b2:	5d52      	ldrb	r2, [r2, r5]
900189b4:	9d02      	ldr	r5, [sp, #8]
900189b6:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
900189ba:	0e2e      	lsrs	r6, r5, #24
900189bc:	d044      	beq.n	90018a48 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
900189be:	9a05      	ldr	r2, [sp, #20]
900189c0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
900189c4:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
900189c8:	4356      	muls	r6, r2
900189ca:	ea4f 272e 	mov.w	r7, lr, asr #8
900189ce:	1c72      	adds	r2, r6, #1
900189d0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900189d4:	eb02 2226 	add.w	r2, r2, r6, asr #8
900189d8:	f3c5 4607 	ubfx	r6, r5, #16, #8
900189dc:	b2ed      	uxtb	r5, r5
900189de:	1212      	asrs	r2, r2, #8
900189e0:	fa1f f982 	uxth.w	r9, r2
900189e4:	43d2      	mvns	r2, r2
900189e6:	fb16 f609 	smulbb	r6, r6, r9
900189ea:	b2d2      	uxtb	r2, r2
900189ec:	fb15 f509 	smulbb	r5, r5, r9
900189f0:	fb07 6702 	mla	r7, r7, r2, r6
900189f4:	ea4f 06ee 	mov.w	r6, lr, asr #3
900189f8:	fb1a fa09 	smulbb	sl, sl, r9
900189fc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90018a00:	b2bf      	uxth	r7, r7
90018a02:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018a06:	fa5f fe8e 	uxtb.w	lr, lr
90018a0a:	fb06 a602 	mla	r6, r6, r2, sl
90018a0e:	fb0e 5502 	mla	r5, lr, r2, r5
90018a12:	1c7a      	adds	r2, r7, #1
90018a14:	b2b6      	uxth	r6, r6
90018a16:	b2ad      	uxth	r5, r5
90018a18:	eb02 2717 	add.w	r7, r2, r7, lsr #8
90018a1c:	f105 0a01 	add.w	sl, r5, #1
90018a20:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90018a24:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018a28:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018a2c:	ea4a 0707 	orr.w	r7, sl, r7
90018a30:	f106 0a01 	add.w	sl, r6, #1
90018a34:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018a38:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018a3c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018a40:	ea47 070a 	orr.w	r7, r7, sl
90018a44:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90018a48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90018a4a:	f108 0801 	add.w	r8, r8, #1
90018a4e:	4410      	add	r0, r2
90018a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
90018a52:	4411      	add	r1, r2
90018a54:	e7a1      	b.n	9001899a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
90018a56:	b007      	add	sp, #28
90018a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90018a5c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018a60:	b085      	sub	sp, #20
90018a62:	468b      	mov	fp, r1
90018a64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018a68:	9813      	ldr	r0, [sp, #76]	; 0x4c
90018a6a:	9203      	str	r2, [sp, #12]
90018a6c:	6841      	ldr	r1, [r0, #4]
90018a6e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
90018a72:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90018a76:	fb01 2404 	mla	r4, r1, r4, r2
90018a7a:	6802      	ldr	r2, [r0, #0]
90018a7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90018a80:	f8de 2000 	ldr.w	r2, [lr]
90018a84:	9200      	str	r2, [sp, #0]
90018a86:	f8de 2004 	ldr.w	r2, [lr, #4]
90018a8a:	3204      	adds	r2, #4
90018a8c:	9201      	str	r2, [sp, #4]
90018a8e:	f1bb 0f00 	cmp.w	fp, #0
90018a92:	dc03      	bgt.n	90018a9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90018a94:	9a03      	ldr	r2, [sp, #12]
90018a96:	2a00      	cmp	r2, #0
90018a98:	f340 8153 	ble.w	90018d42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90018a9c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90018a9e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90018aa2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018aa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
90018aa8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90018aac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018ab0:	2b00      	cmp	r3, #0
90018ab2:	dd0e      	ble.n	90018ad2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90018ab4:	1408      	asrs	r0, r1, #16
90018ab6:	d405      	bmi.n	90018ac4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018ab8:	42b8      	cmp	r0, r7
90018aba:	da03      	bge.n	90018ac4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018abc:	1410      	asrs	r0, r2, #16
90018abe:	d401      	bmi.n	90018ac4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90018ac0:	42b0      	cmp	r0, r6
90018ac2:	db07      	blt.n	90018ad4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90018ac4:	9811      	ldr	r0, [sp, #68]	; 0x44
90018ac6:	3b01      	subs	r3, #1
90018ac8:	3402      	adds	r4, #2
90018aca:	4401      	add	r1, r0
90018acc:	9812      	ldr	r0, [sp, #72]	; 0x48
90018ace:	4402      	add	r2, r0
90018ad0:	e7ee      	b.n	90018ab0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90018ad2:	d017      	beq.n	90018b04 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018ad4:	1e58      	subs	r0, r3, #1
90018ad6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90018ad8:	fb05 1500 	mla	r5, r5, r0, r1
90018adc:	142d      	asrs	r5, r5, #16
90018ade:	d409      	bmi.n	90018af4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018ae0:	42bd      	cmp	r5, r7
90018ae2:	da07      	bge.n	90018af4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018ae4:	9d12      	ldr	r5, [sp, #72]	; 0x48
90018ae6:	fb05 2000 	mla	r0, r5, r0, r2
90018aea:	1400      	asrs	r0, r0, #16
90018aec:	d402      	bmi.n	90018af4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90018aee:	42b0      	cmp	r0, r6
90018af0:	f2c0 80bc 	blt.w	90018c6c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
90018af4:	2600      	movs	r6, #0
90018af6:	1998      	adds	r0, r3, r6
90018af8:	2800      	cmp	r0, #0
90018afa:	dc3e      	bgt.n	90018b7a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
90018afc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018b00:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90018b04:	f1bb 0f00 	cmp.w	fp, #0
90018b08:	f340 811b 	ble.w	90018d42 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
90018b0c:	ee30 0a04 	vadd.f32	s0, s0, s8
90018b10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018b12:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018b16:	f1bb 0b01 	subs.w	fp, fp, #1
90018b1a:	eeb0 6a62 	vmov.f32	s12, s5
90018b1e:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018b22:	ee31 1a05 	vadd.f32	s2, s2, s10
90018b26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018b2a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90018b2e:	eeb0 6a43 	vmov.f32	s12, s6
90018b32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018b36:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90018b3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018b3e:	ee61 7a27 	vmul.f32	s15, s2, s15
90018b42:	ee77 2a62 	vsub.f32	s5, s14, s5
90018b46:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018b4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018b4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018b52:	ee12 2a90 	vmov	r2, s5
90018b56:	eef0 2a47 	vmov.f32	s5, s14
90018b5a:	fb92 f3f3 	sdiv	r3, r2, r3
90018b5e:	ee13 2a10 	vmov	r2, s6
90018b62:	9311      	str	r3, [sp, #68]	; 0x44
90018b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018b66:	eeb0 3a67 	vmov.f32	s6, s15
90018b6a:	fb92 f3f3 	sdiv	r3, r2, r3
90018b6e:	9a03      	ldr	r2, [sp, #12]
90018b70:	9312      	str	r3, [sp, #72]	; 0x48
90018b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90018b74:	bf08      	it	eq
90018b76:	4613      	moveq	r3, r2
90018b78:	e789      	b.n	90018a8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
90018b7a:	140f      	asrs	r7, r1, #16
90018b7c:	d426      	bmi.n	90018bcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018b7e:	f8de 5008 	ldr.w	r5, [lr, #8]
90018b82:	42bd      	cmp	r5, r7
90018b84:	dd22      	ble.n	90018bcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018b86:	ea5f 4c22 	movs.w	ip, r2, asr #16
90018b8a:	d41f      	bmi.n	90018bcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018b8c:	f8de 000c 	ldr.w	r0, [lr, #12]
90018b90:	4560      	cmp	r0, ip
90018b92:	dd1b      	ble.n	90018bcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018b94:	9800      	ldr	r0, [sp, #0]
90018b96:	b22d      	sxth	r5, r5
90018b98:	fb0c 0505 	mla	r5, ip, r5, r0
90018b9c:	5de8      	ldrb	r0, [r5, r7]
90018b9e:	9d01      	ldr	r5, [sp, #4]
90018ba0:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
90018ba4:	0e07      	lsrs	r7, r0, #24
90018ba6:	2fff      	cmp	r7, #255	; 0xff
90018ba8:	d116      	bne.n	90018bd8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90018baa:	f06f 0501 	mvn.w	r5, #1
90018bae:	fb05 f706 	mul.w	r7, r5, r6
90018bb2:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90018bb6:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90018bba:	0945      	lsrs	r5, r0, #5
90018bbc:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90018bc0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90018bc4:	ea4c 0505 	orr.w	r5, ip, r5
90018bc8:	4305      	orrs	r5, r0
90018bca:	53e5      	strh	r5, [r4, r7]
90018bcc:	9811      	ldr	r0, [sp, #68]	; 0x44
90018bce:	3e01      	subs	r6, #1
90018bd0:	4401      	add	r1, r0
90018bd2:	9812      	ldr	r0, [sp, #72]	; 0x48
90018bd4:	4402      	add	r2, r0
90018bd6:	e78e      	b.n	90018af6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90018bd8:	b2fd      	uxtb	r5, r7
90018bda:	2f00      	cmp	r7, #0
90018bdc:	d0f6      	beq.n	90018bcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018bde:	f06f 0701 	mvn.w	r7, #1
90018be2:	fa1f f985 	uxth.w	r9, r5
90018be6:	43ed      	mvns	r5, r5
90018be8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90018bec:	4377      	muls	r7, r6
90018bee:	fb1a fa09 	smulbb	sl, sl, r9
90018bf2:	b2ed      	uxtb	r5, r5
90018bf4:	f834 8007 	ldrh.w	r8, [r4, r7]
90018bf8:	9702      	str	r7, [sp, #8]
90018bfa:	f3c0 4707 	ubfx	r7, r0, #16, #8
90018bfe:	ea4f 2c28 	mov.w	ip, r8, asr #8
90018c02:	fb17 f709 	smulbb	r7, r7, r9
90018c06:	b2c0      	uxtb	r0, r0
90018c08:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018c0c:	fb10 f009 	smulbb	r0, r0, r9
90018c10:	fb0c 7c05 	mla	ip, ip, r5, r7
90018c14:	ea4f 07e8 	mov.w	r7, r8, asr #3
90018c18:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018c1c:	fa1f fc8c 	uxth.w	ip, ip
90018c20:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90018c24:	fa5f f888 	uxtb.w	r8, r8
90018c28:	fb07 a705 	mla	r7, r7, r5, sl
90018c2c:	fb08 0005 	mla	r0, r8, r5, r0
90018c30:	f10c 0501 	add.w	r5, ip, #1
90018c34:	b2bf      	uxth	r7, r7
90018c36:	b280      	uxth	r0, r0
90018c38:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90018c3c:	f100 0a01 	add.w	sl, r0, #1
90018c40:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018c44:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90018c48:	9802      	ldr	r0, [sp, #8]
90018c4a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018c4e:	ea4a 0c0c 	orr.w	ip, sl, ip
90018c52:	f107 0a01 	add.w	sl, r7, #1
90018c56:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90018c5a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018c5e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018c62:	ea4c 0c0a 	orr.w	ip, ip, sl
90018c66:	f824 c000 	strh.w	ip, [r4, r0]
90018c6a:	e7af      	b.n	90018bcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90018c6c:	f04f 0800 	mov.w	r8, #0
90018c70:	eba3 0008 	sub.w	r0, r3, r8
90018c74:	2800      	cmp	r0, #0
90018c76:	f77f af41 	ble.w	90018afc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018c7a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90018c7e:	1410      	asrs	r0, r2, #16
90018c80:	9f00      	ldr	r7, [sp, #0]
90018c82:	140d      	asrs	r5, r1, #16
90018c84:	fb06 7000 	mla	r0, r6, r0, r7
90018c88:	5d40      	ldrb	r0, [r0, r5]
90018c8a:	9d01      	ldr	r5, [sp, #4]
90018c8c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90018c90:	0e2e      	lsrs	r6, r5, #24
90018c92:	2eff      	cmp	r6, #255	; 0xff
90018c94:	d112      	bne.n	90018cbc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
90018c96:	482c      	ldr	r0, [pc, #176]	; (90018d48 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
90018c98:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90018c9c:	0968      	lsrs	r0, r5, #5
90018c9e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90018ca2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90018ca6:	4330      	orrs	r0, r6
90018ca8:	4328      	orrs	r0, r5
90018caa:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
90018cae:	9811      	ldr	r0, [sp, #68]	; 0x44
90018cb0:	f108 0801 	add.w	r8, r8, #1
90018cb4:	4401      	add	r1, r0
90018cb6:	9812      	ldr	r0, [sp, #72]	; 0x48
90018cb8:	4402      	add	r2, r0
90018cba:	e7d9      	b.n	90018c70 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90018cbc:	b2f0      	uxtb	r0, r6
90018cbe:	2e00      	cmp	r6, #0
90018cc0:	d0f5      	beq.n	90018cae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90018cc2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
90018cc6:	fa1f f980 	uxth.w	r9, r0
90018cca:	f3c5 4607 	ubfx	r6, r5, #16, #8
90018cce:	43c0      	mvns	r0, r0
90018cd0:	ea4f 272c 	mov.w	r7, ip, asr #8
90018cd4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90018cd8:	fb16 f609 	smulbb	r6, r6, r9
90018cdc:	b2c0      	uxtb	r0, r0
90018cde:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90018ce2:	b2ed      	uxtb	r5, r5
90018ce4:	fb1a fa09 	smulbb	sl, sl, r9
90018ce8:	fb07 6700 	mla	r7, r7, r0, r6
90018cec:	ea4f 06ec 	mov.w	r6, ip, asr #3
90018cf0:	fb15 f509 	smulbb	r5, r5, r9
90018cf4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90018cf8:	b2bf      	uxth	r7, r7
90018cfa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018cfe:	fa5f fc8c 	uxtb.w	ip, ip
90018d02:	fb06 a600 	mla	r6, r6, r0, sl
90018d06:	fb0c 5500 	mla	r5, ip, r0, r5
90018d0a:	1c78      	adds	r0, r7, #1
90018d0c:	b2b6      	uxth	r6, r6
90018d0e:	b2ad      	uxth	r5, r5
90018d10:	eb00 2717 	add.w	r7, r0, r7, lsr #8
90018d14:	f105 0a01 	add.w	sl, r5, #1
90018d18:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90018d1c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018d20:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018d24:	ea4a 0707 	orr.w	r7, sl, r7
90018d28:	f106 0a01 	add.w	sl, r6, #1
90018d2c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018d30:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018d34:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018d38:	ea47 070a 	orr.w	r7, r7, sl
90018d3c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
90018d40:	e7b5      	b.n	90018cae <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90018d42:	b005      	add	sp, #20
90018d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018d48:	fffff800 	.word	0xfffff800

90018d4c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90018d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018d50:	b087      	sub	sp, #28
90018d52:	468b      	mov	fp, r1
90018d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90018d58:	9c15      	ldr	r4, [sp, #84]	; 0x54
90018d5a:	9204      	str	r2, [sp, #16]
90018d5c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90018d60:	6861      	ldr	r1, [r4, #4]
90018d62:	9205      	str	r2, [sp, #20]
90018d64:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
90018d68:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
90018d6c:	fb01 2000 	mla	r0, r1, r0, r2
90018d70:	6822      	ldr	r2, [r4, #0]
90018d72:	eb02 0040 	add.w	r0, r2, r0, lsl #1
90018d76:	f8de 2000 	ldr.w	r2, [lr]
90018d7a:	9201      	str	r2, [sp, #4]
90018d7c:	f8de 2004 	ldr.w	r2, [lr, #4]
90018d80:	9202      	str	r2, [sp, #8]
90018d82:	f1bb 0f00 	cmp.w	fp, #0
90018d86:	dc03      	bgt.n	90018d90 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
90018d88:	9a04      	ldr	r2, [sp, #16]
90018d8a:	2a00      	cmp	r2, #0
90018d8c:	f340 8142 	ble.w	90019014 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
90018d90:	9a11      	ldr	r2, [sp, #68]	; 0x44
90018d92:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90018d96:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90018d9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
90018d9c:	f9be 600c 	ldrsh.w	r6, [lr, #12]
90018da0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90018da4:	2b00      	cmp	r3, #0
90018da6:	dd0e      	ble.n	90018dc6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90018da8:	140c      	asrs	r4, r1, #16
90018daa:	d405      	bmi.n	90018db8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018dac:	42bc      	cmp	r4, r7
90018dae:	da03      	bge.n	90018db8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018db0:	1414      	asrs	r4, r2, #16
90018db2:	d401      	bmi.n	90018db8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90018db4:	42b4      	cmp	r4, r6
90018db6:	db07      	blt.n	90018dc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
90018db8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018dba:	3b01      	subs	r3, #1
90018dbc:	3002      	adds	r0, #2
90018dbe:	4421      	add	r1, r4
90018dc0:	9c14      	ldr	r4, [sp, #80]	; 0x50
90018dc2:	4422      	add	r2, r4
90018dc4:	e7ee      	b.n	90018da4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90018dc6:	d019      	beq.n	90018dfc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
90018dc8:	1e5c      	subs	r4, r3, #1
90018dca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90018dcc:	fb05 1504 	mla	r5, r5, r4, r1
90018dd0:	142d      	asrs	r5, r5, #16
90018dd2:	d409      	bmi.n	90018de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018dd4:	42bd      	cmp	r5, r7
90018dd6:	da07      	bge.n	90018de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018dd8:	9d14      	ldr	r5, [sp, #80]	; 0x50
90018dda:	fb05 2404 	mla	r4, r5, r4, r2
90018dde:	1424      	asrs	r4, r4, #16
90018de0:	d402      	bmi.n	90018de8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
90018de2:	42b4      	cmp	r4, r6
90018de4:	f2c0 80b1 	blt.w	90018f4a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
90018de8:	f04f 0800 	mov.w	r8, #0
90018dec:	eb03 0408 	add.w	r4, r3, r8
90018df0:	2c00      	cmp	r4, #0
90018df2:	dc3e      	bgt.n	90018e72 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
90018df4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90018df8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90018dfc:	f1bb 0f00 	cmp.w	fp, #0
90018e00:	f340 8108 	ble.w	90019014 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
90018e04:	ee30 0a04 	vadd.f32	s0, s0, s8
90018e08:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018e0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90018e0e:	f1bb 0b01 	subs.w	fp, fp, #1
90018e12:	eeb0 6a62 	vmov.f32	s12, s5
90018e16:	eec6 7a80 	vdiv.f32	s15, s13, s0
90018e1a:	ee31 1a05 	vadd.f32	s2, s2, s10
90018e1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018e22:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90018e26:	eeb0 6a43 	vmov.f32	s12, s6
90018e2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90018e2e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90018e32:	ee20 7aa7 	vmul.f32	s14, s1, s15
90018e36:	ee61 7a27 	vmul.f32	s15, s2, s15
90018e3a:	ee77 2a62 	vsub.f32	s5, s14, s5
90018e3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90018e42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90018e46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90018e4a:	ee12 2a90 	vmov	r2, s5
90018e4e:	eef0 2a47 	vmov.f32	s5, s14
90018e52:	fb92 f3f3 	sdiv	r3, r2, r3
90018e56:	ee13 2a10 	vmov	r2, s6
90018e5a:	9313      	str	r3, [sp, #76]	; 0x4c
90018e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018e5e:	eeb0 3a67 	vmov.f32	s6, s15
90018e62:	fb92 f3f3 	sdiv	r3, r2, r3
90018e66:	9a04      	ldr	r2, [sp, #16]
90018e68:	9314      	str	r3, [sp, #80]	; 0x50
90018e6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
90018e6c:	bf08      	it	eq
90018e6e:	4613      	moveq	r3, r2
90018e70:	e787      	b.n	90018d82 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
90018e72:	140e      	asrs	r6, r1, #16
90018e74:	d462      	bmi.n	90018f3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018e76:	f8de 5008 	ldr.w	r5, [lr, #8]
90018e7a:	42b5      	cmp	r5, r6
90018e7c:	dd5e      	ble.n	90018f3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018e7e:	1417      	asrs	r7, r2, #16
90018e80:	d45c      	bmi.n	90018f3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018e82:	f8de 400c 	ldr.w	r4, [lr, #12]
90018e86:	42bc      	cmp	r4, r7
90018e88:	dd58      	ble.n	90018f3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018e8a:	b22d      	sxth	r5, r5
90018e8c:	9c02      	ldr	r4, [sp, #8]
90018e8e:	fb07 6505 	mla	r5, r7, r5, r6
90018e92:	5d66      	ldrb	r6, [r4, r5]
90018e94:	2e00      	cmp	r6, #0
90018e96:	d051      	beq.n	90018f3c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90018e98:	9c01      	ldr	r4, [sp, #4]
90018e9a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
90018e9e:	f06f 0401 	mvn.w	r4, #1
90018ea2:	fb04 f408 	mul.w	r4, r4, r8
90018ea6:	ea4f 2c29 	mov.w	ip, r9, asr #8
90018eaa:	5b05      	ldrh	r5, [r0, r4]
90018eac:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018eb0:	9403      	str	r4, [sp, #12]
90018eb2:	9c05      	ldr	r4, [sp, #20]
90018eb4:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018eb8:	4366      	muls	r6, r4
90018eba:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90018ebe:	1c74      	adds	r4, r6, #1
90018ec0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90018ec4:	122e      	asrs	r6, r5, #8
90018ec6:	1224      	asrs	r4, r4, #8
90018ec8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018ecc:	00ed      	lsls	r5, r5, #3
90018ece:	b2a7      	uxth	r7, r4
90018ed0:	43e4      	mvns	r4, r4
90018ed2:	b2ed      	uxtb	r5, r5
90018ed4:	b2e4      	uxtb	r4, r4
90018ed6:	fb16 f604 	smulbb	r6, r6, r4
90018eda:	fb15 f504 	smulbb	r5, r5, r4
90018ede:	fb0c 6c07 	mla	ip, ip, r7, r6
90018ee2:	ea4f 06e9 	mov.w	r6, r9, asr #3
90018ee6:	fb1a fa04 	smulbb	sl, sl, r4
90018eea:	ea4f 09c9 	mov.w	r9, r9, lsl #3
90018eee:	fa1f fc8c 	uxth.w	ip, ip
90018ef2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018ef6:	fa5f f989 	uxtb.w	r9, r9
90018efa:	fb06 a607 	mla	r6, r6, r7, sl
90018efe:	f10c 0401 	add.w	r4, ip, #1
90018f02:	fb09 5507 	mla	r5, r9, r7, r5
90018f06:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90018f0a:	9c03      	ldr	r4, [sp, #12]
90018f0c:	b2ad      	uxth	r5, r5
90018f0e:	b2b6      	uxth	r6, r6
90018f10:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018f14:	f105 0a01 	add.w	sl, r5, #1
90018f18:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018f1c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018f20:	ea4a 0c0c 	orr.w	ip, sl, ip
90018f24:	f106 0a01 	add.w	sl, r6, #1
90018f28:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018f2c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018f30:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018f34:	ea4c 0c0a 	orr.w	ip, ip, sl
90018f38:	f820 c004 	strh.w	ip, [r0, r4]
90018f3c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90018f3e:	f108 38ff 	add.w	r8, r8, #4294967295
90018f42:	4421      	add	r1, r4
90018f44:	9c14      	ldr	r4, [sp, #80]	; 0x50
90018f46:	4422      	add	r2, r4
90018f48:	e750      	b.n	90018dec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90018f4a:	f04f 0900 	mov.w	r9, #0
90018f4e:	eba3 0409 	sub.w	r4, r3, r9
90018f52:	2c00      	cmp	r4, #0
90018f54:	f77f af4e 	ble.w	90018df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
90018f58:	f9be 6008 	ldrsh.w	r6, [lr, #8]
90018f5c:	140d      	asrs	r5, r1, #16
90018f5e:	1414      	asrs	r4, r2, #16
90018f60:	fb06 5404 	mla	r4, r6, r4, r5
90018f64:	9d02      	ldr	r5, [sp, #8]
90018f66:	5d2e      	ldrb	r6, [r5, r4]
90018f68:	2e00      	cmp	r6, #0
90018f6a:	d04c      	beq.n	90019006 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
90018f6c:	9d01      	ldr	r5, [sp, #4]
90018f6e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
90018f72:	9c05      	ldr	r4, [sp, #20]
90018f74:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90018f78:	ea4f 2c28 	mov.w	ip, r8, asr #8
90018f7c:	4366      	muls	r6, r4
90018f7e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90018f82:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90018f86:	1c74      	adds	r4, r6, #1
90018f88:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
90018f8c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
90018f90:	122e      	asrs	r6, r5, #8
90018f92:	1224      	asrs	r4, r4, #8
90018f94:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90018f98:	00ed      	lsls	r5, r5, #3
90018f9a:	b2a7      	uxth	r7, r4
90018f9c:	43e4      	mvns	r4, r4
90018f9e:	b2ed      	uxtb	r5, r5
90018fa0:	b2e4      	uxtb	r4, r4
90018fa2:	fb16 f604 	smulbb	r6, r6, r4
90018fa6:	fb15 f504 	smulbb	r5, r5, r4
90018faa:	fb0c 6c07 	mla	ip, ip, r7, r6
90018fae:	ea4f 06e8 	mov.w	r6, r8, asr #3
90018fb2:	fb1a fa04 	smulbb	sl, sl, r4
90018fb6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90018fba:	fa1f fc8c 	uxth.w	ip, ip
90018fbe:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90018fc2:	fa5f f888 	uxtb.w	r8, r8
90018fc6:	fb06 a607 	mla	r6, r6, r7, sl
90018fca:	f10c 0401 	add.w	r4, ip, #1
90018fce:	fb08 5507 	mla	r5, r8, r7, r5
90018fd2:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
90018fd6:	b2ad      	uxth	r5, r5
90018fd8:	b2b6      	uxth	r6, r6
90018fda:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90018fde:	f105 0a01 	add.w	sl, r5, #1
90018fe2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90018fe6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90018fea:	ea4a 0c0c 	orr.w	ip, sl, ip
90018fee:	f106 0a01 	add.w	sl, r6, #1
90018ff2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90018ff6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90018ffa:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90018ffe:	ea4c 0c0a 	orr.w	ip, ip, sl
90019002:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
90019006:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90019008:	f109 0901 	add.w	r9, r9, #1
9001900c:	4421      	add	r1, r4
9001900e:	9c14      	ldr	r4, [sp, #80]	; 0x50
90019010:	4422      	add	r2, r4
90019012:	e79c      	b.n	90018f4e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
90019014:	b007      	add	sp, #28
90019016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001901a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001901a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001901e:	b085      	sub	sp, #20
90019020:	468b      	mov	fp, r1
90019022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90019026:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90019028:	9203      	str	r2, [sp, #12]
9001902a:	6861      	ldr	r1, [r4, #4]
9001902c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
90019030:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
90019034:	fb01 2000 	mla	r0, r1, r0, r2
90019038:	6822      	ldr	r2, [r4, #0]
9001903a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001903e:	f8d8 2000 	ldr.w	r2, [r8]
90019042:	9200      	str	r2, [sp, #0]
90019044:	f8d8 2004 	ldr.w	r2, [r8, #4]
90019048:	9201      	str	r2, [sp, #4]
9001904a:	f1bb 0f00 	cmp.w	fp, #0
9001904e:	dc03      	bgt.n	90019058 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90019050:	9a03      	ldr	r2, [sp, #12]
90019052:	2a00      	cmp	r2, #0
90019054:	f340 8146 	ble.w	900192e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
90019058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001905a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001905e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90019062:	9a10      	ldr	r2, [sp, #64]	; 0x40
90019064:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90019068:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001906c:	2b00      	cmp	r3, #0
9001906e:	dd0e      	ble.n	9001908e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90019070:	140c      	asrs	r4, r1, #16
90019072:	d405      	bmi.n	90019080 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90019074:	42bc      	cmp	r4, r7
90019076:	da03      	bge.n	90019080 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90019078:	1414      	asrs	r4, r2, #16
9001907a:	d401      	bmi.n	90019080 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001907c:	42b4      	cmp	r4, r6
9001907e:	db07      	blt.n	90019090 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90019080:	9c11      	ldr	r4, [sp, #68]	; 0x44
90019082:	3b01      	subs	r3, #1
90019084:	3002      	adds	r0, #2
90019086:	4421      	add	r1, r4
90019088:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001908a:	4422      	add	r2, r4
9001908c:	e7ee      	b.n	9001906c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001908e:	d017      	beq.n	900190c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90019090:	1e5c      	subs	r4, r3, #1
90019092:	9d11      	ldr	r5, [sp, #68]	; 0x44
90019094:	fb05 1504 	mla	r5, r5, r4, r1
90019098:	142d      	asrs	r5, r5, #16
9001909a:	d409      	bmi.n	900190b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001909c:	42bd      	cmp	r5, r7
9001909e:	da07      	bge.n	900190b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900190a0:	9d12      	ldr	r5, [sp, #72]	; 0x48
900190a2:	fb05 2404 	mla	r4, r5, r4, r2
900190a6:	1424      	asrs	r4, r4, #16
900190a8:	d402      	bmi.n	900190b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900190aa:	42b4      	cmp	r4, r6
900190ac:	f2c0 80b3 	blt.w	90019216 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
900190b0:	2600      	movs	r6, #0
900190b2:	199c      	adds	r4, r3, r6
900190b4:	2c00      	cmp	r4, #0
900190b6:	dc3e      	bgt.n	90019136 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
900190b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
900190bc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
900190c0:	f1bb 0f00 	cmp.w	fp, #0
900190c4:	f340 810e 	ble.w	900192e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
900190c8:	ee30 0a04 	vadd.f32	s0, s0, s8
900190cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900190ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
900190d2:	f1bb 0b01 	subs.w	fp, fp, #1
900190d6:	eeb0 6a62 	vmov.f32	s12, s5
900190da:	eec6 7a80 	vdiv.f32	s15, s13, s0
900190de:	ee31 1a05 	vadd.f32	s2, s2, s10
900190e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900190e6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
900190ea:	eeb0 6a43 	vmov.f32	s12, s6
900190ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900190f2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
900190f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900190fa:	ee61 7a27 	vmul.f32	s15, s2, s15
900190fe:	ee77 2a62 	vsub.f32	s5, s14, s5
90019102:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019106:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001910a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001910e:	ee12 2a90 	vmov	r2, s5
90019112:	eef0 2a47 	vmov.f32	s5, s14
90019116:	fb92 f3f3 	sdiv	r3, r2, r3
9001911a:	ee13 2a10 	vmov	r2, s6
9001911e:	9311      	str	r3, [sp, #68]	; 0x44
90019120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019122:	eeb0 3a67 	vmov.f32	s6, s15
90019126:	fb92 f3f3 	sdiv	r3, r2, r3
9001912a:	9a03      	ldr	r2, [sp, #12]
9001912c:	9312      	str	r3, [sp, #72]	; 0x48
9001912e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019130:	bf08      	it	eq
90019132:	4613      	moveq	r3, r2
90019134:	e789      	b.n	9001904a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90019136:	140f      	asrs	r7, r1, #16
90019138:	d418      	bmi.n	9001916c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001913a:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001913e:	42bd      	cmp	r5, r7
90019140:	dd14      	ble.n	9001916c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90019142:	ea5f 4c22 	movs.w	ip, r2, asr #16
90019146:	d411      	bmi.n	9001916c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90019148:	f8d8 400c 	ldr.w	r4, [r8, #12]
9001914c:	4564      	cmp	r4, ip
9001914e:	dd0d      	ble.n	9001916c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90019150:	b22d      	sxth	r5, r5
90019152:	9c01      	ldr	r4, [sp, #4]
90019154:	fb0c 7505 	mla	r5, ip, r5, r7
90019158:	5d64      	ldrb	r4, [r4, r5]
9001915a:	2cff      	cmp	r4, #255	; 0xff
9001915c:	d10c      	bne.n	90019178 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001915e:	9c00      	ldr	r4, [sp, #0]
90019160:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
90019164:	f06f 0401 	mvn.w	r4, #1
90019168:	4374      	muls	r4, r6
9001916a:	5305      	strh	r5, [r0, r4]
9001916c:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001916e:	3e01      	subs	r6, #1
90019170:	4421      	add	r1, r4
90019172:	9c12      	ldr	r4, [sp, #72]	; 0x48
90019174:	4422      	add	r2, r4
90019176:	e79c      	b.n	900190b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90019178:	2c00      	cmp	r4, #0
9001917a:	d0f7      	beq.n	9001916c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001917c:	9f00      	ldr	r7, [sp, #0]
9001917e:	fa1f fc84 	uxth.w	ip, r4
90019182:	43e4      	mvns	r4, r4
90019184:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
90019188:	f06f 0501 	mvn.w	r5, #1
9001918c:	b2e4      	uxtb	r4, r4
9001918e:	4375      	muls	r5, r6
90019190:	ea4f 2e29 	mov.w	lr, r9, asr #8
90019194:	9502      	str	r5, [sp, #8]
90019196:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001919a:	5b45      	ldrh	r5, [r0, r5]
9001919c:	122f      	asrs	r7, r5, #8
9001919e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
900191a2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900191a6:	00ed      	lsls	r5, r5, #3
900191a8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
900191ac:	fb17 f704 	smulbb	r7, r7, r4
900191b0:	b2ed      	uxtb	r5, r5
900191b2:	fb1a fa04 	smulbb	sl, sl, r4
900191b6:	fb0e 7e0c 	mla	lr, lr, ip, r7
900191ba:	ea4f 07e9 	mov.w	r7, r9, asr #3
900191be:	fb15 f504 	smulbb	r5, r5, r4
900191c2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
900191c6:	fa1f fe8e 	uxth.w	lr, lr
900191ca:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900191ce:	fa5f f989 	uxtb.w	r9, r9
900191d2:	fb07 a70c 	mla	r7, r7, ip, sl
900191d6:	f10e 0401 	add.w	r4, lr, #1
900191da:	fb09 550c 	mla	r5, r9, ip, r5
900191de:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
900191e2:	9c02      	ldr	r4, [sp, #8]
900191e4:	b2ad      	uxth	r5, r5
900191e6:	b2bf      	uxth	r7, r7
900191e8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900191ec:	f105 0a01 	add.w	sl, r5, #1
900191f0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900191f4:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900191f8:	ea4a 0e0e 	orr.w	lr, sl, lr
900191fc:	f107 0a01 	add.w	sl, r7, #1
90019200:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90019204:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019208:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001920c:	ea4e 0e0a 	orr.w	lr, lr, sl
90019210:	f820 e004 	strh.w	lr, [r0, r4]
90019214:	e7aa      	b.n	9001916c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
90019216:	f04f 0900 	mov.w	r9, #0
9001921a:	eba3 0409 	sub.w	r4, r3, r9
9001921e:	2c00      	cmp	r4, #0
90019220:	f77f af4a 	ble.w	900190b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90019224:	1414      	asrs	r4, r2, #16
90019226:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001922a:	140d      	asrs	r5, r1, #16
9001922c:	fb06 5504 	mla	r5, r6, r4, r5
90019230:	9c01      	ldr	r4, [sp, #4]
90019232:	5d64      	ldrb	r4, [r4, r5]
90019234:	2cff      	cmp	r4, #255	; 0xff
90019236:	d10b      	bne.n	90019250 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90019238:	9c00      	ldr	r4, [sp, #0]
9001923a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
9001923e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
90019242:	9c11      	ldr	r4, [sp, #68]	; 0x44
90019244:	f109 0901 	add.w	r9, r9, #1
90019248:	4421      	add	r1, r4
9001924a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001924c:	4422      	add	r2, r4
9001924e:	e7e4      	b.n	9001921a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90019250:	2c00      	cmp	r4, #0
90019252:	d0f6      	beq.n	90019242 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
90019254:	9e00      	ldr	r6, [sp, #0]
90019256:	b2a7      	uxth	r7, r4
90019258:	43e4      	mvns	r4, r4
9001925a:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001925e:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
90019262:	b2e4      	uxtb	r4, r4
90019264:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019268:	122e      	asrs	r6, r5, #8
9001926a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001926e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019272:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90019276:	00ed      	lsls	r5, r5, #3
90019278:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001927c:	fb16 f604 	smulbb	r6, r6, r4
90019280:	b2ed      	uxtb	r5, r5
90019282:	fb1a fa04 	smulbb	sl, sl, r4
90019286:	fb0c 6c07 	mla	ip, ip, r7, r6
9001928a:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001928e:	fb15 f504 	smulbb	r5, r5, r4
90019292:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019296:	fa1f fc8c 	uxth.w	ip, ip
9001929a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001929e:	fa5f fe8e 	uxtb.w	lr, lr
900192a2:	fb06 a607 	mla	r6, r6, r7, sl
900192a6:	f10c 0401 	add.w	r4, ip, #1
900192aa:	fb0e 5507 	mla	r5, lr, r7, r5
900192ae:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
900192b2:	b2ad      	uxth	r5, r5
900192b4:	b2b6      	uxth	r6, r6
900192b6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900192ba:	f105 0a01 	add.w	sl, r5, #1
900192be:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
900192c2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
900192c6:	ea4a 0c0c 	orr.w	ip, sl, ip
900192ca:	f106 0a01 	add.w	sl, r6, #1
900192ce:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
900192d2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900192d6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900192da:	ea4c 0c0a 	orr.w	ip, ip, sl
900192de:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
900192e2:	e7ae      	b.n	90019242 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
900192e4:	b005      	add	sp, #20
900192e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900192ea <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900192ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900192ee:	b085      	sub	sp, #20
900192f0:	9813      	ldr	r0, [sp, #76]	; 0x4c
900192f2:	9203      	str	r2, [sp, #12]
900192f4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
900192f8:	9100      	str	r1, [sp, #0]
900192fa:	9201      	str	r2, [sp, #4]
900192fc:	6841      	ldr	r1, [r0, #4]
900192fe:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
90019302:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90019306:	fb01 2404 	mla	r4, r1, r4, r2
9001930a:	6802      	ldr	r2, [r0, #0]
9001930c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90019310:	f8de 2000 	ldr.w	r2, [lr]
90019314:	9202      	str	r2, [sp, #8]
90019316:	9a01      	ldr	r2, [sp, #4]
90019318:	43d6      	mvns	r6, r2
9001931a:	b2f6      	uxtb	r6, r6
9001931c:	9a00      	ldr	r2, [sp, #0]
9001931e:	2a00      	cmp	r2, #0
90019320:	dc03      	bgt.n	9001932a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90019322:	9a03      	ldr	r2, [sp, #12]
90019324:	2a00      	cmp	r2, #0
90019326:	f340 8124 	ble.w	90019572 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001932a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001932c:	f9be c008 	ldrsh.w	ip, [lr, #8]
90019330:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90019334:	9a10      	ldr	r2, [sp, #64]	; 0x40
90019336:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001933a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001933e:	2b00      	cmp	r3, #0
90019340:	dd0e      	ble.n	90019360 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90019342:	1408      	asrs	r0, r1, #16
90019344:	d405      	bmi.n	90019352 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90019346:	4560      	cmp	r0, ip
90019348:	da03      	bge.n	90019352 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001934a:	1410      	asrs	r0, r2, #16
9001934c:	d401      	bmi.n	90019352 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001934e:	42b8      	cmp	r0, r7
90019350:	db07      	blt.n	90019362 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90019352:	9811      	ldr	r0, [sp, #68]	; 0x44
90019354:	3b01      	subs	r3, #1
90019356:	3402      	adds	r4, #2
90019358:	4401      	add	r1, r0
9001935a:	9812      	ldr	r0, [sp, #72]	; 0x48
9001935c:	4402      	add	r2, r0
9001935e:	e7ee      	b.n	9001933e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90019360:	d06e      	beq.n	90019440 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
90019362:	1e58      	subs	r0, r3, #1
90019364:	9d11      	ldr	r5, [sp, #68]	; 0x44
90019366:	fb05 1500 	mla	r5, r5, r0, r1
9001936a:	142d      	asrs	r5, r5, #16
9001936c:	d45c      	bmi.n	90019428 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001936e:	4565      	cmp	r5, ip
90019370:	da5a      	bge.n	90019428 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90019372:	9d12      	ldr	r5, [sp, #72]	; 0x48
90019374:	fb05 2000 	mla	r0, r5, r0, r2
90019378:	1400      	asrs	r0, r0, #16
9001937a:	d455      	bmi.n	90019428 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001937c:	42b8      	cmp	r0, r7
9001937e:	da53      	bge.n	90019428 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
90019380:	4699      	mov	r9, r3
90019382:	46a2      	mov	sl, r4
90019384:	f8bd b004 	ldrh.w	fp, [sp, #4]
90019388:	f1b9 0f00 	cmp.w	r9, #0
9001938c:	dd54      	ble.n	90019438 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001938e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
90019392:	140d      	asrs	r5, r1, #16
90019394:	1410      	asrs	r0, r2, #16
90019396:	f109 39ff 	add.w	r9, r9, #4294967295
9001939a:	fb07 5000 	mla	r0, r7, r0, r5
9001939e:	9d02      	ldr	r5, [sp, #8]
900193a0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
900193a4:	f8ba 5000 	ldrh.w	r5, [sl]
900193a8:	ea4f 2c20 	mov.w	ip, r0, asr #8
900193ac:	122f      	asrs	r7, r5, #8
900193ae:	ea4f 08e5 	mov.w	r8, r5, asr #3
900193b2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900193b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
900193ba:	00ed      	lsls	r5, r5, #3
900193bc:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
900193c0:	fb17 f706 	smulbb	r7, r7, r6
900193c4:	b2ed      	uxtb	r5, r5
900193c6:	fb18 f806 	smulbb	r8, r8, r6
900193ca:	fb0c 7c0b 	mla	ip, ip, fp, r7
900193ce:	10c7      	asrs	r7, r0, #3
900193d0:	fb15 f506 	smulbb	r5, r5, r6
900193d4:	00c0      	lsls	r0, r0, #3
900193d6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900193da:	fa1f fc8c 	uxth.w	ip, ip
900193de:	b2c0      	uxtb	r0, r0
900193e0:	fb07 870b 	mla	r7, r7, fp, r8
900193e4:	fb00 500b 	mla	r0, r0, fp, r5
900193e8:	f10c 0501 	add.w	r5, ip, #1
900193ec:	b2bf      	uxth	r7, r7
900193ee:	b280      	uxth	r0, r0
900193f0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
900193f4:	f107 0801 	add.w	r8, r7, #1
900193f8:	1c45      	adds	r5, r0, #1
900193fa:	eb08 2817 	add.w	r8, r8, r7, lsr #8
900193fe:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90019402:	eb05 2510 	add.w	r5, r5, r0, lsr #8
90019406:	9811      	ldr	r0, [sp, #68]	; 0x44
90019408:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001940c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90019410:	4401      	add	r1, r0
90019412:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90019416:	9812      	ldr	r0, [sp, #72]	; 0x48
90019418:	ea45 0c0c 	orr.w	ip, r5, ip
9001941c:	4402      	add	r2, r0
9001941e:	ea4c 0c08 	orr.w	ip, ip, r8
90019422:	f82a cb02 	strh.w	ip, [sl], #2
90019426:	e7af      	b.n	90019388 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
90019428:	f04f 0800 	mov.w	r8, #0
9001942c:	f8bd a004 	ldrh.w	sl, [sp, #4]
90019430:	eb03 0008 	add.w	r0, r3, r8
90019434:	2800      	cmp	r0, #0
90019436:	dc41      	bgt.n	900194bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
90019438:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001943c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019440:	9b00      	ldr	r3, [sp, #0]
90019442:	2b00      	cmp	r3, #0
90019444:	f340 8095 	ble.w	90019572 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
90019448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001944c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001944e:	ee30 0a04 	vadd.f32	s0, s0, s8
90019452:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019456:	eef0 6a62 	vmov.f32	s13, s5
9001945a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001945e:	ee31 1a05 	vadd.f32	s2, s2, s10
90019462:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90019466:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
9001946a:	eef0 6a43 	vmov.f32	s13, s6
9001946e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90019472:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
90019476:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001947a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001947e:	ee77 2a62 	vsub.f32	s5, s14, s5
90019482:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019486:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001948a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001948e:	ee12 2a90 	vmov	r2, s5
90019492:	eef0 2a47 	vmov.f32	s5, s14
90019496:	fb92 f3f3 	sdiv	r3, r2, r3
9001949a:	ee13 2a10 	vmov	r2, s6
9001949e:	9311      	str	r3, [sp, #68]	; 0x44
900194a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900194a2:	eeb0 3a67 	vmov.f32	s6, s15
900194a6:	fb92 f3f3 	sdiv	r3, r2, r3
900194aa:	9312      	str	r3, [sp, #72]	; 0x48
900194ac:	9b00      	ldr	r3, [sp, #0]
900194ae:	9a03      	ldr	r2, [sp, #12]
900194b0:	3b01      	subs	r3, #1
900194b2:	9300      	str	r3, [sp, #0]
900194b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900194b6:	bf08      	it	eq
900194b8:	4613      	moveq	r3, r2
900194ba:	e72f      	b.n	9001931c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
900194bc:	140f      	asrs	r7, r1, #16
900194be:	d451      	bmi.n	90019564 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900194c0:	f8de 5008 	ldr.w	r5, [lr, #8]
900194c4:	42bd      	cmp	r5, r7
900194c6:	dd4d      	ble.n	90019564 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900194c8:	ea5f 4c22 	movs.w	ip, r2, asr #16
900194cc:	d44a      	bmi.n	90019564 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900194ce:	f8de 000c 	ldr.w	r0, [lr, #12]
900194d2:	4560      	cmp	r0, ip
900194d4:	dd46      	ble.n	90019564 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
900194d6:	b22d      	sxth	r5, r5
900194d8:	9802      	ldr	r0, [sp, #8]
900194da:	fb0c 7505 	mla	r5, ip, r5, r7
900194de:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
900194e2:	f06f 0501 	mvn.w	r5, #1
900194e6:	fb05 fb08 	mul.w	fp, r5, r8
900194ea:	ea4f 2c20 	mov.w	ip, r0, asr #8
900194ee:	f834 500b 	ldrh.w	r5, [r4, fp]
900194f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
900194f6:	122f      	asrs	r7, r5, #8
900194f8:	ea4f 09e5 	mov.w	r9, r5, asr #3
900194fc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90019500:	00ed      	lsls	r5, r5, #3
90019502:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
90019506:	fb17 f706 	smulbb	r7, r7, r6
9001950a:	b2ed      	uxtb	r5, r5
9001950c:	fb19 f906 	smulbb	r9, r9, r6
90019510:	fb0c 7c0a 	mla	ip, ip, sl, r7
90019514:	10c7      	asrs	r7, r0, #3
90019516:	fb15 f506 	smulbb	r5, r5, r6
9001951a:	00c0      	lsls	r0, r0, #3
9001951c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90019520:	fa1f fc8c 	uxth.w	ip, ip
90019524:	b2c0      	uxtb	r0, r0
90019526:	fb07 970a 	mla	r7, r7, sl, r9
9001952a:	fb00 500a 	mla	r0, r0, sl, r5
9001952e:	f10c 0501 	add.w	r5, ip, #1
90019532:	b2bf      	uxth	r7, r7
90019534:	b280      	uxth	r0, r0
90019536:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001953a:	f107 0901 	add.w	r9, r7, #1
9001953e:	1c45      	adds	r5, r0, #1
90019540:	eb09 2917 	add.w	r9, r9, r7, lsr #8
90019544:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90019548:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001954c:	ea4f 1959 	mov.w	r9, r9, lsr #5
90019550:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90019554:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90019558:	ea45 0c0c 	orr.w	ip, r5, ip
9001955c:	ea4c 0c09 	orr.w	ip, ip, r9
90019560:	f824 c00b 	strh.w	ip, [r4, fp]
90019564:	9811      	ldr	r0, [sp, #68]	; 0x44
90019566:	f108 38ff 	add.w	r8, r8, #4294967295
9001956a:	4401      	add	r1, r0
9001956c:	9812      	ldr	r0, [sp, #72]	; 0x48
9001956e:	4402      	add	r2, r0
90019570:	e75e      	b.n	90019430 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
90019572:	b005      	add	sp, #20
90019574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90019578 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001957c:	b085      	sub	sp, #20
9001957e:	4693      	mov	fp, r2
90019580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90019584:	9e13      	ldr	r6, [sp, #76]	; 0x4c
90019586:	9d16      	ldr	r5, [sp, #88]	; 0x58
90019588:	6870      	ldr	r0, [r6, #4]
9001958a:	9101      	str	r1, [sp, #4]
9001958c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
90019590:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
90019594:	fb00 2404 	mla	r4, r0, r4, r2
90019598:	6832      	ldr	r2, [r6, #0]
9001959a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001959e:	682a      	ldr	r2, [r5, #0]
900195a0:	9202      	str	r2, [sp, #8]
900195a2:	9a01      	ldr	r2, [sp, #4]
900195a4:	2a00      	cmp	r2, #0
900195a6:	dc03      	bgt.n	900195b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
900195a8:	f1bb 0f00 	cmp.w	fp, #0
900195ac:	f340 809a 	ble.w	900196e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
900195b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
900195b2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
900195b6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
900195ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
900195bc:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
900195c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
900195c4:	2b00      	cmp	r3, #0
900195c6:	dd0c      	ble.n	900195e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
900195c8:	1406      	asrs	r6, r0, #16
900195ca:	d405      	bmi.n	900195d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900195cc:	454e      	cmp	r6, r9
900195ce:	da03      	bge.n	900195d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900195d0:	1416      	asrs	r6, r2, #16
900195d2:	d401      	bmi.n	900195d8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
900195d4:	4546      	cmp	r6, r8
900195d6:	db05      	blt.n	900195e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900195d8:	4470      	add	r0, lr
900195da:	4462      	add	r2, ip
900195dc:	3b01      	subs	r3, #1
900195de:	3402      	adds	r4, #2
900195e0:	e7f0      	b.n	900195c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
900195e2:	d00f      	beq.n	90019604 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900195e4:	1e5e      	subs	r6, r3, #1
900195e6:	fb0e 0706 	mla	r7, lr, r6, r0
900195ea:	143f      	asrs	r7, r7, #16
900195ec:	d541      	bpl.n	90019672 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
900195ee:	eb04 0643 	add.w	r6, r4, r3, lsl #1
900195f2:	4698      	mov	r8, r3
900195f4:	9603      	str	r6, [sp, #12]
900195f6:	f1b8 0f00 	cmp.w	r8, #0
900195fa:	dc56      	bgt.n	900196aa <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
900195fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019600:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019604:	9b01      	ldr	r3, [sp, #4]
90019606:	2b00      	cmp	r3, #0
90019608:	dd6c      	ble.n	900196e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001960a:	ee30 0a04 	vadd.f32	s0, s0, s8
9001960e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019610:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019614:	eeb0 6a62 	vmov.f32	s12, s5
90019618:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001961c:	ee31 1a05 	vadd.f32	s2, s2, s10
90019620:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019624:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90019628:	eeb0 6a43 	vmov.f32	s12, s6
9001962c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019630:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90019634:	ee20 7aa7 	vmul.f32	s14, s1, s15
90019638:	ee61 7a27 	vmul.f32	s15, s2, s15
9001963c:	ee77 2a62 	vsub.f32	s5, s14, s5
90019640:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019644:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90019648:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001964c:	ee12 2a90 	vmov	r2, s5
90019650:	eef0 2a47 	vmov.f32	s5, s14
90019654:	fb92 fef3 	sdiv	lr, r2, r3
90019658:	ee13 2a10 	vmov	r2, s6
9001965c:	eeb0 3a67 	vmov.f32	s6, s15
90019660:	fb92 fcf3 	sdiv	ip, r2, r3
90019664:	9b01      	ldr	r3, [sp, #4]
90019666:	3b01      	subs	r3, #1
90019668:	9301      	str	r3, [sp, #4]
9001966a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001966c:	bf08      	it	eq
9001966e:	465b      	moveq	r3, fp
90019670:	e797      	b.n	900195a2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90019672:	454f      	cmp	r7, r9
90019674:	dabb      	bge.n	900195ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90019676:	fb0c 2606 	mla	r6, ip, r6, r2
9001967a:	1436      	asrs	r6, r6, #16
9001967c:	d4b7      	bmi.n	900195ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001967e:	4546      	cmp	r6, r8
90019680:	dab5      	bge.n	900195ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90019682:	461e      	mov	r6, r3
90019684:	46a0      	mov	r8, r4
90019686:	2e00      	cmp	r6, #0
90019688:	ddb8      	ble.n	900195fc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001968a:	1417      	asrs	r7, r2, #16
9001968c:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
90019690:	ea4f 4920 	mov.w	r9, r0, asr #16
90019694:	9902      	ldr	r1, [sp, #8]
90019696:	4470      	add	r0, lr
90019698:	4462      	add	r2, ip
9001969a:	fb0a 9707 	mla	r7, sl, r7, r9
9001969e:	3e01      	subs	r6, #1
900196a0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
900196a4:	f828 7b02 	strh.w	r7, [r8], #2
900196a8:	e7ed      	b.n	90019686 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
900196aa:	ea5f 4920 	movs.w	r9, r0, asr #16
900196ae:	d414      	bmi.n	900196da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
900196b0:	68ae      	ldr	r6, [r5, #8]
900196b2:	454e      	cmp	r6, r9
900196b4:	dd11      	ble.n	900196da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
900196b6:	ea5f 4a22 	movs.w	sl, r2, asr #16
900196ba:	d40e      	bmi.n	900196da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
900196bc:	68ef      	ldr	r7, [r5, #12]
900196be:	4557      	cmp	r7, sl
900196c0:	dd0b      	ble.n	900196da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
900196c2:	b236      	sxth	r6, r6
900196c4:	f06f 0101 	mvn.w	r1, #1
900196c8:	9f02      	ldr	r7, [sp, #8]
900196ca:	fb0a 9606 	mla	r6, sl, r6, r9
900196ce:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
900196d2:	fb01 f608 	mul.w	r6, r1, r8
900196d6:	9903      	ldr	r1, [sp, #12]
900196d8:	538f      	strh	r7, [r1, r6]
900196da:	4470      	add	r0, lr
900196dc:	4462      	add	r2, ip
900196de:	f108 38ff 	add.w	r8, r8, #4294967295
900196e2:	e788      	b.n	900195f6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
900196e4:	b005      	add	sp, #20
900196e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900196ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900196ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900196ee:	b087      	sub	sp, #28
900196f0:	468b      	mov	fp, r1
900196f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900196f6:	9815      	ldr	r0, [sp, #84]	; 0x54
900196f8:	9203      	str	r2, [sp, #12]
900196fa:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900196fe:	6841      	ldr	r1, [r0, #4]
90019700:	9204      	str	r2, [sp, #16]
90019702:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90019706:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
9001970a:	fb01 2505 	mla	r5, r1, r5, r2
9001970e:	6802      	ldr	r2, [r0, #0]
90019710:	eb02 0545 	add.w	r5, r2, r5, lsl #1
90019714:	f8d9 2000 	ldr.w	r2, [r9]
90019718:	9201      	str	r2, [sp, #4]
9001971a:	f1bb 0f00 	cmp.w	fp, #0
9001971e:	dc03      	bgt.n	90019728 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
90019720:	9a03      	ldr	r2, [sp, #12]
90019722:	2a00      	cmp	r2, #0
90019724:	f340 8158 	ble.w	900199d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90019728:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001972a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001972e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90019732:	9a12      	ldr	r2, [sp, #72]	; 0x48
90019734:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90019738:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001973c:	2b00      	cmp	r3, #0
9001973e:	dd0e      	ble.n	9001975e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90019740:	1402      	asrs	r2, r0, #16
90019742:	d405      	bmi.n	90019750 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90019744:	42ba      	cmp	r2, r7
90019746:	da03      	bge.n	90019750 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90019748:	140a      	asrs	r2, r1, #16
9001974a:	d401      	bmi.n	90019750 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001974c:	42b2      	cmp	r2, r6
9001974e:	db07      	blt.n	90019760 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90019750:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019752:	3b01      	subs	r3, #1
90019754:	3502      	adds	r5, #2
90019756:	4410      	add	r0, r2
90019758:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001975a:	4411      	add	r1, r2
9001975c:	e7ee      	b.n	9001973c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001975e:	d017      	beq.n	90019790 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
90019760:	1e5a      	subs	r2, r3, #1
90019762:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90019764:	fb04 0402 	mla	r4, r4, r2, r0
90019768:	1424      	asrs	r4, r4, #16
9001976a:	d409      	bmi.n	90019780 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001976c:	42bc      	cmp	r4, r7
9001976e:	da07      	bge.n	90019780 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90019770:	9c14      	ldr	r4, [sp, #80]	; 0x50
90019772:	fb04 1202 	mla	r2, r4, r2, r1
90019776:	1412      	asrs	r2, r2, #16
90019778:	d402      	bmi.n	90019780 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001977a:	42b2      	cmp	r2, r6
9001977c:	f2c0 80bf 	blt.w	900198fe <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90019780:	2700      	movs	r7, #0
90019782:	19da      	adds	r2, r3, r7
90019784:	2a00      	cmp	r2, #0
90019786:	dc3e      	bgt.n	90019806 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90019788:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001978c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
90019790:	f1bb 0f00 	cmp.w	fp, #0
90019794:	f340 8120 	ble.w	900199d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
90019798:	ee30 0a04 	vadd.f32	s0, s0, s8
9001979c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001979e:	ee70 0aa4 	vadd.f32	s1, s1, s9
900197a2:	f1bb 0b01 	subs.w	fp, fp, #1
900197a6:	eeb0 6a62 	vmov.f32	s12, s5
900197aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
900197ae:	ee31 1a05 	vadd.f32	s2, s2, s10
900197b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900197b6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
900197ba:	eeb0 6a43 	vmov.f32	s12, s6
900197be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
900197c2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
900197c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
900197ca:	ee61 7a27 	vmul.f32	s15, s2, s15
900197ce:	ee77 2a62 	vsub.f32	s5, s14, s5
900197d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
900197d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900197da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900197de:	ee12 2a90 	vmov	r2, s5
900197e2:	eef0 2a47 	vmov.f32	s5, s14
900197e6:	fb92 f3f3 	sdiv	r3, r2, r3
900197ea:	ee13 2a10 	vmov	r2, s6
900197ee:	9313      	str	r3, [sp, #76]	; 0x4c
900197f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900197f2:	eeb0 3a67 	vmov.f32	s6, s15
900197f6:	fb92 f3f3 	sdiv	r3, r2, r3
900197fa:	9a03      	ldr	r2, [sp, #12]
900197fc:	9314      	str	r3, [sp, #80]	; 0x50
900197fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019800:	bf08      	it	eq
90019802:	4613      	moveq	r3, r2
90019804:	e789      	b.n	9001971a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
90019806:	1406      	asrs	r6, r0, #16
90019808:	d42d      	bmi.n	90019866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001980a:	f8d9 4008 	ldr.w	r4, [r9, #8]
9001980e:	42b4      	cmp	r4, r6
90019810:	dd29      	ble.n	90019866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019812:	ea5f 4c21 	movs.w	ip, r1, asr #16
90019816:	d426      	bmi.n	90019866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019818:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001981c:	4562      	cmp	r2, ip
9001981e:	dd22      	ble.n	90019866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019820:	b224      	sxth	r4, r4
90019822:	9a01      	ldr	r2, [sp, #4]
90019824:	fb0c 6404 	mla	r4, ip, r4, r6
90019828:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
9001982c:	0e22      	lsrs	r2, r4, #24
9001982e:	d01a      	beq.n	90019866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
90019830:	9e04      	ldr	r6, [sp, #16]
90019832:	4372      	muls	r2, r6
90019834:	1c56      	adds	r6, r2, #1
90019836:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001983a:	0a26      	lsrs	r6, r4, #8
9001983c:	1212      	asrs	r2, r2, #8
9001983e:	9605      	str	r6, [sp, #20]
90019840:	2aff      	cmp	r2, #255	; 0xff
90019842:	d116      	bne.n	90019872 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
90019844:	f06f 0201 	mvn.w	r2, #1
90019848:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001984c:	fb02 fc07 	mul.w	ip, r2, r7
90019850:	0962      	lsrs	r2, r4, #5
90019852:	f026 0607 	bic.w	r6, r6, #7
90019856:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001985a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001985e:	4316      	orrs	r6, r2
90019860:	4326      	orrs	r6, r4
90019862:	f825 600c 	strh.w	r6, [r5, ip]
90019866:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019868:	3f01      	subs	r7, #1
9001986a:	4410      	add	r0, r2
9001986c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001986e:	4411      	add	r1, r2
90019870:	e787      	b.n	90019782 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90019872:	f06f 0601 	mvn.w	r6, #1
90019876:	fa1f fa82 	uxth.w	sl, r2
9001987a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
9001987e:	43d2      	mvns	r2, r2
90019880:	437e      	muls	r6, r7
90019882:	b2e4      	uxtb	r4, r4
90019884:	fb1c fc0a 	smulbb	ip, ip, sl
90019888:	b2d2      	uxtb	r2, r2
9001988a:	f835 8006 	ldrh.w	r8, [r5, r6]
9001988e:	fb14 f40a 	smulbb	r4, r4, sl
90019892:	9602      	str	r6, [sp, #8]
90019894:	ea4f 2e28 	mov.w	lr, r8, asr #8
90019898:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001989c:	fb16 f60a 	smulbb	r6, r6, sl
900198a0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
900198a4:	fb0e ce02 	mla	lr, lr, r2, ip
900198a8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
900198ac:	ea4f 08c8 	mov.w	r8, r8, lsl #3
900198b0:	fa1f fe8e 	uxth.w	lr, lr
900198b4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900198b8:	fa5f f888 	uxtb.w	r8, r8
900198bc:	fb0c 6c02 	mla	ip, ip, r2, r6
900198c0:	fb08 4402 	mla	r4, r8, r2, r4
900198c4:	f10e 0201 	add.w	r2, lr, #1
900198c8:	fa1f fc8c 	uxth.w	ip, ip
900198cc:	b2a4      	uxth	r4, r4
900198ce:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
900198d2:	9a02      	ldr	r2, [sp, #8]
900198d4:	1c66      	adds	r6, r4, #1
900198d6:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
900198da:	eb06 2614 	add.w	r6, r6, r4, lsr #8
900198de:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900198e2:	ea46 0e0e 	orr.w	lr, r6, lr
900198e6:	f10c 0601 	add.w	r6, ip, #1
900198ea:	eb06 261c 	add.w	r6, r6, ip, lsr #8
900198ee:	0976      	lsrs	r6, r6, #5
900198f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900198f4:	ea4e 0e06 	orr.w	lr, lr, r6
900198f8:	f825 e002 	strh.w	lr, [r5, r2]
900198fc:	e7b3      	b.n	90019866 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
900198fe:	f04f 0800 	mov.w	r8, #0
90019902:	eba3 0208 	sub.w	r2, r3, r8
90019906:	2a00      	cmp	r2, #0
90019908:	f77f af3e 	ble.w	90019788 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001990c:	1404      	asrs	r4, r0, #16
9001990e:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
90019912:	140a      	asrs	r2, r1, #16
90019914:	fb06 4202 	mla	r2, r6, r2, r4
90019918:	9c01      	ldr	r4, [sp, #4]
9001991a:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
9001991e:	0e22      	lsrs	r2, r4, #24
90019920:	d015      	beq.n	9001994e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
90019922:	9e04      	ldr	r6, [sp, #16]
90019924:	4372      	muls	r2, r6
90019926:	1c56      	adds	r6, r2, #1
90019928:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001992c:	0a26      	lsrs	r6, r4, #8
9001992e:	1212      	asrs	r2, r2, #8
90019930:	2aff      	cmp	r2, #255	; 0xff
90019932:	d113      	bne.n	9001995c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90019934:	0962      	lsrs	r2, r4, #5
90019936:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001993a:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001993e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019942:	f026 0607 	bic.w	r6, r6, #7
90019946:	4316      	orrs	r6, r2
90019948:	4326      	orrs	r6, r4
9001994a:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
9001994e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019950:	f108 0801 	add.w	r8, r8, #1
90019954:	4410      	add	r0, r2
90019956:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019958:	4411      	add	r1, r2
9001995a:	e7d2      	b.n	90019902 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
9001995c:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
90019960:	fa1f fa82 	uxth.w	sl, r2
90019964:	f3c4 4707 	ubfx	r7, r4, #16, #8
90019968:	43d2      	mvns	r2, r2
9001996a:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001996e:	fb17 f70a 	smulbb	r7, r7, sl
90019972:	b2d2      	uxtb	r2, r2
90019974:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019978:	b2e4      	uxtb	r4, r4
9001997a:	b2f6      	uxtb	r6, r6
9001997c:	fb0c 7c02 	mla	ip, ip, r2, r7
90019980:	ea4f 07ee 	mov.w	r7, lr, asr #3
90019984:	fb14 f40a 	smulbb	r4, r4, sl
90019988:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001998c:	fa1f fc8c 	uxth.w	ip, ip
90019990:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90019994:	fb16 f60a 	smulbb	r6, r6, sl
90019998:	fa5f fe8e 	uxtb.w	lr, lr
9001999c:	fb0e 4402 	mla	r4, lr, r2, r4
900199a0:	fb07 6702 	mla	r7, r7, r2, r6
900199a4:	f10c 0201 	add.w	r2, ip, #1
900199a8:	b2a4      	uxth	r4, r4
900199aa:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
900199ae:	1c66      	adds	r6, r4, #1
900199b0:	b2bf      	uxth	r7, r7
900199b2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900199b6:	eb06 2614 	add.w	r6, r6, r4, lsr #8
900199ba:	f3c6 26c4 	ubfx	r6, r6, #11, #5
900199be:	ea46 0c0c 	orr.w	ip, r6, ip
900199c2:	1c7e      	adds	r6, r7, #1
900199c4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
900199c8:	0976      	lsrs	r6, r6, #5
900199ca:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
900199ce:	ea4c 0c06 	orr.w	ip, ip, r6
900199d2:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
900199d6:	e7ba      	b.n	9001994e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
900199d8:	b007      	add	sp, #28
900199da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

900199e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900199e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900199e4:	b085      	sub	sp, #20
900199e6:	468b      	mov	fp, r1
900199e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
900199ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
900199ee:	9203      	str	r2, [sp, #12]
900199f0:	6841      	ldr	r1, [r0, #4]
900199f2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
900199f6:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
900199fa:	fb01 2404 	mla	r4, r1, r4, r2
900199fe:	6802      	ldr	r2, [r0, #0]
90019a00:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90019a04:	f8d8 2000 	ldr.w	r2, [r8]
90019a08:	9201      	str	r2, [sp, #4]
90019a0a:	f1bb 0f00 	cmp.w	fp, #0
90019a0e:	dc03      	bgt.n	90019a18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90019a10:	9a03      	ldr	r2, [sp, #12]
90019a12:	2a00      	cmp	r2, #0
90019a14:	f340 814f 	ble.w	90019cb6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90019a18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90019a1a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
90019a1e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90019a22:	9a10      	ldr	r2, [sp, #64]	; 0x40
90019a24:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
90019a28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
90019a2c:	2b00      	cmp	r3, #0
90019a2e:	dd0e      	ble.n	90019a4e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90019a30:	1408      	asrs	r0, r1, #16
90019a32:	d405      	bmi.n	90019a40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90019a34:	42b8      	cmp	r0, r7
90019a36:	da03      	bge.n	90019a40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90019a38:	1410      	asrs	r0, r2, #16
90019a3a:	d401      	bmi.n	90019a40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
90019a3c:	42b0      	cmp	r0, r6
90019a3e:	db07      	blt.n	90019a50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90019a40:	9811      	ldr	r0, [sp, #68]	; 0x44
90019a42:	3b01      	subs	r3, #1
90019a44:	3402      	adds	r4, #2
90019a46:	4401      	add	r1, r0
90019a48:	9812      	ldr	r0, [sp, #72]	; 0x48
90019a4a:	4402      	add	r2, r0
90019a4c:	e7ee      	b.n	90019a2c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90019a4e:	d017      	beq.n	90019a80 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
90019a50:	1e58      	subs	r0, r3, #1
90019a52:	9d11      	ldr	r5, [sp, #68]	; 0x44
90019a54:	fb05 1500 	mla	r5, r5, r0, r1
90019a58:	142d      	asrs	r5, r5, #16
90019a5a:	d409      	bmi.n	90019a70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019a5c:	42bd      	cmp	r5, r7
90019a5e:	da07      	bge.n	90019a70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019a60:	9d12      	ldr	r5, [sp, #72]	; 0x48
90019a62:	fb05 2000 	mla	r0, r5, r0, r2
90019a66:	1400      	asrs	r0, r0, #16
90019a68:	d402      	bmi.n	90019a70 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90019a6a:	42b0      	cmp	r0, r6
90019a6c:	f2c0 80ba 	blt.w	90019be4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90019a70:	2600      	movs	r6, #0
90019a72:	1998      	adds	r0, r3, r6
90019a74:	2800      	cmp	r0, #0
90019a76:	dc3e      	bgt.n	90019af6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90019a78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019a7c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019a80:	f1bb 0f00 	cmp.w	fp, #0
90019a84:	f340 8117 	ble.w	90019cb6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90019a88:	ee30 0a04 	vadd.f32	s0, s0, s8
90019a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019a8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019a92:	f1bb 0b01 	subs.w	fp, fp, #1
90019a96:	eeb0 6a62 	vmov.f32	s12, s5
90019a9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
90019a9e:	ee31 1a05 	vadd.f32	s2, s2, s10
90019aa2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019aa6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
90019aaa:	eeb0 6a43 	vmov.f32	s12, s6
90019aae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019ab2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
90019ab6:	ee20 7aa7 	vmul.f32	s14, s1, s15
90019aba:	ee61 7a27 	vmul.f32	s15, s2, s15
90019abe:	ee77 2a62 	vsub.f32	s5, s14, s5
90019ac2:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019ac6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90019aca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90019ace:	ee12 2a90 	vmov	r2, s5
90019ad2:	eef0 2a47 	vmov.f32	s5, s14
90019ad6:	fb92 f3f3 	sdiv	r3, r2, r3
90019ada:	ee13 2a10 	vmov	r2, s6
90019ade:	9311      	str	r3, [sp, #68]	; 0x44
90019ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019ae2:	eeb0 3a67 	vmov.f32	s6, s15
90019ae6:	fb92 f3f3 	sdiv	r3, r2, r3
90019aea:	9a03      	ldr	r2, [sp, #12]
90019aec:	9312      	str	r3, [sp, #72]	; 0x48
90019aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90019af0:	bf08      	it	eq
90019af2:	4613      	moveq	r3, r2
90019af4:	e789      	b.n	90019a0a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90019af6:	140f      	asrs	r7, r1, #16
90019af8:	d424      	bmi.n	90019b44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019afa:	f8d8 5008 	ldr.w	r5, [r8, #8]
90019afe:	42bd      	cmp	r5, r7
90019b00:	dd20      	ble.n	90019b44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019b02:	ea5f 4c22 	movs.w	ip, r2, asr #16
90019b06:	d41d      	bmi.n	90019b44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019b08:	f8d8 000c 	ldr.w	r0, [r8, #12]
90019b0c:	4560      	cmp	r0, ip
90019b0e:	dd19      	ble.n	90019b44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019b10:	b22d      	sxth	r5, r5
90019b12:	9801      	ldr	r0, [sp, #4]
90019b14:	fb0c 7505 	mla	r5, ip, r5, r7
90019b18:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
90019b1c:	0e07      	lsrs	r7, r0, #24
90019b1e:	2fff      	cmp	r7, #255	; 0xff
90019b20:	d116      	bne.n	90019b50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
90019b22:	f06f 0501 	mvn.w	r5, #1
90019b26:	fb05 f706 	mul.w	r7, r5, r6
90019b2a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
90019b2e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
90019b32:	0945      	lsrs	r5, r0, #5
90019b34:	f3c0 00c4 	ubfx	r0, r0, #3, #5
90019b38:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019b3c:	ea4c 0505 	orr.w	r5, ip, r5
90019b40:	4305      	orrs	r5, r0
90019b42:	53e5      	strh	r5, [r4, r7]
90019b44:	9811      	ldr	r0, [sp, #68]	; 0x44
90019b46:	3e01      	subs	r6, #1
90019b48:	4401      	add	r1, r0
90019b4a:	9812      	ldr	r0, [sp, #72]	; 0x48
90019b4c:	4402      	add	r2, r0
90019b4e:	e790      	b.n	90019a72 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90019b50:	b2fd      	uxtb	r5, r7
90019b52:	2f00      	cmp	r7, #0
90019b54:	d0f6      	beq.n	90019b44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019b56:	f06f 0701 	mvn.w	r7, #1
90019b5a:	fa1f f985 	uxth.w	r9, r5
90019b5e:	43ed      	mvns	r5, r5
90019b60:	f3c0 2a07 	ubfx	sl, r0, #8, #8
90019b64:	4377      	muls	r7, r6
90019b66:	fb1a fa09 	smulbb	sl, sl, r9
90019b6a:	b2ed      	uxtb	r5, r5
90019b6c:	f834 e007 	ldrh.w	lr, [r4, r7]
90019b70:	9702      	str	r7, [sp, #8]
90019b72:	f3c0 4707 	ubfx	r7, r0, #16, #8
90019b76:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019b7a:	fb17 f709 	smulbb	r7, r7, r9
90019b7e:	b2c0      	uxtb	r0, r0
90019b80:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019b84:	fb10 f009 	smulbb	r0, r0, r9
90019b88:	fb0c 7c05 	mla	ip, ip, r5, r7
90019b8c:	ea4f 07ee 	mov.w	r7, lr, asr #3
90019b90:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019b94:	fa1f fc8c 	uxth.w	ip, ip
90019b98:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90019b9c:	fa5f fe8e 	uxtb.w	lr, lr
90019ba0:	fb07 a705 	mla	r7, r7, r5, sl
90019ba4:	fb0e 0005 	mla	r0, lr, r5, r0
90019ba8:	f10c 0501 	add.w	r5, ip, #1
90019bac:	b2bf      	uxth	r7, r7
90019bae:	b280      	uxth	r0, r0
90019bb0:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
90019bb4:	f100 0a01 	add.w	sl, r0, #1
90019bb8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90019bbc:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
90019bc0:	9802      	ldr	r0, [sp, #8]
90019bc2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019bc6:	ea4a 0c0c 	orr.w	ip, sl, ip
90019bca:	f107 0a01 	add.w	sl, r7, #1
90019bce:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
90019bd2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019bd6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90019bda:	ea4c 0c0a 	orr.w	ip, ip, sl
90019bde:	f824 c000 	strh.w	ip, [r4, r0]
90019be2:	e7af      	b.n	90019b44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90019be4:	f04f 0e00 	mov.w	lr, #0
90019be8:	eba3 000e 	sub.w	r0, r3, lr
90019bec:	2800      	cmp	r0, #0
90019bee:	f77f af43 	ble.w	90019a78 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90019bf2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
90019bf6:	140d      	asrs	r5, r1, #16
90019bf8:	1410      	asrs	r0, r2, #16
90019bfa:	fb06 5000 	mla	r0, r6, r0, r5
90019bfe:	9d01      	ldr	r5, [sp, #4]
90019c00:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
90019c04:	0e2e      	lsrs	r6, r5, #24
90019c06:	2eff      	cmp	r6, #255	; 0xff
90019c08:	d112      	bne.n	90019c30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
90019c0a:	482c      	ldr	r0, [pc, #176]	; (90019cbc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
90019c0c:	ea00 2615 	and.w	r6, r0, r5, lsr #8
90019c10:	0968      	lsrs	r0, r5, #5
90019c12:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90019c16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90019c1a:	4330      	orrs	r0, r6
90019c1c:	4328      	orrs	r0, r5
90019c1e:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
90019c22:	9811      	ldr	r0, [sp, #68]	; 0x44
90019c24:	f10e 0e01 	add.w	lr, lr, #1
90019c28:	4401      	add	r1, r0
90019c2a:	9812      	ldr	r0, [sp, #72]	; 0x48
90019c2c:	4402      	add	r2, r0
90019c2e:	e7db      	b.n	90019be8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
90019c30:	b2f0      	uxtb	r0, r6
90019c32:	2e00      	cmp	r6, #0
90019c34:	d0f5      	beq.n	90019c22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90019c36:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
90019c3a:	fa1f f980 	uxth.w	r9, r0
90019c3e:	f3c5 4607 	ubfx	r6, r5, #16, #8
90019c42:	43c0      	mvns	r0, r0
90019c44:	ea4f 272c 	mov.w	r7, ip, asr #8
90019c48:	f3c5 2a07 	ubfx	sl, r5, #8, #8
90019c4c:	fb16 f609 	smulbb	r6, r6, r9
90019c50:	b2c0      	uxtb	r0, r0
90019c52:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
90019c56:	b2ed      	uxtb	r5, r5
90019c58:	fb1a fa09 	smulbb	sl, sl, r9
90019c5c:	fb07 6700 	mla	r7, r7, r0, r6
90019c60:	ea4f 06ec 	mov.w	r6, ip, asr #3
90019c64:	fb15 f509 	smulbb	r5, r5, r9
90019c68:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90019c6c:	b2bf      	uxth	r7, r7
90019c6e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
90019c72:	fa5f fc8c 	uxtb.w	ip, ip
90019c76:	fb06 a600 	mla	r6, r6, r0, sl
90019c7a:	fb0c 5500 	mla	r5, ip, r0, r5
90019c7e:	1c78      	adds	r0, r7, #1
90019c80:	b2b6      	uxth	r6, r6
90019c82:	b2ad      	uxth	r5, r5
90019c84:	eb00 2717 	add.w	r7, r0, r7, lsr #8
90019c88:	f105 0a01 	add.w	sl, r5, #1
90019c8c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
90019c90:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
90019c94:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
90019c98:	ea4a 0707 	orr.w	r7, sl, r7
90019c9c:	f106 0a01 	add.w	sl, r6, #1
90019ca0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
90019ca4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
90019ca8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
90019cac:	ea47 070a 	orr.w	r7, r7, sl
90019cb0:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
90019cb4:	e7b5      	b.n	90019c22 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90019cb6:	b005      	add	sp, #20
90019cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019cbc:	fffff800 	.word	0xfffff800

90019cc0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019cc4:	b087      	sub	sp, #28
90019cc6:	468b      	mov	fp, r1
90019cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90019ccc:	9815      	ldr	r0, [sp, #84]	; 0x54
90019cce:	9203      	str	r2, [sp, #12]
90019cd0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
90019cd4:	6841      	ldr	r1, [r0, #4]
90019cd6:	9204      	str	r2, [sp, #16]
90019cd8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
90019cdc:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
90019ce0:	fb01 2404 	mla	r4, r1, r4, r2
90019ce4:	6802      	ldr	r2, [r0, #0]
90019ce6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
90019cea:	f8d9 2008 	ldr.w	r2, [r9, #8]
90019cee:	3201      	adds	r2, #1
90019cf0:	f022 0201 	bic.w	r2, r2, #1
90019cf4:	9200      	str	r2, [sp, #0]
90019cf6:	f8d9 2000 	ldr.w	r2, [r9]
90019cfa:	9201      	str	r2, [sp, #4]
90019cfc:	f1bb 0f00 	cmp.w	fp, #0
90019d00:	dc03      	bgt.n	90019d0a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90019d02:	9a03      	ldr	r2, [sp, #12]
90019d04:	2a00      	cmp	r2, #0
90019d06:	f340 816a 	ble.w	90019fde <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90019d0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
90019d0c:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
90019d10:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
90019d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
90019d16:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
90019d1a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
90019d1e:	2b00      	cmp	r3, #0
90019d20:	dd0e      	ble.n	90019d40 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
90019d22:	1402      	asrs	r2, r0, #16
90019d24:	d405      	bmi.n	90019d32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90019d26:	42ba      	cmp	r2, r7
90019d28:	da03      	bge.n	90019d32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90019d2a:	140a      	asrs	r2, r1, #16
90019d2c:	d401      	bmi.n	90019d32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
90019d2e:	42b2      	cmp	r2, r6
90019d30:	db07      	blt.n	90019d42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90019d32:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019d34:	3b01      	subs	r3, #1
90019d36:	3402      	adds	r4, #2
90019d38:	4410      	add	r0, r2
90019d3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019d3c:	4411      	add	r1, r2
90019d3e:	e7ee      	b.n	90019d1e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
90019d40:	d017      	beq.n	90019d72 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
90019d42:	1e5a      	subs	r2, r3, #1
90019d44:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90019d46:	fb05 0502 	mla	r5, r5, r2, r0
90019d4a:	142d      	asrs	r5, r5, #16
90019d4c:	d409      	bmi.n	90019d62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019d4e:	42bd      	cmp	r5, r7
90019d50:	da07      	bge.n	90019d62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019d52:	9d14      	ldr	r5, [sp, #80]	; 0x50
90019d54:	fb05 1202 	mla	r2, r5, r2, r1
90019d58:	1412      	asrs	r2, r2, #16
90019d5a:	d402      	bmi.n	90019d62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
90019d5c:	42b2      	cmp	r2, r6
90019d5e:	f2c0 80c8 	blt.w	90019ef2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
90019d62:	2700      	movs	r7, #0
90019d64:	19da      	adds	r2, r3, r7
90019d66:	2a00      	cmp	r2, #0
90019d68:	dc3e      	bgt.n	90019de8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
90019d6a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90019d6e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
90019d72:	f1bb 0f00 	cmp.w	fp, #0
90019d76:	f340 8132 	ble.w	90019fde <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90019d7a:	ee30 0a04 	vadd.f32	s0, s0, s8
90019d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019d80:	ee70 0aa4 	vadd.f32	s1, s1, s9
90019d84:	f1bb 0b01 	subs.w	fp, fp, #1
90019d88:	eeb0 6a62 	vmov.f32	s12, s5
90019d8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
90019d90:	ee31 1a05 	vadd.f32	s2, s2, s10
90019d94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019d98:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
90019d9c:	eeb0 6a43 	vmov.f32	s12, s6
90019da0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90019da4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
90019da8:	ee20 7aa7 	vmul.f32	s14, s1, s15
90019dac:	ee61 7a27 	vmul.f32	s15, s2, s15
90019db0:	ee77 2a62 	vsub.f32	s5, s14, s5
90019db4:	ee37 3ac3 	vsub.f32	s6, s15, s6
90019db8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90019dbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90019dc0:	ee12 2a90 	vmov	r2, s5
90019dc4:	eef0 2a47 	vmov.f32	s5, s14
90019dc8:	fb92 f3f3 	sdiv	r3, r2, r3
90019dcc:	ee13 2a10 	vmov	r2, s6
90019dd0:	9313      	str	r3, [sp, #76]	; 0x4c
90019dd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019dd4:	eeb0 3a67 	vmov.f32	s6, s15
90019dd8:	fb92 f3f3 	sdiv	r3, r2, r3
90019ddc:	9a03      	ldr	r2, [sp, #12]
90019dde:	9314      	str	r3, [sp, #80]	; 0x50
90019de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
90019de2:	bf08      	it	eq
90019de4:	4613      	moveq	r3, r2
90019de6:	e789      	b.n	90019cfc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90019de8:	1405      	asrs	r5, r0, #16
90019dea:	d436      	bmi.n	90019e5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019dec:	f8d9 2008 	ldr.w	r2, [r9, #8]
90019df0:	42aa      	cmp	r2, r5
90019df2:	dd32      	ble.n	90019e5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019df4:	140e      	asrs	r6, r1, #16
90019df6:	d430      	bmi.n	90019e5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019df8:	f8d9 200c 	ldr.w	r2, [r9, #12]
90019dfc:	42b2      	cmp	r2, r6
90019dfe:	dd2c      	ble.n	90019e5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019e00:	9a00      	ldr	r2, [sp, #0]
90019e02:	fb06 5502 	mla	r5, r6, r2, r5
90019e06:	9e01      	ldr	r6, [sp, #4]
90019e08:	086a      	lsrs	r2, r5, #1
90019e0a:	5cb2      	ldrb	r2, [r6, r2]
90019e0c:	07ee      	lsls	r6, r5, #31
90019e0e:	bf54      	ite	pl
90019e10:	f002 020f 	andpl.w	r2, r2, #15
90019e14:	1112      	asrmi	r2, r2, #4
90019e16:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90019e1a:	b2d2      	uxtb	r2, r2
90019e1c:	b1ea      	cbz	r2, 90019e5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019e1e:	9d04      	ldr	r5, [sp, #16]
90019e20:	436a      	muls	r2, r5
90019e22:	1c55      	adds	r5, r2, #1
90019e24:	eb05 2222 	add.w	r2, r5, r2, asr #8
90019e28:	4d6e      	ldr	r5, [pc, #440]	; (90019fe4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90019e2a:	1212      	asrs	r2, r2, #8
90019e2c:	682d      	ldr	r5, [r5, #0]
90019e2e:	2aff      	cmp	r2, #255	; 0xff
90019e30:	ea4f 2615 	mov.w	r6, r5, lsr #8
90019e34:	9605      	str	r6, [sp, #20]
90019e36:	d116      	bne.n	90019e66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
90019e38:	f06f 0201 	mvn.w	r2, #1
90019e3c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
90019e40:	fb02 fc07 	mul.w	ip, r2, r7
90019e44:	096a      	lsrs	r2, r5, #5
90019e46:	f026 0607 	bic.w	r6, r6, #7
90019e4a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
90019e4e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019e52:	4316      	orrs	r6, r2
90019e54:	432e      	orrs	r6, r5
90019e56:	f824 600c 	strh.w	r6, [r4, ip]
90019e5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019e5c:	3f01      	subs	r7, #1
90019e5e:	4410      	add	r0, r2
90019e60:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019e62:	4411      	add	r1, r2
90019e64:	e77e      	b.n	90019d64 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
90019e66:	f06f 0601 	mvn.w	r6, #1
90019e6a:	fa1f fa82 	uxth.w	sl, r2
90019e6e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
90019e72:	43d2      	mvns	r2, r2
90019e74:	437e      	muls	r6, r7
90019e76:	b2ed      	uxtb	r5, r5
90019e78:	fb1c fc0a 	smulbb	ip, ip, sl
90019e7c:	b2d2      	uxtb	r2, r2
90019e7e:	f834 8006 	ldrh.w	r8, [r4, r6]
90019e82:	fb15 f50a 	smulbb	r5, r5, sl
90019e86:	9602      	str	r6, [sp, #8]
90019e88:	ea4f 2e28 	mov.w	lr, r8, asr #8
90019e8c:	f89d 6014 	ldrb.w	r6, [sp, #20]
90019e90:	fb16 f60a 	smulbb	r6, r6, sl
90019e94:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90019e98:	fb0e ce02 	mla	lr, lr, r2, ip
90019e9c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
90019ea0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
90019ea4:	fa1f fe8e 	uxth.w	lr, lr
90019ea8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90019eac:	fa5f f888 	uxtb.w	r8, r8
90019eb0:	fb0c 6c02 	mla	ip, ip, r2, r6
90019eb4:	fb08 5502 	mla	r5, r8, r2, r5
90019eb8:	f10e 0201 	add.w	r2, lr, #1
90019ebc:	fa1f fc8c 	uxth.w	ip, ip
90019ec0:	b2ad      	uxth	r5, r5
90019ec2:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
90019ec6:	9a02      	ldr	r2, [sp, #8]
90019ec8:	1c6e      	adds	r6, r5, #1
90019eca:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
90019ece:	eb06 2615 	add.w	r6, r6, r5, lsr #8
90019ed2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
90019ed6:	ea46 0e0e 	orr.w	lr, r6, lr
90019eda:	f10c 0601 	add.w	r6, ip, #1
90019ede:	eb06 261c 	add.w	r6, r6, ip, lsr #8
90019ee2:	0976      	lsrs	r6, r6, #5
90019ee4:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
90019ee8:	ea4e 0e06 	orr.w	lr, lr, r6
90019eec:	f824 e002 	strh.w	lr, [r4, r2]
90019ef0:	e7b3      	b.n	90019e5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90019ef2:	f04f 0800 	mov.w	r8, #0
90019ef6:	eba3 0208 	sub.w	r2, r3, r8
90019efa:	2a00      	cmp	r2, #0
90019efc:	f77f af35 	ble.w	90019d6a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
90019f00:	1402      	asrs	r2, r0, #16
90019f02:	9e00      	ldr	r6, [sp, #0]
90019f04:	140d      	asrs	r5, r1, #16
90019f06:	fb06 2505 	mla	r5, r6, r5, r2
90019f0a:	9e01      	ldr	r6, [sp, #4]
90019f0c:	086a      	lsrs	r2, r5, #1
90019f0e:	07ed      	lsls	r5, r5, #31
90019f10:	5cb2      	ldrb	r2, [r6, r2]
90019f12:	bf54      	ite	pl
90019f14:	f002 020f 	andpl.w	r2, r2, #15
90019f18:	1112      	asrmi	r2, r2, #4
90019f1a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90019f1e:	b2d2      	uxtb	r2, r2
90019f20:	b1c2      	cbz	r2, 90019f54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90019f22:	9d04      	ldr	r5, [sp, #16]
90019f24:	436a      	muls	r2, r5
90019f26:	1c55      	adds	r5, r2, #1
90019f28:	eb05 2222 	add.w	r2, r5, r2, asr #8
90019f2c:	4d2d      	ldr	r5, [pc, #180]	; (90019fe4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
90019f2e:	1212      	asrs	r2, r2, #8
90019f30:	682e      	ldr	r6, [r5, #0]
90019f32:	2aff      	cmp	r2, #255	; 0xff
90019f34:	ea4f 2516 	mov.w	r5, r6, lsr #8
90019f38:	d113      	bne.n	90019f62 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
90019f3a:	0972      	lsrs	r2, r6, #5
90019f3c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
90019f40:	f3c6 06c4 	ubfx	r6, r6, #3, #5
90019f44:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90019f48:	f025 0507 	bic.w	r5, r5, #7
90019f4c:	4315      	orrs	r5, r2
90019f4e:	4335      	orrs	r5, r6
90019f50:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
90019f54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90019f56:	f108 0801 	add.w	r8, r8, #1
90019f5a:	4410      	add	r0, r2
90019f5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
90019f5e:	4411      	add	r1, r2
90019f60:	e7c9      	b.n	90019ef6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90019f62:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
90019f66:	fa1f fa82 	uxth.w	sl, r2
90019f6a:	f3c6 4707 	ubfx	r7, r6, #16, #8
90019f6e:	43d2      	mvns	r2, r2
90019f70:	ea4f 2c2e 	mov.w	ip, lr, asr #8
90019f74:	fb17 f70a 	smulbb	r7, r7, sl
90019f78:	b2d2      	uxtb	r2, r2
90019f7a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90019f7e:	b2f6      	uxtb	r6, r6
90019f80:	b2ed      	uxtb	r5, r5
90019f82:	fb0c 7c02 	mla	ip, ip, r2, r7
90019f86:	ea4f 07ee 	mov.w	r7, lr, asr #3
90019f8a:	fb16 f60a 	smulbb	r6, r6, sl
90019f8e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90019f92:	fa1f fc8c 	uxth.w	ip, ip
90019f96:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90019f9a:	fb15 f50a 	smulbb	r5, r5, sl
90019f9e:	fa5f fe8e 	uxtb.w	lr, lr
90019fa2:	fb0e 6602 	mla	r6, lr, r2, r6
90019fa6:	fb07 5702 	mla	r7, r7, r2, r5
90019faa:	f10c 0201 	add.w	r2, ip, #1
90019fae:	b2b6      	uxth	r6, r6
90019fb0:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
90019fb4:	1c75      	adds	r5, r6, #1
90019fb6:	b2bf      	uxth	r7, r7
90019fb8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90019fbc:	eb05 2516 	add.w	r5, r5, r6, lsr #8
90019fc0:	f3c5 25c4 	ubfx	r5, r5, #11, #5
90019fc4:	ea45 0c0c 	orr.w	ip, r5, ip
90019fc8:	1c7d      	adds	r5, r7, #1
90019fca:	eb05 2517 	add.w	r5, r5, r7, lsr #8
90019fce:	096d      	lsrs	r5, r5, #5
90019fd0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90019fd4:	ea4c 0c05 	orr.w	ip, ip, r5
90019fd8:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
90019fdc:	e7ba      	b.n	90019f54 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
90019fde:	b007      	add	sp, #28
90019fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019fe4:	24026464 	.word	0x24026464

90019fe8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90019fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90019fec:	b087      	sub	sp, #28
90019fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90019ff2:	f8df 8308 	ldr.w	r8, [pc, #776]	; 9001a2fc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
90019ff6:	9815      	ldr	r0, [sp, #84]	; 0x54
90019ff8:	9101      	str	r1, [sp, #4]
90019ffa:	9205      	str	r2, [sp, #20]
90019ffc:	6841      	ldr	r1, [r0, #4]
90019ffe:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
9001a002:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001a006:	fb01 2404 	mla	r4, r1, r4, r2
9001a00a:	6802      	ldr	r2, [r0, #0]
9001a00c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001a010:	f8db 2008 	ldr.w	r2, [fp, #8]
9001a014:	3201      	adds	r2, #1
9001a016:	f022 0201 	bic.w	r2, r2, #1
9001a01a:	9202      	str	r2, [sp, #8]
9001a01c:	f8db 2000 	ldr.w	r2, [fp]
9001a020:	9203      	str	r2, [sp, #12]
9001a022:	9a01      	ldr	r2, [sp, #4]
9001a024:	2a00      	cmp	r2, #0
9001a026:	dc03      	bgt.n	9001a030 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001a028:	9a05      	ldr	r2, [sp, #20]
9001a02a:	2a00      	cmp	r2, #0
9001a02c:	f340 8162 	ble.w	9001a2f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001a030:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001a032:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001a036:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001a03a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001a03c:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
9001a040:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001a044:	2b00      	cmp	r3, #0
9001a046:	dd0e      	ble.n	9001a066 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001a048:	1402      	asrs	r2, r0, #16
9001a04a:	d405      	bmi.n	9001a058 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001a04c:	42ba      	cmp	r2, r7
9001a04e:	da03      	bge.n	9001a058 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001a050:	140a      	asrs	r2, r1, #16
9001a052:	d401      	bmi.n	9001a058 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001a054:	42b2      	cmp	r2, r6
9001a056:	db07      	blt.n	9001a068 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001a058:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001a05a:	3b01      	subs	r3, #1
9001a05c:	3402      	adds	r4, #2
9001a05e:	4410      	add	r0, r2
9001a060:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001a062:	4411      	add	r1, r2
9001a064:	e7ee      	b.n	9001a044 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001a066:	d017      	beq.n	9001a098 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001a068:	1e5a      	subs	r2, r3, #1
9001a06a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001a06c:	fb05 0502 	mla	r5, r5, r2, r0
9001a070:	142d      	asrs	r5, r5, #16
9001a072:	d409      	bmi.n	9001a088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001a074:	42bd      	cmp	r5, r7
9001a076:	da07      	bge.n	9001a088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001a078:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001a07a:	fb05 1202 	mla	r2, r5, r2, r1
9001a07e:	1412      	asrs	r2, r2, #16
9001a080:	d402      	bmi.n	9001a088 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001a082:	42b2      	cmp	r2, r6
9001a084:	f2c0 80c3 	blt.w	9001a20e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
9001a088:	2500      	movs	r5, #0
9001a08a:	195a      	adds	r2, r3, r5
9001a08c:	2a00      	cmp	r2, #0
9001a08e:	dc3f      	bgt.n	9001a110 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001a090:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001a094:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001a098:	9b01      	ldr	r3, [sp, #4]
9001a09a:	2b00      	cmp	r3, #0
9001a09c:	f340 812a 	ble.w	9001a2f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001a0a0:	ee30 0a04 	vadd.f32	s0, s0, s8
9001a0a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001a0a6:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001a0aa:	eeb0 6a62 	vmov.f32	s12, s5
9001a0ae:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001a0b2:	ee31 1a05 	vadd.f32	s2, s2, s10
9001a0b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001a0ba:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001a0be:	eeb0 6a43 	vmov.f32	s12, s6
9001a0c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001a0c6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001a0ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001a0ce:	ee61 7a27 	vmul.f32	s15, s2, s15
9001a0d2:	ee77 2a62 	vsub.f32	s5, s14, s5
9001a0d6:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001a0da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001a0de:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001a0e2:	ee12 2a90 	vmov	r2, s5
9001a0e6:	eef0 2a47 	vmov.f32	s5, s14
9001a0ea:	fb92 f3f3 	sdiv	r3, r2, r3
9001a0ee:	ee13 2a10 	vmov	r2, s6
9001a0f2:	9313      	str	r3, [sp, #76]	; 0x4c
9001a0f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001a0f6:	eeb0 3a67 	vmov.f32	s6, s15
9001a0fa:	fb92 f3f3 	sdiv	r3, r2, r3
9001a0fe:	9314      	str	r3, [sp, #80]	; 0x50
9001a100:	9b01      	ldr	r3, [sp, #4]
9001a102:	9a05      	ldr	r2, [sp, #20]
9001a104:	3b01      	subs	r3, #1
9001a106:	9301      	str	r3, [sp, #4]
9001a108:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001a10a:	bf08      	it	eq
9001a10c:	4613      	moveq	r3, r2
9001a10e:	e788      	b.n	9001a022 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001a110:	1406      	asrs	r6, r0, #16
9001a112:	d42c      	bmi.n	9001a16e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001a114:	f8db 2008 	ldr.w	r2, [fp, #8]
9001a118:	42b2      	cmp	r2, r6
9001a11a:	dd28      	ble.n	9001a16e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001a11c:	140f      	asrs	r7, r1, #16
9001a11e:	d426      	bmi.n	9001a16e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001a120:	f8db 200c 	ldr.w	r2, [fp, #12]
9001a124:	42ba      	cmp	r2, r7
9001a126:	dd22      	ble.n	9001a16e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001a128:	9a02      	ldr	r2, [sp, #8]
9001a12a:	fb07 6602 	mla	r6, r7, r2, r6
9001a12e:	9f03      	ldr	r7, [sp, #12]
9001a130:	0872      	lsrs	r2, r6, #1
9001a132:	07f6      	lsls	r6, r6, #31
9001a134:	5cba      	ldrb	r2, [r7, r2]
9001a136:	bf54      	ite	pl
9001a138:	f002 020f 	andpl.w	r2, r2, #15
9001a13c:	1112      	asrmi	r2, r2, #4
9001a13e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001a142:	b2d2      	uxtb	r2, r2
9001a144:	2aff      	cmp	r2, #255	; 0xff
9001a146:	d118      	bne.n	9001a17a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
9001a148:	f06f 0601 	mvn.w	r6, #1
9001a14c:	f8d8 2000 	ldr.w	r2, [r8]
9001a150:	fb06 f705 	mul.w	r7, r6, r5
9001a154:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
9001a158:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
9001a15c:	0956      	lsrs	r6, r2, #5
9001a15e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001a162:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001a166:	ea4c 0606 	orr.w	r6, ip, r6
9001a16a:	4316      	orrs	r6, r2
9001a16c:	53e6      	strh	r6, [r4, r7]
9001a16e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001a170:	3d01      	subs	r5, #1
9001a172:	4410      	add	r0, r2
9001a174:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001a176:	4411      	add	r1, r2
9001a178:	e787      	b.n	9001a08a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001a17a:	2a00      	cmp	r2, #0
9001a17c:	d0f7      	beq.n	9001a16e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001a17e:	f06f 0601 	mvn.w	r6, #1
9001a182:	f8d8 c000 	ldr.w	ip, [r8]
9001a186:	fa1f f982 	uxth.w	r9, r2
9001a18a:	43d2      	mvns	r2, r2
9001a18c:	436e      	muls	r6, r5
9001a18e:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001a192:	b2d2      	uxtb	r2, r2
9001a194:	f834 e006 	ldrh.w	lr, [r4, r6]
9001a198:	fb1a fa09 	smulbb	sl, sl, r9
9001a19c:	9604      	str	r6, [sp, #16]
9001a19e:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001a1a2:	ea4f 272e 	mov.w	r7, lr, asr #8
9001a1a6:	fb16 f609 	smulbb	r6, r6, r9
9001a1aa:	fa5f fc8c 	uxtb.w	ip, ip
9001a1ae:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001a1b2:	fb1c fc09 	smulbb	ip, ip, r9
9001a1b6:	fb07 6702 	mla	r7, r7, r2, r6
9001a1ba:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001a1be:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001a1c2:	b2bf      	uxth	r7, r7
9001a1c4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001a1c8:	fa5f fe8e 	uxtb.w	lr, lr
9001a1cc:	fb06 a602 	mla	r6, r6, r2, sl
9001a1d0:	fb0e cc02 	mla	ip, lr, r2, ip
9001a1d4:	1c7a      	adds	r2, r7, #1
9001a1d6:	b2b6      	uxth	r6, r6
9001a1d8:	fa1f fc8c 	uxth.w	ip, ip
9001a1dc:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001a1e0:	9a04      	ldr	r2, [sp, #16]
9001a1e2:	f10c 0a01 	add.w	sl, ip, #1
9001a1e6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001a1ea:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
9001a1ee:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001a1f2:	ea4a 0707 	orr.w	r7, sl, r7
9001a1f6:	f106 0a01 	add.w	sl, r6, #1
9001a1fa:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001a1fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001a202:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001a206:	ea47 070a 	orr.w	r7, r7, sl
9001a20a:	52a7      	strh	r7, [r4, r2]
9001a20c:	e7af      	b.n	9001a16e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001a20e:	f04f 0e00 	mov.w	lr, #0
9001a212:	eba3 020e 	sub.w	r2, r3, lr
9001a216:	2a00      	cmp	r2, #0
9001a218:	f77f af3a 	ble.w	9001a090 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001a21c:	1402      	asrs	r2, r0, #16
9001a21e:	9e02      	ldr	r6, [sp, #8]
9001a220:	140d      	asrs	r5, r1, #16
9001a222:	fb06 2505 	mla	r5, r6, r5, r2
9001a226:	9e03      	ldr	r6, [sp, #12]
9001a228:	086a      	lsrs	r2, r5, #1
9001a22a:	07ed      	lsls	r5, r5, #31
9001a22c:	5cb2      	ldrb	r2, [r6, r2]
9001a22e:	bf54      	ite	pl
9001a230:	f002 020f 	andpl.w	r2, r2, #15
9001a234:	1112      	asrmi	r2, r2, #4
9001a236:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001a23a:	b2d2      	uxtb	r2, r2
9001a23c:	2aff      	cmp	r2, #255	; 0xff
9001a23e:	d115      	bne.n	9001a26c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
9001a240:	f8d8 5000 	ldr.w	r5, [r8]
9001a244:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
9001a248:	ea02 2615 	and.w	r6, r2, r5, lsr #8
9001a24c:	096a      	lsrs	r2, r5, #5
9001a24e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001a252:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001a256:	4332      	orrs	r2, r6
9001a258:	432a      	orrs	r2, r5
9001a25a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001a25e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001a260:	f10e 0e01 	add.w	lr, lr, #1
9001a264:	4410      	add	r0, r2
9001a266:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001a268:	4411      	add	r1, r2
9001a26a:	e7d2      	b.n	9001a212 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001a26c:	2a00      	cmp	r2, #0
9001a26e:	d0f6      	beq.n	9001a25e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001a270:	f8d8 7000 	ldr.w	r7, [r8]
9001a274:	fa1f f982 	uxth.w	r9, r2
9001a278:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001a27c:	43d2      	mvns	r2, r2
9001a27e:	f3c7 4507 	ubfx	r5, r7, #16, #8
9001a282:	f3c7 2a07 	ubfx	sl, r7, #8, #8
9001a286:	ea4f 262c 	mov.w	r6, ip, asr #8
9001a28a:	fb15 f509 	smulbb	r5, r5, r9
9001a28e:	b2d2      	uxtb	r2, r2
9001a290:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001a294:	b2ff      	uxtb	r7, r7
9001a296:	fb1a fa09 	smulbb	sl, sl, r9
9001a29a:	fb06 5602 	mla	r6, r6, r2, r5
9001a29e:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001a2a2:	fb17 f709 	smulbb	r7, r7, r9
9001a2a6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001a2aa:	b2b6      	uxth	r6, r6
9001a2ac:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001a2b0:	fa5f fc8c 	uxtb.w	ip, ip
9001a2b4:	fb05 a502 	mla	r5, r5, r2, sl
9001a2b8:	fb0c 7702 	mla	r7, ip, r2, r7
9001a2bc:	1c72      	adds	r2, r6, #1
9001a2be:	b2ad      	uxth	r5, r5
9001a2c0:	b2bf      	uxth	r7, r7
9001a2c2:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9001a2c6:	f107 0a01 	add.w	sl, r7, #1
9001a2ca:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001a2ce:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001a2d2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001a2d6:	ea4a 0606 	orr.w	r6, sl, r6
9001a2da:	f105 0a01 	add.w	sl, r5, #1
9001a2de:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001a2e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001a2e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001a2ea:	ea46 060a 	orr.w	r6, r6, sl
9001a2ee:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
9001a2f2:	e7b4      	b.n	9001a25e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001a2f4:	b007      	add	sp, #28
9001a2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a2fa:	bf00      	nop
9001a2fc:	24026464 	.word	0x24026464

9001a300 <_ZN8touchgfx8LCD16bppD1Ev>:
9001a300:	4770      	bx	lr

9001a302 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
9001a302:	4770      	bx	lr

9001a304 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
9001a304:	4770      	bx	lr

9001a306 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
9001a306:	4770      	bx	lr

9001a308 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
9001a308:	4770      	bx	lr

9001a30a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001a30a:	4770      	bx	lr

9001a30c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001a30c:	4770      	bx	lr

9001a30e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001a30e:	4770      	bx	lr

9001a310 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001a310:	4770      	bx	lr

9001a312 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001a312:	4770      	bx	lr

9001a314 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001a314:	4770      	bx	lr

9001a316 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001a316:	4770      	bx	lr

9001a318 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001a318:	4770      	bx	lr

9001a31a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001a31a:	4770      	bx	lr

9001a31c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001a31c:	4770      	bx	lr

9001a31e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001a31e:	4770      	bx	lr

9001a320 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
9001a320:	4770      	bx	lr

9001a322 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001a322:	4770      	bx	lr

9001a324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001a324:	4770      	bx	lr

9001a326 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001a326:	4770      	bx	lr

9001a328 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001a328:	4770      	bx	lr

9001a32a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001a32a:	4770      	bx	lr

9001a32c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
9001a32c:	4770      	bx	lr

9001a32e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
9001a32e:	4770      	bx	lr

9001a330 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
9001a330:	4770      	bx	lr

9001a332 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001a332:	4770      	bx	lr

9001a334 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001a334:	4770      	bx	lr

9001a336 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001a336:	4770      	bx	lr

9001a338 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001a338:	4770      	bx	lr

9001a33a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
9001a33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a33e:	b088      	sub	sp, #32
9001a340:	4606      	mov	r6, r0
9001a342:	4688      	mov	r8, r1
9001a344:	4691      	mov	r9, r2
9001a346:	ac08      	add	r4, sp, #32
9001a348:	f824 3d0c 	strh.w	r3, [r4, #-12]!
9001a34c:	4620      	mov	r0, r4
9001a34e:	f7fd fc67 	bl	90017c20 <_ZNK8touchgfx6Bitmap7getDataEv>
9001a352:	6833      	ldr	r3, [r6, #0]
9001a354:	4605      	mov	r5, r0
9001a356:	4620      	mov	r0, r4
9001a358:	699f      	ldr	r7, [r3, #24]
9001a35a:	f7fd fb75 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001a35e:	4682      	mov	sl, r0
9001a360:	4620      	mov	r0, r4
9001a362:	f7fd fba5 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001a366:	9500      	str	r5, [sp, #0]
9001a368:	464b      	mov	r3, r9
9001a36a:	4642      	mov	r2, r8
9001a36c:	4631      	mov	r1, r6
9001a36e:	e9cd a001 	strd	sl, r0, [sp, #4]
9001a372:	a806      	add	r0, sp, #24
9001a374:	47b8      	blx	r7
9001a376:	4628      	mov	r0, r5
9001a378:	b008      	add	sp, #32
9001a37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

9001a380 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
9001a380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9001a384:	2300      	movs	r3, #0
9001a386:	9300      	str	r3, [sp, #0]
9001a388:	4b3d      	ldr	r3, [pc, #244]	; (9001a480 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
9001a38a:	781b      	ldrb	r3, [r3, #0]
9001a38c:	2b00      	cmp	r3, #0
9001a38e:	d137      	bne.n	9001a400 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
9001a390:	4a3c      	ldr	r2, [pc, #240]	; (9001a484 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001a392:	f9b2 2000 	ldrsh.w	r2, [r2]
9001a396:	f8ad 2004 	strh.w	r2, [sp, #4]
9001a39a:	2b00      	cmp	r3, #0
9001a39c:	d132      	bne.n	9001a404 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
9001a39e:	4b3a      	ldr	r3, [pc, #232]	; (9001a488 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001a3a0:	f9b3 3000 	ldrsh.w	r3, [r3]
9001a3a4:	ac02      	add	r4, sp, #8
9001a3a6:	6808      	ldr	r0, [r1, #0]
9001a3a8:	f8ad 3006 	strh.w	r3, [sp, #6]
9001a3ac:	ab02      	add	r3, sp, #8
9001a3ae:	6849      	ldr	r1, [r1, #4]
9001a3b0:	4d36      	ldr	r5, [pc, #216]	; (9001a48c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
9001a3b2:	c303      	stmia	r3!, {r0, r1}
9001a3b4:	4669      	mov	r1, sp
9001a3b6:	4620      	mov	r0, r4
9001a3b8:	f7fa f998 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a3bc:	4668      	mov	r0, sp
9001a3be:	f7fa f951 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a3c2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001a3c6:	f8bd 2000 	ldrh.w	r2, [sp]
9001a3ca:	462f      	mov	r7, r5
9001a3cc:	6828      	ldr	r0, [r5, #0]
9001a3ce:	4413      	add	r3, r2
9001a3d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001a3d4:	f8ad 3008 	strh.w	r3, [sp, #8]
9001a3d8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
9001a3dc:	4413      	add	r3, r2
9001a3de:	f8ad 300a 	strh.w	r3, [sp, #10]
9001a3e2:	6803      	ldr	r3, [r0, #0]
9001a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a3e6:	4798      	blx	r3
9001a3e8:	f010 0f01 	tst.w	r0, #1
9001a3ec:	d00c      	beq.n	9001a408 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
9001a3ee:	6828      	ldr	r0, [r5, #0]
9001a3f0:	6803      	ldr	r3, [r0, #0]
9001a3f2:	e894 0006 	ldmia.w	r4, {r1, r2}
9001a3f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9001a3f8:	4798      	blx	r3
9001a3fa:	b004      	add	sp, #16
9001a3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001a400:	4a21      	ldr	r2, [pc, #132]	; (9001a488 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001a402:	e7c6      	b.n	9001a392 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
9001a404:	4b1f      	ldr	r3, [pc, #124]	; (9001a484 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001a406:	e7cb      	b.n	9001a3a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
9001a408:	6838      	ldr	r0, [r7, #0]
9001a40a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
9001a40e:	6803      	ldr	r3, [r0, #0]
9001a410:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
9001a414:	ea4f 0848 	mov.w	r8, r8, lsl #1
9001a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a41a:	4798      	blx	r3
9001a41c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
9001a420:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001a424:	f8bd 6004 	ldrh.w	r6, [sp, #4]
9001a428:	fb16 3602 	smlabb	r6, r6, r2, r3
9001a42c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a430:	6838      	ldr	r0, [r7, #0]
9001a432:	6803      	ldr	r3, [r0, #0]
9001a434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a436:	4798      	blx	r3
9001a438:	4a12      	ldr	r2, [pc, #72]	; (9001a484 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001a43a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
9001a43e:	8813      	ldrh	r3, [r2, #0]
9001a440:	4691      	mov	r9, r2
9001a442:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001a446:	435d      	muls	r5, r3
9001a448:	fb03 1404 	mla	r4, r3, r4, r1
9001a44c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001a450:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001a454:	6838      	ldr	r0, [r7, #0]
9001a456:	42ac      	cmp	r4, r5
9001a458:	6803      	ldr	r3, [r0, #0]
9001a45a:	d20e      	bcs.n	9001a47a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
9001a45c:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
9001a460:	4632      	mov	r2, r6
9001a462:	4643      	mov	r3, r8
9001a464:	4621      	mov	r1, r4
9001a466:	47d0      	blx	sl
9001a468:	f8b9 3000 	ldrh.w	r3, [r9]
9001a46c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001a470:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001a474:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001a478:	e7ec      	b.n	9001a454 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
9001a47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a47c:	4798      	blx	r3
9001a47e:	e7bc      	b.n	9001a3fa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
9001a480:	24026454 	.word	0x24026454
9001a484:	24026456 	.word	0x24026456
9001a488:	24026458 	.word	0x24026458
9001a48c:	2402645c 	.word	0x2402645c

9001a490 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
9001a490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a494:	b08b      	sub	sp, #44	; 0x2c
9001a496:	460f      	mov	r7, r1
9001a498:	4616      	mov	r6, r2
9001a49a:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
9001a49e:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001a4a2:	f1bb 0f00 	cmp.w	fp, #0
9001a4a6:	d049      	beq.n	9001a53c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001a4a8:	6810      	ldr	r0, [r2, #0]
9001a4aa:	ad06      	add	r5, sp, #24
9001a4ac:	6851      	ldr	r1, [r2, #4]
9001a4ae:	c503      	stmia	r5!, {r0, r1}
9001a4b0:	6818      	ldr	r0, [r3, #0]
9001a4b2:	ad08      	add	r5, sp, #32
9001a4b4:	6859      	ldr	r1, [r3, #4]
9001a4b6:	c503      	stmia	r5!, {r0, r1}
9001a4b8:	a806      	add	r0, sp, #24
9001a4ba:	f7fa f8d3 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a4be:	4631      	mov	r1, r6
9001a4c0:	a808      	add	r0, sp, #32
9001a4c2:	f7fa f913 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a4c6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001a4ca:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001a4ce:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001a4d2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001a4d6:	fb16 2103 	smlabb	r1, r6, r3, r2
9001a4da:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
9001a4de:	eb07 0641 	add.w	r6, r7, r1, lsl #1
9001a4e2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001a4e6:	4f5f      	ldr	r7, [pc, #380]	; (9001a664 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001a4e8:	440a      	add	r2, r1
9001a4ea:	6838      	ldr	r0, [r7, #0]
9001a4ec:	46b9      	mov	r9, r7
9001a4ee:	f8ad 2020 	strh.w	r2, [sp, #32]
9001a4f2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
9001a4f6:	4413      	add	r3, r2
9001a4f8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001a4fc:	6803      	ldr	r3, [r0, #0]
9001a4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a500:	4798      	blx	r3
9001a502:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001a506:	d01c      	beq.n	9001a542 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
9001a508:	f010 0f04 	tst.w	r0, #4
9001a50c:	d01d      	beq.n	9001a54a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001a50e:	f8d9 0000 	ldr.w	r0, [r9]
9001a512:	2700      	movs	r7, #0
9001a514:	b2ad      	uxth	r5, r5
9001a516:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001a51a:	6801      	ldr	r1, [r0, #0]
9001a51c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
9001a520:	f8cd b00c 	str.w	fp, [sp, #12]
9001a524:	9501      	str	r5, [sp, #4]
9001a526:	e9cd 4704 	strd	r4, r7, [sp, #16]
9001a52a:	f8bd 401c 	ldrh.w	r4, [sp, #28]
9001a52e:	9402      	str	r4, [sp, #8]
9001a530:	fa1f f488 	uxth.w	r4, r8
9001a534:	9400      	str	r4, [sp, #0]
9001a536:	6c4c      	ldr	r4, [r1, #68]	; 0x44
9001a538:	4631      	mov	r1, r6
9001a53a:	47a0      	blx	r4
9001a53c:	b00b      	add	sp, #44	; 0x2c
9001a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a542:	b914      	cbnz	r4, 9001a54a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001a544:	f010 0f01 	tst.w	r0, #1
9001a548:	e7e0      	b.n	9001a50c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
9001a54a:	f8d9 0000 	ldr.w	r0, [r9]
9001a54e:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001a552:	6803      	ldr	r3, [r0, #0]
9001a554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001a556:	4798      	blx	r3
9001a558:	4b43      	ldr	r3, [pc, #268]	; (9001a668 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
9001a55a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
9001a55e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001a562:	881a      	ldrh	r2, [r3, #0]
9001a564:	469a      	mov	sl, r3
9001a566:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001a56a:	fb05 f502 	mul.w	r5, r5, r2
9001a56e:	fb02 1404 	mla	r4, r2, r4, r1
9001a572:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001a576:	d059      	beq.n	9001a62c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
9001a578:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
9001a57c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001a580:	fa1f f28b 	uxth.w	r2, fp
9001a584:	469e      	mov	lr, r3
9001a586:	fa1f f989 	uxth.w	r9, r9
9001a58a:	42ac      	cmp	r4, r5
9001a58c:	d264      	bcs.n	9001a658 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001a58e:	eb04 0a07 	add.w	sl, r4, r7
9001a592:	4554      	cmp	r4, sl
9001a594:	d23d      	bcs.n	9001a612 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001a596:	8821      	ldrh	r1, [r4, #0]
9001a598:	f836 3b02 	ldrh.w	r3, [r6], #2
9001a59c:	1208      	asrs	r0, r1, #8
9001a59e:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001a5a2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001a5a6:	ea4f 0be1 	mov.w	fp, r1, asr #3
9001a5aa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001a5ae:	00c9      	lsls	r1, r1, #3
9001a5b0:	fb10 f009 	smulbb	r0, r0, r9
9001a5b4:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001a5b8:	b2c9      	uxtb	r1, r1
9001a5ba:	fb0c 0c02 	mla	ip, ip, r2, r0
9001a5be:	10d8      	asrs	r0, r3, #3
9001a5c0:	fb1b fb09 	smulbb	fp, fp, r9
9001a5c4:	00db      	lsls	r3, r3, #3
9001a5c6:	fa1f fc8c 	uxth.w	ip, ip
9001a5ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001a5ce:	fb11 f109 	smulbb	r1, r1, r9
9001a5d2:	b2db      	uxtb	r3, r3
9001a5d4:	fb00 b002 	mla	r0, r0, r2, fp
9001a5d8:	f10c 0b01 	add.w	fp, ip, #1
9001a5dc:	fb03 1302 	mla	r3, r3, r2, r1
9001a5e0:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
9001a5e4:	b29b      	uxth	r3, r3
9001a5e6:	b280      	uxth	r0, r0
9001a5e8:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
9001a5ec:	f103 0c01 	add.w	ip, r3, #1
9001a5f0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001a5f4:	1c43      	adds	r3, r0, #1
9001a5f6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001a5fa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001a5fe:	0940      	lsrs	r0, r0, #5
9001a600:	ea4c 0c0b 	orr.w	ip, ip, fp
9001a604:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001a608:	ea4c 0c00 	orr.w	ip, ip, r0
9001a60c:	f824 cb02 	strh.w	ip, [r4], #2
9001a610:	e7bf      	b.n	9001a592 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
9001a612:	f8be 3000 	ldrh.w	r3, [lr]
9001a616:	eba3 0308 	sub.w	r3, r3, r8
9001a61a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001a61e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001a622:	eba3 0308 	sub.w	r3, r3, r8
9001a626:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001a62a:	e7ae      	b.n	9001a58a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
9001a62c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001a630:	f8d9 0000 	ldr.w	r0, [r9]
9001a634:	42ac      	cmp	r4, r5
9001a636:	6803      	ldr	r3, [r0, #0]
9001a638:	d20e      	bcs.n	9001a658 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001a63a:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
9001a63e:	4632      	mov	r2, r6
9001a640:	463b      	mov	r3, r7
9001a642:	4621      	mov	r1, r4
9001a644:	47c0      	blx	r8
9001a646:	f8ba 3000 	ldrh.w	r3, [sl]
9001a64a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001a64e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001a652:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001a656:	e7eb      	b.n	9001a630 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
9001a658:	4b02      	ldr	r3, [pc, #8]	; (9001a664 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001a65a:	6818      	ldr	r0, [r3, #0]
9001a65c:	6803      	ldr	r3, [r0, #0]
9001a65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001a660:	4798      	blx	r3
9001a662:	e76b      	b.n	9001a53c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001a664:	2402645c 	.word	0x2402645c
9001a668:	24026456 	.word	0x24026456

9001a66c <_ZN8touchgfx8LCD16bppD0Ev>:
9001a66c:	b510      	push	{r4, lr}
9001a66e:	4604      	mov	r4, r0
9001a670:	2178      	movs	r1, #120	; 0x78
9001a672:	f008 ffca 	bl	9002360a <_ZdlPvj>
9001a676:	4620      	mov	r0, r4
9001a678:	bd10      	pop	{r4, pc}

9001a67a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001a67a:	b510      	push	{r4, lr}
9001a67c:	4604      	mov	r4, r0
9001a67e:	2104      	movs	r1, #4
9001a680:	f008 ffc3 	bl	9002360a <_ZdlPvj>
9001a684:	4620      	mov	r0, r4
9001a686:	bd10      	pop	{r4, pc}

9001a688 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001a688:	b510      	push	{r4, lr}
9001a68a:	4604      	mov	r4, r0
9001a68c:	2104      	movs	r1, #4
9001a68e:	f008 ffbc 	bl	9002360a <_ZdlPvj>
9001a692:	4620      	mov	r0, r4
9001a694:	bd10      	pop	{r4, pc}

9001a696 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001a696:	b510      	push	{r4, lr}
9001a698:	4604      	mov	r4, r0
9001a69a:	2104      	movs	r1, #4
9001a69c:	f008 ffb5 	bl	9002360a <_ZdlPvj>
9001a6a0:	4620      	mov	r0, r4
9001a6a2:	bd10      	pop	{r4, pc}

9001a6a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001a6a4:	b510      	push	{r4, lr}
9001a6a6:	4604      	mov	r4, r0
9001a6a8:	2104      	movs	r1, #4
9001a6aa:	f008 ffae 	bl	9002360a <_ZdlPvj>
9001a6ae:	4620      	mov	r0, r4
9001a6b0:	bd10      	pop	{r4, pc}

9001a6b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001a6b2:	b510      	push	{r4, lr}
9001a6b4:	4604      	mov	r4, r0
9001a6b6:	2104      	movs	r1, #4
9001a6b8:	f008 ffa7 	bl	9002360a <_ZdlPvj>
9001a6bc:	4620      	mov	r0, r4
9001a6be:	bd10      	pop	{r4, pc}

9001a6c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
9001a6c0:	b510      	push	{r4, lr}
9001a6c2:	4604      	mov	r4, r0
9001a6c4:	2104      	movs	r1, #4
9001a6c6:	f008 ffa0 	bl	9002360a <_ZdlPvj>
9001a6ca:	4620      	mov	r0, r4
9001a6cc:	bd10      	pop	{r4, pc}

9001a6ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
9001a6ce:	b510      	push	{r4, lr}
9001a6d0:	4604      	mov	r4, r0
9001a6d2:	2104      	movs	r1, #4
9001a6d4:	f008 ff99 	bl	9002360a <_ZdlPvj>
9001a6d8:	4620      	mov	r0, r4
9001a6da:	bd10      	pop	{r4, pc}

9001a6dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
9001a6dc:	b510      	push	{r4, lr}
9001a6de:	4604      	mov	r4, r0
9001a6e0:	2104      	movs	r1, #4
9001a6e2:	f008 ff92 	bl	9002360a <_ZdlPvj>
9001a6e6:	4620      	mov	r0, r4
9001a6e8:	bd10      	pop	{r4, pc}

9001a6ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001a6ea:	b510      	push	{r4, lr}
9001a6ec:	4604      	mov	r4, r0
9001a6ee:	2104      	movs	r1, #4
9001a6f0:	f008 ff8b 	bl	9002360a <_ZdlPvj>
9001a6f4:	4620      	mov	r0, r4
9001a6f6:	bd10      	pop	{r4, pc}

9001a6f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001a6f8:	b510      	push	{r4, lr}
9001a6fa:	4604      	mov	r4, r0
9001a6fc:	2104      	movs	r1, #4
9001a6fe:	f008 ff84 	bl	9002360a <_ZdlPvj>
9001a702:	4620      	mov	r0, r4
9001a704:	bd10      	pop	{r4, pc}

9001a706 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001a706:	b510      	push	{r4, lr}
9001a708:	4604      	mov	r4, r0
9001a70a:	2104      	movs	r1, #4
9001a70c:	f008 ff7d 	bl	9002360a <_ZdlPvj>
9001a710:	4620      	mov	r0, r4
9001a712:	bd10      	pop	{r4, pc}

9001a714 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001a714:	b510      	push	{r4, lr}
9001a716:	4604      	mov	r4, r0
9001a718:	2104      	movs	r1, #4
9001a71a:	f008 ff76 	bl	9002360a <_ZdlPvj>
9001a71e:	4620      	mov	r0, r4
9001a720:	bd10      	pop	{r4, pc}

9001a722 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001a722:	b510      	push	{r4, lr}
9001a724:	4604      	mov	r4, r0
9001a726:	2104      	movs	r1, #4
9001a728:	f008 ff6f 	bl	9002360a <_ZdlPvj>
9001a72c:	4620      	mov	r0, r4
9001a72e:	bd10      	pop	{r4, pc}

9001a730 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001a730:	b510      	push	{r4, lr}
9001a732:	4604      	mov	r4, r0
9001a734:	2104      	movs	r1, #4
9001a736:	f008 ff68 	bl	9002360a <_ZdlPvj>
9001a73a:	4620      	mov	r0, r4
9001a73c:	bd10      	pop	{r4, pc}

9001a73e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001a73e:	b510      	push	{r4, lr}
9001a740:	4604      	mov	r4, r0
9001a742:	2104      	movs	r1, #4
9001a744:	f008 ff61 	bl	9002360a <_ZdlPvj>
9001a748:	4620      	mov	r0, r4
9001a74a:	bd10      	pop	{r4, pc}

9001a74c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001a74c:	b510      	push	{r4, lr}
9001a74e:	4604      	mov	r4, r0
9001a750:	2104      	movs	r1, #4
9001a752:	f008 ff5a 	bl	9002360a <_ZdlPvj>
9001a756:	4620      	mov	r0, r4
9001a758:	bd10      	pop	{r4, pc}

9001a75a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001a75a:	b510      	push	{r4, lr}
9001a75c:	4604      	mov	r4, r0
9001a75e:	2104      	movs	r1, #4
9001a760:	f008 ff53 	bl	9002360a <_ZdlPvj>
9001a764:	4620      	mov	r0, r4
9001a766:	bd10      	pop	{r4, pc}

9001a768 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001a768:	b510      	push	{r4, lr}
9001a76a:	4604      	mov	r4, r0
9001a76c:	2104      	movs	r1, #4
9001a76e:	f008 ff4c 	bl	9002360a <_ZdlPvj>
9001a772:	4620      	mov	r0, r4
9001a774:	bd10      	pop	{r4, pc}

9001a776 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001a776:	b510      	push	{r4, lr}
9001a778:	4604      	mov	r4, r0
9001a77a:	2104      	movs	r1, #4
9001a77c:	f008 ff45 	bl	9002360a <_ZdlPvj>
9001a780:	4620      	mov	r0, r4
9001a782:	bd10      	pop	{r4, pc}

9001a784 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
9001a784:	b510      	push	{r4, lr}
9001a786:	4604      	mov	r4, r0
9001a788:	2104      	movs	r1, #4
9001a78a:	f008 ff3e 	bl	9002360a <_ZdlPvj>
9001a78e:	4620      	mov	r0, r4
9001a790:	bd10      	pop	{r4, pc}

9001a792 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001a792:	b510      	push	{r4, lr}
9001a794:	4604      	mov	r4, r0
9001a796:	2104      	movs	r1, #4
9001a798:	f008 ff37 	bl	9002360a <_ZdlPvj>
9001a79c:	4620      	mov	r0, r4
9001a79e:	bd10      	pop	{r4, pc}

9001a7a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001a7a0:	b510      	push	{r4, lr}
9001a7a2:	4604      	mov	r4, r0
9001a7a4:	2104      	movs	r1, #4
9001a7a6:	f008 ff30 	bl	9002360a <_ZdlPvj>
9001a7aa:	4620      	mov	r0, r4
9001a7ac:	bd10      	pop	{r4, pc}

9001a7ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001a7ae:	b510      	push	{r4, lr}
9001a7b0:	4604      	mov	r4, r0
9001a7b2:	2104      	movs	r1, #4
9001a7b4:	f008 ff29 	bl	9002360a <_ZdlPvj>
9001a7b8:	4620      	mov	r0, r4
9001a7ba:	bd10      	pop	{r4, pc}

9001a7bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001a7bc:	b510      	push	{r4, lr}
9001a7be:	4604      	mov	r4, r0
9001a7c0:	2104      	movs	r1, #4
9001a7c2:	f008 ff22 	bl	9002360a <_ZdlPvj>
9001a7c6:	4620      	mov	r0, r4
9001a7c8:	bd10      	pop	{r4, pc}

9001a7ca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
9001a7ca:	b510      	push	{r4, lr}
9001a7cc:	4604      	mov	r4, r0
9001a7ce:	2104      	movs	r1, #4
9001a7d0:	f008 ff1b 	bl	9002360a <_ZdlPvj>
9001a7d4:	4620      	mov	r0, r4
9001a7d6:	bd10      	pop	{r4, pc}

9001a7d8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
9001a7d8:	b510      	push	{r4, lr}
9001a7da:	4604      	mov	r4, r0
9001a7dc:	2104      	movs	r1, #4
9001a7de:	f008 ff14 	bl	9002360a <_ZdlPvj>
9001a7e2:	4620      	mov	r0, r4
9001a7e4:	bd10      	pop	{r4, pc}

9001a7e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001a7e6:	b510      	push	{r4, lr}
9001a7e8:	4604      	mov	r4, r0
9001a7ea:	2104      	movs	r1, #4
9001a7ec:	f008 ff0d 	bl	9002360a <_ZdlPvj>
9001a7f0:	4620      	mov	r0, r4
9001a7f2:	bd10      	pop	{r4, pc}

9001a7f4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
9001a7f4:	b510      	push	{r4, lr}
9001a7f6:	4604      	mov	r4, r0
9001a7f8:	2104      	movs	r1, #4
9001a7fa:	f008 ff06 	bl	9002360a <_ZdlPvj>
9001a7fe:	4620      	mov	r0, r4
9001a800:	bd10      	pop	{r4, pc}
	...

9001a804 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
9001a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a808:	b091      	sub	sp, #68	; 0x44
9001a80a:	469b      	mov	fp, r3
9001a80c:	4616      	mov	r6, r2
9001a80e:	f9b3 2000 	ldrsh.w	r2, [r3]
9001a812:	f10d 0828 	add.w	r8, sp, #40	; 0x28
9001a816:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001a81a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
9001a81e:	4604      	mov	r4, r0
9001a820:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
9001a824:	4640      	mov	r0, r8
9001a826:	460d      	mov	r5, r1
9001a828:	4659      	mov	r1, fp
9001a82a:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001a82e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001a832:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
9001a836:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
9001a83a:	f7f6 f85b 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
9001a83e:	4631      	mov	r1, r6
9001a840:	4640      	mov	r0, r8
9001a842:	f7f6 f857 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
9001a846:	4b74      	ldr	r3, [pc, #464]	; (9001aa18 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
9001a848:	8818      	ldrh	r0, [r3, #0]
9001a84a:	4b74      	ldr	r3, [pc, #464]	; (9001aa1c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
9001a84c:	b202      	sxth	r2, r0
9001a84e:	8819      	ldrh	r1, [r3, #0]
9001a850:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001a854:	b20e      	sxth	r6, r1
9001a856:	2b00      	cmp	r3, #0
9001a858:	da07      	bge.n	9001a86a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
9001a85a:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001a85e:	4463      	add	r3, ip
9001a860:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001a864:	2300      	movs	r3, #0
9001a866:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001a86a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001a86e:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001a872:	1ad2      	subs	r2, r2, r3
9001a874:	4594      	cmp	ip, r2
9001a876:	bfc4      	itt	gt
9001a878:	1ac2      	subgt	r2, r0, r3
9001a87a:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
9001a87e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a882:	2a00      	cmp	r2, #0
9001a884:	da07      	bge.n	9001a896 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001a886:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001a88a:	4462      	add	r2, ip
9001a88c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001a890:	2200      	movs	r2, #0
9001a892:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001a896:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001a89a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001a89e:	eba6 060a 	sub.w	r6, r6, sl
9001a8a2:	42b2      	cmp	r2, r6
9001a8a4:	bfc4      	itt	gt
9001a8a6:	eba1 020a 	subgt.w	r2, r1, sl
9001a8aa:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001a8ae:	4a5c      	ldr	r2, [pc, #368]	; (9001aa20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001a8b0:	7812      	ldrb	r2, [r2, #0]
9001a8b2:	b9a2      	cbnz	r2, 9001a8de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001a8b4:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001a8b8:	4286      	cmp	r6, r0
9001a8ba:	4640      	mov	r0, r8
9001a8bc:	9303      	str	r3, [sp, #12]
9001a8be:	bf14      	ite	ne
9001a8c0:	2600      	movne	r6, #0
9001a8c2:	2601      	moveq	r6, #1
9001a8c4:	f7f6 f859 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
9001a8c8:	9b03      	ldr	r3, [sp, #12]
9001a8ca:	b160      	cbz	r0, 9001a8e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001a8cc:	2300      	movs	r3, #0
9001a8ce:	8023      	strh	r3, [r4, #0]
9001a8d0:	8063      	strh	r3, [r4, #2]
9001a8d2:	80a3      	strh	r3, [r4, #4]
9001a8d4:	4620      	mov	r0, r4
9001a8d6:	80e3      	strh	r3, [r4, #6]
9001a8d8:	b011      	add	sp, #68	; 0x44
9001a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a8de:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001a8e2:	428e      	cmp	r6, r1
9001a8e4:	e7e9      	b.n	9001a8ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001a8e6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001a8ea:	a90e      	add	r1, sp, #56	; 0x38
9001a8ec:	900e      	str	r0, [sp, #56]	; 0x38
9001a8ee:	a80c      	add	r0, sp, #48	; 0x30
9001a8f0:	9205      	str	r2, [sp, #20]
9001a8f2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001a8f6:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001a8fa:	9206      	str	r2, [sp, #24]
9001a8fc:	f8bb 2000 	ldrh.w	r2, [fp]
9001a900:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001a904:	1a9b      	subs	r3, r3, r2
9001a906:	b21b      	sxth	r3, r3
9001a908:	9303      	str	r3, [sp, #12]
9001a90a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001a90e:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001aa28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a912:	ebaa 0a03 	sub.w	sl, sl, r3
9001a916:	fa0f f38a 	sxth.w	r3, sl
9001a91a:	9304      	str	r3, [sp, #16]
9001a91c:	9b03      	ldr	r3, [sp, #12]
9001a91e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001a922:	9b04      	ldr	r3, [sp, #16]
9001a924:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001a928:	9b05      	ldr	r3, [sp, #20]
9001a92a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001a92e:	9b06      	ldr	r3, [sp, #24]
9001a930:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001a934:	f7f9 feda 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001a938:	4640      	mov	r0, r8
9001a93a:	f7f9 fe93 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a93e:	a80e      	add	r0, sp, #56	; 0x38
9001a940:	f7f9 fe90 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001a944:	4b37      	ldr	r3, [pc, #220]	; (9001aa24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001a946:	4628      	mov	r0, r5
9001a948:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001a94c:	881b      	ldrh	r3, [r3, #0]
9001a94e:	9307      	str	r3, [sp, #28]
9001a950:	682b      	ldr	r3, [r5, #0]
9001a952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a954:	4798      	blx	r3
9001a956:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001a95a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001a95e:	4681      	mov	r9, r0
9001a960:	f8db 0000 	ldr.w	r0, [fp]
9001a964:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001a968:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001a96a:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001a96e:	6803      	ldr	r3, [r0, #0]
9001a970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001a972:	4798      	blx	r3
9001a974:	4607      	mov	r7, r0
9001a976:	f8db 0000 	ldr.w	r0, [fp]
9001a97a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001a97e:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001a982:	6803      	ldr	r3, [r0, #0]
9001a984:	9109      	str	r1, [sp, #36]	; 0x24
9001a986:	9208      	str	r2, [sp, #32]
9001a988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001a98a:	4798      	blx	r3
9001a98c:	f010 0f01 	tst.w	r0, #1
9001a990:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001a994:	d012      	beq.n	9001a9bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001a996:	f8db 0000 	ldr.w	r0, [fp]
9001a99a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001a99e:	6803      	ldr	r3, [r0, #0]
9001a9a0:	9200      	str	r2, [sp, #0]
9001a9a2:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001a9a4:	462b      	mov	r3, r5
9001a9a6:	e898 0006 	ldmia.w	r8, {r1, r2}
9001a9aa:	47b0      	blx	r6
9001a9ac:	9b03      	ldr	r3, [sp, #12]
9001a9ae:	8023      	strh	r3, [r4, #0]
9001a9b0:	9b04      	ldr	r3, [sp, #16]
9001a9b2:	8063      	strh	r3, [r4, #2]
9001a9b4:	9b05      	ldr	r3, [sp, #20]
9001a9b6:	80a3      	strh	r3, [r4, #4]
9001a9b8:	9b06      	ldr	r3, [sp, #24]
9001a9ba:	e78b      	b.n	9001a8d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001a9bc:	fb09 f202 	mul.w	r2, r9, r2
9001a9c0:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001a9c4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001a9c8:	440f      	add	r7, r1
9001a9ca:	b166      	cbz	r6, 9001a9e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a9cc:	9a07      	ldr	r2, [sp, #28]
9001a9ce:	4592      	cmp	sl, r2
9001a9d0:	d109      	bne.n	9001a9e6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001a9d2:	f8db 0000 	ldr.w	r0, [fp]
9001a9d6:	fb09 f303 	mul.w	r3, r9, r3
9001a9da:	4629      	mov	r1, r5
9001a9dc:	6802      	ldr	r2, [r0, #0]
9001a9de:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001a9e0:	463a      	mov	r2, r7
9001a9e2:	47b0      	blx	r6
9001a9e4:	e7e2      	b.n	9001a9ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a9e6:	fb0a f303 	mul.w	r3, sl, r3
9001a9ea:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001a9ee:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001aa28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001a9f2:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001a9f6:	4545      	cmp	r5, r8
9001a9f8:	d2d8      	bcs.n	9001a9ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001a9fa:	f8db 0000 	ldr.w	r0, [fp]
9001a9fe:	4629      	mov	r1, r5
9001aa00:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001aa04:	4435      	add	r5, r6
9001aa06:	6802      	ldr	r2, [r0, #0]
9001aa08:	005b      	lsls	r3, r3, #1
9001aa0a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001aa0e:	463a      	mov	r2, r7
9001aa10:	47d0      	blx	sl
9001aa12:	444f      	add	r7, r9
9001aa14:	e7ef      	b.n	9001a9f6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001aa16:	bf00      	nop
9001aa18:	24026450 	.word	0x24026450
9001aa1c:	24026452 	.word	0x24026452
9001aa20:	24026454 	.word	0x24026454
9001aa24:	24026456 	.word	0x24026456
9001aa28:	2402645c 	.word	0x2402645c

9001aa2c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001aa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
9001aa2e:	4606      	mov	r6, r0
9001aa30:	b087      	sub	sp, #28
9001aa32:	460c      	mov	r4, r1
9001aa34:	4617      	mov	r7, r2
9001aa36:	461d      	mov	r5, r3
9001aa38:	b333      	cbz	r3, 9001aa88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001aa3a:	4608      	mov	r0, r1
9001aa3c:	f7f5 ff9d 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
9001aa40:	bb10      	cbnz	r0, 9001aa88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001aa42:	6820      	ldr	r0, [r4, #0]
9001aa44:	ab04      	add	r3, sp, #16
9001aa46:	6861      	ldr	r1, [r4, #4]
9001aa48:	4c1b      	ldr	r4, [pc, #108]	; (9001aab8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001aa4a:	c303      	stmia	r3!, {r0, r1}
9001aa4c:	a804      	add	r0, sp, #16
9001aa4e:	f7f9 fe09 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001aa52:	6820      	ldr	r0, [r4, #0]
9001aa54:	6803      	ldr	r3, [r0, #0]
9001aa56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001aa58:	4798      	blx	r3
9001aa5a:	2dff      	cmp	r5, #255	; 0xff
9001aa5c:	d016      	beq.n	9001aa8c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001aa5e:	f010 0f08 	tst.w	r0, #8
9001aa62:	6820      	ldr	r0, [r4, #0]
9001aa64:	d015      	beq.n	9001aa92 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001aa66:	2400      	movs	r4, #0
9001aa68:	6801      	ldr	r1, [r0, #0]
9001aa6a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001aa6e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001aa72:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001aa76:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001aa7a:	9401      	str	r4, [sp, #4]
9001aa7c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001aa80:	9400      	str	r4, [sp, #0]
9001aa82:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001aa84:	4639      	mov	r1, r7
9001aa86:	47a0      	blx	r4
9001aa88:	b007      	add	sp, #28
9001aa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001aa8c:	f010 0f02 	tst.w	r0, #2
9001aa90:	e7e7      	b.n	9001aa62 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001aa92:	6803      	ldr	r3, [r0, #0]
9001aa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001aa96:	4798      	blx	r3
9001aa98:	4b08      	ldr	r3, [pc, #32]	; (9001aabc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001aa9a:	4601      	mov	r1, r0
9001aa9c:	4630      	mov	r0, r6
9001aa9e:	881a      	ldrh	r2, [r3, #0]
9001aaa0:	6833      	ldr	r3, [r6, #0]
9001aaa2:	e9cd 7500 	strd	r7, r5, [sp]
9001aaa6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001aaa8:	ab04      	add	r3, sp, #16
9001aaaa:	47a8      	blx	r5
9001aaac:	6820      	ldr	r0, [r4, #0]
9001aaae:	6803      	ldr	r3, [r0, #0]
9001aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001aab2:	4798      	blx	r3
9001aab4:	e7e8      	b.n	9001aa88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001aab6:	bf00      	nop
9001aab8:	2402645c 	.word	0x2402645c
9001aabc:	24026456 	.word	0x24026456

9001aac0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001aac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001aac4:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001aac8:	4688      	mov	r8, r1
9001aaca:	4614      	mov	r4, r2
9001aacc:	461d      	mov	r5, r3
9001aace:	9e08      	ldr	r6, [sp, #32]
9001aad0:	2f00      	cmp	r7, #0
9001aad2:	f000 80ab 	beq.w	9001ac2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001aad6:	4618      	mov	r0, r3
9001aad8:	f7f5 ff4f 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
9001aadc:	2800      	cmp	r0, #0
9001aade:	f040 80a5 	bne.w	9001ac2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001aae2:	f9b5 1000 	ldrsh.w	r1, [r5]
9001aae6:	2fff      	cmp	r7, #255	; 0xff
9001aae8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001aaec:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001aaf0:	fb04 1303 	mla	r3, r4, r3, r1
9001aaf4:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001aaf8:	eba4 0200 	sub.w	r2, r4, r0
9001aafc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001ab00:	fb04 f505 	mul.w	r5, r4, r5
9001ab04:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001ab08:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001ab0c:	d04a      	beq.n	9001aba4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001ab0e:	b2bc      	uxth	r4, r7
9001ab10:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001ab14:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001ab18:	fa5f f788 	uxtb.w	r7, r8
9001ab1c:	b2f3      	uxtb	r3, r6
9001ab1e:	0040      	lsls	r0, r0, #1
9001ab20:	fb0e fe04 	mul.w	lr, lr, r4
9001ab24:	4367      	muls	r7, r4
9001ab26:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001ab2a:	4363      	muls	r3, r4
9001ab2c:	fa1f fc8c 	uxth.w	ip, ip
9001ab30:	42a9      	cmp	r1, r5
9001ab32:	d27b      	bcs.n	9001ac2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001ab34:	eb01 0900 	add.w	r9, r1, r0
9001ab38:	4549      	cmp	r1, r9
9001ab3a:	d231      	bcs.n	9001aba0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001ab3c:	880a      	ldrh	r2, [r1, #0]
9001ab3e:	1214      	asrs	r4, r2, #8
9001ab40:	10d6      	asrs	r6, r2, #3
9001ab42:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001ab46:	00d2      	lsls	r2, r2, #3
9001ab48:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001ab4c:	b2d2      	uxtb	r2, r2
9001ab4e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001ab52:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001ab56:	fb14 f40c 	smulbb	r4, r4, ip
9001ab5a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001ab5e:	fb12 f20c 	smulbb	r2, r2, ip
9001ab62:	fb16 f60c 	smulbb	r6, r6, ip
9001ab66:	4474      	add	r4, lr
9001ab68:	441a      	add	r2, r3
9001ab6a:	b2a4      	uxth	r4, r4
9001ab6c:	443e      	add	r6, r7
9001ab6e:	b292      	uxth	r2, r2
9001ab70:	f104 0a01 	add.w	sl, r4, #1
9001ab74:	b2b6      	uxth	r6, r6
9001ab76:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001ab7a:	f102 0a01 	add.w	sl, r2, #1
9001ab7e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001ab82:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001ab86:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001ab8a:	4322      	orrs	r2, r4
9001ab8c:	1c74      	adds	r4, r6, #1
9001ab8e:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001ab92:	0976      	lsrs	r6, r6, #5
9001ab94:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001ab98:	4332      	orrs	r2, r6
9001ab9a:	f821 2b02 	strh.w	r2, [r1], #2
9001ab9e:	e7cb      	b.n	9001ab38 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001aba0:	4441      	add	r1, r8
9001aba2:	e7c5      	b.n	9001ab30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001aba4:	0973      	lsrs	r3, r6, #5
9001aba6:	4f22      	ldr	r7, [pc, #136]	; (9001ac30 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001aba8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001abac:	ea08 0707 	and.w	r7, r8, r7
9001abb0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001abb4:	433b      	orrs	r3, r7
9001abb6:	07e7      	lsls	r7, r4, #31
9001abb8:	ea43 0306 	orr.w	r3, r3, r6
9001abbc:	b29b      	uxth	r3, r3
9001abbe:	d50b      	bpl.n	9001abd8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001abc0:	0040      	lsls	r0, r0, #1
9001abc2:	0052      	lsls	r2, r2, #1
9001abc4:	42a9      	cmp	r1, r5
9001abc6:	d231      	bcs.n	9001ac2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001abc8:	180c      	adds	r4, r1, r0
9001abca:	42a1      	cmp	r1, r4
9001abcc:	d202      	bcs.n	9001abd4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001abce:	f821 3b02 	strh.w	r3, [r1], #2
9001abd2:	e7fa      	b.n	9001abca <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001abd4:	4411      	add	r1, r2
9001abd6:	e7f5      	b.n	9001abc4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001abd8:	078e      	lsls	r6, r1, #30
9001abda:	d008      	beq.n	9001abee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001abdc:	0066      	lsls	r6, r4, #1
9001abde:	460a      	mov	r2, r1
9001abe0:	42aa      	cmp	r2, r5
9001abe2:	d202      	bcs.n	9001abea <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001abe4:	8013      	strh	r3, [r2, #0]
9001abe6:	4432      	add	r2, r6
9001abe8:	e7fa      	b.n	9001abe0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001abea:	3102      	adds	r1, #2
9001abec:	3801      	subs	r0, #1
9001abee:	07c2      	lsls	r2, r0, #31
9001abf0:	d50b      	bpl.n	9001ac0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001abf2:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001abf6:	0066      	lsls	r6, r4, #1
9001abf8:	3a01      	subs	r2, #1
9001abfa:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001abfe:	42aa      	cmp	r2, r5
9001ac00:	d202      	bcs.n	9001ac08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001ac02:	8013      	strh	r3, [r2, #0]
9001ac04:	4432      	add	r2, r6
9001ac06:	e7fa      	b.n	9001abfe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001ac08:	3801      	subs	r0, #1
9001ac0a:	b178      	cbz	r0, 9001ac2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001ac0c:	1040      	asrs	r0, r0, #1
9001ac0e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001ac12:	0080      	lsls	r0, r0, #2
9001ac14:	0064      	lsls	r4, r4, #1
9001ac16:	42a9      	cmp	r1, r5
9001ac18:	d208      	bcs.n	9001ac2c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001ac1a:	180e      	adds	r6, r1, r0
9001ac1c:	460a      	mov	r2, r1
9001ac1e:	42b2      	cmp	r2, r6
9001ac20:	d202      	bcs.n	9001ac28 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001ac22:	f842 3b04 	str.w	r3, [r2], #4
9001ac26:	e7fa      	b.n	9001ac1e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001ac28:	4421      	add	r1, r4
9001ac2a:	e7f4      	b.n	9001ac16 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001ac2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001ac30:	00fff800 	.word	0x00fff800

9001ac34 <_ZN8touchgfx8LCD16bppC1Ev>:
9001ac34:	2200      	movs	r2, #0
9001ac36:	4910      	ldr	r1, [pc, #64]	; (9001ac78 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001ac38:	6042      	str	r2, [r0, #4]
9001ac3a:	6001      	str	r1, [r0, #0]
9001ac3c:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001ac40:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001ac44:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001ac48:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001ac4c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001ac50:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001ac54:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001ac58:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001ac5c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001ac60:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001ac64:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001ac68:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001ac6c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001ac70:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001ac74:	4770      	bx	lr
9001ac76:	bf00      	nop
9001ac78:	90027ae8 	.word	0x90027ae8

9001ac7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001ac7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ac80:	b08d      	sub	sp, #52	; 0x34
9001ac82:	460d      	mov	r5, r1
9001ac84:	4604      	mov	r4, r0
9001ac86:	4699      	mov	r9, r3
9001ac88:	6808      	ldr	r0, [r1, #0]
9001ac8a:	ab08      	add	r3, sp, #32
9001ac8c:	6849      	ldr	r1, [r1, #4]
9001ac8e:	c303      	stmia	r3!, {r0, r1}
9001ac90:	6810      	ldr	r0, [r2, #0]
9001ac92:	ab0a      	add	r3, sp, #40	; 0x28
9001ac94:	6851      	ldr	r1, [r2, #4]
9001ac96:	c303      	stmia	r3!, {r0, r1}
9001ac98:	a808      	add	r0, sp, #32
9001ac9a:	f7f9 fce3 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ac9e:	4629      	mov	r1, r5
9001aca0:	a80a      	add	r0, sp, #40	; 0x28
9001aca2:	4d67      	ldr	r5, [pc, #412]	; (9001ae40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001aca4:	f7f9 fd22 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001aca8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001acac:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001acb0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001acb4:	6828      	ldr	r0, [r5, #0]
9001acb6:	fb11 2103 	smlabb	r1, r1, r3, r2
9001acba:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001acbe:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001acc2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001acc6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001acca:	440a      	add	r2, r1
9001accc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001acd0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001acd4:	4413      	add	r3, r2
9001acd6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001acda:	6803      	ldr	r3, [r0, #0]
9001acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001acde:	4798      	blx	r3
9001ace0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001ace4:	d119      	bne.n	9001ad1a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001ace6:	f010 0f20 	tst.w	r0, #32
9001acea:	6828      	ldr	r0, [r5, #0]
9001acec:	d018      	beq.n	9001ad20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001acee:	2500      	movs	r5, #0
9001acf0:	6801      	ldr	r1, [r0, #0]
9001acf2:	b2b6      	uxth	r6, r6
9001acf4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001acf8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001acfc:	9601      	str	r6, [sp, #4]
9001acfe:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001ad02:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001ad06:	9502      	str	r5, [sp, #8]
9001ad08:	fa1f f588 	uxth.w	r5, r8
9001ad0c:	9500      	str	r5, [sp, #0]
9001ad0e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001ad10:	4621      	mov	r1, r4
9001ad12:	47a8      	blx	r5
9001ad14:	b00d      	add	sp, #52	; 0x34
9001ad16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ad1a:	f010 0f40 	tst.w	r0, #64	; 0x40
9001ad1e:	e7e4      	b.n	9001acea <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001ad20:	6803      	ldr	r3, [r0, #0]
9001ad22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ad24:	4798      	blx	r3
9001ad26:	4947      	ldr	r1, [pc, #284]	; (9001ae44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001ad28:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001ad2c:	880b      	ldrh	r3, [r1, #0]
9001ad2e:	468a      	mov	sl, r1
9001ad30:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001ad34:	fb03 5202 	mla	r2, r3, r2, r5
9001ad38:	4373      	muls	r3, r6
9001ad3a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001ad3e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001ad42:	9307      	str	r3, [sp, #28]
9001ad44:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001ad48:	9306      	str	r3, [sp, #24]
9001ad4a:	9b07      	ldr	r3, [sp, #28]
9001ad4c:	4298      	cmp	r0, r3
9001ad4e:	d270      	bcs.n	9001ae32 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001ad50:	9b06      	ldr	r3, [sp, #24]
9001ad52:	4621      	mov	r1, r4
9001ad54:	eb00 0b03 	add.w	fp, r0, r3
9001ad58:	4558      	cmp	r0, fp
9001ad5a:	d25d      	bcs.n	9001ae18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001ad5c:	f851 4b04 	ldr.w	r4, [r1], #4
9001ad60:	0e23      	lsrs	r3, r4, #24
9001ad62:	d014      	beq.n	9001ad8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001ad64:	2bff      	cmp	r3, #255	; 0xff
9001ad66:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001ad6a:	d112      	bne.n	9001ad92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001ad6c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001ad70:	d10f      	bne.n	9001ad92 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001ad72:	0963      	lsrs	r3, r4, #5
9001ad74:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001ad78:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001ad7c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001ad80:	f02c 0c07 	bic.w	ip, ip, #7
9001ad84:	ea43 0c0c 	orr.w	ip, r3, ip
9001ad88:	ea4c 0404 	orr.w	r4, ip, r4
9001ad8c:	8004      	strh	r4, [r0, #0]
9001ad8e:	3002      	adds	r0, #2
9001ad90:	e7e2      	b.n	9001ad58 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001ad92:	fb09 f303 	mul.w	r3, r9, r3
9001ad96:	8807      	ldrh	r7, [r0, #0]
9001ad98:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001ad9c:	fa5f fc8c 	uxtb.w	ip, ip
9001ada0:	1c5a      	adds	r2, r3, #1
9001ada2:	123e      	asrs	r6, r7, #8
9001ada4:	10fd      	asrs	r5, r7, #3
9001ada6:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001adaa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001adae:	00ff      	lsls	r7, r7, #3
9001adb0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001adb4:	1212      	asrs	r2, r2, #8
9001adb6:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001adba:	b293      	uxth	r3, r2
9001adbc:	43d2      	mvns	r2, r2
9001adbe:	b2ff      	uxtb	r7, r7
9001adc0:	fb1e fe03 	smulbb	lr, lr, r3
9001adc4:	b2d2      	uxtb	r2, r2
9001adc6:	fb1c fc03 	smulbb	ip, ip, r3
9001adca:	b2e4      	uxtb	r4, r4
9001adcc:	fb06 e602 	mla	r6, r6, r2, lr
9001add0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001add4:	fb14 f403 	smulbb	r4, r4, r3
9001add8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001addc:	b2b6      	uxth	r6, r6
9001adde:	fb05 c502 	mla	r5, r5, r2, ip
9001ade2:	fb07 4702 	mla	r7, r7, r2, r4
9001ade6:	f106 0e01 	add.w	lr, r6, #1
9001adea:	b2ad      	uxth	r5, r5
9001adec:	b2bf      	uxth	r7, r7
9001adee:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001adf2:	f105 0c01 	add.w	ip, r5, #1
9001adf6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001adfa:	1c7e      	adds	r6, r7, #1
9001adfc:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001ae00:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001ae04:	096d      	lsrs	r5, r5, #5
9001ae06:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001ae0a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001ae0e:	ea46 060e 	orr.w	r6, r6, lr
9001ae12:	432e      	orrs	r6, r5
9001ae14:	8006      	strh	r6, [r0, #0]
9001ae16:	e7ba      	b.n	9001ad8e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001ae18:	f8ba 3000 	ldrh.w	r3, [sl]
9001ae1c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001ae20:	eba3 0308 	sub.w	r3, r3, r8
9001ae24:	eba4 0408 	sub.w	r4, r4, r8
9001ae28:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ae2c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001ae30:	e78b      	b.n	9001ad4a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001ae32:	4b03      	ldr	r3, [pc, #12]	; (9001ae40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001ae34:	6818      	ldr	r0, [r3, #0]
9001ae36:	6803      	ldr	r3, [r0, #0]
9001ae38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ae3a:	4798      	blx	r3
9001ae3c:	e76a      	b.n	9001ad14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001ae3e:	bf00      	nop
9001ae40:	2402645c 	.word	0x2402645c
9001ae44:	24026456 	.word	0x24026456

9001ae48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001ae48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001ae4c:	b085      	sub	sp, #20
9001ae4e:	6810      	ldr	r0, [r2, #0]
9001ae50:	460c      	mov	r4, r1
9001ae52:	6851      	ldr	r1, [r2, #4]
9001ae54:	466d      	mov	r5, sp
9001ae56:	4616      	mov	r6, r2
9001ae58:	c503      	stmia	r5!, {r0, r1}
9001ae5a:	6818      	ldr	r0, [r3, #0]
9001ae5c:	6859      	ldr	r1, [r3, #4]
9001ae5e:	c503      	stmia	r5!, {r0, r1}
9001ae60:	4668      	mov	r0, sp
9001ae62:	4d2e      	ldr	r5, [pc, #184]	; (9001af1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001ae64:	f7f9 fbfe 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ae68:	4631      	mov	r1, r6
9001ae6a:	a802      	add	r0, sp, #8
9001ae6c:	4e2c      	ldr	r6, [pc, #176]	; (9001af20 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001ae6e:	f7f9 fc3d 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ae72:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001ae76:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001ae7a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001ae7e:	6828      	ldr	r0, [r5, #0]
9001ae80:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ae84:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001ae88:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001ae8c:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001ae90:	f8bd 1000 	ldrh.w	r1, [sp]
9001ae94:	440a      	add	r2, r1
9001ae96:	f8ad 2008 	strh.w	r2, [sp, #8]
9001ae9a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001ae9e:	4413      	add	r3, r2
9001aea0:	f8ad 300a 	strh.w	r3, [sp, #10]
9001aea4:	6803      	ldr	r3, [r0, #0]
9001aea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001aea8:	4798      	blx	r3
9001aeaa:	8833      	ldrh	r3, [r6, #0]
9001aeac:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001aeb0:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001aeb4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001aeb8:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001af24 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001aebc:	fb03 1202 	mla	r2, r3, r2, r1
9001aec0:	fb08 f303 	mul.w	r3, r8, r3
9001aec4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001aec8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001aecc:	4298      	cmp	r0, r3
9001aece:	d21d      	bcs.n	9001af0c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001aed0:	eb00 080c 	add.w	r8, r0, ip
9001aed4:	4540      	cmp	r0, r8
9001aed6:	d20f      	bcs.n	9001aef8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001aed8:	f854 1b04 	ldr.w	r1, [r4], #4
9001aedc:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001aee0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001aee4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001aee8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001aeec:	ea42 0209 	orr.w	r2, r2, r9
9001aef0:	430a      	orrs	r2, r1
9001aef2:	f820 2b02 	strh.w	r2, [r0], #2
9001aef6:	e7ed      	b.n	9001aed4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001aef8:	8832      	ldrh	r2, [r6, #0]
9001aefa:	1bd2      	subs	r2, r2, r7
9001aefc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001af00:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001af04:	1bd2      	subs	r2, r2, r7
9001af06:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001af0a:	e7df      	b.n	9001aecc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001af0c:	6828      	ldr	r0, [r5, #0]
9001af0e:	6803      	ldr	r3, [r0, #0]
9001af10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001af12:	4798      	blx	r3
9001af14:	b005      	add	sp, #20
9001af16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001af1a:	bf00      	nop
9001af1c:	2402645c 	.word	0x2402645c
9001af20:	24026456 	.word	0x24026456
9001af24:	fffff800 	.word	0xfffff800

9001af28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001af28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001af2c:	b08e      	sub	sp, #56	; 0x38
9001af2e:	460e      	mov	r6, r1
9001af30:	4604      	mov	r4, r0
9001af32:	461d      	mov	r5, r3
9001af34:	6808      	ldr	r0, [r1, #0]
9001af36:	ab0a      	add	r3, sp, #40	; 0x28
9001af38:	6849      	ldr	r1, [r1, #4]
9001af3a:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001b110 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001af3e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001b114 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001af42:	c303      	stmia	r3!, {r0, r1}
9001af44:	6810      	ldr	r0, [r2, #0]
9001af46:	ab0c      	add	r3, sp, #48	; 0x30
9001af48:	6851      	ldr	r1, [r2, #4]
9001af4a:	c303      	stmia	r3!, {r0, r1}
9001af4c:	a80a      	add	r0, sp, #40	; 0x28
9001af4e:	f7f9 fb89 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001af52:	4631      	mov	r1, r6
9001af54:	a80c      	add	r0, sp, #48	; 0x30
9001af56:	f7f9 fbc9 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001af5a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001af5e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001af62:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001af66:	f8d8 0000 	ldr.w	r0, [r8]
9001af6a:	fb11 2103 	smlabb	r1, r1, r3, r2
9001af6e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001af72:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001af76:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001af7a:	440c      	add	r4, r1
9001af7c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001af80:	440a      	add	r2, r1
9001af82:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001af86:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001af8a:	4413      	add	r3, r2
9001af8c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001af90:	6803      	ldr	r3, [r0, #0]
9001af92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001af94:	4798      	blx	r3
9001af96:	2dff      	cmp	r5, #255	; 0xff
9001af98:	d124      	bne.n	9001afe4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001af9a:	f010 0f01 	tst.w	r0, #1
9001af9e:	f8d8 0000 	ldr.w	r0, [r8]
9001afa2:	d022      	beq.n	9001afea <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001afa4:	2100      	movs	r1, #0
9001afa6:	f04f 0e01 	mov.w	lr, #1
9001afaa:	f8d0 c000 	ldr.w	ip, [r0]
9001afae:	b2b6      	uxth	r6, r6
9001afb0:	f8cd e018 	str.w	lr, [sp, #24]
9001afb4:	b2bf      	uxth	r7, r7
9001afb6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001afba:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001afbe:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001afc2:	f8b9 e000 	ldrh.w	lr, [r9]
9001afc6:	9503      	str	r5, [sp, #12]
9001afc8:	9601      	str	r6, [sp, #4]
9001afca:	9700      	str	r7, [sp, #0]
9001afcc:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001afd0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001afd4:	9102      	str	r1, [sp, #8]
9001afd6:	4621      	mov	r1, r4
9001afd8:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001afdc:	47a8      	blx	r5
9001afde:	b00e      	add	sp, #56	; 0x38
9001afe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001afe4:	f010 0f04 	tst.w	r0, #4
9001afe8:	e7d9      	b.n	9001af9e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001afea:	6803      	ldr	r3, [r0, #0]
9001afec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001afee:	4798      	blx	r3
9001aff0:	f8b9 3000 	ldrh.w	r3, [r9]
9001aff4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001aff8:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001affc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001b000:	435e      	muls	r6, r3
9001b002:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001b006:	2dff      	cmp	r5, #255	; 0xff
9001b008:	fb03 1202 	mla	r2, r3, r2, r1
9001b00c:	ebac 0c07 	sub.w	ip, ip, r7
9001b010:	eba3 0707 	sub.w	r7, r3, r7
9001b014:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001b018:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001b01c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001b020:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001b024:	d049      	beq.n	9001b0ba <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001b026:	43eb      	mvns	r3, r5
9001b028:	fa1f f985 	uxth.w	r9, r5
9001b02c:	b2db      	uxtb	r3, r3
9001b02e:	42b0      	cmp	r0, r6
9001b030:	d266      	bcs.n	9001b100 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001b032:	eb00 0a0e 	add.w	sl, r0, lr
9001b036:	4550      	cmp	r0, sl
9001b038:	4621      	mov	r1, r4
9001b03a:	f104 0403 	add.w	r4, r4, #3
9001b03e:	d25b      	bcs.n	9001b0f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001b040:	8802      	ldrh	r2, [r0, #0]
9001b042:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001b046:	ea4f 2822 	mov.w	r8, r2, asr #8
9001b04a:	fb11 f109 	smulbb	r1, r1, r9
9001b04e:	10d5      	asrs	r5, r2, #3
9001b050:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001b054:	00d2      	lsls	r2, r2, #3
9001b056:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001b05a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001b05e:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001b062:	fb08 1803 	mla	r8, r8, r3, r1
9001b066:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001b06a:	b2d2      	uxtb	r2, r2
9001b06c:	fb11 f109 	smulbb	r1, r1, r9
9001b070:	fa1f f888 	uxth.w	r8, r8
9001b074:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001b078:	fb05 1503 	mla	r5, r5, r3, r1
9001b07c:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001b080:	fb11 f109 	smulbb	r1, r1, r9
9001b084:	b2ad      	uxth	r5, r5
9001b086:	fb02 1203 	mla	r2, r2, r3, r1
9001b08a:	f108 0101 	add.w	r1, r8, #1
9001b08e:	b292      	uxth	r2, r2
9001b090:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001b094:	1c51      	adds	r1, r2, #1
9001b096:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001b09a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001b09e:	1c69      	adds	r1, r5, #1
9001b0a0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001b0a4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001b0a8:	096d      	lsrs	r5, r5, #5
9001b0aa:	ea42 0208 	orr.w	r2, r2, r8
9001b0ae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001b0b2:	432a      	orrs	r2, r5
9001b0b4:	f820 2b02 	strh.w	r2, [r0], #2
9001b0b8:	e7bd      	b.n	9001b036 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001b0ba:	4a14      	ldr	r2, [pc, #80]	; (9001b10c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001b0bc:	42b0      	cmp	r0, r6
9001b0be:	d21f      	bcs.n	9001b100 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001b0c0:	eb00 050e 	add.w	r5, r0, lr
9001b0c4:	42a8      	cmp	r0, r5
9001b0c6:	4621      	mov	r1, r4
9001b0c8:	f104 0403 	add.w	r4, r4, #3
9001b0cc:	d210      	bcs.n	9001b0f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001b0ce:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001b0d2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001b0d6:	00db      	lsls	r3, r3, #3
9001b0d8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001b0dc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001b0e0:	430b      	orrs	r3, r1
9001b0e2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001b0e6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001b0ea:	f820 3b02 	strh.w	r3, [r0], #2
9001b0ee:	e7e9      	b.n	9001b0c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001b0f0:	4438      	add	r0, r7
9001b0f2:	eb01 040c 	add.w	r4, r1, ip
9001b0f6:	e7e1      	b.n	9001b0bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001b0f8:	4438      	add	r0, r7
9001b0fa:	eb01 040c 	add.w	r4, r1, ip
9001b0fe:	e796      	b.n	9001b02e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001b100:	4b03      	ldr	r3, [pc, #12]	; (9001b110 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001b102:	6818      	ldr	r0, [r3, #0]
9001b104:	6803      	ldr	r3, [r0, #0]
9001b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b108:	4798      	blx	r3
9001b10a:	e768      	b.n	9001afde <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001b10c:	fffff800 	.word	0xfffff800
9001b110:	2402645c 	.word	0x2402645c
9001b114:	24026456 	.word	0x24026456

9001b118 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001b118:	b4f0      	push	{r4, r5, r6, r7}
9001b11a:	4616      	mov	r6, r2
9001b11c:	461c      	mov	r4, r3
9001b11e:	460d      	mov	r5, r1
9001b120:	9a04      	ldr	r2, [sp, #16]
9001b122:	2e01      	cmp	r6, #1
9001b124:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001b128:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001b12c:	d012      	beq.n	9001b154 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001b12e:	d303      	bcc.n	9001b138 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001b130:	2e02      	cmp	r6, #2
9001b132:	d00a      	beq.n	9001b14a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001b134:	bcf0      	pop	{r4, r5, r6, r7}
9001b136:	4770      	bx	lr
9001b138:	6805      	ldr	r5, [r0, #0]
9001b13a:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001b13e:	68ed      	ldr	r5, [r5, #12]
9001b140:	4613      	mov	r3, r2
9001b142:	4622      	mov	r2, r4
9001b144:	46ac      	mov	ip, r5
9001b146:	bcf0      	pop	{r4, r5, r6, r7}
9001b148:	4760      	bx	ip
9001b14a:	4621      	mov	r1, r4
9001b14c:	4628      	mov	r0, r5
9001b14e:	bcf0      	pop	{r4, r5, r6, r7}
9001b150:	f7ff bd94 	b.w	9001ac7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001b154:	4621      	mov	r1, r4
9001b156:	4628      	mov	r0, r5
9001b158:	bcf0      	pop	{r4, r5, r6, r7}
9001b15a:	f7ff bee5 	b.w	9001af28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001b160 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001b160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b164:	b093      	sub	sp, #76	; 0x4c
9001b166:	4681      	mov	r9, r0
9001b168:	4688      	mov	r8, r1
9001b16a:	6810      	ldr	r0, [r2, #0]
9001b16c:	6851      	ldr	r1, [r2, #4]
9001b16e:	ac0e      	add	r4, sp, #56	; 0x38
9001b170:	4616      	mov	r6, r2
9001b172:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001b176:	4f6b      	ldr	r7, [pc, #428]	; (9001b324 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001b178:	c403      	stmia	r4!, {r0, r1}
9001b17a:	6818      	ldr	r0, [r3, #0]
9001b17c:	ac10      	add	r4, sp, #64	; 0x40
9001b17e:	6859      	ldr	r1, [r3, #4]
9001b180:	c403      	stmia	r4!, {r0, r1}
9001b182:	a80e      	add	r0, sp, #56	; 0x38
9001b184:	f7f9 fa6e 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001b188:	4631      	mov	r1, r6
9001b18a:	a810      	add	r0, sp, #64	; 0x40
9001b18c:	4e66      	ldr	r6, [pc, #408]	; (9001b328 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001b18e:	f7f9 faad 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001b192:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001b196:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001b19a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001b19e:	6830      	ldr	r0, [r6, #0]
9001b1a0:	fb11 2103 	smlabb	r1, r1, r3, r2
9001b1a4:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001b1a8:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001b1ac:	4489      	add	r9, r1
9001b1ae:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001b1b2:	440a      	add	r2, r1
9001b1b4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001b1b8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001b1bc:	4413      	add	r3, r2
9001b1be:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001b1c2:	6803      	ldr	r3, [r0, #0]
9001b1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b1c6:	4798      	blx	r3
9001b1c8:	f010 0f80 	tst.w	r0, #128	; 0x80
9001b1cc:	6830      	ldr	r0, [r6, #0]
9001b1ce:	d01d      	beq.n	9001b20c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001b1d0:	2200      	movs	r2, #0
9001b1d2:	6801      	ldr	r1, [r0, #0]
9001b1d4:	b2a4      	uxth	r4, r4
9001b1d6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001b1da:	b2ad      	uxth	r5, r5
9001b1dc:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001b1e0:	220b      	movs	r2, #11
9001b1e2:	9207      	str	r2, [sp, #28]
9001b1e4:	883a      	ldrh	r2, [r7, #0]
9001b1e6:	9502      	str	r5, [sp, #8]
9001b1e8:	9206      	str	r2, [sp, #24]
9001b1ea:	2201      	movs	r2, #1
9001b1ec:	9401      	str	r4, [sp, #4]
9001b1ee:	e9cd a204 	strd	sl, r2, [sp, #16]
9001b1f2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001b1f6:	9203      	str	r2, [sp, #12]
9001b1f8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001b1fc:	9200      	str	r2, [sp, #0]
9001b1fe:	4642      	mov	r2, r8
9001b200:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001b202:	4649      	mov	r1, r9
9001b204:	47a0      	blx	r4
9001b206:	b013      	add	sp, #76	; 0x4c
9001b208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b20c:	6803      	ldr	r3, [r0, #0]
9001b20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001b210:	4798      	blx	r3
9001b212:	883b      	ldrh	r3, [r7, #0]
9001b214:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001b218:	f04f 0e04 	mov.w	lr, #4
9001b21c:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001b220:	435d      	muls	r5, r3
9001b222:	fb03 1202 	mla	r2, r3, r2, r1
9001b226:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001b22a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001b22e:	920c      	str	r2, [sp, #48]	; 0x30
9001b230:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001b234:	1b12      	subs	r2, r2, r4
9001b236:	920d      	str	r2, [sp, #52]	; 0x34
9001b238:	0062      	lsls	r2, r4, #1
9001b23a:	1b1c      	subs	r4, r3, r4
9001b23c:	920a      	str	r2, [sp, #40]	; 0x28
9001b23e:	0063      	lsls	r3, r4, #1
9001b240:	930b      	str	r3, [sp, #44]	; 0x2c
9001b242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001b244:	4298      	cmp	r0, r3
9001b246:	d266      	bcs.n	9001b316 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001b248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b24a:	eb00 0b03 	add.w	fp, r0, r3
9001b24e:	4558      	cmp	r0, fp
9001b250:	d25c      	bcs.n	9001b30c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001b252:	f819 3b01 	ldrb.w	r3, [r9], #1
9001b256:	fb1e e303 	smlabb	r3, lr, r3, lr
9001b25a:	f858 2003 	ldr.w	r2, [r8, r3]
9001b25e:	0e11      	lsrs	r1, r2, #24
9001b260:	d012      	beq.n	9001b288 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001b262:	29ff      	cmp	r1, #255	; 0xff
9001b264:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001b268:	d110      	bne.n	9001b28c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001b26a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001b26e:	d10d      	bne.n	9001b28c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001b270:	0953      	lsrs	r3, r2, #5
9001b272:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001b276:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001b27a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001b27e:	f027 0707 	bic.w	r7, r7, #7
9001b282:	431f      	orrs	r7, r3
9001b284:	433a      	orrs	r2, r7
9001b286:	8002      	strh	r2, [r0, #0]
9001b288:	3002      	adds	r0, #2
9001b28a:	e7e0      	b.n	9001b24e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001b28c:	fb0a f101 	mul.w	r1, sl, r1
9001b290:	8806      	ldrh	r6, [r0, #0]
9001b292:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001b296:	b2d2      	uxtb	r2, r2
9001b298:	1c4b      	adds	r3, r1, #1
9001b29a:	1235      	asrs	r5, r6, #8
9001b29c:	10f4      	asrs	r4, r6, #3
9001b29e:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001b2a2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001b2a6:	00f6      	lsls	r6, r6, #3
9001b2a8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001b2ac:	121b      	asrs	r3, r3, #8
9001b2ae:	b2f6      	uxtb	r6, r6
9001b2b0:	b299      	uxth	r1, r3
9001b2b2:	43db      	mvns	r3, r3
9001b2b4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001b2b8:	fb1c fc01 	smulbb	ip, ip, r1
9001b2bc:	b2db      	uxtb	r3, r3
9001b2be:	fb12 f201 	smulbb	r2, r2, r1
9001b2c2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001b2c6:	fb05 c503 	mla	r5, r5, r3, ip
9001b2ca:	b2ff      	uxtb	r7, r7
9001b2cc:	fb06 2203 	mla	r2, r6, r3, r2
9001b2d0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001b2d4:	fb17 f701 	smulbb	r7, r7, r1
9001b2d8:	b2ad      	uxth	r5, r5
9001b2da:	b292      	uxth	r2, r2
9001b2dc:	fb04 7403 	mla	r4, r4, r3, r7
9001b2e0:	f105 0c01 	add.w	ip, r5, #1
9001b2e4:	1c57      	adds	r7, r2, #1
9001b2e6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001b2ea:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001b2ee:	b2a4      	uxth	r4, r4
9001b2f0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001b2f4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001b2f8:	433d      	orrs	r5, r7
9001b2fa:	1c67      	adds	r7, r4, #1
9001b2fc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001b300:	0964      	lsrs	r4, r4, #5
9001b302:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001b306:	4325      	orrs	r5, r4
9001b308:	8005      	strh	r5, [r0, #0]
9001b30a:	e7bd      	b.n	9001b288 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001b30c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b30e:	4418      	add	r0, r3
9001b310:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b312:	4499      	add	r9, r3
9001b314:	e795      	b.n	9001b242 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001b316:	4b04      	ldr	r3, [pc, #16]	; (9001b328 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001b318:	6818      	ldr	r0, [r3, #0]
9001b31a:	6803      	ldr	r3, [r0, #0]
9001b31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b31e:	4798      	blx	r3
9001b320:	e771      	b.n	9001b206 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001b322:	bf00      	nop
9001b324:	24026456 	.word	0x24026456
9001b328:	2402645c 	.word	0x2402645c

9001b32c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001b32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b330:	b087      	sub	sp, #28
9001b332:	4680      	mov	r8, r0
9001b334:	460d      	mov	r5, r1
9001b336:	4614      	mov	r4, r2
9001b338:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001b33c:	2e00      	cmp	r6, #0
9001b33e:	f000 80b9 	beq.w	9001b4b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001b342:	6810      	ldr	r0, [r2, #0]
9001b344:	af02      	add	r7, sp, #8
9001b346:	6851      	ldr	r1, [r2, #4]
9001b348:	c703      	stmia	r7!, {r0, r1}
9001b34a:	6818      	ldr	r0, [r3, #0]
9001b34c:	af04      	add	r7, sp, #16
9001b34e:	6859      	ldr	r1, [r3, #4]
9001b350:	c703      	stmia	r7!, {r0, r1}
9001b352:	a802      	add	r0, sp, #8
9001b354:	f7f9 f986 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001b358:	4621      	mov	r1, r4
9001b35a:	a804      	add	r0, sp, #16
9001b35c:	f7f9 f9c6 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001b360:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001b364:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b368:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001b36c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001b370:	fb14 2103 	smlabb	r1, r4, r3, r2
9001b374:	eb08 0401 	add.w	r4, r8, r1
9001b378:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001b37c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001b380:	440a      	add	r2, r1
9001b382:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001b386:	f8ad 2010 	strh.w	r2, [sp, #16]
9001b38a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001b38e:	4413      	add	r3, r2
9001b390:	f8ad 3012 	strh.w	r3, [sp, #18]
9001b394:	4b49      	ldr	r3, [pc, #292]	; (9001b4bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001b396:	6818      	ldr	r0, [r3, #0]
9001b398:	6803      	ldr	r3, [r0, #0]
9001b39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001b39c:	4798      	blx	r3
9001b39e:	4b48      	ldr	r3, [pc, #288]	; (9001b4c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001b3a0:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001b3a4:	2eff      	cmp	r6, #255	; 0xff
9001b3a6:	881a      	ldrh	r2, [r3, #0]
9001b3a8:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001b3ac:	fb02 c101 	mla	r1, r2, r1, ip
9001b3b0:	fb02 f207 	mul.w	r2, r2, r7
9001b3b4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001b3b8:	f105 0104 	add.w	r1, r5, #4
9001b3bc:	461d      	mov	r5, r3
9001b3be:	d05a      	beq.n	9001b476 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001b3c0:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001b3c4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001b3c8:	b2b6      	uxth	r6, r6
9001b3ca:	9301      	str	r3, [sp, #4]
9001b3cc:	fa1f fe8e 	uxth.w	lr, lr
9001b3d0:	4282      	cmp	r2, r0
9001b3d2:	d96a      	bls.n	9001b4aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001b3d4:	eb00 0b0a 	add.w	fp, r0, sl
9001b3d8:	4583      	cmp	fp, r0
9001b3da:	d940      	bls.n	9001b45e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001b3dc:	8805      	ldrh	r5, [r0, #0]
9001b3de:	f814 3b01 	ldrb.w	r3, [r4], #1
9001b3e2:	122f      	asrs	r7, r5, #8
9001b3e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001b3e8:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001b3ec:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b3f0:	00ed      	lsls	r5, r5, #3
9001b3f2:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001b3f6:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001b3fa:	fb17 f70e 	smulbb	r7, r7, lr
9001b3fe:	b2ed      	uxtb	r5, r5
9001b400:	fb19 f90e 	smulbb	r9, r9, lr
9001b404:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b408:	fb15 f50e 	smulbb	r5, r5, lr
9001b40c:	fb0c 7c06 	mla	ip, ip, r6, r7
9001b410:	10df      	asrs	r7, r3, #3
9001b412:	00db      	lsls	r3, r3, #3
9001b414:	fa1f fc8c 	uxth.w	ip, ip
9001b418:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b41c:	b2db      	uxtb	r3, r3
9001b41e:	fb07 9706 	mla	r7, r7, r6, r9
9001b422:	f10c 0901 	add.w	r9, ip, #1
9001b426:	fb03 5306 	mla	r3, r3, r6, r5
9001b42a:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001b42e:	b29b      	uxth	r3, r3
9001b430:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001b434:	b2bf      	uxth	r7, r7
9001b436:	f103 0c01 	add.w	ip, r3, #1
9001b43a:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001b43e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001b442:	ea4c 0c09 	orr.w	ip, ip, r9
9001b446:	f107 0901 	add.w	r9, r7, #1
9001b44a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001b44e:	097f      	lsrs	r7, r7, #5
9001b450:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001b454:	ea4c 0c07 	orr.w	ip, ip, r7
9001b458:	f820 cb02 	strh.w	ip, [r0], #2
9001b45c:	e7bc      	b.n	9001b3d8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001b45e:	9b01      	ldr	r3, [sp, #4]
9001b460:	881b      	ldrh	r3, [r3, #0]
9001b462:	eba3 0308 	sub.w	r3, r3, r8
9001b466:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b46a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001b46e:	eba3 0308 	sub.w	r3, r3, r8
9001b472:	441c      	add	r4, r3
9001b474:	e7ac      	b.n	9001b3d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001b476:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001b47a:	4282      	cmp	r2, r0
9001b47c:	d915      	bls.n	9001b4aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001b47e:	eb00 060a 	add.w	r6, r0, sl
9001b482:	4286      	cmp	r6, r0
9001b484:	d906      	bls.n	9001b494 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001b486:	f814 3b01 	ldrb.w	r3, [r4], #1
9001b48a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001b48e:	f820 3b02 	strh.w	r3, [r0], #2
9001b492:	e7f6      	b.n	9001b482 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001b494:	882b      	ldrh	r3, [r5, #0]
9001b496:	eba3 0308 	sub.w	r3, r3, r8
9001b49a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b49e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001b4a2:	eba3 0308 	sub.w	r3, r3, r8
9001b4a6:	441c      	add	r4, r3
9001b4a8:	e7e7      	b.n	9001b47a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001b4aa:	4b04      	ldr	r3, [pc, #16]	; (9001b4bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001b4ac:	6818      	ldr	r0, [r3, #0]
9001b4ae:	6803      	ldr	r3, [r0, #0]
9001b4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b4b2:	4798      	blx	r3
9001b4b4:	b007      	add	sp, #28
9001b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b4ba:	bf00      	nop
9001b4bc:	2402645c 	.word	0x2402645c
9001b4c0:	24026456 	.word	0x24026456

9001b4c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001b4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b4c8:	b091      	sub	sp, #68	; 0x44
9001b4ca:	4680      	mov	r8, r0
9001b4cc:	460f      	mov	r7, r1
9001b4ce:	4614      	mov	r4, r2
9001b4d0:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001b4d4:	2d00      	cmp	r5, #0
9001b4d6:	d051      	beq.n	9001b57c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001b4d8:	6810      	ldr	r0, [r2, #0]
9001b4da:	ae0c      	add	r6, sp, #48	; 0x30
9001b4dc:	6851      	ldr	r1, [r2, #4]
9001b4de:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001b6e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001b4e2:	c603      	stmia	r6!, {r0, r1}
9001b4e4:	6818      	ldr	r0, [r3, #0]
9001b4e6:	ae0e      	add	r6, sp, #56	; 0x38
9001b4e8:	6859      	ldr	r1, [r3, #4]
9001b4ea:	c603      	stmia	r6!, {r0, r1}
9001b4ec:	a80c      	add	r0, sp, #48	; 0x30
9001b4ee:	f7f9 f8b9 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001b4f2:	4621      	mov	r1, r4
9001b4f4:	a80e      	add	r0, sp, #56	; 0x38
9001b4f6:	f7f9 f8f9 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001b4fa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001b4fe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001b502:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001b506:	f8d9 0000 	ldr.w	r0, [r9]
9001b50a:	fb11 2103 	smlabb	r1, r1, r3, r2
9001b50e:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001b512:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001b516:	eb08 0401 	add.w	r4, r8, r1
9001b51a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001b51e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001b6e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001b522:	440a      	add	r2, r1
9001b524:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001b528:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001b52c:	4413      	add	r3, r2
9001b52e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001b532:	6803      	ldr	r3, [r0, #0]
9001b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b536:	4798      	blx	r3
9001b538:	f010 0f80 	tst.w	r0, #128	; 0x80
9001b53c:	f8d9 0000 	ldr.w	r0, [r9]
9001b540:	d01f      	beq.n	9001b582 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001b542:	2200      	movs	r2, #0
9001b544:	6801      	ldr	r1, [r0, #0]
9001b546:	b2b6      	uxth	r6, r6
9001b548:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001b54c:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001b550:	220b      	movs	r2, #11
9001b552:	9207      	str	r2, [sp, #28]
9001b554:	f8b8 2000 	ldrh.w	r2, [r8]
9001b558:	9601      	str	r6, [sp, #4]
9001b55a:	9206      	str	r2, [sp, #24]
9001b55c:	2201      	movs	r2, #1
9001b55e:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001b562:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001b566:	9203      	str	r2, [sp, #12]
9001b568:	fa1f f28a 	uxth.w	r2, sl
9001b56c:	9202      	str	r2, [sp, #8]
9001b56e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001b572:	9200      	str	r2, [sp, #0]
9001b574:	463a      	mov	r2, r7
9001b576:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001b578:	4621      	mov	r1, r4
9001b57a:	47a8      	blx	r5
9001b57c:	b011      	add	sp, #68	; 0x44
9001b57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b582:	6803      	ldr	r3, [r0, #0]
9001b584:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001b58a:	4798      	blx	r3
9001b58c:	f8b8 2000 	ldrh.w	r2, [r8]
9001b590:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001b594:	2dff      	cmp	r5, #255	; 0xff
9001b596:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001b59a:	fb0a fa02 	mul.w	sl, sl, r2
9001b59e:	fb02 1303 	mla	r3, r2, r3, r1
9001b5a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b5a6:	d062      	beq.n	9001b66e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001b5a8:	ea6f 0c05 	mvn.w	ip, r5
9001b5ac:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001b5b0:	b2ad      	uxth	r5, r5
9001b5b2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001b5b6:	fa5f fc8c 	uxtb.w	ip, ip
9001b5ba:	930a      	str	r3, [sp, #40]	; 0x28
9001b5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001b5be:	4298      	cmp	r0, r3
9001b5c0:	f080 8085 	bcs.w	9001b6ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001b5c4:	eb00 0b09 	add.w	fp, r0, r9
9001b5c8:	4558      	cmp	r0, fp
9001b5ca:	d246      	bcs.n	9001b65a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001b5cc:	f814 eb01 	ldrb.w	lr, [r4], #1
9001b5d0:	2303      	movs	r3, #3
9001b5d2:	2204      	movs	r2, #4
9001b5d4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001b5d8:	8803      	ldrh	r3, [r0, #0]
9001b5da:	eb07 0a0e 	add.w	sl, r7, lr
9001b5de:	1219      	asrs	r1, r3, #8
9001b5e0:	10da      	asrs	r2, r3, #3
9001b5e2:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001b5e6:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001b5ea:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001b5ee:	00db      	lsls	r3, r3, #3
9001b5f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001b5f4:	fb18 f805 	smulbb	r8, r8, r5
9001b5f8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001b5fc:	fb1e fe05 	smulbb	lr, lr, r5
9001b600:	b2db      	uxtb	r3, r3
9001b602:	fb01 810c 	mla	r1, r1, ip, r8
9001b606:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001b60a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001b60e:	fb18 f805 	smulbb	r8, r8, r5
9001b612:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001b616:	b289      	uxth	r1, r1
9001b618:	fb02 820c 	mla	r2, r2, ip, r8
9001b61c:	fb03 e30c 	mla	r3, r3, ip, lr
9001b620:	f101 0801 	add.w	r8, r1, #1
9001b624:	b292      	uxth	r2, r2
9001b626:	b29b      	uxth	r3, r3
9001b628:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001b62c:	f102 0801 	add.w	r8, r2, #1
9001b630:	f103 0e01 	add.w	lr, r3, #1
9001b634:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001b638:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001b63c:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001b640:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001b644:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001b648:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001b64c:	ea4e 0101 	orr.w	r1, lr, r1
9001b650:	ea41 0108 	orr.w	r1, r1, r8
9001b654:	f820 1b02 	strh.w	r1, [r0], #2
9001b658:	e7b6      	b.n	9001b5c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001b65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001b65c:	881b      	ldrh	r3, [r3, #0]
9001b65e:	1b9b      	subs	r3, r3, r6
9001b660:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b664:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001b668:	1b9b      	subs	r3, r3, r6
9001b66a:	441c      	add	r4, r3
9001b66c:	e7a6      	b.n	9001b5bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001b66e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001b672:	2203      	movs	r2, #3
9001b674:	2504      	movs	r5, #4
9001b676:	4919      	ldr	r1, [pc, #100]	; (9001b6dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001b678:	4550      	cmp	r0, sl
9001b67a:	d228      	bcs.n	9001b6ce <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001b67c:	eb00 0c09 	add.w	ip, r0, r9
9001b680:	4560      	cmp	r0, ip
9001b682:	4623      	mov	r3, r4
9001b684:	d219      	bcs.n	9001b6ba <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001b686:	f893 e000 	ldrb.w	lr, [r3]
9001b68a:	3401      	adds	r4, #1
9001b68c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001b690:	eb07 0b0e 	add.w	fp, r7, lr
9001b694:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001b698:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001b69c:	f89b b001 	ldrb.w	fp, [fp, #1]
9001b6a0:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001b6a4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001b6a8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001b6ac:	ea43 030b 	orr.w	r3, r3, fp
9001b6b0:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001b6b4:	f820 3b02 	strh.w	r3, [r0], #2
9001b6b8:	e7e2      	b.n	9001b680 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001b6ba:	f8b8 3000 	ldrh.w	r3, [r8]
9001b6be:	1b9b      	subs	r3, r3, r6
9001b6c0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b6c4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001b6c8:	1b9b      	subs	r3, r3, r6
9001b6ca:	441c      	add	r4, r3
9001b6cc:	e7d4      	b.n	9001b678 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001b6ce:	4b04      	ldr	r3, [pc, #16]	; (9001b6e0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001b6d0:	6818      	ldr	r0, [r3, #0]
9001b6d2:	6803      	ldr	r3, [r0, #0]
9001b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b6d6:	4798      	blx	r3
9001b6d8:	e750      	b.n	9001b57c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001b6da:	bf00      	nop
9001b6dc:	fffff800 	.word	0xfffff800
9001b6e0:	2402645c 	.word	0x2402645c
9001b6e4:	24026456 	.word	0x24026456

9001b6e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001b6e8:	b430      	push	{r4, r5}
9001b6ea:	780d      	ldrb	r5, [r1, #0]
9001b6ec:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001b6f0:	2d01      	cmp	r5, #1
9001b6f2:	d00a      	beq.n	9001b70a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001b6f4:	d305      	bcc.n	9001b702 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001b6f6:	2d02      	cmp	r5, #2
9001b6f8:	d10b      	bne.n	9001b712 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001b6fa:	9402      	str	r4, [sp, #8]
9001b6fc:	bc30      	pop	{r4, r5}
9001b6fe:	f7ff be15 	b.w	9001b32c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001b702:	9402      	str	r4, [sp, #8]
9001b704:	bc30      	pop	{r4, r5}
9001b706:	f7ff bd2b 	b.w	9001b160 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001b70a:	9402      	str	r4, [sp, #8]
9001b70c:	bc30      	pop	{r4, r5}
9001b70e:	f7ff bed9 	b.w	9001b4c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001b712:	bc30      	pop	{r4, r5}
9001b714:	4770      	bx	lr
	...

9001b718 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b71c:	b087      	sub	sp, #28
9001b71e:	4604      	mov	r4, r0
9001b720:	460e      	mov	r6, r1
9001b722:	6810      	ldr	r0, [r2, #0]
9001b724:	6851      	ldr	r1, [r2, #4]
9001b726:	ad02      	add	r5, sp, #8
9001b728:	4617      	mov	r7, r2
9001b72a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001b72e:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001b960 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001b732:	c503      	stmia	r5!, {r0, r1}
9001b734:	6818      	ldr	r0, [r3, #0]
9001b736:	ad04      	add	r5, sp, #16
9001b738:	6859      	ldr	r1, [r3, #4]
9001b73a:	c503      	stmia	r5!, {r0, r1}
9001b73c:	a802      	add	r0, sp, #8
9001b73e:	f7f8 ff91 	bl	90014664 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001b742:	4639      	mov	r1, r7
9001b744:	a804      	add	r0, sp, #16
9001b746:	f7f8 ffd1 	bl	900146ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001b74a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001b74e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b752:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001b756:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001b75a:	fb11 2103 	smlabb	r1, r1, r3, r2
9001b75e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001b762:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001b766:	440e      	add	r6, r1
9001b768:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001b76c:	440a      	add	r2, r1
9001b76e:	f8ad 2010 	strh.w	r2, [sp, #16]
9001b772:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001b776:	4413      	add	r3, r2
9001b778:	f8ad 3012 	strh.w	r3, [sp, #18]
9001b77c:	4b77      	ldr	r3, [pc, #476]	; (9001b95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001b77e:	6818      	ldr	r0, [r3, #0]
9001b780:	6803      	ldr	r3, [r0, #0]
9001b782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001b784:	4798      	blx	r3
9001b786:	f8b9 b000 	ldrh.w	fp, [r9]
9001b78a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001b78e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001b792:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001b796:	fb05 f50b 	mul.w	r5, r5, fp
9001b79a:	fb0b 2303 	mla	r3, fp, r3, r2
9001b79e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b7a2:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001b7a6:	9300      	str	r3, [sp, #0]
9001b7a8:	d069      	beq.n	9001b87e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001b7aa:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001b7ae:	4558      	cmp	r0, fp
9001b7b0:	f080 80cc 	bcs.w	9001b94c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001b7b4:	9b00      	ldr	r3, [sp, #0]
9001b7b6:	4631      	mov	r1, r6
9001b7b8:	18c3      	adds	r3, r0, r3
9001b7ba:	9301      	str	r3, [sp, #4]
9001b7bc:	9b01      	ldr	r3, [sp, #4]
9001b7be:	4298      	cmp	r0, r3
9001b7c0:	d24f      	bcs.n	9001b862 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001b7c2:	f811 2b01 	ldrb.w	r2, [r1], #1
9001b7c6:	2a00      	cmp	r2, #0
9001b7c8:	d048      	beq.n	9001b85c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001b7ca:	fb0a f202 	mul.w	r2, sl, r2
9001b7ce:	1c53      	adds	r3, r2, #1
9001b7d0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001b7d4:	121b      	asrs	r3, r3, #8
9001b7d6:	d041      	beq.n	9001b85c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001b7d8:	8802      	ldrh	r2, [r0, #0]
9001b7da:	b29e      	uxth	r6, r3
9001b7dc:	f8b4 c000 	ldrh.w	ip, [r4]
9001b7e0:	43db      	mvns	r3, r3
9001b7e2:	1215      	asrs	r5, r2, #8
9001b7e4:	b2db      	uxtb	r3, r3
9001b7e6:	ea4f 272c 	mov.w	r7, ip, asr #8
9001b7ea:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001b7ee:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001b7f2:	fb15 f503 	smulbb	r5, r5, r3
9001b7f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b7fa:	00d2      	lsls	r2, r2, #3
9001b7fc:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001b800:	fb07 5706 	mla	r7, r7, r6, r5
9001b804:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001b808:	b2d2      	uxtb	r2, r2
9001b80a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001b80e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001b812:	fb1e fe03 	smulbb	lr, lr, r3
9001b816:	b2bf      	uxth	r7, r7
9001b818:	fb12 f203 	smulbb	r2, r2, r3
9001b81c:	fa5f fc8c 	uxtb.w	ip, ip
9001b820:	fb05 e506 	mla	r5, r5, r6, lr
9001b824:	f107 0e01 	add.w	lr, r7, #1
9001b828:	fb0c 2c06 	mla	ip, ip, r6, r2
9001b82c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001b830:	fa1f fc8c 	uxth.w	ip, ip
9001b834:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001b838:	b2ad      	uxth	r5, r5
9001b83a:	f10c 0701 	add.w	r7, ip, #1
9001b83e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001b842:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001b846:	ea47 070e 	orr.w	r7, r7, lr
9001b84a:	f105 0e01 	add.w	lr, r5, #1
9001b84e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001b852:	096d      	lsrs	r5, r5, #5
9001b854:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001b858:	432f      	orrs	r7, r5
9001b85a:	8007      	strh	r7, [r0, #0]
9001b85c:	3002      	adds	r0, #2
9001b85e:	3402      	adds	r4, #2
9001b860:	e7ac      	b.n	9001b7bc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001b862:	f8b9 3000 	ldrh.w	r3, [r9]
9001b866:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001b86a:	eba3 0308 	sub.w	r3, r3, r8
9001b86e:	eba6 0608 	sub.w	r6, r6, r8
9001b872:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b876:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001b87a:	440e      	add	r6, r1
9001b87c:	e797      	b.n	9001b7ae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001b87e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001b882:	42a8      	cmp	r0, r5
9001b884:	d262      	bcs.n	9001b94c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001b886:	9b00      	ldr	r3, [sp, #0]
9001b888:	4631      	mov	r1, r6
9001b88a:	eb00 0b03 	add.w	fp, r0, r3
9001b88e:	4558      	cmp	r0, fp
9001b890:	d24e      	bcs.n	9001b930 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001b892:	f811 3b01 	ldrb.w	r3, [r1], #1
9001b896:	b12b      	cbz	r3, 9001b8a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001b898:	2bff      	cmp	r3, #255	; 0xff
9001b89a:	f8b4 e000 	ldrh.w	lr, [r4]
9001b89e:	d104      	bne.n	9001b8aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001b8a0:	f8a0 e000 	strh.w	lr, [r0]
9001b8a4:	3002      	adds	r0, #2
9001b8a6:	3402      	adds	r4, #2
9001b8a8:	e7f1      	b.n	9001b88e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001b8aa:	8802      	ldrh	r2, [r0, #0]
9001b8ac:	b29f      	uxth	r7, r3
9001b8ae:	43db      	mvns	r3, r3
9001b8b0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001b8b4:	1216      	asrs	r6, r2, #8
9001b8b6:	b2db      	uxtb	r3, r3
9001b8b8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b8bc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001b8c0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001b8c4:	00d2      	lsls	r2, r2, #3
9001b8c6:	fb16 f603 	smulbb	r6, r6, r3
9001b8ca:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001b8ce:	b2d2      	uxtb	r2, r2
9001b8d0:	fb0c 6c07 	mla	ip, ip, r7, r6
9001b8d4:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001b8d8:	fb1a fa03 	smulbb	sl, sl, r3
9001b8dc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001b8e0:	fa1f fc8c 	uxth.w	ip, ip
9001b8e4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001b8e8:	fb12 f303 	smulbb	r3, r2, r3
9001b8ec:	fa5f fe8e 	uxtb.w	lr, lr
9001b8f0:	fb06 a607 	mla	r6, r6, r7, sl
9001b8f4:	f10c 0201 	add.w	r2, ip, #1
9001b8f8:	fb0e 3307 	mla	r3, lr, r7, r3
9001b8fc:	b2b6      	uxth	r6, r6
9001b8fe:	b29b      	uxth	r3, r3
9001b900:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001b904:	f106 0a01 	add.w	sl, r6, #1
9001b908:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001b90c:	f103 0c01 	add.w	ip, r3, #1
9001b910:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001b914:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001b918:	0976      	lsrs	r6, r6, #5
9001b91a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001b91e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001b922:	ea4c 0c02 	orr.w	ip, ip, r2
9001b926:	ea4c 0c06 	orr.w	ip, ip, r6
9001b92a:	f8a0 c000 	strh.w	ip, [r0]
9001b92e:	e7b9      	b.n	9001b8a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001b930:	f8b9 3000 	ldrh.w	r3, [r9]
9001b934:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001b938:	eba3 0308 	sub.w	r3, r3, r8
9001b93c:	eba6 0608 	sub.w	r6, r6, r8
9001b940:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001b944:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001b948:	440e      	add	r6, r1
9001b94a:	e79a      	b.n	9001b882 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001b94c:	4b03      	ldr	r3, [pc, #12]	; (9001b95c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001b94e:	6818      	ldr	r0, [r3, #0]
9001b950:	6803      	ldr	r3, [r0, #0]
9001b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b954:	4798      	blx	r3
9001b956:	b007      	add	sp, #28
9001b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b95c:	2402645c 	.word	0x2402645c
9001b960:	24026456 	.word	0x24026456

9001b964 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b968:	b089      	sub	sp, #36	; 0x24
9001b96a:	4682      	mov	sl, r0
9001b96c:	460f      	mov	r7, r1
9001b96e:	4691      	mov	r9, r2
9001b970:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001b974:	4698      	mov	r8, r3
9001b976:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001b978:	2e00      	cmp	r6, #0
9001b97a:	d036      	beq.n	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b97c:	4608      	mov	r0, r1
9001b97e:	f7fc f863 	bl	90017a48 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001b982:	4605      	mov	r5, r0
9001b984:	4638      	mov	r0, r7
9001b986:	f7fc f893 	bl	90017ab0 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001b98a:	f8ad 000e 	strh.w	r0, [sp, #14]
9001b98e:	4638      	mov	r0, r7
9001b990:	f8ad 9008 	strh.w	r9, [sp, #8]
9001b994:	f8ad 500c 	strh.w	r5, [sp, #12]
9001b998:	f8ad 800a 	strh.w	r8, [sp, #10]
9001b99c:	f7fc f940 	bl	90017c20 <_ZNK8touchgfx6Bitmap7getDataEv>
9001b9a0:	4605      	mov	r5, r0
9001b9a2:	4638      	mov	r0, r7
9001b9a4:	f7fc f96c 	bl	90017c80 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001b9a8:	4681      	mov	r9, r0
9001b9aa:	4638      	mov	r0, r7
9001b9ac:	f7fc f9bc 	bl	90017d28 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001b9b0:	280b      	cmp	r0, #11
9001b9b2:	d81a      	bhi.n	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001b9b4:	e8df f000 	tbb	[pc, r0]
9001b9b8:	1906aebd 	.word	0x1906aebd
9001b9bc:	19191919 	.word	0x19191919
9001b9c0:	b5191919 	.word	0xb5191919
9001b9c4:	4bb0      	ldr	r3, [pc, #704]	; (9001bc88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001b9c6:	6818      	ldr	r0, [r3, #0]
9001b9c8:	6803      	ldr	r3, [r0, #0]
9001b9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001b9cc:	4798      	blx	r3
9001b9ce:	2eff      	cmp	r6, #255	; 0xff
9001b9d0:	d121      	bne.n	9001ba16 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001b9d2:	0683      	lsls	r3, r0, #26
9001b9d4:	d41f      	bmi.n	9001ba16 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001b9d6:	4638      	mov	r0, r7
9001b9d8:	f7fc f8ea 	bl	90017bb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001b9dc:	b940      	cbnz	r0, 9001b9f0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001b9de:	4623      	mov	r3, r4
9001b9e0:	aa02      	add	r2, sp, #8
9001b9e2:	4629      	mov	r1, r5
9001b9e4:	4650      	mov	r0, sl
9001b9e6:	f7ff fa2f 	bl	9001ae48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001b9ea:	b009      	add	sp, #36	; 0x24
9001b9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001b9f0:	f10d 0818 	add.w	r8, sp, #24
9001b9f4:	4639      	mov	r1, r7
9001b9f6:	af04      	add	r7, sp, #16
9001b9f8:	4640      	mov	r0, r8
9001b9fa:	f7fc f88d 	bl	90017b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001b9fe:	e898 0003 	ldmia.w	r8, {r0, r1}
9001ba02:	e887 0003 	stmia.w	r7, {r0, r1}
9001ba06:	4638      	mov	r0, r7
9001ba08:	4621      	mov	r1, r4
9001ba0a:	f7f4 ff73 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
9001ba0e:	4638      	mov	r0, r7
9001ba10:	f7f4 ffb3 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
9001ba14:	b130      	cbz	r0, 9001ba24 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001ba16:	4633      	mov	r3, r6
9001ba18:	4622      	mov	r2, r4
9001ba1a:	a902      	add	r1, sp, #8
9001ba1c:	4628      	mov	r0, r5
9001ba1e:	f7ff f92d 	bl	9001ac7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001ba22:	e7e2      	b.n	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001ba24:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ba28:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001ba2c:	4293      	cmp	r3, r2
9001ba2e:	dd12      	ble.n	9001ba56 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001ba30:	1a9b      	subs	r3, r3, r2
9001ba32:	f9b4 0000 	ldrsh.w	r0, [r4]
9001ba36:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001ba3a:	f8ad 0018 	strh.w	r0, [sp, #24]
9001ba3e:	4628      	mov	r0, r5
9001ba40:	f8ad 201a 	strh.w	r2, [sp, #26]
9001ba44:	4642      	mov	r2, r8
9001ba46:	f8ad 101c 	strh.w	r1, [sp, #28]
9001ba4a:	a902      	add	r1, sp, #8
9001ba4c:	f8ad 301e 	strh.w	r3, [sp, #30]
9001ba50:	4633      	mov	r3, r6
9001ba52:	f7ff f913 	bl	9001ac7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001ba56:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001ba5a:	f9b4 2000 	ldrsh.w	r2, [r4]
9001ba5e:	4293      	cmp	r3, r2
9001ba60:	dd12      	ble.n	9001ba88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001ba62:	1a9b      	subs	r3, r3, r2
9001ba64:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001ba68:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001ba6c:	f8ad 2018 	strh.w	r2, [sp, #24]
9001ba70:	4642      	mov	r2, r8
9001ba72:	f8ad 001a 	strh.w	r0, [sp, #26]
9001ba76:	4628      	mov	r0, r5
9001ba78:	f8ad 301c 	strh.w	r3, [sp, #28]
9001ba7c:	23ff      	movs	r3, #255	; 0xff
9001ba7e:	f8ad 101e 	strh.w	r1, [sp, #30]
9001ba82:	a902      	add	r1, sp, #8
9001ba84:	f7ff f8fa 	bl	9001ac7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001ba88:	463b      	mov	r3, r7
9001ba8a:	aa02      	add	r2, sp, #8
9001ba8c:	4629      	mov	r1, r5
9001ba8e:	4650      	mov	r0, sl
9001ba90:	f7ff f9da 	bl	9001ae48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001ba94:	88a2      	ldrh	r2, [r4, #4]
9001ba96:	8823      	ldrh	r3, [r4, #0]
9001ba98:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001ba9c:	4413      	add	r3, r2
9001ba9e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001baa2:	440a      	add	r2, r1
9001baa4:	b29b      	uxth	r3, r3
9001baa6:	b292      	uxth	r2, r2
9001baa8:	b218      	sxth	r0, r3
9001baaa:	b211      	sxth	r1, r2
9001baac:	4288      	cmp	r0, r1
9001baae:	dd12      	ble.n	9001bad6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001bab0:	1a9b      	subs	r3, r3, r2
9001bab2:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001bab6:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001baba:	4642      	mov	r2, r8
9001babc:	f8ad 1018 	strh.w	r1, [sp, #24]
9001bac0:	a902      	add	r1, sp, #8
9001bac2:	f8ad 301c 	strh.w	r3, [sp, #28]
9001bac6:	23ff      	movs	r3, #255	; 0xff
9001bac8:	f8ad 001e 	strh.w	r0, [sp, #30]
9001bacc:	4628      	mov	r0, r5
9001bace:	f8ad 601a 	strh.w	r6, [sp, #26]
9001bad2:	f7ff f8d3 	bl	9001ac7c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001bad6:	88e2      	ldrh	r2, [r4, #6]
9001bad8:	8863      	ldrh	r3, [r4, #2]
9001bada:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001bade:	4413      	add	r3, r2
9001bae0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001bae4:	440a      	add	r2, r1
9001bae6:	b29b      	uxth	r3, r3
9001bae8:	b292      	uxth	r2, r2
9001baea:	b218      	sxth	r0, r3
9001baec:	b211      	sxth	r1, r2
9001baee:	4288      	cmp	r0, r1
9001baf0:	f77f af7b 	ble.w	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001baf4:	1a9b      	subs	r3, r3, r2
9001baf6:	f9b4 6000 	ldrsh.w	r6, [r4]
9001bafa:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001bafe:	4642      	mov	r2, r8
9001bb00:	f8ad 301e 	strh.w	r3, [sp, #30]
9001bb04:	23ff      	movs	r3, #255	; 0xff
9001bb06:	f8ad 6018 	strh.w	r6, [sp, #24]
9001bb0a:	f8ad 101a 	strh.w	r1, [sp, #26]
9001bb0e:	f8ad 001c 	strh.w	r0, [sp, #28]
9001bb12:	e782      	b.n	9001ba1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001bb14:	4633      	mov	r3, r6
9001bb16:	4622      	mov	r2, r4
9001bb18:	a902      	add	r1, sp, #8
9001bb1a:	4628      	mov	r0, r5
9001bb1c:	f7ff fa04 	bl	9001af28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001bb20:	e763      	b.n	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001bb22:	9600      	str	r6, [sp, #0]
9001bb24:	4623      	mov	r3, r4
9001bb26:	aa02      	add	r2, sp, #8
9001bb28:	4649      	mov	r1, r9
9001bb2a:	4628      	mov	r0, r5
9001bb2c:	f7ff fddc 	bl	9001b6e8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001bb30:	e75b      	b.n	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001bb32:	4638      	mov	r0, r7
9001bb34:	f7fc f83c 	bl	90017bb0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001bb38:	b950      	cbnz	r0, 9001bb50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001bb3a:	f8da 3000 	ldr.w	r3, [sl]
9001bb3e:	aa02      	add	r2, sp, #8
9001bb40:	4629      	mov	r1, r5
9001bb42:	e9cd 6000 	strd	r6, r0, [sp]
9001bb46:	4650      	mov	r0, sl
9001bb48:	68de      	ldr	r6, [r3, #12]
9001bb4a:	4623      	mov	r3, r4
9001bb4c:	47b0      	blx	r6
9001bb4e:	e74c      	b.n	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001bb50:	f10d 0818 	add.w	r8, sp, #24
9001bb54:	4639      	mov	r1, r7
9001bb56:	af04      	add	r7, sp, #16
9001bb58:	4640      	mov	r0, r8
9001bb5a:	f7fb ffdd 	bl	90017b18 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001bb5e:	e898 0003 	ldmia.w	r8, {r0, r1}
9001bb62:	e887 0003 	stmia.w	r7, {r0, r1}
9001bb66:	4638      	mov	r0, r7
9001bb68:	4621      	mov	r1, r4
9001bb6a:	f7f4 fec3 	bl	900108f4 <_ZN8touchgfx4RectaNERKS0_>
9001bb6e:	4638      	mov	r0, r7
9001bb70:	f7f4 ff03 	bl	9001097a <_ZNK8touchgfx4Rect7isEmptyEv>
9001bb74:	b138      	cbz	r0, 9001bb86 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001bb76:	4623      	mov	r3, r4
9001bb78:	9600      	str	r6, [sp, #0]
9001bb7a:	aa02      	add	r2, sp, #8
9001bb7c:	4649      	mov	r1, r9
9001bb7e:	4628      	mov	r0, r5
9001bb80:	f7ff fdca 	bl	9001b718 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001bb84:	e731      	b.n	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001bb86:	f8da 3000 	ldr.w	r3, [sl]
9001bb8a:	aa02      	add	r2, sp, #8
9001bb8c:	4629      	mov	r1, r5
9001bb8e:	e9cd 6000 	strd	r6, r0, [sp]
9001bb92:	4650      	mov	r0, sl
9001bb94:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001bb98:	463b      	mov	r3, r7
9001bb9a:	47d8      	blx	fp
9001bb9c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001bba0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001bba4:	4293      	cmp	r3, r2
9001bba6:	dd13      	ble.n	9001bbd0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001bba8:	f9b4 0000 	ldrsh.w	r0, [r4]
9001bbac:	1a9b      	subs	r3, r3, r2
9001bbae:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001bbb2:	f8ad 0018 	strh.w	r0, [sp, #24]
9001bbb6:	4628      	mov	r0, r5
9001bbb8:	f8ad 201a 	strh.w	r2, [sp, #26]
9001bbbc:	aa02      	add	r2, sp, #8
9001bbbe:	f8ad 101c 	strh.w	r1, [sp, #28]
9001bbc2:	4649      	mov	r1, r9
9001bbc4:	f8ad 301e 	strh.w	r3, [sp, #30]
9001bbc8:	4643      	mov	r3, r8
9001bbca:	9600      	str	r6, [sp, #0]
9001bbcc:	f7ff fda4 	bl	9001b718 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001bbd0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001bbd4:	f9b4 2000 	ldrsh.w	r2, [r4]
9001bbd8:	4293      	cmp	r3, r2
9001bbda:	dd13      	ble.n	9001bc04 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001bbdc:	1a9b      	subs	r3, r3, r2
9001bbde:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001bbe2:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001bbe6:	f8ad 2018 	strh.w	r2, [sp, #24]
9001bbea:	aa02      	add	r2, sp, #8
9001bbec:	f8ad 001a 	strh.w	r0, [sp, #26]
9001bbf0:	4628      	mov	r0, r5
9001bbf2:	f8ad 301c 	strh.w	r3, [sp, #28]
9001bbf6:	4643      	mov	r3, r8
9001bbf8:	f8ad 101e 	strh.w	r1, [sp, #30]
9001bbfc:	4649      	mov	r1, r9
9001bbfe:	9600      	str	r6, [sp, #0]
9001bc00:	f7ff fd8a 	bl	9001b718 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001bc04:	88a2      	ldrh	r2, [r4, #4]
9001bc06:	8823      	ldrh	r3, [r4, #0]
9001bc08:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001bc0c:	4413      	add	r3, r2
9001bc0e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001bc12:	440a      	add	r2, r1
9001bc14:	b29b      	uxth	r3, r3
9001bc16:	b292      	uxth	r2, r2
9001bc18:	b218      	sxth	r0, r3
9001bc1a:	b211      	sxth	r1, r2
9001bc1c:	4288      	cmp	r0, r1
9001bc1e:	dd13      	ble.n	9001bc48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001bc20:	1a9b      	subs	r3, r3, r2
9001bc22:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001bc26:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001bc2a:	aa02      	add	r2, sp, #8
9001bc2c:	f8ad 1018 	strh.w	r1, [sp, #24]
9001bc30:	4649      	mov	r1, r9
9001bc32:	f8ad 301c 	strh.w	r3, [sp, #28]
9001bc36:	4643      	mov	r3, r8
9001bc38:	f8ad 001e 	strh.w	r0, [sp, #30]
9001bc3c:	4628      	mov	r0, r5
9001bc3e:	9600      	str	r6, [sp, #0]
9001bc40:	f8ad 701a 	strh.w	r7, [sp, #26]
9001bc44:	f7ff fd68 	bl	9001b718 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001bc48:	88e2      	ldrh	r2, [r4, #6]
9001bc4a:	8863      	ldrh	r3, [r4, #2]
9001bc4c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001bc50:	4413      	add	r3, r2
9001bc52:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001bc56:	440a      	add	r2, r1
9001bc58:	b29b      	uxth	r3, r3
9001bc5a:	b292      	uxth	r2, r2
9001bc5c:	b218      	sxth	r0, r3
9001bc5e:	b211      	sxth	r1, r2
9001bc60:	4288      	cmp	r0, r1
9001bc62:	f77f aec2 	ble.w	9001b9ea <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001bc66:	f9b4 7000 	ldrsh.w	r7, [r4]
9001bc6a:	1a9b      	subs	r3, r3, r2
9001bc6c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001bc70:	f8ad 301e 	strh.w	r3, [sp, #30]
9001bc74:	4643      	mov	r3, r8
9001bc76:	f8ad 7018 	strh.w	r7, [sp, #24]
9001bc7a:	f8ad 101a 	strh.w	r1, [sp, #26]
9001bc7e:	f8ad 001c 	strh.w	r0, [sp, #28]
9001bc82:	9600      	str	r6, [sp, #0]
9001bc84:	e779      	b.n	9001bb7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001bc86:	bf00      	nop
9001bc88:	2402645c 	.word	0x2402645c

9001bc8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001bc8c:	b180      	cbz	r0, 9001bcb0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001bc8e:	2903      	cmp	r1, #3
9001bc90:	d81c      	bhi.n	9001bccc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001bc92:	e8df f001 	tbb	[pc, r1]
9001bc96:	1d02      	.short	0x1d02
9001bc98:	1f08      	.short	0x1f08
9001bc9a:	4b10      	ldr	r3, [pc, #64]	; (9001bcdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001bc9c:	8818      	ldrh	r0, [r3, #0]
9001bc9e:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001bca2:	4240      	negs	r0, r0
9001bca4:	4770      	bx	lr
9001bca6:	4b0d      	ldr	r3, [pc, #52]	; (9001bcdc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001bca8:	8818      	ldrh	r0, [r3, #0]
9001bcaa:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001bcae:	4770      	bx	lr
9001bcb0:	2903      	cmp	r1, #3
9001bcb2:	d80b      	bhi.n	9001bccc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001bcb4:	a301      	add	r3, pc, #4	; (adr r3, 9001bcbc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001bcb6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001bcba:	bf00      	nop
9001bcbc:	9001bcd1 	.word	0x9001bcd1
9001bcc0:	9001bca7 	.word	0x9001bca7
9001bcc4:	9001bcd5 	.word	0x9001bcd5
9001bcc8:	9001bc9b 	.word	0x9001bc9b
9001bccc:	2000      	movs	r0, #0
9001bcce:	4770      	bx	lr
9001bcd0:	2001      	movs	r0, #1
9001bcd2:	4770      	bx	lr
9001bcd4:	f04f 30ff 	mov.w	r0, #4294967295
9001bcd8:	4770      	bx	lr
9001bcda:	bf00      	nop
9001bcdc:	24026456 	.word	0x24026456

9001bce0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001bce0:	b180      	cbz	r0, 9001bd04 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001bce2:	2903      	cmp	r1, #3
9001bce4:	d81c      	bhi.n	9001bd20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001bce6:	e8df f001 	tbb	[pc, r1]
9001bcea:	021d      	.short	0x021d
9001bcec:	071f      	.short	0x071f
9001bcee:	4b10      	ldr	r3, [pc, #64]	; (9001bd30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001bcf0:	8818      	ldrh	r0, [r3, #0]
9001bcf2:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001bcf6:	4770      	bx	lr
9001bcf8:	4b0d      	ldr	r3, [pc, #52]	; (9001bd30 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001bcfa:	8818      	ldrh	r0, [r3, #0]
9001bcfc:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001bd00:	4240      	negs	r0, r0
9001bd02:	4770      	bx	lr
9001bd04:	2903      	cmp	r1, #3
9001bd06:	d80b      	bhi.n	9001bd20 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001bd08:	a301      	add	r3, pc, #4	; (adr r3, 9001bd10 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001bd0a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001bd0e:	bf00      	nop
9001bd10:	9001bcef 	.word	0x9001bcef
9001bd14:	9001bd29 	.word	0x9001bd29
9001bd18:	9001bcf9 	.word	0x9001bcf9
9001bd1c:	9001bd25 	.word	0x9001bd25
9001bd20:	2000      	movs	r0, #0
9001bd22:	4770      	bx	lr
9001bd24:	2001      	movs	r0, #1
9001bd26:	4770      	bx	lr
9001bd28:	f04f 30ff 	mov.w	r0, #4294967295
9001bd2c:	4770      	bx	lr
9001bd2e:	bf00      	nop
9001bd30:	24026456 	.word	0x24026456

9001bd34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bd38:	b099      	sub	sp, #100	; 0x64
9001bd3a:	910b      	str	r1, [sp, #44]	; 0x2c
9001bd3c:	a914      	add	r1, sp, #80	; 0x50
9001bd3e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001bd42:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001bd46:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001bd4a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001bd4e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001bd52:	e881 000c 	stmia.w	r1, {r2, r3}
9001bd56:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001bd5a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001bd5e:	9309      	str	r3, [sp, #36]	; 0x24
9001bd60:	f891 900d 	ldrb.w	r9, [r1, #13]
9001bd64:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001bd68:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001bd6c:	9310      	str	r3, [sp, #64]	; 0x40
9001bd6e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001bd72:	930c      	str	r3, [sp, #48]	; 0x30
9001bd74:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001bd78:	798f      	ldrb	r7, [r1, #6]
9001bd7a:	431f      	orrs	r7, r3
9001bd7c:	f000 8195 	beq.w	9001c0aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001bd80:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001bd84:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001bd88:	f891 9007 	ldrb.w	r9, [r1, #7]
9001bd8c:	ea59 0903 	orrs.w	r9, r9, r3
9001bd90:	f000 818b 	beq.w	9001c0aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001bd94:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001bd98:	b29b      	uxth	r3, r3
9001bd9a:	2d00      	cmp	r5, #0
9001bd9c:	f000 812e 	beq.w	9001bffc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001bda0:	1aed      	subs	r5, r5, r3
9001bda2:	b2ad      	uxth	r5, r5
9001bda4:	042b      	lsls	r3, r5, #16
9001bda6:	d502      	bpl.n	9001bdae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001bda8:	1b64      	subs	r4, r4, r5
9001bdaa:	2500      	movs	r5, #0
9001bdac:	b224      	sxth	r4, r4
9001bdae:	f9b2 1000 	ldrsh.w	r1, [r2]
9001bdb2:	a814      	add	r0, sp, #80	; 0x50
9001bdb4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001bdb8:	428c      	cmp	r4, r1
9001bdba:	b28b      	uxth	r3, r1
9001bdbc:	bfbf      	itttt	lt
9001bdbe:	18ed      	addlt	r5, r5, r3
9001bdc0:	1b2c      	sublt	r4, r5, r4
9001bdc2:	b2a5      	uxthlt	r5, r4
9001bdc4:	460c      	movlt	r4, r1
9001bdc6:	8891      	ldrh	r1, [r2, #4]
9001bdc8:	440b      	add	r3, r1
9001bdca:	4621      	mov	r1, r4
9001bdcc:	b21b      	sxth	r3, r3
9001bdce:	930f      	str	r3, [sp, #60]	; 0x3c
9001bdd0:	88d3      	ldrh	r3, [r2, #6]
9001bdd2:	8852      	ldrh	r2, [r2, #2]
9001bdd4:	4413      	add	r3, r2
9001bdd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001bdd8:	b21b      	sxth	r3, r3
9001bdda:	930d      	str	r3, [sp, #52]	; 0x34
9001bddc:	4bbd      	ldr	r3, [pc, #756]	; (9001c0d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001bdde:	f893 b000 	ldrb.w	fp, [r3]
9001bde2:	f10b 3cff 	add.w	ip, fp, #4294967295
9001bde6:	f1dc 0300 	rsbs	r3, ip, #0
9001bdea:	eb43 030c 	adc.w	r3, r3, ip
9001bdee:	930e      	str	r3, [sp, #56]	; 0x38
9001bdf0:	4653      	mov	r3, sl
9001bdf2:	f7f8 fab1 	bl	90014358 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001bdf6:	4621      	mov	r1, r4
9001bdf8:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001bdfc:	4653      	mov	r3, sl
9001bdfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001be00:	a814      	add	r0, sp, #80	; 0x50
9001be02:	f7f8 fac6 	bl	90014392 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001be06:	a918      	add	r1, sp, #96	; 0x60
9001be08:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001be0c:	a817      	add	r0, sp, #92	; 0x5c
9001be0e:	f7f8 fbe7 	bl	900145e0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001be12:	f1ba 0f00 	cmp.w	sl, #0
9001be16:	f040 80f4 	bne.w	9001c002 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001be1a:	f1bb 0f01 	cmp.w	fp, #1
9001be1e:	f040 80f8 	bne.w	9001c012 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001be22:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001be24:	2b00      	cmp	r3, #0
9001be26:	f040 8145 	bne.w	9001c0b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001be2a:	b2ba      	uxth	r2, r7
9001be2c:	b905      	cbnz	r5, 9001be30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001be2e:	b16e      	cbz	r6, 9001be4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001be30:	fb06 5302 	mla	r3, r6, r2, r5
9001be34:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001be36:	4631      	mov	r1, r6
9001be38:	fb08 f303 	mul.w	r3, r8, r3
9001be3c:	f003 0607 	and.w	r6, r3, #7
9001be40:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001be44:	9328      	str	r3, [sp, #160]	; 0xa0
9001be46:	eba9 0301 	sub.w	r3, r9, r1
9001be4a:	930a      	str	r3, [sp, #40]	; 0x28
9001be4c:	4651      	mov	r1, sl
9001be4e:	980e      	ldr	r0, [sp, #56]	; 0x38
9001be50:	f7ff ff1c 	bl	9001bc8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001be54:	4681      	mov	r9, r0
9001be56:	980e      	ldr	r0, [sp, #56]	; 0x38
9001be58:	f7ff ff42 	bl	9001bce0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001be5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001be5e:	9909      	ldr	r1, [sp, #36]	; 0x24
9001be60:	4683      	mov	fp, r0
9001be62:	eba3 0a01 	sub.w	sl, r3, r1
9001be66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001be68:	459a      	cmp	sl, r3
9001be6a:	bfa8      	it	ge
9001be6c:	469a      	movge	sl, r3
9001be6e:	f1ba 0f00 	cmp.w	sl, #0
9001be72:	f340 811a 	ble.w	9001c0aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001be76:	1b64      	subs	r4, r4, r5
9001be78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001be7a:	1b1c      	subs	r4, r3, r4
9001be7c:	42bc      	cmp	r4, r7
9001be7e:	bfd4      	ite	le
9001be80:	ebc5 0504 	rsble	r5, r5, r4
9001be84:	ebc5 0507 	rsbgt	r5, r5, r7
9001be88:	2d00      	cmp	r5, #0
9001be8a:	f340 810e 	ble.w	9001c0aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001be8e:	1b52      	subs	r2, r2, r5
9001be90:	fb08 f302 	mul.w	r3, r8, r2
9001be94:	930f      	str	r3, [sp, #60]	; 0x3c
9001be96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001be98:	2b00      	cmp	r3, #0
9001be9a:	f040 8116 	bne.w	9001c0ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001be9e:	4b8e      	ldr	r3, [pc, #568]	; (9001c0d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001bea0:	6818      	ldr	r0, [r3, #0]
9001bea2:	6803      	ldr	r3, [r0, #0]
9001bea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001bea6:	4798      	blx	r3
9001bea8:	2301      	movs	r3, #1
9001beaa:	4a8c      	ldr	r2, [pc, #560]	; (9001c0dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001beac:	fa03 f308 	lsl.w	r3, r3, r8
9001beb0:	8811      	ldrh	r1, [r2, #0]
9001beb2:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001beb6:	3b01      	subs	r3, #1
9001beb8:	b2db      	uxtb	r3, r3
9001beba:	930e      	str	r3, [sp, #56]	; 0x38
9001bebc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001bec0:	fb01 2303 	mla	r3, r1, r3, r2
9001bec4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001bec8:	930a      	str	r3, [sp, #40]	; 0x28
9001beca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001becc:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001bed0:	9313      	str	r3, [sp, #76]	; 0x4c
9001bed2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001bed4:	0a19      	lsrs	r1, r3, #8
9001bed6:	b2cb      	uxtb	r3, r1
9001bed8:	9312      	str	r3, [sp, #72]	; 0x48
9001beda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001bedc:	b2db      	uxtb	r3, r3
9001bede:	9311      	str	r3, [sp, #68]	; 0x44
9001bee0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001bee2:	095a      	lsrs	r2, r3, #5
9001bee4:	4b7e      	ldr	r3, [pc, #504]	; (9001c0e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001bee6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001beea:	400b      	ands	r3, r1
9001beec:	4313      	orrs	r3, r2
9001beee:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001bef0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001bef4:	4313      	orrs	r3, r2
9001bef6:	b29b      	uxth	r3, r3
9001bef8:	9310      	str	r3, [sp, #64]	; 0x40
9001befa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001befc:	781a      	ldrb	r2, [r3, #0]
9001befe:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001bf02:	fb05 b919 	mls	r9, r5, r9, fp
9001bf06:	4132      	asrs	r2, r6
9001bf08:	fb03 fb05 	mul.w	fp, r3, r5
9001bf0c:	930d      	str	r3, [sp, #52]	; 0x34
9001bf0e:	b2d2      	uxtb	r2, r2
9001bf10:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001bf14:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001bf18:	f0c0 80f5 	bcc.w	9001c106 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001bf1c:	46ae      	mov	lr, r5
9001bf1e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001bf22:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001bf26:	f0c0 80dd 	bcc.w	9001c0e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001bf2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bf2c:	4013      	ands	r3, r2
9001bf2e:	d055      	beq.n	9001bfdc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001bf30:	20ff      	movs	r0, #255	; 0xff
9001bf32:	990e      	ldr	r1, [sp, #56]	; 0x38
9001bf34:	fb90 f1f1 	sdiv	r1, r0, r1
9001bf38:	434b      	muls	r3, r1
9001bf3a:	2bfe      	cmp	r3, #254	; 0xfe
9001bf3c:	dd03      	ble.n	9001bf46 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001bf3e:	990c      	ldr	r1, [sp, #48]	; 0x30
9001bf40:	4281      	cmp	r1, r0
9001bf42:	f000 80c4 	beq.w	9001c0ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001bf46:	990c      	ldr	r1, [sp, #48]	; 0x30
9001bf48:	f8bc 4000 	ldrh.w	r4, [ip]
9001bf4c:	fb11 f303 	smulbb	r3, r1, r3
9001bf50:	1220      	asrs	r0, r4, #8
9001bf52:	b29b      	uxth	r3, r3
9001bf54:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001bf58:	1c59      	adds	r1, r3, #1
9001bf5a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001bf5e:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001bf62:	10e1      	asrs	r1, r4, #3
9001bf64:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001bf68:	00e4      	lsls	r4, r4, #3
9001bf6a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001bf6e:	b29f      	uxth	r7, r3
9001bf70:	43db      	mvns	r3, r3
9001bf72:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001bf76:	b2db      	uxtb	r3, r3
9001bf78:	b2e4      	uxtb	r4, r4
9001bf7a:	9309      	str	r3, [sp, #36]	; 0x24
9001bf7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001bf7e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001bf82:	fb13 f907 	smulbb	r9, r3, r7
9001bf86:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001bf88:	fb00 9003 	mla	r0, r0, r3, r9
9001bf8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001bf8e:	fb13 f907 	smulbb	r9, r3, r7
9001bf92:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001bf94:	b280      	uxth	r0, r0
9001bf96:	fb01 9103 	mla	r1, r1, r3, r9
9001bf9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001bf9c:	fb13 f707 	smulbb	r7, r3, r7
9001bfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001bfa2:	b289      	uxth	r1, r1
9001bfa4:	fb04 7403 	mla	r4, r4, r3, r7
9001bfa8:	1c43      	adds	r3, r0, #1
9001bfaa:	b2a4      	uxth	r4, r4
9001bfac:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001bfb0:	f104 0901 	add.w	r9, r4, #1
9001bfb4:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001bfb8:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001bfbc:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001bfc0:	ea49 0000 	orr.w	r0, r9, r0
9001bfc4:	f101 0901 	add.w	r9, r1, #1
9001bfc8:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001bfcc:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001bfd0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001bfd4:	ea40 0009 	orr.w	r0, r0, r9
9001bfd8:	f8ac 0000 	strh.w	r0, [ip]
9001bfdc:	4446      	add	r6, r8
9001bfde:	b2b6      	uxth	r6, r6
9001bfe0:	2e07      	cmp	r6, #7
9001bfe2:	bf89      	itett	hi
9001bfe4:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001bfe6:	fa42 f208 	asrls.w	r2, r2, r8
9001bfea:	2600      	movhi	r6, #0
9001bfec:	785a      	ldrbhi	r2, [r3, #1]
9001bfee:	bf8a      	itet	hi
9001bff0:	3301      	addhi	r3, #1
9001bff2:	b2d2      	uxtbls	r2, r2
9001bff4:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001bff6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001bff8:	449c      	add	ip, r3
9001bffa:	e792      	b.n	9001bf22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001bffc:	441c      	add	r4, r3
9001bffe:	b224      	sxth	r4, r4
9001c000:	e6d5      	b.n	9001bdae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001c002:	f1ba 0f01 	cmp.w	sl, #1
9001c006:	f47f af0c 	bne.w	9001be22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001c00a:	f1bb 0f01 	cmp.w	fp, #1
9001c00e:	f47f af08 	bne.w	9001be22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001c012:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001c0d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001c016:	f8db 0000 	ldr.w	r0, [fp]
9001c01a:	6803      	ldr	r3, [r0, #0]
9001c01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001c01e:	4798      	blx	r3
9001c020:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001c024:	465a      	mov	r2, fp
9001c026:	d006      	beq.n	9001c036 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001c028:	f1b8 0f04 	cmp.w	r8, #4
9001c02c:	d140      	bne.n	9001c0b0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001c02e:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c030:	3300      	adds	r3, #0
9001c032:	bf18      	it	ne
9001c034:	2301      	movne	r3, #1
9001c036:	0580      	lsls	r0, r0, #22
9001c038:	d56e      	bpl.n	9001c118 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001c03a:	f1b8 0f08 	cmp.w	r8, #8
9001c03e:	d16b      	bne.n	9001c118 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001c040:	2b00      	cmp	r3, #0
9001c042:	bf0c      	ite	eq
9001c044:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001c048:	f44f 7180 	movne.w	r1, #256	; 0x100
9001c04c:	2d00      	cmp	r5, #0
9001c04e:	f47f aee8 	bne.w	9001be22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001c052:	2e00      	cmp	r6, #0
9001c054:	f47f aee5 	bne.w	9001be22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001c058:	19e3      	adds	r3, r4, r7
9001c05a:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001c05c:	4283      	cmp	r3, r0
9001c05e:	f73f aee0 	bgt.w	9001be22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001c062:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001c064:	980d      	ldr	r0, [sp, #52]	; 0x34
9001c066:	444b      	add	r3, r9
9001c068:	4283      	cmp	r3, r0
9001c06a:	f73f aeda 	bgt.w	9001be22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001c06e:	b2bf      	uxth	r7, r7
9001c070:	f1b8 0f08 	cmp.w	r8, #8
9001c074:	6810      	ldr	r0, [r2, #0]
9001c076:	f04f 0500 	mov.w	r5, #0
9001c07a:	bf18      	it	ne
9001c07c:	3701      	addne	r7, #1
9001c07e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001c082:	6804      	ldr	r4, [r0, #0]
9001c084:	bf18      	it	ne
9001c086:	f027 0701 	bicne.w	r7, r7, #1
9001c08a:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001c08e:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001c092:	990c      	ldr	r1, [sp, #48]	; 0x30
9001c094:	bf18      	it	ne
9001c096:	b2bf      	uxthne	r7, r7
9001c098:	9104      	str	r1, [sp, #16]
9001c09a:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001c09c:	e9cd 7900 	strd	r7, r9, [sp]
9001c0a0:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001c0a4:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001c0a6:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001c0a8:	47a0      	blx	r4
9001c0aa:	b019      	add	sp, #100	; 0x64
9001c0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c0b0:	2300      	movs	r3, #0
9001c0b2:	e7c0      	b.n	9001c036 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001c0b4:	2208      	movs	r2, #8
9001c0b6:	fb92 f3f8 	sdiv	r3, r2, r8
9001c0ba:	1e5a      	subs	r2, r3, #1
9001c0bc:	443a      	add	r2, r7
9001c0be:	fb92 f2f3 	sdiv	r2, r2, r3
9001c0c2:	fb12 f203 	smulbb	r2, r2, r3
9001c0c6:	b292      	uxth	r2, r2
9001c0c8:	e6b0      	b.n	9001be2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001c0ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001c0cc:	e6ec      	b.n	9001bea8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001c0ce:	9810      	ldr	r0, [sp, #64]	; 0x40
9001c0d0:	e782      	b.n	9001bfd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001c0d2:	bf00      	nop
9001c0d4:	24026454 	.word	0x24026454
9001c0d8:	2402645c 	.word	0x2402645c
9001c0dc:	24026456 	.word	0x24026456
9001c0e0:	00fff800 	.word	0x00fff800
9001c0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001c0e6:	b153      	cbz	r3, 9001c0fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001c0e8:	441e      	add	r6, r3
9001c0ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001c0ec:	b2b6      	uxth	r6, r6
9001c0ee:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001c0f2:	f006 0607 	and.w	r6, r6, #7
9001c0f6:	781a      	ldrb	r2, [r3, #0]
9001c0f8:	9328      	str	r3, [sp, #160]	; 0xa0
9001c0fa:	4132      	asrs	r2, r6
9001c0fc:	b2d2      	uxtb	r2, r2
9001c0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001c100:	445b      	add	r3, fp
9001c102:	930a      	str	r3, [sp, #40]	; 0x28
9001c104:	e706      	b.n	9001bf14 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001c106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001c108:	2b00      	cmp	r3, #0
9001c10a:	d1ce      	bne.n	9001c0aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001c10c:	4b05      	ldr	r3, [pc, #20]	; (9001c124 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001c10e:	6818      	ldr	r0, [r3, #0]
9001c110:	6803      	ldr	r3, [r0, #0]
9001c112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001c114:	4798      	blx	r3
9001c116:	e7c8      	b.n	9001c0aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001c118:	2b00      	cmp	r3, #0
9001c11a:	f43f ae82 	beq.w	9001be22 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001c11e:	f44f 7180 	mov.w	r1, #256	; 0x100
9001c122:	e793      	b.n	9001c04c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001c124:	2402645c 	.word	0x2402645c

9001c128 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001c128:	b538      	push	{r3, r4, r5, lr}
9001c12a:	4c15      	ldr	r4, [pc, #84]	; (9001c180 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001c12c:	4605      	mov	r5, r0
9001c12e:	7823      	ldrb	r3, [r4, #0]
9001c130:	f3bf 8f5b 	dmb	ish
9001c134:	07da      	lsls	r2, r3, #31
9001c136:	d40b      	bmi.n	9001c150 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001c138:	4620      	mov	r0, r4
9001c13a:	f007 fa68 	bl	9002360e <__cxa_guard_acquire>
9001c13e:	b138      	cbz	r0, 9001c150 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001c140:	4620      	mov	r0, r4
9001c142:	f007 fa70 	bl	90023626 <__cxa_guard_release>
9001c146:	4a0f      	ldr	r2, [pc, #60]	; (9001c184 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001c148:	490f      	ldr	r1, [pc, #60]	; (9001c188 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001c14a:	4810      	ldr	r0, [pc, #64]	; (9001c18c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001c14c:	f007 fa58 	bl	90023600 <__aeabi_atexit>
9001c150:	4c0f      	ldr	r4, [pc, #60]	; (9001c190 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001c152:	7823      	ldrb	r3, [r4, #0]
9001c154:	f3bf 8f5b 	dmb	ish
9001c158:	07db      	lsls	r3, r3, #31
9001c15a:	d40b      	bmi.n	9001c174 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001c15c:	4620      	mov	r0, r4
9001c15e:	f007 fa56 	bl	9002360e <__cxa_guard_acquire>
9001c162:	b138      	cbz	r0, 9001c174 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001c164:	4620      	mov	r0, r4
9001c166:	f007 fa5e 	bl	90023626 <__cxa_guard_release>
9001c16a:	4a06      	ldr	r2, [pc, #24]	; (9001c184 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001c16c:	4909      	ldr	r1, [pc, #36]	; (9001c194 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001c16e:	480a      	ldr	r0, [pc, #40]	; (9001c198 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001c170:	f007 fa46 	bl	90023600 <__aeabi_atexit>
9001c174:	4b05      	ldr	r3, [pc, #20]	; (9001c18c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001c176:	612b      	str	r3, [r5, #16]
9001c178:	4b07      	ldr	r3, [pc, #28]	; (9001c198 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001c17a:	616b      	str	r3, [r5, #20]
9001c17c:	bd38      	pop	{r3, r4, r5, pc}
9001c17e:	bf00      	nop
9001c180:	24026528 	.word	0x24026528
9001c184:	24000000 	.word	0x24000000
9001c188:	9001a335 	.word	0x9001a335
9001c18c:	240000b0 	.word	0x240000b0
9001c190:	2402652c 	.word	0x2402652c
9001c194:	9001a333 	.word	0x9001a333
9001c198:	240000b4 	.word	0x240000b4

9001c19c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001c19c:	b538      	push	{r3, r4, r5, lr}
9001c19e:	4c15      	ldr	r4, [pc, #84]	; (9001c1f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001c1a0:	4605      	mov	r5, r0
9001c1a2:	7823      	ldrb	r3, [r4, #0]
9001c1a4:	f3bf 8f5b 	dmb	ish
9001c1a8:	07da      	lsls	r2, r3, #31
9001c1aa:	d40b      	bmi.n	9001c1c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001c1ac:	4620      	mov	r0, r4
9001c1ae:	f007 fa2e 	bl	9002360e <__cxa_guard_acquire>
9001c1b2:	b138      	cbz	r0, 9001c1c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001c1b4:	4620      	mov	r0, r4
9001c1b6:	f007 fa36 	bl	90023626 <__cxa_guard_release>
9001c1ba:	4a0f      	ldr	r2, [pc, #60]	; (9001c1f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001c1bc:	490f      	ldr	r1, [pc, #60]	; (9001c1fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001c1be:	4810      	ldr	r0, [pc, #64]	; (9001c200 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001c1c0:	f007 fa1e 	bl	90023600 <__aeabi_atexit>
9001c1c4:	4c0f      	ldr	r4, [pc, #60]	; (9001c204 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001c1c6:	7823      	ldrb	r3, [r4, #0]
9001c1c8:	f3bf 8f5b 	dmb	ish
9001c1cc:	07db      	lsls	r3, r3, #31
9001c1ce:	d40b      	bmi.n	9001c1e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001c1d0:	4620      	mov	r0, r4
9001c1d2:	f007 fa1c 	bl	9002360e <__cxa_guard_acquire>
9001c1d6:	b138      	cbz	r0, 9001c1e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001c1d8:	4620      	mov	r0, r4
9001c1da:	f007 fa24 	bl	90023626 <__cxa_guard_release>
9001c1de:	4a06      	ldr	r2, [pc, #24]	; (9001c1f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001c1e0:	4909      	ldr	r1, [pc, #36]	; (9001c208 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001c1e2:	480a      	ldr	r0, [pc, #40]	; (9001c20c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001c1e4:	f007 fa0c 	bl	90023600 <__aeabi_atexit>
9001c1e8:	4b05      	ldr	r3, [pc, #20]	; (9001c200 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001c1ea:	60ab      	str	r3, [r5, #8]
9001c1ec:	4b07      	ldr	r3, [pc, #28]	; (9001c20c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001c1ee:	60eb      	str	r3, [r5, #12]
9001c1f0:	bd38      	pop	{r3, r4, r5, pc}
9001c1f2:	bf00      	nop
9001c1f4:	24026500 	.word	0x24026500
9001c1f8:	24000000 	.word	0x24000000
9001c1fc:	9001a339 	.word	0x9001a339
9001c200:	24000088 	.word	0x24000088
9001c204:	24026504 	.word	0x24026504
9001c208:	9001a337 	.word	0x9001a337
9001c20c:	2400008c 	.word	0x2400008c

9001c210 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001c210:	b510      	push	{r4, lr}
9001c212:	4604      	mov	r4, r0
9001c214:	f7ff ff88 	bl	9001c128 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001c218:	4620      	mov	r0, r4
9001c21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c21e:	f7ff bfbd 	b.w	9001c19c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001c224 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001c224:	b538      	push	{r3, r4, r5, lr}
9001c226:	4c15      	ldr	r4, [pc, #84]	; (9001c27c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001c228:	4605      	mov	r5, r0
9001c22a:	7823      	ldrb	r3, [r4, #0]
9001c22c:	f3bf 8f5b 	dmb	ish
9001c230:	07da      	lsls	r2, r3, #31
9001c232:	d40b      	bmi.n	9001c24c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001c234:	4620      	mov	r0, r4
9001c236:	f007 f9ea 	bl	9002360e <__cxa_guard_acquire>
9001c23a:	b138      	cbz	r0, 9001c24c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001c23c:	4620      	mov	r0, r4
9001c23e:	f007 f9f2 	bl	90023626 <__cxa_guard_release>
9001c242:	4a0f      	ldr	r2, [pc, #60]	; (9001c280 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001c244:	490f      	ldr	r1, [pc, #60]	; (9001c284 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001c246:	4810      	ldr	r0, [pc, #64]	; (9001c288 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001c248:	f007 f9da 	bl	90023600 <__aeabi_atexit>
9001c24c:	4c0f      	ldr	r4, [pc, #60]	; (9001c28c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001c24e:	7823      	ldrb	r3, [r4, #0]
9001c250:	f3bf 8f5b 	dmb	ish
9001c254:	07db      	lsls	r3, r3, #31
9001c256:	d40b      	bmi.n	9001c270 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001c258:	4620      	mov	r0, r4
9001c25a:	f007 f9d8 	bl	9002360e <__cxa_guard_acquire>
9001c25e:	b138      	cbz	r0, 9001c270 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001c260:	4620      	mov	r0, r4
9001c262:	f007 f9e0 	bl	90023626 <__cxa_guard_release>
9001c266:	4a06      	ldr	r2, [pc, #24]	; (9001c280 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001c268:	4909      	ldr	r1, [pc, #36]	; (9001c290 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001c26a:	480a      	ldr	r0, [pc, #40]	; (9001c294 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001c26c:	f007 f9c8 	bl	90023600 <__aeabi_atexit>
9001c270:	4b05      	ldr	r3, [pc, #20]	; (9001c288 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001c272:	622b      	str	r3, [r5, #32]
9001c274:	4b07      	ldr	r3, [pc, #28]	; (9001c294 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001c276:	626b      	str	r3, [r5, #36]	; 0x24
9001c278:	bd38      	pop	{r3, r4, r5, pc}
9001c27a:	bf00      	nop
9001c27c:	24026530 	.word	0x24026530
9001c280:	24000000 	.word	0x24000000
9001c284:	9001a32d 	.word	0x9001a32d
9001c288:	240000b8 	.word	0x240000b8
9001c28c:	24026534 	.word	0x24026534
9001c290:	9001a32b 	.word	0x9001a32b
9001c294:	240000bc 	.word	0x240000bc

9001c298 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001c298:	b538      	push	{r3, r4, r5, lr}
9001c29a:	4c15      	ldr	r4, [pc, #84]	; (9001c2f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001c29c:	4605      	mov	r5, r0
9001c29e:	7823      	ldrb	r3, [r4, #0]
9001c2a0:	f3bf 8f5b 	dmb	ish
9001c2a4:	07da      	lsls	r2, r3, #31
9001c2a6:	d40b      	bmi.n	9001c2c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001c2a8:	4620      	mov	r0, r4
9001c2aa:	f007 f9b0 	bl	9002360e <__cxa_guard_acquire>
9001c2ae:	b138      	cbz	r0, 9001c2c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001c2b0:	4620      	mov	r0, r4
9001c2b2:	f007 f9b8 	bl	90023626 <__cxa_guard_release>
9001c2b6:	4a0f      	ldr	r2, [pc, #60]	; (9001c2f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001c2b8:	490f      	ldr	r1, [pc, #60]	; (9001c2f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001c2ba:	4810      	ldr	r0, [pc, #64]	; (9001c2fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001c2bc:	f007 f9a0 	bl	90023600 <__aeabi_atexit>
9001c2c0:	4c0f      	ldr	r4, [pc, #60]	; (9001c300 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001c2c2:	7823      	ldrb	r3, [r4, #0]
9001c2c4:	f3bf 8f5b 	dmb	ish
9001c2c8:	07db      	lsls	r3, r3, #31
9001c2ca:	d40b      	bmi.n	9001c2e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001c2cc:	4620      	mov	r0, r4
9001c2ce:	f007 f99e 	bl	9002360e <__cxa_guard_acquire>
9001c2d2:	b138      	cbz	r0, 9001c2e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001c2d4:	4620      	mov	r0, r4
9001c2d6:	f007 f9a6 	bl	90023626 <__cxa_guard_release>
9001c2da:	4a06      	ldr	r2, [pc, #24]	; (9001c2f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001c2dc:	4909      	ldr	r1, [pc, #36]	; (9001c304 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001c2de:	480a      	ldr	r0, [pc, #40]	; (9001c308 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001c2e0:	f007 f98e 	bl	90023600 <__aeabi_atexit>
9001c2e4:	4b05      	ldr	r3, [pc, #20]	; (9001c2fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001c2e6:	61ab      	str	r3, [r5, #24]
9001c2e8:	4b07      	ldr	r3, [pc, #28]	; (9001c308 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001c2ea:	61eb      	str	r3, [r5, #28]
9001c2ec:	bd38      	pop	{r3, r4, r5, pc}
9001c2ee:	bf00      	nop
9001c2f0:	24026508 	.word	0x24026508
9001c2f4:	24000000 	.word	0x24000000
9001c2f8:	9001a331 	.word	0x9001a331
9001c2fc:	24000090 	.word	0x24000090
9001c300:	2402650c 	.word	0x2402650c
9001c304:	9001a32f 	.word	0x9001a32f
9001c308:	24000094 	.word	0x24000094

9001c30c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001c30c:	b510      	push	{r4, lr}
9001c30e:	4604      	mov	r4, r0
9001c310:	f7ff ff88 	bl	9001c224 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001c314:	4620      	mov	r0, r4
9001c316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c31a:	f7ff bfbd 	b.w	9001c298 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001c320 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001c320:	b538      	push	{r3, r4, r5, lr}
9001c322:	4c15      	ldr	r4, [pc, #84]	; (9001c378 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001c324:	4605      	mov	r5, r0
9001c326:	7823      	ldrb	r3, [r4, #0]
9001c328:	f3bf 8f5b 	dmb	ish
9001c32c:	07da      	lsls	r2, r3, #31
9001c32e:	d40b      	bmi.n	9001c348 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001c330:	4620      	mov	r0, r4
9001c332:	f007 f96c 	bl	9002360e <__cxa_guard_acquire>
9001c336:	b138      	cbz	r0, 9001c348 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001c338:	4620      	mov	r0, r4
9001c33a:	f007 f974 	bl	90023626 <__cxa_guard_release>
9001c33e:	4a0f      	ldr	r2, [pc, #60]	; (9001c37c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001c340:	490f      	ldr	r1, [pc, #60]	; (9001c380 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001c342:	4810      	ldr	r0, [pc, #64]	; (9001c384 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001c344:	f007 f95c 	bl	90023600 <__aeabi_atexit>
9001c348:	4c0f      	ldr	r4, [pc, #60]	; (9001c388 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001c34a:	7823      	ldrb	r3, [r4, #0]
9001c34c:	f3bf 8f5b 	dmb	ish
9001c350:	07db      	lsls	r3, r3, #31
9001c352:	d40b      	bmi.n	9001c36c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001c354:	4620      	mov	r0, r4
9001c356:	f007 f95a 	bl	9002360e <__cxa_guard_acquire>
9001c35a:	b138      	cbz	r0, 9001c36c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001c35c:	4620      	mov	r0, r4
9001c35e:	f007 f962 	bl	90023626 <__cxa_guard_release>
9001c362:	4a06      	ldr	r2, [pc, #24]	; (9001c37c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001c364:	4909      	ldr	r1, [pc, #36]	; (9001c38c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001c366:	480a      	ldr	r0, [pc, #40]	; (9001c390 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001c368:	f007 f94a 	bl	90023600 <__aeabi_atexit>
9001c36c:	4b05      	ldr	r3, [pc, #20]	; (9001c384 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001c36e:	632b      	str	r3, [r5, #48]	; 0x30
9001c370:	4b07      	ldr	r3, [pc, #28]	; (9001c390 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001c372:	636b      	str	r3, [r5, #52]	; 0x34
9001c374:	bd38      	pop	{r3, r4, r5, pc}
9001c376:	bf00      	nop
9001c378:	24026540 	.word	0x24026540
9001c37c:	24000000 	.word	0x24000000
9001c380:	9001a325 	.word	0x9001a325
9001c384:	240000c8 	.word	0x240000c8
9001c388:	24026544 	.word	0x24026544
9001c38c:	9001a323 	.word	0x9001a323
9001c390:	240000cc 	.word	0x240000cc

9001c394 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001c394:	b538      	push	{r3, r4, r5, lr}
9001c396:	4c15      	ldr	r4, [pc, #84]	; (9001c3ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001c398:	4605      	mov	r5, r0
9001c39a:	7823      	ldrb	r3, [r4, #0]
9001c39c:	f3bf 8f5b 	dmb	ish
9001c3a0:	07da      	lsls	r2, r3, #31
9001c3a2:	d40b      	bmi.n	9001c3bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001c3a4:	4620      	mov	r0, r4
9001c3a6:	f007 f932 	bl	9002360e <__cxa_guard_acquire>
9001c3aa:	b138      	cbz	r0, 9001c3bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001c3ac:	4620      	mov	r0, r4
9001c3ae:	f007 f93a 	bl	90023626 <__cxa_guard_release>
9001c3b2:	4a0f      	ldr	r2, [pc, #60]	; (9001c3f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001c3b4:	490f      	ldr	r1, [pc, #60]	; (9001c3f4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001c3b6:	4810      	ldr	r0, [pc, #64]	; (9001c3f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001c3b8:	f007 f922 	bl	90023600 <__aeabi_atexit>
9001c3bc:	4c0f      	ldr	r4, [pc, #60]	; (9001c3fc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001c3be:	7823      	ldrb	r3, [r4, #0]
9001c3c0:	f3bf 8f5b 	dmb	ish
9001c3c4:	07db      	lsls	r3, r3, #31
9001c3c6:	d40b      	bmi.n	9001c3e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001c3c8:	4620      	mov	r0, r4
9001c3ca:	f007 f920 	bl	9002360e <__cxa_guard_acquire>
9001c3ce:	b138      	cbz	r0, 9001c3e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001c3d0:	4620      	mov	r0, r4
9001c3d2:	f007 f928 	bl	90023626 <__cxa_guard_release>
9001c3d6:	4a06      	ldr	r2, [pc, #24]	; (9001c3f0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001c3d8:	4909      	ldr	r1, [pc, #36]	; (9001c400 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001c3da:	480a      	ldr	r0, [pc, #40]	; (9001c404 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001c3dc:	f007 f910 	bl	90023600 <__aeabi_atexit>
9001c3e0:	4b05      	ldr	r3, [pc, #20]	; (9001c3f8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001c3e2:	62ab      	str	r3, [r5, #40]	; 0x28
9001c3e4:	4b07      	ldr	r3, [pc, #28]	; (9001c404 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001c3e6:	62eb      	str	r3, [r5, #44]	; 0x2c
9001c3e8:	bd38      	pop	{r3, r4, r5, pc}
9001c3ea:	bf00      	nop
9001c3ec:	24026510 	.word	0x24026510
9001c3f0:	24000000 	.word	0x24000000
9001c3f4:	9001a329 	.word	0x9001a329
9001c3f8:	24000098 	.word	0x24000098
9001c3fc:	24026514 	.word	0x24026514
9001c400:	9001a327 	.word	0x9001a327
9001c404:	2400009c 	.word	0x2400009c

9001c408 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001c408:	b510      	push	{r4, lr}
9001c40a:	4604      	mov	r4, r0
9001c40c:	f7ff ff88 	bl	9001c320 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001c410:	4620      	mov	r0, r4
9001c412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c416:	f7ff bfbd 	b.w	9001c394 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001c41c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001c41c:	b538      	push	{r3, r4, r5, lr}
9001c41e:	4c15      	ldr	r4, [pc, #84]	; (9001c474 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001c420:	4605      	mov	r5, r0
9001c422:	7823      	ldrb	r3, [r4, #0]
9001c424:	f3bf 8f5b 	dmb	ish
9001c428:	07da      	lsls	r2, r3, #31
9001c42a:	d40b      	bmi.n	9001c444 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001c42c:	4620      	mov	r0, r4
9001c42e:	f007 f8ee 	bl	9002360e <__cxa_guard_acquire>
9001c432:	b138      	cbz	r0, 9001c444 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001c434:	4620      	mov	r0, r4
9001c436:	f007 f8f6 	bl	90023626 <__cxa_guard_release>
9001c43a:	4a0f      	ldr	r2, [pc, #60]	; (9001c478 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001c43c:	490f      	ldr	r1, [pc, #60]	; (9001c47c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001c43e:	4810      	ldr	r0, [pc, #64]	; (9001c480 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001c440:	f007 f8de 	bl	90023600 <__aeabi_atexit>
9001c444:	4c0f      	ldr	r4, [pc, #60]	; (9001c484 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001c446:	7823      	ldrb	r3, [r4, #0]
9001c448:	f3bf 8f5b 	dmb	ish
9001c44c:	07db      	lsls	r3, r3, #31
9001c44e:	d40b      	bmi.n	9001c468 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001c450:	4620      	mov	r0, r4
9001c452:	f007 f8dc 	bl	9002360e <__cxa_guard_acquire>
9001c456:	b138      	cbz	r0, 9001c468 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001c458:	4620      	mov	r0, r4
9001c45a:	f007 f8e4 	bl	90023626 <__cxa_guard_release>
9001c45e:	4a06      	ldr	r2, [pc, #24]	; (9001c478 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001c460:	4909      	ldr	r1, [pc, #36]	; (9001c488 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001c462:	480a      	ldr	r0, [pc, #40]	; (9001c48c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001c464:	f007 f8cc 	bl	90023600 <__aeabi_atexit>
9001c468:	4b05      	ldr	r3, [pc, #20]	; (9001c480 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001c46a:	652b      	str	r3, [r5, #80]	; 0x50
9001c46c:	4b07      	ldr	r3, [pc, #28]	; (9001c48c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001c46e:	656b      	str	r3, [r5, #84]	; 0x54
9001c470:	bd38      	pop	{r3, r4, r5, pc}
9001c472:	bf00      	nop
9001c474:	24026548 	.word	0x24026548
9001c478:	24000000 	.word	0x24000000
9001c47c:	9001a315 	.word	0x9001a315
9001c480:	240000d0 	.word	0x240000d0
9001c484:	2402654c 	.word	0x2402654c
9001c488:	9001a313 	.word	0x9001a313
9001c48c:	240000d4 	.word	0x240000d4

9001c490 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001c490:	b538      	push	{r3, r4, r5, lr}
9001c492:	4c15      	ldr	r4, [pc, #84]	; (9001c4e8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001c494:	4605      	mov	r5, r0
9001c496:	7823      	ldrb	r3, [r4, #0]
9001c498:	f3bf 8f5b 	dmb	ish
9001c49c:	07da      	lsls	r2, r3, #31
9001c49e:	d40b      	bmi.n	9001c4b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001c4a0:	4620      	mov	r0, r4
9001c4a2:	f007 f8b4 	bl	9002360e <__cxa_guard_acquire>
9001c4a6:	b138      	cbz	r0, 9001c4b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001c4a8:	4620      	mov	r0, r4
9001c4aa:	f007 f8bc 	bl	90023626 <__cxa_guard_release>
9001c4ae:	4a0f      	ldr	r2, [pc, #60]	; (9001c4ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001c4b0:	490f      	ldr	r1, [pc, #60]	; (9001c4f0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001c4b2:	4810      	ldr	r0, [pc, #64]	; (9001c4f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001c4b4:	f007 f8a4 	bl	90023600 <__aeabi_atexit>
9001c4b8:	4c0f      	ldr	r4, [pc, #60]	; (9001c4f8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001c4ba:	7823      	ldrb	r3, [r4, #0]
9001c4bc:	f3bf 8f5b 	dmb	ish
9001c4c0:	07db      	lsls	r3, r3, #31
9001c4c2:	d40b      	bmi.n	9001c4dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001c4c4:	4620      	mov	r0, r4
9001c4c6:	f007 f8a2 	bl	9002360e <__cxa_guard_acquire>
9001c4ca:	b138      	cbz	r0, 9001c4dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001c4cc:	4620      	mov	r0, r4
9001c4ce:	f007 f8aa 	bl	90023626 <__cxa_guard_release>
9001c4d2:	4a06      	ldr	r2, [pc, #24]	; (9001c4ec <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001c4d4:	4909      	ldr	r1, [pc, #36]	; (9001c4fc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001c4d6:	480a      	ldr	r0, [pc, #40]	; (9001c500 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001c4d8:	f007 f892 	bl	90023600 <__aeabi_atexit>
9001c4dc:	4b05      	ldr	r3, [pc, #20]	; (9001c4f4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001c4de:	64ab      	str	r3, [r5, #72]	; 0x48
9001c4e0:	4b07      	ldr	r3, [pc, #28]	; (9001c500 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001c4e2:	64eb      	str	r3, [r5, #76]	; 0x4c
9001c4e4:	bd38      	pop	{r3, r4, r5, pc}
9001c4e6:	bf00      	nop
9001c4e8:	24026550 	.word	0x24026550
9001c4ec:	24000000 	.word	0x24000000
9001c4f0:	9001a319 	.word	0x9001a319
9001c4f4:	240000d8 	.word	0x240000d8
9001c4f8:	24026554 	.word	0x24026554
9001c4fc:	9001a317 	.word	0x9001a317
9001c500:	240000dc 	.word	0x240000dc

9001c504 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001c504:	b538      	push	{r3, r4, r5, lr}
9001c506:	4c15      	ldr	r4, [pc, #84]	; (9001c55c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001c508:	4605      	mov	r5, r0
9001c50a:	7823      	ldrb	r3, [r4, #0]
9001c50c:	f3bf 8f5b 	dmb	ish
9001c510:	07da      	lsls	r2, r3, #31
9001c512:	d40b      	bmi.n	9001c52c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001c514:	4620      	mov	r0, r4
9001c516:	f007 f87a 	bl	9002360e <__cxa_guard_acquire>
9001c51a:	b138      	cbz	r0, 9001c52c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001c51c:	4620      	mov	r0, r4
9001c51e:	f007 f882 	bl	90023626 <__cxa_guard_release>
9001c522:	4a0f      	ldr	r2, [pc, #60]	; (9001c560 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001c524:	490f      	ldr	r1, [pc, #60]	; (9001c564 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001c526:	4810      	ldr	r0, [pc, #64]	; (9001c568 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001c528:	f007 f86a 	bl	90023600 <__aeabi_atexit>
9001c52c:	4c0f      	ldr	r4, [pc, #60]	; (9001c56c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001c52e:	7823      	ldrb	r3, [r4, #0]
9001c530:	f3bf 8f5b 	dmb	ish
9001c534:	07db      	lsls	r3, r3, #31
9001c536:	d40b      	bmi.n	9001c550 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001c538:	4620      	mov	r0, r4
9001c53a:	f007 f868 	bl	9002360e <__cxa_guard_acquire>
9001c53e:	b138      	cbz	r0, 9001c550 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001c540:	4620      	mov	r0, r4
9001c542:	f007 f870 	bl	90023626 <__cxa_guard_release>
9001c546:	4a06      	ldr	r2, [pc, #24]	; (9001c560 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001c548:	4909      	ldr	r1, [pc, #36]	; (9001c570 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001c54a:	480a      	ldr	r0, [pc, #40]	; (9001c574 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001c54c:	f007 f858 	bl	90023600 <__aeabi_atexit>
9001c550:	4b05      	ldr	r3, [pc, #20]	; (9001c568 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001c552:	642b      	str	r3, [r5, #64]	; 0x40
9001c554:	4b07      	ldr	r3, [pc, #28]	; (9001c574 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001c556:	646b      	str	r3, [r5, #68]	; 0x44
9001c558:	bd38      	pop	{r3, r4, r5, pc}
9001c55a:	bf00      	nop
9001c55c:	24026518 	.word	0x24026518
9001c560:	24000000 	.word	0x24000000
9001c564:	9001a31d 	.word	0x9001a31d
9001c568:	240000a0 	.word	0x240000a0
9001c56c:	2402651c 	.word	0x2402651c
9001c570:	9001a31b 	.word	0x9001a31b
9001c574:	240000a4 	.word	0x240000a4

9001c578 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001c578:	b538      	push	{r3, r4, r5, lr}
9001c57a:	4c15      	ldr	r4, [pc, #84]	; (9001c5d0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001c57c:	4605      	mov	r5, r0
9001c57e:	7823      	ldrb	r3, [r4, #0]
9001c580:	f3bf 8f5b 	dmb	ish
9001c584:	07da      	lsls	r2, r3, #31
9001c586:	d40b      	bmi.n	9001c5a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001c588:	4620      	mov	r0, r4
9001c58a:	f007 f840 	bl	9002360e <__cxa_guard_acquire>
9001c58e:	b138      	cbz	r0, 9001c5a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001c590:	4620      	mov	r0, r4
9001c592:	f007 f848 	bl	90023626 <__cxa_guard_release>
9001c596:	4a0f      	ldr	r2, [pc, #60]	; (9001c5d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001c598:	490f      	ldr	r1, [pc, #60]	; (9001c5d8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001c59a:	4810      	ldr	r0, [pc, #64]	; (9001c5dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001c59c:	f007 f830 	bl	90023600 <__aeabi_atexit>
9001c5a0:	4c0f      	ldr	r4, [pc, #60]	; (9001c5e0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001c5a2:	7823      	ldrb	r3, [r4, #0]
9001c5a4:	f3bf 8f5b 	dmb	ish
9001c5a8:	07db      	lsls	r3, r3, #31
9001c5aa:	d40b      	bmi.n	9001c5c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001c5ac:	4620      	mov	r0, r4
9001c5ae:	f007 f82e 	bl	9002360e <__cxa_guard_acquire>
9001c5b2:	b138      	cbz	r0, 9001c5c4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001c5b4:	4620      	mov	r0, r4
9001c5b6:	f007 f836 	bl	90023626 <__cxa_guard_release>
9001c5ba:	4a06      	ldr	r2, [pc, #24]	; (9001c5d4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001c5bc:	4909      	ldr	r1, [pc, #36]	; (9001c5e4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001c5be:	480a      	ldr	r0, [pc, #40]	; (9001c5e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001c5c0:	f007 f81e 	bl	90023600 <__aeabi_atexit>
9001c5c4:	4b05      	ldr	r3, [pc, #20]	; (9001c5dc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001c5c6:	63ab      	str	r3, [r5, #56]	; 0x38
9001c5c8:	4b07      	ldr	r3, [pc, #28]	; (9001c5e8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001c5ca:	63eb      	str	r3, [r5, #60]	; 0x3c
9001c5cc:	bd38      	pop	{r3, r4, r5, pc}
9001c5ce:	bf00      	nop
9001c5d0:	24026538 	.word	0x24026538
9001c5d4:	24000000 	.word	0x24000000
9001c5d8:	9001a321 	.word	0x9001a321
9001c5dc:	240000c0 	.word	0x240000c0
9001c5e0:	2402653c 	.word	0x2402653c
9001c5e4:	9001a31f 	.word	0x9001a31f
9001c5e8:	240000c4 	.word	0x240000c4

9001c5ec <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001c5ec:	b510      	push	{r4, lr}
9001c5ee:	4604      	mov	r4, r0
9001c5f0:	f7ff ff14 	bl	9001c41c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001c5f4:	4620      	mov	r0, r4
9001c5f6:	f7ff ff85 	bl	9001c504 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001c5fa:	4620      	mov	r0, r4
9001c5fc:	f7ff ff48 	bl	9001c490 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001c600:	4620      	mov	r0, r4
9001c602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c606:	f7ff bfb7 	b.w	9001c578 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001c60c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001c60c:	b538      	push	{r3, r4, r5, lr}
9001c60e:	4c15      	ldr	r4, [pc, #84]	; (9001c664 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001c610:	4605      	mov	r5, r0
9001c612:	7823      	ldrb	r3, [r4, #0]
9001c614:	f3bf 8f5b 	dmb	ish
9001c618:	07da      	lsls	r2, r3, #31
9001c61a:	d40b      	bmi.n	9001c634 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001c61c:	4620      	mov	r0, r4
9001c61e:	f006 fff6 	bl	9002360e <__cxa_guard_acquire>
9001c622:	b138      	cbz	r0, 9001c634 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001c624:	4620      	mov	r0, r4
9001c626:	f006 fffe 	bl	90023626 <__cxa_guard_release>
9001c62a:	4a0f      	ldr	r2, [pc, #60]	; (9001c668 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001c62c:	490f      	ldr	r1, [pc, #60]	; (9001c66c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001c62e:	4810      	ldr	r0, [pc, #64]	; (9001c670 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001c630:	f006 ffe6 	bl	90023600 <__aeabi_atexit>
9001c634:	4c0f      	ldr	r4, [pc, #60]	; (9001c674 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001c636:	7823      	ldrb	r3, [r4, #0]
9001c638:	f3bf 8f5b 	dmb	ish
9001c63c:	07db      	lsls	r3, r3, #31
9001c63e:	d40b      	bmi.n	9001c658 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001c640:	4620      	mov	r0, r4
9001c642:	f006 ffe4 	bl	9002360e <__cxa_guard_acquire>
9001c646:	b138      	cbz	r0, 9001c658 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001c648:	4620      	mov	r0, r4
9001c64a:	f006 ffec 	bl	90023626 <__cxa_guard_release>
9001c64e:	4a06      	ldr	r2, [pc, #24]	; (9001c668 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001c650:	4909      	ldr	r1, [pc, #36]	; (9001c678 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001c652:	480a      	ldr	r0, [pc, #40]	; (9001c67c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001c654:	f006 ffd4 	bl	90023600 <__aeabi_atexit>
9001c658:	4b05      	ldr	r3, [pc, #20]	; (9001c670 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001c65a:	662b      	str	r3, [r5, #96]	; 0x60
9001c65c:	4b07      	ldr	r3, [pc, #28]	; (9001c67c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001c65e:	666b      	str	r3, [r5, #100]	; 0x64
9001c660:	bd38      	pop	{r3, r4, r5, pc}
9001c662:	bf00      	nop
9001c664:	24026520 	.word	0x24026520
9001c668:	24000000 	.word	0x24000000
9001c66c:	9001a30d 	.word	0x9001a30d
9001c670:	240000a8 	.word	0x240000a8
9001c674:	24026524 	.word	0x24026524
9001c678:	9001a30b 	.word	0x9001a30b
9001c67c:	240000ac 	.word	0x240000ac

9001c680 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001c680:	b538      	push	{r3, r4, r5, lr}
9001c682:	4c15      	ldr	r4, [pc, #84]	; (9001c6d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001c684:	4605      	mov	r5, r0
9001c686:	7823      	ldrb	r3, [r4, #0]
9001c688:	f3bf 8f5b 	dmb	ish
9001c68c:	07da      	lsls	r2, r3, #31
9001c68e:	d40b      	bmi.n	9001c6a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001c690:	4620      	mov	r0, r4
9001c692:	f006 ffbc 	bl	9002360e <__cxa_guard_acquire>
9001c696:	b138      	cbz	r0, 9001c6a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001c698:	4620      	mov	r0, r4
9001c69a:	f006 ffc4 	bl	90023626 <__cxa_guard_release>
9001c69e:	4a0f      	ldr	r2, [pc, #60]	; (9001c6dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001c6a0:	490f      	ldr	r1, [pc, #60]	; (9001c6e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001c6a2:	4810      	ldr	r0, [pc, #64]	; (9001c6e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001c6a4:	f006 ffac 	bl	90023600 <__aeabi_atexit>
9001c6a8:	4c0f      	ldr	r4, [pc, #60]	; (9001c6e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001c6aa:	7823      	ldrb	r3, [r4, #0]
9001c6ac:	f3bf 8f5b 	dmb	ish
9001c6b0:	07db      	lsls	r3, r3, #31
9001c6b2:	d40b      	bmi.n	9001c6cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001c6b4:	4620      	mov	r0, r4
9001c6b6:	f006 ffaa 	bl	9002360e <__cxa_guard_acquire>
9001c6ba:	b138      	cbz	r0, 9001c6cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001c6bc:	4620      	mov	r0, r4
9001c6be:	f006 ffb2 	bl	90023626 <__cxa_guard_release>
9001c6c2:	4a06      	ldr	r2, [pc, #24]	; (9001c6dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001c6c4:	4909      	ldr	r1, [pc, #36]	; (9001c6ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001c6c6:	480a      	ldr	r0, [pc, #40]	; (9001c6f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001c6c8:	f006 ff9a 	bl	90023600 <__aeabi_atexit>
9001c6cc:	4b05      	ldr	r3, [pc, #20]	; (9001c6e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001c6ce:	65ab      	str	r3, [r5, #88]	; 0x58
9001c6d0:	4b07      	ldr	r3, [pc, #28]	; (9001c6f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001c6d2:	65eb      	str	r3, [r5, #92]	; 0x5c
9001c6d4:	bd38      	pop	{r3, r4, r5, pc}
9001c6d6:	bf00      	nop
9001c6d8:	240264f8 	.word	0x240264f8
9001c6dc:	24000000 	.word	0x24000000
9001c6e0:	9001a311 	.word	0x9001a311
9001c6e4:	24000080 	.word	0x24000080
9001c6e8:	240264fc 	.word	0x240264fc
9001c6ec:	9001a30f 	.word	0x9001a30f
9001c6f0:	24000084 	.word	0x24000084

9001c6f4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001c6f4:	b510      	push	{r4, lr}
9001c6f6:	4604      	mov	r4, r0
9001c6f8:	f7ff ff88 	bl	9001c60c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001c6fc:	4620      	mov	r0, r4
9001c6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c702:	f7ff bfbd 	b.w	9001c680 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001c708 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001c708:	b538      	push	{r3, r4, r5, lr}
9001c70a:	4c15      	ldr	r4, [pc, #84]	; (9001c760 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001c70c:	4605      	mov	r5, r0
9001c70e:	7823      	ldrb	r3, [r4, #0]
9001c710:	f3bf 8f5b 	dmb	ish
9001c714:	07da      	lsls	r2, r3, #31
9001c716:	d40b      	bmi.n	9001c730 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001c718:	4620      	mov	r0, r4
9001c71a:	f006 ff78 	bl	9002360e <__cxa_guard_acquire>
9001c71e:	b138      	cbz	r0, 9001c730 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
9001c720:	4620      	mov	r0, r4
9001c722:	f006 ff80 	bl	90023626 <__cxa_guard_release>
9001c726:	4a0f      	ldr	r2, [pc, #60]	; (9001c764 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001c728:	490f      	ldr	r1, [pc, #60]	; (9001c768 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
9001c72a:	4810      	ldr	r0, [pc, #64]	; (9001c76c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001c72c:	f006 ff68 	bl	90023600 <__aeabi_atexit>
9001c730:	4c0f      	ldr	r4, [pc, #60]	; (9001c770 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9001c732:	7823      	ldrb	r3, [r4, #0]
9001c734:	f3bf 8f5b 	dmb	ish
9001c738:	07db      	lsls	r3, r3, #31
9001c73a:	d40b      	bmi.n	9001c754 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001c73c:	4620      	mov	r0, r4
9001c73e:	f006 ff66 	bl	9002360e <__cxa_guard_acquire>
9001c742:	b138      	cbz	r0, 9001c754 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9001c744:	4620      	mov	r0, r4
9001c746:	f006 ff6e 	bl	90023626 <__cxa_guard_release>
9001c74a:	4a06      	ldr	r2, [pc, #24]	; (9001c764 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
9001c74c:	4909      	ldr	r1, [pc, #36]	; (9001c774 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
9001c74e:	480a      	ldr	r0, [pc, #40]	; (9001c778 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001c750:	f006 ff56 	bl	90023600 <__aeabi_atexit>
9001c754:	4b05      	ldr	r3, [pc, #20]	; (9001c76c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9001c756:	672b      	str	r3, [r5, #112]	; 0x70
9001c758:	4b07      	ldr	r3, [pc, #28]	; (9001c778 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
9001c75a:	676b      	str	r3, [r5, #116]	; 0x74
9001c75c:	bd38      	pop	{r3, r4, r5, pc}
9001c75e:	bf00      	nop
9001c760:	240264f0 	.word	0x240264f0
9001c764:	24000000 	.word	0x24000000
9001c768:	9001a305 	.word	0x9001a305
9001c76c:	24000078 	.word	0x24000078
9001c770:	240264f4 	.word	0x240264f4
9001c774:	9001a303 	.word	0x9001a303
9001c778:	2400007c 	.word	0x2400007c

9001c77c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
9001c77c:	b538      	push	{r3, r4, r5, lr}
9001c77e:	4c15      	ldr	r4, [pc, #84]	; (9001c7d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
9001c780:	4605      	mov	r5, r0
9001c782:	7823      	ldrb	r3, [r4, #0]
9001c784:	f3bf 8f5b 	dmb	ish
9001c788:	07da      	lsls	r2, r3, #31
9001c78a:	d40b      	bmi.n	9001c7a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001c78c:	4620      	mov	r0, r4
9001c78e:	f006 ff3e 	bl	9002360e <__cxa_guard_acquire>
9001c792:	b138      	cbz	r0, 9001c7a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9001c794:	4620      	mov	r0, r4
9001c796:	f006 ff46 	bl	90023626 <__cxa_guard_release>
9001c79a:	4a0f      	ldr	r2, [pc, #60]	; (9001c7d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001c79c:	490f      	ldr	r1, [pc, #60]	; (9001c7dc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
9001c79e:	4810      	ldr	r0, [pc, #64]	; (9001c7e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001c7a0:	f006 ff2e 	bl	90023600 <__aeabi_atexit>
9001c7a4:	4c0f      	ldr	r4, [pc, #60]	; (9001c7e4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9001c7a6:	7823      	ldrb	r3, [r4, #0]
9001c7a8:	f3bf 8f5b 	dmb	ish
9001c7ac:	07db      	lsls	r3, r3, #31
9001c7ae:	d40b      	bmi.n	9001c7c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001c7b0:	4620      	mov	r0, r4
9001c7b2:	f006 ff2c 	bl	9002360e <__cxa_guard_acquire>
9001c7b6:	b138      	cbz	r0, 9001c7c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
9001c7b8:	4620      	mov	r0, r4
9001c7ba:	f006 ff34 	bl	90023626 <__cxa_guard_release>
9001c7be:	4a06      	ldr	r2, [pc, #24]	; (9001c7d8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
9001c7c0:	4909      	ldr	r1, [pc, #36]	; (9001c7e8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
9001c7c2:	480a      	ldr	r0, [pc, #40]	; (9001c7ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001c7c4:	f006 ff1c 	bl	90023600 <__aeabi_atexit>
9001c7c8:	4b05      	ldr	r3, [pc, #20]	; (9001c7e0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
9001c7ca:	66ab      	str	r3, [r5, #104]	; 0x68
9001c7cc:	4b07      	ldr	r3, [pc, #28]	; (9001c7ec <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
9001c7ce:	66eb      	str	r3, [r5, #108]	; 0x6c
9001c7d0:	bd38      	pop	{r3, r4, r5, pc}
9001c7d2:	bf00      	nop
9001c7d4:	240264e8 	.word	0x240264e8
9001c7d8:	24000000 	.word	0x24000000
9001c7dc:	9001a309 	.word	0x9001a309
9001c7e0:	24000070 	.word	0x24000070
9001c7e4:	240264ec 	.word	0x240264ec
9001c7e8:	9001a307 	.word	0x9001a307
9001c7ec:	24000074 	.word	0x24000074

9001c7f0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
9001c7f0:	b510      	push	{r4, lr}
9001c7f2:	4604      	mov	r4, r0
9001c7f4:	f7ff ff88 	bl	9001c708 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
9001c7f8:	4620      	mov	r0, r4
9001c7fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c7fe:	f7ff bfbd 	b.w	9001c77c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

9001c802 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
9001c802:	b510      	push	{r4, lr}
9001c804:	4604      	mov	r4, r0
9001c806:	f7ff fff3 	bl	9001c7f0 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
9001c80a:	4620      	mov	r0, r4
9001c80c:	f7ff ff72 	bl	9001c6f4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
9001c810:	4620      	mov	r0, r4
9001c812:	f7ff fdf9 	bl	9001c408 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
9001c816:	4620      	mov	r0, r4
9001c818:	f7ff fcfa 	bl	9001c210 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
9001c81c:	4620      	mov	r0, r4
9001c81e:	f7ff fd75 	bl	9001c30c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9001c822:	4620      	mov	r0, r4
9001c824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001c828:	f7ff bee0 	b.w	9001c5ec <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

9001c82c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
9001c82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c830:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9001c834:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
9001c838:	2d00      	cmp	r5, #0
9001c83a:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
9001c83e:	fb05 4c0e 	mla	ip, r5, lr, r4
9001c842:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9001c846:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
9001c84a:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
9001c84e:	eb02 0a0c 	add.w	sl, r2, ip
9001c852:	8808      	ldrh	r0, [r1, #0]
9001c854:	f2c0 80b0 	blt.w	9001c9b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001c858:	45ab      	cmp	fp, r5
9001c85a:	f340 80ad 	ble.w	9001c9b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
9001c85e:	2c00      	cmp	r4, #0
9001c860:	f2c0 80a8 	blt.w	9001c9b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001c864:	45a6      	cmp	lr, r4
9001c866:	f340 80a5 	ble.w	9001c9b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9001c86a:	f812 200c 	ldrb.w	r2, [r2, ip]
9001c86e:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9001c872:	1c62      	adds	r2, r4, #1
9001c874:	f100 80a3 	bmi.w	9001c9be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c878:	4596      	cmp	lr, r2
9001c87a:	f340 80a0 	ble.w	9001c9be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c87e:	f1b9 0f00 	cmp.w	r9, #0
9001c882:	f000 809c 	beq.w	9001c9be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9001c886:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001c88a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001c88e:	3501      	adds	r5, #1
9001c890:	f100 8099 	bmi.w	9001c9c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c894:	45ab      	cmp	fp, r5
9001c896:	f340 8096 	ble.w	9001c9c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c89a:	2f00      	cmp	r7, #0
9001c89c:	f000 8093 	beq.w	9001c9c6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9001c8a0:	2c00      	cmp	r4, #0
9001c8a2:	f2c0 808e 	blt.w	9001c9c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001c8a6:	45a6      	cmp	lr, r4
9001c8a8:	f340 808b 	ble.w	9001c9c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9001c8ac:	f81a 200e 	ldrb.w	r2, [sl, lr]
9001c8b0:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9001c8b4:	3401      	adds	r4, #1
9001c8b6:	f100 8089 	bmi.w	9001c9cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c8ba:	45a6      	cmp	lr, r4
9001c8bc:	f340 8086 	ble.w	9001c9cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c8c0:	f1b9 0f00 	cmp.w	r9, #0
9001c8c4:	f000 8082 	beq.w	9001c9cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
9001c8c8:	44d6      	add	lr, sl
9001c8ca:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001c8ce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
9001c8d2:	ea4f 4408 	mov.w	r4, r8, lsl #16
9001c8d6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
9001c8da:	fb19 fe07 	smulbb	lr, r9, r7
9001c8de:	f1c7 0210 	rsb	r2, r7, #16
9001c8e2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001c8e6:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
9001c8ea:	eba2 0209 	sub.w	r2, r2, r9
9001c8ee:	ea44 0808 	orr.w	r8, r4, r8
9001c8f2:	ea4f 440c 	mov.w	r4, ip, lsl #16
9001c8f6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001c8fa:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9001c8fe:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001c902:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9001c906:	ea44 0c0c 	orr.w	ip, r4, ip
9001c90a:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9001c90e:	fb04 f40c 	mul.w	r4, r4, ip
9001c912:	fb02 4808 	mla	r8, r2, r8, r4
9001c916:	041a      	lsls	r2, r3, #16
9001c918:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001c91c:	b2b4      	uxth	r4, r6
9001c91e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001c922:	43f6      	mvns	r6, r6
9001c924:	4313      	orrs	r3, r2
9001c926:	042a      	lsls	r2, r5, #16
9001c928:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001c92c:	b2f6      	uxtb	r6, r6
9001c92e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9001c932:	fb0e 8303 	mla	r3, lr, r3, r8
9001c936:	432a      	orrs	r2, r5
9001c938:	fb07 3202 	mla	r2, r7, r2, r3
9001c93c:	10c7      	asrs	r7, r0, #3
9001c93e:	0d53      	lsrs	r3, r2, #21
9001c940:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c944:	0952      	lsrs	r2, r2, #5
9001c946:	fb17 f706 	smulbb	r7, r7, r6
9001c94a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001c94e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001c952:	431a      	orrs	r2, r3
9001c954:	b293      	uxth	r3, r2
9001c956:	1202      	asrs	r2, r0, #8
9001c958:	121d      	asrs	r5, r3, #8
9001c95a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001c95e:	00c0      	lsls	r0, r0, #3
9001c960:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001c964:	fb12 f206 	smulbb	r2, r2, r6
9001c968:	b2c0      	uxtb	r0, r0
9001c96a:	fb05 2504 	mla	r5, r5, r4, r2
9001c96e:	10da      	asrs	r2, r3, #3
9001c970:	fb10 f006 	smulbb	r0, r0, r6
9001c974:	00db      	lsls	r3, r3, #3
9001c976:	b2ad      	uxth	r5, r5
9001c978:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001c97c:	b2db      	uxtb	r3, r3
9001c97e:	fb02 7204 	mla	r2, r2, r4, r7
9001c982:	fb03 0004 	mla	r0, r3, r4, r0
9001c986:	1c6b      	adds	r3, r5, #1
9001c988:	b292      	uxth	r2, r2
9001c98a:	b280      	uxth	r0, r0
9001c98c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001c990:	1c43      	adds	r3, r0, #1
9001c992:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001c996:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001c99a:	1c50      	adds	r0, r2, #1
9001c99c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
9001c9a0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001c9a4:	0952      	lsrs	r2, r2, #5
9001c9a6:	432b      	orrs	r3, r5
9001c9a8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001c9ac:	4313      	orrs	r3, r2
9001c9ae:	800b      	strh	r3, [r1, #0]
9001c9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c9b4:	4680      	mov	r8, r0
9001c9b6:	e75c      	b.n	9001c872 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
9001c9b8:	4684      	mov	ip, r0
9001c9ba:	4680      	mov	r8, r0
9001c9bc:	e767      	b.n	9001c88e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c9be:	4684      	mov	ip, r0
9001c9c0:	e765      	b.n	9001c88e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
9001c9c2:	4605      	mov	r5, r0
9001c9c4:	e776      	b.n	9001c8b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
9001c9c6:	4603      	mov	r3, r0
9001c9c8:	4605      	mov	r5, r0
9001c9ca:	e782      	b.n	9001c8d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
9001c9cc:	4603      	mov	r3, r0
9001c9ce:	e780      	b.n	9001c8d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

9001c9d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c9d4:	b099      	sub	sp, #100	; 0x64
9001c9d6:	9215      	str	r2, [sp, #84]	; 0x54
9001c9d8:	9309      	str	r3, [sp, #36]	; 0x24
9001c9da:	9a27      	ldr	r2, [sp, #156]	; 0x9c
9001c9dc:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
9001c9e0:	9016      	str	r0, [sp, #88]	; 0x58
9001c9e2:	930d      	str	r3, [sp, #52]	; 0x34
9001c9e4:	6850      	ldr	r0, [r2, #4]
9001c9e6:	910c      	str	r1, [sp, #48]	; 0x30
9001c9e8:	6812      	ldr	r2, [r2, #0]
9001c9ea:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
9001c9ee:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
9001c9f2:	fb00 1303 	mla	r3, r0, r3, r1
9001c9f6:	eb02 0843 	add.w	r8, r2, r3, lsl #1
9001c9fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001c9fc:	681b      	ldr	r3, [r3, #0]
9001c9fe:	930b      	str	r3, [sp, #44]	; 0x2c
9001ca00:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001ca02:	685e      	ldr	r6, [r3, #4]
9001ca04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ca06:	3604      	adds	r6, #4
9001ca08:	43db      	mvns	r3, r3
9001ca0a:	b2db      	uxtb	r3, r3
9001ca0c:	930a      	str	r3, [sp, #40]	; 0x28
9001ca0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ca10:	2b00      	cmp	r3, #0
9001ca12:	dc03      	bgt.n	9001ca1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001ca14:	9b15      	ldr	r3, [sp, #84]	; 0x54
9001ca16:	2b00      	cmp	r3, #0
9001ca18:	f340 8225 	ble.w	9001ce66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001ca1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001ca1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ca22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ca26:	1e48      	subs	r0, r1, #1
9001ca28:	1e57      	subs	r7, r2, #1
9001ca2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001ca2c:	2b00      	cmp	r3, #0
9001ca2e:	f340 80e3 	ble.w	9001cbf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001ca32:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9001ca36:	ea4f 4325 	mov.w	r3, r5, asr #16
9001ca3a:	d406      	bmi.n	9001ca4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ca3c:	4584      	cmp	ip, r0
9001ca3e:	da04      	bge.n	9001ca4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ca40:	2b00      	cmp	r3, #0
9001ca42:	db02      	blt.n	9001ca4a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001ca44:	42bb      	cmp	r3, r7
9001ca46:	f2c0 80d8 	blt.w	9001cbfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001ca4a:	f11c 0c01 	adds.w	ip, ip, #1
9001ca4e:	f100 80c9 	bmi.w	9001cbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ca52:	4561      	cmp	r1, ip
9001ca54:	f2c0 80c6 	blt.w	9001cbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ca58:	3301      	adds	r3, #1
9001ca5a:	f100 80c3 	bmi.w	9001cbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ca5e:	429a      	cmp	r2, r3
9001ca60:	f2c0 80c0 	blt.w	9001cbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001ca64:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001ca68:	4647      	mov	r7, r8
9001ca6a:	f1bb 0f00 	cmp.w	fp, #0
9001ca6e:	f340 80e3 	ble.w	9001cc38 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9001ca72:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001ca74:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001ca78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001ca7a:	f3ca 3003 	ubfx	r0, sl, #12, #4
9001ca7e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001ca82:	ea5f 422a 	movs.w	r2, sl, asr #16
9001ca86:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001ca8a:	689b      	ldr	r3, [r3, #8]
9001ca8c:	f100 8121 	bmi.w	9001ccd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ca90:	f103 39ff 	add.w	r9, r3, #4294967295
9001ca94:	454a      	cmp	r2, r9
9001ca96:	f280 811c 	bge.w	9001ccd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001ca9a:	f1bc 0f00 	cmp.w	ip, #0
9001ca9e:	f2c0 8118 	blt.w	9001ccd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001caa2:	f10e 39ff 	add.w	r9, lr, #4294967295
9001caa6:	45cc      	cmp	ip, r9
9001caa8:	f280 8113 	bge.w	9001ccd2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9001caac:	b21b      	sxth	r3, r3
9001caae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001cab0:	fb0c 2203 	mla	r2, ip, r3, r2
9001cab4:	eb04 0902 	add.w	r9, r4, r2
9001cab8:	5ca2      	ldrb	r2, [r4, r2]
9001caba:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
9001cabe:	2800      	cmp	r0, #0
9001cac0:	f000 80fe 	beq.w	9001ccc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
9001cac4:	f899 2001 	ldrb.w	r2, [r9, #1]
9001cac8:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
9001cacc:	9211      	str	r2, [sp, #68]	; 0x44
9001cace:	b151      	cbz	r1, 9001cae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001cad0:	eb09 0203 	add.w	r2, r9, r3
9001cad4:	f819 3003 	ldrb.w	r3, [r9, r3]
9001cad8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001cadc:	930f      	str	r3, [sp, #60]	; 0x3c
9001cade:	7853      	ldrb	r3, [r2, #1]
9001cae0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001cae4:	9312      	str	r3, [sp, #72]	; 0x48
9001cae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001cae8:	fb10 f201 	smulbb	r2, r0, r1
9001caec:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001caee:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001caf2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001caf6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001cafa:	10d2      	asrs	r2, r2, #3
9001cafc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001cb00:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
9001cb04:	ea4c 0c03 	orr.w	ip, ip, r3
9001cb08:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001cb0a:	041b      	lsls	r3, r3, #16
9001cb0c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001cb10:	4323      	orrs	r3, r4
9001cb12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001cb14:	4353      	muls	r3, r2
9001cb16:	fb09 330c 	mla	r3, r9, ip, r3
9001cb1a:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001cb1e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001cb22:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001cb26:	ea4c 0e0e 	orr.w	lr, ip, lr
9001cb2a:	f1c1 0c10 	rsb	ip, r1, #16
9001cb2e:	ebac 0c00 	sub.w	ip, ip, r0
9001cb32:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001cb36:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001cb3a:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001cb3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001cb40:	0418      	lsls	r0, r3, #16
9001cb42:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001cb46:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001cb4a:	4318      	orrs	r0, r3
9001cb4c:	fb02 c200 	mla	r2, r2, r0, ip
9001cb50:	8838      	ldrh	r0, [r7, #0]
9001cb52:	0d53      	lsrs	r3, r2, #21
9001cb54:	0952      	lsrs	r2, r2, #5
9001cb56:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001cb5a:	1201      	asrs	r1, r0, #8
9001cb5c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001cb60:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9001cb64:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001cb68:	00c0      	lsls	r0, r0, #3
9001cb6a:	431a      	orrs	r2, r3
9001cb6c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
9001cb70:	fb11 f104 	smulbb	r1, r1, r4
9001cb74:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001cb78:	b292      	uxth	r2, r2
9001cb7a:	fb1e fe04 	smulbb	lr, lr, r4
9001cb7e:	b2c0      	uxtb	r0, r0
9001cb80:	ea4f 2c22 	mov.w	ip, r2, asr #8
9001cb84:	fb10 f004 	smulbb	r0, r0, r4
9001cb88:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cb8c:	fb0c 1c03 	mla	ip, ip, r3, r1
9001cb90:	10d1      	asrs	r1, r2, #3
9001cb92:	00d2      	lsls	r2, r2, #3
9001cb94:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001cb98:	fa1f fc8c 	uxth.w	ip, ip
9001cb9c:	b2d2      	uxtb	r2, r2
9001cb9e:	fb01 e103 	mla	r1, r1, r3, lr
9001cba2:	fb02 0303 	mla	r3, r2, r3, r0
9001cba6:	b289      	uxth	r1, r1
9001cba8:	b29a      	uxth	r2, r3
9001cbaa:	f10c 0301 	add.w	r3, ip, #1
9001cbae:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001cbb2:	1c53      	adds	r3, r2, #1
9001cbb4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001cbb8:	1c4a      	adds	r2, r1, #1
9001cbba:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cbbe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001cbc2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001cbc6:	0949      	lsrs	r1, r1, #5
9001cbc8:	ea43 030c 	orr.w	r3, r3, ip
9001cbcc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001cbd0:	430b      	orrs	r3, r1
9001cbd2:	803b      	strh	r3, [r7, #0]
9001cbd4:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001cbd6:	3702      	adds	r7, #2
9001cbd8:	f10b 3bff 	add.w	fp, fp, #4294967295
9001cbdc:	449a      	add	sl, r3
9001cbde:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cbe0:	441d      	add	r5, r3
9001cbe2:	e742      	b.n	9001ca6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001cbe4:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001cbe6:	f108 0802 	add.w	r8, r8, #2
9001cbea:	449a      	add	sl, r3
9001cbec:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001cbee:	441d      	add	r5, r3
9001cbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cbf2:	3b01      	subs	r3, #1
9001cbf4:	9309      	str	r3, [sp, #36]	; 0x24
9001cbf6:	e718      	b.n	9001ca2a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001cbf8:	d023      	beq.n	9001cc42 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001cbfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cbfc:	9825      	ldr	r0, [sp, #148]	; 0x94
9001cbfe:	3b01      	subs	r3, #1
9001cc00:	fb00 a003 	mla	r0, r0, r3, sl
9001cc04:	1400      	asrs	r0, r0, #16
9001cc06:	f53f af2d 	bmi.w	9001ca64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001cc0a:	3901      	subs	r1, #1
9001cc0c:	4288      	cmp	r0, r1
9001cc0e:	f6bf af29 	bge.w	9001ca64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001cc12:	9926      	ldr	r1, [sp, #152]	; 0x98
9001cc14:	fb01 5303 	mla	r3, r1, r3, r5
9001cc18:	141b      	asrs	r3, r3, #16
9001cc1a:	f53f af23 	bmi.w	9001ca64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001cc1e:	3a01      	subs	r2, #1
9001cc20:	4293      	cmp	r3, r2
9001cc22:	f6bf af1f 	bge.w	9001ca64 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9001cc26:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001cc2a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
9001cc2e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9001cc32:	f1be 0f00 	cmp.w	lr, #0
9001cc36:	dc6c      	bgt.n	9001cd12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001cc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001cc3a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001cc3e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9001cc42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001cc44:	2b00      	cmp	r3, #0
9001cc46:	f340 810e 	ble.w	9001ce66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
9001cc4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001cc4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001cc50:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cc54:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cc58:	eef0 6a62 	vmov.f32	s13, s5
9001cc5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cc60:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cc64:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cc68:	ee16 aa90 	vmov	sl, s13
9001cc6c:	eef0 6a43 	vmov.f32	s13, s6
9001cc70:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cc74:	ee16 5a90 	vmov	r5, s13
9001cc78:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cc7c:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cc80:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cc84:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cc88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cc8c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cc90:	ee12 2a90 	vmov	r2, s5
9001cc94:	eef0 2a47 	vmov.f32	s5, s14
9001cc98:	fb92 f3f3 	sdiv	r3, r2, r3
9001cc9c:	ee13 2a10 	vmov	r2, s6
9001cca0:	9325      	str	r3, [sp, #148]	; 0x94
9001cca2:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001cca4:	eeb0 3a67 	vmov.f32	s6, s15
9001cca8:	fb92 f3f3 	sdiv	r3, r2, r3
9001ccac:	9326      	str	r3, [sp, #152]	; 0x98
9001ccae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001ccb0:	9a15      	ldr	r2, [sp, #84]	; 0x54
9001ccb2:	3b01      	subs	r3, #1
9001ccb4:	930c      	str	r3, [sp, #48]	; 0x30
9001ccb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001ccb8:	bf08      	it	eq
9001ccba:	4613      	moveq	r3, r2
9001ccbc:	9309      	str	r3, [sp, #36]	; 0x24
9001ccbe:	e6a6      	b.n	9001ca0e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001ccc0:	2900      	cmp	r1, #0
9001ccc2:	f43f af10 	beq.w	9001cae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001ccc6:	f819 3003 	ldrb.w	r3, [r9, r3]
9001ccca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001ccce:	930f      	str	r3, [sp, #60]	; 0x3c
9001ccd0:	e709      	b.n	9001cae6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001ccd2:	f112 0901 	adds.w	r9, r2, #1
9001ccd6:	f53f af7d 	bmi.w	9001cbd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001ccda:	454b      	cmp	r3, r9
9001ccdc:	f6ff af7a 	blt.w	9001cbd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001cce0:	f11c 0901 	adds.w	r9, ip, #1
9001cce4:	f53f af76 	bmi.w	9001cbd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001cce8:	45ce      	cmp	lr, r9
9001ccea:	f6ff af73 	blt.w	9001cbd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001ccee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001ccf0:	b21b      	sxth	r3, r3
9001ccf2:	9202      	str	r2, [sp, #8]
9001ccf4:	fa0f f28e 	sxth.w	r2, lr
9001ccf8:	9300      	str	r3, [sp, #0]
9001ccfa:	4633      	mov	r3, r6
9001ccfc:	9201      	str	r2, [sp, #4]
9001ccfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001cd00:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001cd04:	e9cd c003 	strd	ip, r0, [sp, #12]
9001cd08:	4639      	mov	r1, r7
9001cd0a:	9816      	ldr	r0, [sp, #88]	; 0x58
9001cd0c:	f7ff fd8e 	bl	9001c82c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
9001cd10:	e760      	b.n	9001cbd4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001cd12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001cd14:	ea4f 422a 	mov.w	r2, sl, asr #16
9001cd18:	1429      	asrs	r1, r5, #16
9001cd1a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001cd1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001cd20:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9001cd24:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001cd28:	fb03 2101 	mla	r1, r3, r1, r2
9001cd2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001cd2e:	440a      	add	r2, r1
9001cd30:	5c61      	ldrb	r1, [r4, r1]
9001cd32:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9001cd36:	f1bc 0f00 	cmp.w	ip, #0
9001cd3a:	f000 808c 	beq.w	9001ce56 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
9001cd3e:	7857      	ldrb	r7, [r2, #1]
9001cd40:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9001cd44:	9413      	str	r4, [sp, #76]	; 0x4c
9001cd46:	b140      	cbz	r0, 9001cd5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001cd48:	18d7      	adds	r7, r2, r3
9001cd4a:	5cd3      	ldrb	r3, [r2, r3]
9001cd4c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001cd50:	9310      	str	r3, [sp, #64]	; 0x40
9001cd52:	787b      	ldrb	r3, [r7, #1]
9001cd54:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001cd58:	9314      	str	r3, [sp, #80]	; 0x50
9001cd5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001cd5c:	fb1c f200 	smulbb	r2, ip, r0
9001cd60:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001cd62:	f10e 3eff 	add.w	lr, lr, #4294967295
9001cd66:	041f      	lsls	r7, r3, #16
9001cd68:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001cd6c:	10d2      	asrs	r2, r2, #3
9001cd6e:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9001cd72:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9001cd76:	431f      	orrs	r7, r3
9001cd78:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
9001cd7c:	9317      	str	r3, [sp, #92]	; 0x5c
9001cd7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001cd80:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001cd82:	041b      	lsls	r3, r3, #16
9001cd84:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001cd88:	ea43 030b 	orr.w	r3, r3, fp
9001cd8c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001cd90:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001cd94:	4353      	muls	r3, r2
9001cd96:	fb04 3707 	mla	r7, r4, r7, r3
9001cd9a:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001cd9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001cda0:	ea43 0b01 	orr.w	fp, r3, r1
9001cda4:	f1c0 0110 	rsb	r1, r0, #16
9001cda8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001cdaa:	eba1 0c0c 	sub.w	ip, r1, ip
9001cdae:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001cdb2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001cdb6:	fb0c 770b 	mla	r7, ip, fp, r7
9001cdba:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001cdbe:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
9001cdc2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001cdc6:	ea4c 0c0b 	orr.w	ip, ip, fp
9001cdca:	fb02 770c 	mla	r7, r2, ip, r7
9001cdce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9001cdd0:	0d79      	lsrs	r1, r7, #21
9001cdd2:	8812      	ldrh	r2, [r2, #0]
9001cdd4:	097f      	lsrs	r7, r7, #5
9001cdd6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001cdda:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001cdde:	430f      	orrs	r7, r1
9001cde0:	1211      	asrs	r1, r2, #8
9001cde2:	b2bb      	uxth	r3, r7
9001cde4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001cde8:	10d7      	asrs	r7, r2, #3
9001cdea:	fb11 f104 	smulbb	r1, r1, r4
9001cdee:	1218      	asrs	r0, r3, #8
9001cdf0:	00d2      	lsls	r2, r2, #3
9001cdf2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cdf6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001cdfa:	fb17 f704 	smulbb	r7, r7, r4
9001cdfe:	b2d2      	uxtb	r2, r2
9001ce00:	fb00 1009 	mla	r0, r0, r9, r1
9001ce04:	10d9      	asrs	r1, r3, #3
9001ce06:	fb12 f204 	smulbb	r2, r2, r4
9001ce0a:	00db      	lsls	r3, r3, #3
9001ce0c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001ce10:	b280      	uxth	r0, r0
9001ce12:	b2db      	uxtb	r3, r3
9001ce14:	fb01 7109 	mla	r1, r1, r9, r7
9001ce18:	fb03 2309 	mla	r3, r3, r9, r2
9001ce1c:	1c42      	adds	r2, r0, #1
9001ce1e:	b289      	uxth	r1, r1
9001ce20:	b29b      	uxth	r3, r3
9001ce22:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001ce26:	1c4f      	adds	r7, r1, #1
9001ce28:	1c5a      	adds	r2, r3, #1
9001ce2a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001ce2e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001ce32:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9001ce36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ce38:	0949      	lsrs	r1, r1, #5
9001ce3a:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001ce3e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001ce42:	4310      	orrs	r0, r2
9001ce44:	4308      	orrs	r0, r1
9001ce46:	f823 0b02 	strh.w	r0, [r3], #2
9001ce4a:	930e      	str	r3, [sp, #56]	; 0x38
9001ce4c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001ce4e:	449a      	add	sl, r3
9001ce50:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001ce52:	441d      	add	r5, r3
9001ce54:	e6ed      	b.n	9001cc32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9001ce56:	2800      	cmp	r0, #0
9001ce58:	f43f af7f 	beq.w	9001cd5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ce5c:	5cd3      	ldrb	r3, [r2, r3]
9001ce5e:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9001ce62:	9310      	str	r3, [sp, #64]	; 0x40
9001ce64:	e779      	b.n	9001cd5a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001ce66:	b019      	add	sp, #100	; 0x64
9001ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ce6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001ce6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001ce70:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9001ce74:	f9bd e020 	ldrsh.w	lr, [sp, #32]
9001ce78:	f1b8 0f00 	cmp.w	r8, #0
9001ce7c:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
9001ce80:	fb08 470e 	mla	r7, r8, lr, r4
9001ce84:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
9001ce88:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9001ce8c:	eb02 0907 	add.w	r9, r2, r7
9001ce90:	8808      	ldrh	r0, [r1, #0]
9001ce92:	db67      	blt.n	9001cf64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001ce94:	45c2      	cmp	sl, r8
9001ce96:	dd65      	ble.n	9001cf64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9001ce98:	2c00      	cmp	r4, #0
9001ce9a:	db61      	blt.n	9001cf60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001ce9c:	45a6      	cmp	lr, r4
9001ce9e:	dd5f      	ble.n	9001cf60 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
9001cea0:	5dd2      	ldrb	r2, [r2, r7]
9001cea2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9001cea6:	1c62      	adds	r2, r4, #1
9001cea8:	d45f      	bmi.n	9001cf6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001ceaa:	4596      	cmp	lr, r2
9001ceac:	dd5d      	ble.n	9001cf6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001ceae:	2d00      	cmp	r5, #0
9001ceb0:	d05b      	beq.n	9001cf6a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9001ceb2:	f899 2001 	ldrb.w	r2, [r9, #1]
9001ceb6:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
9001ceba:	f118 0801 	adds.w	r8, r8, #1
9001cebe:	d458      	bmi.n	9001cf72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001cec0:	45c2      	cmp	sl, r8
9001cec2:	dd56      	ble.n	9001cf72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001cec4:	2e00      	cmp	r6, #0
9001cec6:	d054      	beq.n	9001cf72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
9001cec8:	2c00      	cmp	r4, #0
9001ceca:	db50      	blt.n	9001cf6e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001cecc:	45a6      	cmp	lr, r4
9001cece:	dd4e      	ble.n	9001cf6e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
9001ced0:	f819 200e 	ldrb.w	r2, [r9, lr]
9001ced4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
9001ced8:	3401      	adds	r4, #1
9001ceda:	d407      	bmi.n	9001ceec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001cedc:	45a6      	cmp	lr, r4
9001cede:	dd05      	ble.n	9001ceec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001cee0:	b125      	cbz	r5, 9001ceec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
9001cee2:	44ce      	add	lr, r9
9001cee4:	f89e 0001 	ldrb.w	r0, [lr, #1]
9001cee8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
9001ceec:	fb15 f406 	smulbb	r4, r5, r6
9001cef0:	ea4f 430c 	mov.w	r3, ip, lsl #16
9001cef4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
9001cef8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001cefc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001cf00:	f3c4 04c7 	ubfx	r4, r4, #3, #8
9001cf04:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001cf08:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001cf0c:	ea43 0c0c 	orr.w	ip, r3, ip
9001cf10:	f1c6 0310 	rsb	r3, r6, #16
9001cf14:	ea4e 0707 	orr.w	r7, lr, r7
9001cf18:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
9001cf1c:	1b5b      	subs	r3, r3, r5
9001cf1e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9001cf22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001cf26:	437d      	muls	r5, r7
9001cf28:	fb03 5c0c 	mla	ip, r3, ip, r5
9001cf2c:	0403      	lsls	r3, r0, #16
9001cf2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001cf32:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001cf36:	4318      	orrs	r0, r3
9001cf38:	0413      	lsls	r3, r2, #16
9001cf3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001cf3e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001cf42:	fb04 c000 	mla	r0, r4, r0, ip
9001cf46:	4313      	orrs	r3, r2
9001cf48:	fb06 0003 	mla	r0, r6, r3, r0
9001cf4c:	0d43      	lsrs	r3, r0, #21
9001cf4e:	0940      	lsrs	r0, r0, #5
9001cf50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001cf54:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001cf58:	4318      	orrs	r0, r3
9001cf5a:	8008      	strh	r0, [r1, #0]
9001cf5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001cf60:	4684      	mov	ip, r0
9001cf62:	e7a0      	b.n	9001cea6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9001cf64:	4607      	mov	r7, r0
9001cf66:	4684      	mov	ip, r0
9001cf68:	e7a7      	b.n	9001ceba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001cf6a:	4607      	mov	r7, r0
9001cf6c:	e7a5      	b.n	9001ceba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
9001cf6e:	4602      	mov	r2, r0
9001cf70:	e7b2      	b.n	9001ced8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9001cf72:	4602      	mov	r2, r0
9001cf74:	e7ba      	b.n	9001ceec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9001cf76 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cf76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cf7a:	b093      	sub	sp, #76	; 0x4c
9001cf7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001cf80:	920f      	str	r2, [sp, #60]	; 0x3c
9001cf82:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001cf84:	9010      	str	r0, [sp, #64]	; 0x40
9001cf86:	9108      	str	r1, [sp, #32]
9001cf88:	6850      	ldr	r0, [r2, #4]
9001cf8a:	9306      	str	r3, [sp, #24]
9001cf8c:	6812      	ldr	r2, [r2, #0]
9001cf8e:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9001cf92:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9001cf96:	fb00 1303 	mla	r3, r0, r3, r1
9001cf9a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
9001cf9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001cfa0:	681b      	ldr	r3, [r3, #0]
9001cfa2:	9307      	str	r3, [sp, #28]
9001cfa4:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001cfa6:	685f      	ldr	r7, [r3, #4]
9001cfa8:	3704      	adds	r7, #4
9001cfaa:	9b08      	ldr	r3, [sp, #32]
9001cfac:	2b00      	cmp	r3, #0
9001cfae:	dc03      	bgt.n	9001cfb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
9001cfb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001cfb2:	2b00      	cmp	r3, #0
9001cfb4:	f340 81b2 	ble.w	9001d31c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001cfb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001cfba:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001cfbe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001cfc2:	1e48      	subs	r0, r1, #1
9001cfc4:	f102 3cff 	add.w	ip, r2, #4294967295
9001cfc8:	9b06      	ldr	r3, [sp, #24]
9001cfca:	2b00      	cmp	r3, #0
9001cfcc:	f340 80a9 	ble.w	9001d122 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001cfd0:	ea5f 4e24 	movs.w	lr, r4, asr #16
9001cfd4:	ea4f 4326 	mov.w	r3, r6, asr #16
9001cfd8:	d406      	bmi.n	9001cfe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001cfda:	4586      	cmp	lr, r0
9001cfdc:	da04      	bge.n	9001cfe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001cfde:	2b00      	cmp	r3, #0
9001cfe0:	db02      	blt.n	9001cfe8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001cfe2:	4563      	cmp	r3, ip
9001cfe4:	f2c0 809e 	blt.w	9001d124 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
9001cfe8:	f11e 0e01 	adds.w	lr, lr, #1
9001cfec:	f100 808f 	bmi.w	9001d10e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001cff0:	4571      	cmp	r1, lr
9001cff2:	f2c0 808c 	blt.w	9001d10e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001cff6:	3301      	adds	r3, #1
9001cff8:	f100 8089 	bmi.w	9001d10e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001cffc:	429a      	cmp	r2, r3
9001cffe:	f2c0 8086 	blt.w	9001d10e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
9001d002:	f8dd b018 	ldr.w	fp, [sp, #24]
9001d006:	46c8      	mov	r8, r9
9001d008:	f1bb 0f00 	cmp.w	fp, #0
9001d00c:	f340 80a6 	ble.w	9001d15c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001d010:	9a24      	ldr	r2, [sp, #144]	; 0x90
9001d012:	ea4f 4c26 	mov.w	ip, r6, asr #16
9001d016:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001d018:	f3c4 3003 	ubfx	r0, r4, #12, #4
9001d01c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9001d020:	1422      	asrs	r2, r4, #16
9001d022:	f3c6 3103 	ubfx	r1, r6, #12, #4
9001d026:	689b      	ldr	r3, [r3, #8]
9001d028:	f100 80e3 	bmi.w	9001d1f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001d02c:	f103 3aff 	add.w	sl, r3, #4294967295
9001d030:	4552      	cmp	r2, sl
9001d032:	f280 80de 	bge.w	9001d1f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001d036:	f1bc 0f00 	cmp.w	ip, #0
9001d03a:	f2c0 80da 	blt.w	9001d1f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001d03e:	f10e 3aff 	add.w	sl, lr, #4294967295
9001d042:	45d4      	cmp	ip, sl
9001d044:	f280 80d5 	bge.w	9001d1f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9001d048:	b21b      	sxth	r3, r3
9001d04a:	9d07      	ldr	r5, [sp, #28]
9001d04c:	fb0c 2203 	mla	r2, ip, r3, r2
9001d050:	eb05 0a02 	add.w	sl, r5, r2
9001d054:	5caa      	ldrb	r2, [r5, r2]
9001d056:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
9001d05a:	2800      	cmp	r0, #0
9001d05c:	f000 80c0 	beq.w	9001d1e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
9001d060:	f89a 2001 	ldrb.w	r2, [sl, #1]
9001d064:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
9001d068:	920b      	str	r2, [sp, #44]	; 0x2c
9001d06a:	b151      	cbz	r1, 9001d082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001d06c:	eb0a 0203 	add.w	r2, sl, r3
9001d070:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001d074:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001d078:	9309      	str	r3, [sp, #36]	; 0x24
9001d07a:	7853      	ldrb	r3, [r2, #1]
9001d07c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001d080:	930c      	str	r3, [sp, #48]	; 0x30
9001d082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d084:	fb10 f201 	smulbb	r2, r0, r1
9001d088:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9001d08a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001d08e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001d092:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001d096:	10d2      	asrs	r2, r2, #3
9001d098:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001d09c:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
9001d0a0:	ea4c 0c03 	orr.w	ip, ip, r3
9001d0a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d0a6:	041b      	lsls	r3, r3, #16
9001d0a8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001d0ac:	432b      	orrs	r3, r5
9001d0ae:	4353      	muls	r3, r2
9001d0b0:	fb0a 330c 	mla	r3, sl, ip, r3
9001d0b4:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
9001d0b8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001d0bc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001d0c0:	ea4c 0e0e 	orr.w	lr, ip, lr
9001d0c4:	f1c1 0c10 	rsb	ip, r1, #16
9001d0c8:	ebac 0c00 	sub.w	ip, ip, r0
9001d0cc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9001d0d0:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
9001d0d4:	fb0c 3c0e 	mla	ip, ip, lr, r3
9001d0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d0da:	0418      	lsls	r0, r3, #16
9001d0dc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001d0e0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9001d0e4:	4318      	orrs	r0, r3
9001d0e6:	fb02 c200 	mla	r2, r2, r0, ip
9001d0ea:	0d53      	lsrs	r3, r2, #21
9001d0ec:	0952      	lsrs	r2, r2, #5
9001d0ee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d0f2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001d0f6:	431a      	orrs	r2, r3
9001d0f8:	f8a8 2000 	strh.w	r2, [r8]
9001d0fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d0fe:	f108 0802 	add.w	r8, r8, #2
9001d102:	f10b 3bff 	add.w	fp, fp, #4294967295
9001d106:	441c      	add	r4, r3
9001d108:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d10a:	441e      	add	r6, r3
9001d10c:	e77c      	b.n	9001d008 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d10e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d110:	f109 0902 	add.w	r9, r9, #2
9001d114:	441c      	add	r4, r3
9001d116:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d118:	441e      	add	r6, r3
9001d11a:	9b06      	ldr	r3, [sp, #24]
9001d11c:	3b01      	subs	r3, #1
9001d11e:	9306      	str	r3, [sp, #24]
9001d120:	e752      	b.n	9001cfc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001d122:	d020      	beq.n	9001d166 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001d124:	9b06      	ldr	r3, [sp, #24]
9001d126:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001d128:	3b01      	subs	r3, #1
9001d12a:	fb00 4003 	mla	r0, r0, r3, r4
9001d12e:	1400      	asrs	r0, r0, #16
9001d130:	f53f af67 	bmi.w	9001d002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001d134:	3901      	subs	r1, #1
9001d136:	4288      	cmp	r0, r1
9001d138:	f6bf af63 	bge.w	9001d002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001d13c:	9920      	ldr	r1, [sp, #128]	; 0x80
9001d13e:	fb01 6303 	mla	r3, r1, r3, r6
9001d142:	141b      	asrs	r3, r3, #16
9001d144:	f53f af5d 	bmi.w	9001d002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001d148:	3a01      	subs	r2, #1
9001d14a:	4293      	cmp	r3, r2
9001d14c:	f6bf af59 	bge.w	9001d002 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001d150:	f8dd 8018 	ldr.w	r8, [sp, #24]
9001d154:	46ca      	mov	sl, r9
9001d156:	f1b8 0f00 	cmp.w	r8, #0
9001d15a:	dc67      	bgt.n	9001d22c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001d15c:	9b06      	ldr	r3, [sp, #24]
9001d15e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9001d162:	eb09 0945 	add.w	r9, r9, r5, lsl #1
9001d166:	9b08      	ldr	r3, [sp, #32]
9001d168:	2b00      	cmp	r3, #0
9001d16a:	f340 80d7 	ble.w	9001d31c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
9001d16e:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d172:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d174:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d178:	eeb0 6a62 	vmov.f32	s12, s5
9001d17c:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d180:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d184:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d188:	ee16 4a10 	vmov	r4, s12
9001d18c:	eeb0 6a43 	vmov.f32	s12, s6
9001d190:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d194:	ee16 6a10 	vmov	r6, s12
9001d198:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d19c:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d1a0:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d1a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d1a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d1ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d1b0:	ee12 2a90 	vmov	r2, s5
9001d1b4:	eef0 2a47 	vmov.f32	s5, s14
9001d1b8:	fb92 f3f3 	sdiv	r3, r2, r3
9001d1bc:	ee13 2a10 	vmov	r2, s6
9001d1c0:	931f      	str	r3, [sp, #124]	; 0x7c
9001d1c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d1c4:	eeb0 3a67 	vmov.f32	s6, s15
9001d1c8:	fb92 f3f3 	sdiv	r3, r2, r3
9001d1cc:	9320      	str	r3, [sp, #128]	; 0x80
9001d1ce:	9b08      	ldr	r3, [sp, #32]
9001d1d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001d1d2:	3b01      	subs	r3, #1
9001d1d4:	9308      	str	r3, [sp, #32]
9001d1d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001d1d8:	bf08      	it	eq
9001d1da:	4613      	moveq	r3, r2
9001d1dc:	9306      	str	r3, [sp, #24]
9001d1de:	e6e4      	b.n	9001cfaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
9001d1e0:	2900      	cmp	r1, #0
9001d1e2:	f43f af4e 	beq.w	9001d082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001d1e6:	f81a 3003 	ldrb.w	r3, [sl, r3]
9001d1ea:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001d1ee:	9309      	str	r3, [sp, #36]	; 0x24
9001d1f0:	e747      	b.n	9001d082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
9001d1f2:	f112 0a01 	adds.w	sl, r2, #1
9001d1f6:	d481      	bmi.n	9001d0fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d1f8:	4553      	cmp	r3, sl
9001d1fa:	f6ff af7f 	blt.w	9001d0fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d1fe:	f11c 0a01 	adds.w	sl, ip, #1
9001d202:	f53f af7b 	bmi.w	9001d0fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d206:	45d6      	cmp	lr, sl
9001d208:	f6ff af78 	blt.w	9001d0fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d20c:	b21b      	sxth	r3, r3
9001d20e:	e9cd 2c02 	strd	r2, ip, [sp, #8]
9001d212:	fa0f f28e 	sxth.w	r2, lr
9001d216:	9300      	str	r3, [sp, #0]
9001d218:	463b      	mov	r3, r7
9001d21a:	9201      	str	r2, [sp, #4]
9001d21c:	9a07      	ldr	r2, [sp, #28]
9001d21e:	e9cd 0104 	strd	r0, r1, [sp, #16]
9001d222:	4641      	mov	r1, r8
9001d224:	9810      	ldr	r0, [sp, #64]	; 0x40
9001d226:	f7ff fe21 	bl	9001ce6c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
9001d22a:	e767      	b.n	9001d0fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d22c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001d22e:	1422      	asrs	r2, r4, #16
9001d230:	1431      	asrs	r1, r6, #16
9001d232:	9d07      	ldr	r5, [sp, #28]
9001d234:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
9001d238:	f3c4 3e03 	ubfx	lr, r4, #12, #4
9001d23c:	f3c6 3003 	ubfx	r0, r6, #12, #4
9001d240:	fb03 2101 	mla	r1, r3, r1, r2
9001d244:	9a07      	ldr	r2, [sp, #28]
9001d246:	440a      	add	r2, r1
9001d248:	5c69      	ldrb	r1, [r5, r1]
9001d24a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
9001d24e:	f1be 0f00 	cmp.w	lr, #0
9001d252:	d05c      	beq.n	9001d30e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
9001d254:	f892 c001 	ldrb.w	ip, [r2, #1]
9001d258:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
9001d25c:	950d      	str	r5, [sp, #52]	; 0x34
9001d25e:	b150      	cbz	r0, 9001d276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001d260:	eb02 0c03 	add.w	ip, r2, r3
9001d264:	5cd3      	ldrb	r3, [r2, r3]
9001d266:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001d26a:	930a      	str	r3, [sp, #40]	; 0x28
9001d26c:	f89c 3001 	ldrb.w	r3, [ip, #1]
9001d270:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001d274:	930e      	str	r3, [sp, #56]	; 0x38
9001d276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001d278:	fb1e f200 	smulbb	r2, lr, r0
9001d27c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9001d27e:	f108 38ff 	add.w	r8, r8, #4294967295
9001d282:	ea4f 4c03 	mov.w	ip, r3, lsl #16
9001d286:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9001d28a:	10d2      	asrs	r2, r2, #3
9001d28c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
9001d290:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001d294:	ea4c 0c03 	orr.w	ip, ip, r3
9001d298:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
9001d29c:	9311      	str	r3, [sp, #68]	; 0x44
9001d29e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d2a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001d2a2:	041b      	lsls	r3, r3, #16
9001d2a4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9001d2a8:	ea43 030b 	orr.w	r3, r3, fp
9001d2ac:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9001d2b0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001d2b4:	4353      	muls	r3, r2
9001d2b6:	fb05 3c0c 	mla	ip, r5, ip, r3
9001d2ba:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
9001d2be:	ea43 0b01 	orr.w	fp, r3, r1
9001d2c2:	f1c0 0110 	rsb	r1, r0, #16
9001d2c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d2c8:	eba1 0e0e 	sub.w	lr, r1, lr
9001d2cc:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
9001d2d0:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9001d2d4:	fb0e cc0b 	mla	ip, lr, fp, ip
9001d2d8:	ea4f 4b03 	mov.w	fp, r3, lsl #16
9001d2dc:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
9001d2e0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001d2e4:	ea4b 0e0e 	orr.w	lr, fp, lr
9001d2e8:	fb02 cc0e 	mla	ip, r2, lr, ip
9001d2ec:	ea4f 535c 	mov.w	r3, ip, lsr #21
9001d2f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9001d2f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001d2f8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
9001d2fc:	ea43 0c0c 	orr.w	ip, r3, ip
9001d300:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d302:	441c      	add	r4, r3
9001d304:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d306:	f82a cb02 	strh.w	ip, [sl], #2
9001d30a:	441e      	add	r6, r3
9001d30c:	e723      	b.n	9001d156 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001d30e:	2800      	cmp	r0, #0
9001d310:	d0b1      	beq.n	9001d276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001d312:	5cd3      	ldrb	r3, [r2, r3]
9001d314:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
9001d318:	930a      	str	r3, [sp, #40]	; 0x28
9001d31a:	e7ac      	b.n	9001d276 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
9001d31c:	b013      	add	sp, #76	; 0x4c
9001d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d322 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
9001d322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d326:	880d      	ldrh	r5, [r1, #0]
9001d328:	b087      	sub	sp, #28
9001d32a:	10ef      	asrs	r7, r5, #3
9001d32c:	9103      	str	r1, [sp, #12]
9001d32e:	ea4f 2a25 	mov.w	sl, r5, asr #8
9001d332:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
9001d336:	00ed      	lsls	r5, r5, #3
9001d338:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d33c:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
9001d340:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
9001d344:	b2ed      	uxtb	r5, r5
9001d346:	9701      	str	r7, [sp, #4]
9001d348:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
9001d34c:	9502      	str	r5, [sp, #8]
9001d34e:	9d01      	ldr	r5, [sp, #4]
9001d350:	9902      	ldr	r1, [sp, #8]
9001d352:	022d      	lsls	r5, r5, #8
9001d354:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
9001d358:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
9001d35c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
9001d360:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
9001d364:	430d      	orrs	r5, r1
9001d366:	fb06 0709 	mla	r7, r6, r9, r0
9001d36a:	2e00      	cmp	r6, #0
9001d36c:	9505      	str	r5, [sp, #20]
9001d36e:	eb02 0c07 	add.w	ip, r2, r7
9001d372:	f2c0 80b6 	blt.w	9001d4e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001d376:	45b3      	cmp	fp, r6
9001d378:	f340 80b3 	ble.w	9001d4e2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
9001d37c:	2800      	cmp	r0, #0
9001d37e:	f2c0 80ae 	blt.w	9001d4de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001d382:	4581      	cmp	r9, r0
9001d384:	f340 80ab 	ble.w	9001d4de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
9001d388:	5dd7      	ldrb	r7, [r2, r7]
9001d38a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d38e:	441f      	add	r7, r3
9001d390:	1c42      	adds	r2, r0, #1
9001d392:	f100 80a9 	bmi.w	9001d4e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001d396:	4591      	cmp	r9, r2
9001d398:	f340 80a6 	ble.w	9001d4e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001d39c:	2c00      	cmp	r4, #0
9001d39e:	f000 80a3 	beq.w	9001d4e8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
9001d3a2:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001d3a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001d3aa:	441d      	add	r5, r3
9001d3ac:	3601      	adds	r6, #1
9001d3ae:	f100 809f 	bmi.w	9001d4f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001d3b2:	45b3      	cmp	fp, r6
9001d3b4:	f340 809c 	ble.w	9001d4f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001d3b8:	f1be 0f00 	cmp.w	lr, #0
9001d3bc:	f000 8098 	beq.w	9001d4f0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
9001d3c0:	2800      	cmp	r0, #0
9001d3c2:	f2c0 8093 	blt.w	9001d4ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001d3c6:	4581      	cmp	r9, r0
9001d3c8:	f340 8090 	ble.w	9001d4ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
9001d3cc:	f81c 6009 	ldrb.w	r6, [ip, r9]
9001d3d0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001d3d4:	441e      	add	r6, r3
9001d3d6:	3001      	adds	r0, #1
9001d3d8:	f100 808d 	bmi.w	9001d4f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001d3dc:	4581      	cmp	r9, r0
9001d3de:	f340 808a 	ble.w	9001d4f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001d3e2:	2c00      	cmp	r4, #0
9001d3e4:	f000 8087 	beq.w	9001d4f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
9001d3e8:	44e1      	add	r9, ip
9001d3ea:	f899 2001 	ldrb.w	r2, [r9, #1]
9001d3ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d3f2:	4413      	add	r3, r2
9001d3f4:	b2a4      	uxth	r4, r4
9001d3f6:	f897 c002 	ldrb.w	ip, [r7, #2]
9001d3fa:	fa1f fe8e 	uxth.w	lr, lr
9001d3fe:	9901      	ldr	r1, [sp, #4]
9001d400:	fb04 fb0e 	mul.w	fp, r4, lr
9001d404:	0124      	lsls	r4, r4, #4
9001d406:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
9001d40a:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
9001d40e:	eba4 040b 	sub.w	r4, r4, fp
9001d412:	fa1f f08e 	uxth.w	r0, lr
9001d416:	b2a2      	uxth	r2, r4
9001d418:	78ac      	ldrb	r4, [r5, #2]
9001d41a:	eba9 0900 	sub.w	r9, r9, r0
9001d41e:	fa1f fe88 	uxth.w	lr, r8
9001d422:	4354      	muls	r4, r2
9001d424:	ea6f 0808 	mvn.w	r8, r8
9001d428:	fa1f f989 	uxth.w	r9, r9
9001d42c:	fa5f f888 	uxtb.w	r8, r8
9001d430:	fb09 440c 	mla	r4, r9, ip, r4
9001d434:	f896 c002 	ldrb.w	ip, [r6, #2]
9001d438:	fb1a fa08 	smulbb	sl, sl, r8
9001d43c:	fb00 440c 	mla	r4, r0, ip, r4
9001d440:	f893 c002 	ldrb.w	ip, [r3, #2]
9001d444:	fb0b 4c0c 	mla	ip, fp, ip, r4
9001d448:	787c      	ldrb	r4, [r7, #1]
9001d44a:	783f      	ldrb	r7, [r7, #0]
9001d44c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001d450:	fb0c ac0e 	mla	ip, ip, lr, sl
9001d454:	f895 a001 	ldrb.w	sl, [r5, #1]
9001d458:	782d      	ldrb	r5, [r5, #0]
9001d45a:	fb02 fa0a 	mul.w	sl, r2, sl
9001d45e:	fa1f fc8c 	uxth.w	ip, ip
9001d462:	436a      	muls	r2, r5
9001d464:	7835      	ldrb	r5, [r6, #0]
9001d466:	fb09 aa04 	mla	sl, r9, r4, sl
9001d46a:	7874      	ldrb	r4, [r6, #1]
9001d46c:	fb09 2207 	mla	r2, r9, r7, r2
9001d470:	fb00 aa04 	mla	sl, r0, r4, sl
9001d474:	785c      	ldrb	r4, [r3, #1]
9001d476:	fb00 2005 	mla	r0, r0, r5, r2
9001d47a:	781b      	ldrb	r3, [r3, #0]
9001d47c:	fb0b a404 	mla	r4, fp, r4, sl
9001d480:	fb11 fa08 	smulbb	sl, r1, r8
9001d484:	fb0b 0b03 	mla	fp, fp, r3, r0
9001d488:	9b02      	ldr	r3, [sp, #8]
9001d48a:	f3c4 2407 	ubfx	r4, r4, #8, #8
9001d48e:	fb13 f808 	smulbb	r8, r3, r8
9001d492:	f3cb 2b07 	ubfx	fp, fp, #8, #8
9001d496:	fb04 a40e 	mla	r4, r4, lr, sl
9001d49a:	f10c 0301 	add.w	r3, ip, #1
9001d49e:	fb0b 8e0e 	mla	lr, fp, lr, r8
9001d4a2:	b2a4      	uxth	r4, r4
9001d4a4:	fa1f fe8e 	uxth.w	lr, lr
9001d4a8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9001d4ac:	f104 0a01 	add.w	sl, r4, #1
9001d4b0:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
9001d4b4:	f10e 0c01 	add.w	ip, lr, #1
9001d4b8:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001d4bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001d4c0:	0964      	lsrs	r4, r4, #5
9001d4c2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001d4c6:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001d4ca:	ea4c 0c03 	orr.w	ip, ip, r3
9001d4ce:	9b03      	ldr	r3, [sp, #12]
9001d4d0:	ea4c 0c04 	orr.w	ip, ip, r4
9001d4d4:	f8a3 c000 	strh.w	ip, [r3]
9001d4d8:	b007      	add	sp, #28
9001d4da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d4de:	af05      	add	r7, sp, #20
9001d4e0:	e756      	b.n	9001d390 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
9001d4e2:	ad05      	add	r5, sp, #20
9001d4e4:	462f      	mov	r7, r5
9001d4e6:	e761      	b.n	9001d3ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001d4e8:	ad05      	add	r5, sp, #20
9001d4ea:	e75f      	b.n	9001d3ac <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
9001d4ec:	ae05      	add	r6, sp, #20
9001d4ee:	e772      	b.n	9001d3d6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
9001d4f0:	ab05      	add	r3, sp, #20
9001d4f2:	461e      	mov	r6, r3
9001d4f4:	e77e      	b.n	9001d3f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
9001d4f6:	ab05      	add	r3, sp, #20
9001d4f8:	e77c      	b.n	9001d3f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

9001d4fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d4fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d4fe:	b095      	sub	sp, #84	; 0x54
9001d500:	9212      	str	r2, [sp, #72]	; 0x48
9001d502:	9309      	str	r3, [sp, #36]	; 0x24
9001d504:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001d506:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
9001d50a:	9013      	str	r0, [sp, #76]	; 0x4c
9001d50c:	930f      	str	r3, [sp, #60]	; 0x3c
9001d50e:	6850      	ldr	r0, [r2, #4]
9001d510:	910e      	str	r1, [sp, #56]	; 0x38
9001d512:	6812      	ldr	r2, [r2, #0]
9001d514:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
9001d518:	fb00 1303 	mla	r3, r0, r3, r1
9001d51c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d520:	930a      	str	r3, [sp, #40]	; 0x28
9001d522:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001d524:	681b      	ldr	r3, [r3, #0]
9001d526:	930d      	str	r3, [sp, #52]	; 0x34
9001d528:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001d52a:	685c      	ldr	r4, [r3, #4]
9001d52c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001d52e:	3404      	adds	r4, #4
9001d530:	43db      	mvns	r3, r3
9001d532:	b2db      	uxtb	r3, r3
9001d534:	930b      	str	r3, [sp, #44]	; 0x2c
9001d536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d538:	2b00      	cmp	r3, #0
9001d53a:	dc03      	bgt.n	9001d544 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d53c:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001d53e:	2b00      	cmp	r3, #0
9001d540:	f340 8255 	ble.w	9001d9ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001d544:	9b26      	ldr	r3, [sp, #152]	; 0x98
9001d546:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001d54a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001d54e:	1e48      	subs	r0, r1, #1
9001d550:	1e55      	subs	r5, r2, #1
9001d552:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d554:	2b00      	cmp	r3, #0
9001d556:	f340 80f9 	ble.w	9001d74c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001d55a:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
9001d55c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d55e:	1436      	asrs	r6, r6, #16
9001d560:	ea4f 4323 	mov.w	r3, r3, asr #16
9001d564:	d406      	bmi.n	9001d574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001d566:	4286      	cmp	r6, r0
9001d568:	da04      	bge.n	9001d574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001d56a:	2b00      	cmp	r3, #0
9001d56c:	db02      	blt.n	9001d574 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001d56e:	42ab      	cmp	r3, r5
9001d570:	f2c0 80ed 	blt.w	9001d74e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
9001d574:	3601      	adds	r6, #1
9001d576:	f100 80da 	bmi.w	9001d72e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001d57a:	42b1      	cmp	r1, r6
9001d57c:	f2c0 80d7 	blt.w	9001d72e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001d580:	3301      	adds	r3, #1
9001d582:	f100 80d4 	bmi.w	9001d72e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001d586:	429a      	cmp	r2, r3
9001d588:	f2c0 80d1 	blt.w	9001d72e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
9001d58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d58e:	9311      	str	r3, [sp, #68]	; 0x44
9001d590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d592:	930c      	str	r3, [sp, #48]	; 0x30
9001d594:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d596:	2b00      	cmp	r3, #0
9001d598:	f340 80fa 	ble.w	9001d790 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001d59c:	9826      	ldr	r0, [sp, #152]	; 0x98
9001d59e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d5a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d5a2:	68c6      	ldr	r6, [r0, #12]
9001d5a4:	141d      	asrs	r5, r3, #16
9001d5a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
9001d5a8:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001d5ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d5ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001d5b0:	1400      	asrs	r0, r0, #16
9001d5b2:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001d5b6:	6892      	ldr	r2, [r2, #8]
9001d5b8:	f100 813e 	bmi.w	9001d838 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001d5bc:	1e57      	subs	r7, r2, #1
9001d5be:	42b8      	cmp	r0, r7
9001d5c0:	f280 813a 	bge.w	9001d838 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001d5c4:	2d00      	cmp	r5, #0
9001d5c6:	f2c0 8137 	blt.w	9001d838 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001d5ca:	1e77      	subs	r7, r6, #1
9001d5cc:	42bd      	cmp	r5, r7
9001d5ce:	f280 8133 	bge.w	9001d838 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
9001d5d2:	b212      	sxth	r2, r2
9001d5d4:	fb05 0002 	mla	r0, r5, r2, r0
9001d5d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001d5da:	f815 a000 	ldrb.w	sl, [r5, r0]
9001d5de:	182e      	adds	r6, r5, r0
9001d5e0:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
9001d5e4:	eb04 050a 	add.w	r5, r4, sl
9001d5e8:	2b00      	cmp	r3, #0
9001d5ea:	f000 8117 	beq.w	9001d81c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
9001d5ee:	f896 c001 	ldrb.w	ip, [r6, #1]
9001d5f2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001d5f6:	44a4      	add	ip, r4
9001d5f8:	2900      	cmp	r1, #0
9001d5fa:	f000 8117 	beq.w	9001d82c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
9001d5fe:	18b0      	adds	r0, r6, r2
9001d600:	5cb2      	ldrb	r2, [r6, r2]
9001d602:	7840      	ldrb	r0, [r0, #1]
9001d604:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d608:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d60c:	4422      	add	r2, r4
9001d60e:	4420      	add	r0, r4
9001d610:	b29b      	uxth	r3, r3
9001d612:	f89c 7002 	ldrb.w	r7, [ip, #2]
9001d616:	b289      	uxth	r1, r1
9001d618:	f895 b002 	ldrb.w	fp, [r5, #2]
9001d61c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001d61e:	fb03 f901 	mul.w	r9, r3, r1
9001d622:	011b      	lsls	r3, r3, #4
9001d624:	f8b6 e000 	ldrh.w	lr, [r6]
9001d628:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001d62c:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
9001d630:	eba3 0309 	sub.w	r3, r3, r9
9001d634:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
9001d638:	b289      	uxth	r1, r1
9001d63a:	f814 a00a 	ldrb.w	sl, [r4, sl]
9001d63e:	b29b      	uxth	r3, r3
9001d640:	eba8 0801 	sub.w	r8, r8, r1
9001d644:	435f      	muls	r7, r3
9001d646:	fa1f f888 	uxth.w	r8, r8
9001d64a:	9310      	str	r3, [sp, #64]	; 0x40
9001d64c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d64e:	fb08 770b 	mla	r7, r8, fp, r7
9001d652:	f892 b002 	ldrb.w	fp, [r2, #2]
9001d656:	fb01 770b 	mla	r7, r1, fp, r7
9001d65a:	f890 b002 	ldrb.w	fp, [r0, #2]
9001d65e:	fb09 770b 	mla	r7, r9, fp, r7
9001d662:	ea4f 2b2e 	mov.w	fp, lr, asr #8
9001d666:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001d66a:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001d66e:	fb1b fb03 	smulbb	fp, fp, r3
9001d672:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d674:	fb07 b706 	mla	r7, r7, r6, fp
9001d678:	f895 b001 	ldrb.w	fp, [r5, #1]
9001d67c:	f89c 5001 	ldrb.w	r5, [ip, #1]
9001d680:	f89c c000 	ldrb.w	ip, [ip]
9001d684:	b2bf      	uxth	r7, r7
9001d686:	435d      	muls	r5, r3
9001d688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d68a:	fb08 550b 	mla	r5, r8, fp, r5
9001d68e:	f892 b001 	ldrb.w	fp, [r2, #1]
9001d692:	fb01 550b 	mla	r5, r1, fp, r5
9001d696:	f890 b001 	ldrb.w	fp, [r0, #1]
9001d69a:	fb09 550b 	mla	r5, r9, fp, r5
9001d69e:	ea4f 0bee 	mov.w	fp, lr, asr #3
9001d6a2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d6a6:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001d6aa:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001d6ae:	fa5f fe8e 	uxtb.w	lr, lr
9001d6b2:	fb1b fb03 	smulbb	fp, fp, r3
9001d6b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d6b8:	fb03 f30c 	mul.w	r3, r3, ip
9001d6bc:	f892 c000 	ldrb.w	ip, [r2]
9001d6c0:	fb05 b506 	mla	r5, r5, r6, fp
9001d6c4:	fb08 330a 	mla	r3, r8, sl, r3
9001d6c8:	b2ad      	uxth	r5, r5
9001d6ca:	fb01 330c 	mla	r3, r1, ip, r3
9001d6ce:	f890 c000 	ldrb.w	ip, [r0]
9001d6d2:	f105 0b01 	add.w	fp, r5, #1
9001d6d6:	fb09 3c0c 	mla	ip, r9, ip, r3
9001d6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d6dc:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001d6e0:	fb1e fe03 	smulbb	lr, lr, r3
9001d6e4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
9001d6e8:	1c7b      	adds	r3, r7, #1
9001d6ea:	096d      	lsrs	r5, r5, #5
9001d6ec:	fb0c e606 	mla	r6, ip, r6, lr
9001d6f0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001d6f4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d6f8:	b2b6      	uxth	r6, r6
9001d6fa:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
9001d6fe:	1c77      	adds	r7, r6, #1
9001d700:	eb07 2716 	add.w	r7, r7, r6, lsr #8
9001d704:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001d708:	431f      	orrs	r7, r3
9001d70a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d70c:	433d      	orrs	r5, r7
9001d70e:	801d      	strh	r5, [r3, #0]
9001d710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d712:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001d714:	3302      	adds	r3, #2
9001d716:	930c      	str	r3, [sp, #48]	; 0x30
9001d718:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d71a:	4413      	add	r3, r2
9001d71c:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d71e:	931f      	str	r3, [sp, #124]	; 0x7c
9001d720:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d722:	4413      	add	r3, r2
9001d724:	9320      	str	r3, [sp, #128]	; 0x80
9001d726:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d728:	3b01      	subs	r3, #1
9001d72a:	9311      	str	r3, [sp, #68]	; 0x44
9001d72c:	e732      	b.n	9001d594 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001d72e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d730:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001d732:	4433      	add	r3, r6
9001d734:	9e22      	ldr	r6, [sp, #136]	; 0x88
9001d736:	931f      	str	r3, [sp, #124]	; 0x7c
9001d738:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d73a:	4433      	add	r3, r6
9001d73c:	9320      	str	r3, [sp, #128]	; 0x80
9001d73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d740:	3b01      	subs	r3, #1
9001d742:	9309      	str	r3, [sp, #36]	; 0x24
9001d744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d746:	3302      	adds	r3, #2
9001d748:	930a      	str	r3, [sp, #40]	; 0x28
9001d74a:	e702      	b.n	9001d552 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001d74c:	d027      	beq.n	9001d79e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
9001d74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d750:	9821      	ldr	r0, [sp, #132]	; 0x84
9001d752:	3b01      	subs	r3, #1
9001d754:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001d756:	fb00 5003 	mla	r0, r0, r3, r5
9001d75a:	1400      	asrs	r0, r0, #16
9001d75c:	f53f af16 	bmi.w	9001d58c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d760:	3901      	subs	r1, #1
9001d762:	4288      	cmp	r0, r1
9001d764:	f6bf af12 	bge.w	9001d58c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d768:	9922      	ldr	r1, [sp, #136]	; 0x88
9001d76a:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d76c:	fb01 0303 	mla	r3, r1, r3, r0
9001d770:	141b      	asrs	r3, r3, #16
9001d772:	f53f af0b 	bmi.w	9001d58c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d776:	3a01      	subs	r2, #1
9001d778:	4293      	cmp	r3, r2
9001d77a:	f6bf af07 	bge.w	9001d58c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d780:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9001d784:	9311      	str	r3, [sp, #68]	; 0x44
9001d786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001d788:	930c      	str	r3, [sp, #48]	; 0x30
9001d78a:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d78c:	2b00      	cmp	r3, #0
9001d78e:	dc70      	bgt.n	9001d872 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9001d790:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001d792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001d794:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d798:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001d79c:	930a      	str	r3, [sp, #40]	; 0x28
9001d79e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d7a0:	2b00      	cmp	r3, #0
9001d7a2:	f340 8124 	ble.w	9001d9ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9001d7a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001d7aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001d7ac:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d7b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d7b4:	eef0 6a62 	vmov.f32	s13, s5
9001d7b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001d7bc:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d7c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d7c4:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
9001d7c8:	eef0 6a43 	vmov.f32	s13, s6
9001d7cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001d7d0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
9001d7d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d7d8:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d7dc:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d7e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d7e4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d7e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d7ec:	ee12 2a90 	vmov	r2, s5
9001d7f0:	eef0 2a47 	vmov.f32	s5, s14
9001d7f4:	fb92 f3f3 	sdiv	r3, r2, r3
9001d7f8:	ee13 2a10 	vmov	r2, s6
9001d7fc:	9321      	str	r3, [sp, #132]	; 0x84
9001d7fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001d800:	eeb0 3a67 	vmov.f32	s6, s15
9001d804:	fb92 f3f3 	sdiv	r3, r2, r3
9001d808:	9322      	str	r3, [sp, #136]	; 0x88
9001d80a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d80c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d80e:	3b01      	subs	r3, #1
9001d810:	930e      	str	r3, [sp, #56]	; 0x38
9001d812:	9b1e      	ldr	r3, [sp, #120]	; 0x78
9001d814:	bf08      	it	eq
9001d816:	4613      	moveq	r3, r2
9001d818:	9309      	str	r3, [sp, #36]	; 0x24
9001d81a:	e68c      	b.n	9001d536 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d81c:	b149      	cbz	r1, 9001d832 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
9001d81e:	5cb2      	ldrb	r2, [r6, r2]
9001d820:	4628      	mov	r0, r5
9001d822:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d826:	4422      	add	r2, r4
9001d828:	46ac      	mov	ip, r5
9001d82a:	e6f1      	b.n	9001d610 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d82c:	4628      	mov	r0, r5
9001d82e:	462a      	mov	r2, r5
9001d830:	e6ee      	b.n	9001d610 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d832:	4628      	mov	r0, r5
9001d834:	462a      	mov	r2, r5
9001d836:	e7f7      	b.n	9001d828 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
9001d838:	1c47      	adds	r7, r0, #1
9001d83a:	f53f af69 	bmi.w	9001d710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d83e:	42ba      	cmp	r2, r7
9001d840:	f6ff af66 	blt.w	9001d710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d844:	1c6f      	adds	r7, r5, #1
9001d846:	f53f af63 	bmi.w	9001d710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d84a:	42be      	cmp	r6, r7
9001d84c:	f6ff af60 	blt.w	9001d710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d850:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001d852:	b236      	sxth	r6, r6
9001d854:	b212      	sxth	r2, r2
9001d856:	9002      	str	r0, [sp, #8]
9001d858:	9601      	str	r6, [sp, #4]
9001d85a:	9200      	str	r2, [sp, #0]
9001d85c:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d85e:	e9cd 1705 	strd	r1, r7, [sp, #20]
9001d862:	e9cd 5303 	strd	r5, r3, [sp, #12]
9001d866:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
9001d86a:	4623      	mov	r3, r4
9001d86c:	f7ff fd59 	bl	9001d322 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
9001d870:	e74e      	b.n	9001d710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9001d872:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001d874:	9820      	ldr	r0, [sp, #128]	; 0x80
9001d876:	f3c2 3103 	ubfx	r1, r2, #12, #4
9001d87a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9001d87c:	9a26      	ldr	r2, [sp, #152]	; 0x98
9001d87e:	1400      	asrs	r0, r0, #16
9001d880:	142d      	asrs	r5, r5, #16
9001d882:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d884:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001d888:	f3c3 3303 	ubfx	r3, r3, #12, #4
9001d88c:	fb02 5000 	mla	r0, r2, r0, r5
9001d890:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9001d892:	f815 9000 	ldrb.w	r9, [r5, r0]
9001d896:	182e      	adds	r6, r5, r0
9001d898:	eb09 0949 	add.w	r9, r9, r9, lsl #1
9001d89c:	eb04 0509 	add.w	r5, r4, r9
9001d8a0:	2b00      	cmp	r3, #0
9001d8a2:	f000 8096 	beq.w	9001d9d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9001d8a6:	7877      	ldrb	r7, [r6, #1]
9001d8a8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001d8ac:	4427      	add	r7, r4
9001d8ae:	2900      	cmp	r1, #0
9001d8b0:	f000 8097 	beq.w	9001d9e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9001d8b4:	18b0      	adds	r0, r6, r2
9001d8b6:	5cb2      	ldrb	r2, [r6, r2]
9001d8b8:	7840      	ldrb	r0, [r0, #1]
9001d8ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d8be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001d8c2:	4422      	add	r2, r4
9001d8c4:	4420      	add	r0, r4
9001d8c6:	b29b      	uxth	r3, r3
9001d8c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
9001d8ca:	b289      	uxth	r1, r1
9001d8cc:	f895 b002 	ldrb.w	fp, [r5, #2]
9001d8d0:	f8b6 c000 	ldrh.w	ip, [r6]
9001d8d4:	fb03 f801 	mul.w	r8, r3, r1
9001d8d8:	011b      	lsls	r3, r3, #4
9001d8da:	78be      	ldrb	r6, [r7, #2]
9001d8dc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
9001d8e0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001d8e4:	eba3 0308 	sub.w	r3, r3, r8
9001d8e8:	f814 9009 	ldrb.w	r9, [r4, r9]
9001d8ec:	b289      	uxth	r1, r1
9001d8ee:	b29b      	uxth	r3, r3
9001d8f0:	ebae 0e01 	sub.w	lr, lr, r1
9001d8f4:	435e      	muls	r6, r3
9001d8f6:	fa1f fe8e 	uxth.w	lr, lr
9001d8fa:	9310      	str	r3, [sp, #64]	; 0x40
9001d8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d8fe:	fb0e 660b 	mla	r6, lr, fp, r6
9001d902:	f892 b002 	ldrb.w	fp, [r2, #2]
9001d906:	fb01 660b 	mla	r6, r1, fp, r6
9001d90a:	f890 b002 	ldrb.w	fp, [r0, #2]
9001d90e:	fb08 660b 	mla	r6, r8, fp, r6
9001d912:	ea4f 2b2c 	mov.w	fp, ip, asr #8
9001d916:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
9001d91a:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001d91e:	fb1b fb03 	smulbb	fp, fp, r3
9001d922:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d924:	fb06 b60a 	mla	r6, r6, sl, fp
9001d928:	f895 b001 	ldrb.w	fp, [r5, #1]
9001d92c:	787d      	ldrb	r5, [r7, #1]
9001d92e:	783f      	ldrb	r7, [r7, #0]
9001d930:	b2b6      	uxth	r6, r6
9001d932:	435d      	muls	r5, r3
9001d934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d936:	fb0e 550b 	mla	r5, lr, fp, r5
9001d93a:	f892 b001 	ldrb.w	fp, [r2, #1]
9001d93e:	fb01 550b 	mla	r5, r1, fp, r5
9001d942:	f890 b001 	ldrb.w	fp, [r0, #1]
9001d946:	fb08 550b 	mla	r5, r8, fp, r5
9001d94a:	ea4f 0bec 	mov.w	fp, ip, asr #3
9001d94e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d952:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001d956:	f3c5 2507 	ubfx	r5, r5, #8, #8
9001d95a:	fa5f fc8c 	uxtb.w	ip, ip
9001d95e:	fb1b fb03 	smulbb	fp, fp, r3
9001d962:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d964:	437b      	muls	r3, r7
9001d966:	7817      	ldrb	r7, [r2, #0]
9001d968:	fb05 b50a 	mla	r5, r5, sl, fp
9001d96c:	fb0e 3309 	mla	r3, lr, r9, r3
9001d970:	b2ad      	uxth	r5, r5
9001d972:	fb01 3307 	mla	r3, r1, r7, r3
9001d976:	7807      	ldrb	r7, [r0, #0]
9001d978:	f105 0b01 	add.w	fp, r5, #1
9001d97c:	fb08 3707 	mla	r7, r8, r7, r3
9001d980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001d982:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9001d986:	fb1c fc03 	smulbb	ip, ip, r3
9001d98a:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001d98e:	1c73      	adds	r3, r6, #1
9001d990:	096d      	lsrs	r5, r5, #5
9001d992:	fb07 c70a 	mla	r7, r7, sl, ip
9001d996:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001d99a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d99e:	b2bf      	uxth	r7, r7
9001d9a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001d9a2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001d9a6:	1c7a      	adds	r2, r7, #1
9001d9a8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9001d9ac:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001d9b0:	4316      	orrs	r6, r2
9001d9b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
9001d9b4:	432e      	orrs	r6, r5
9001d9b6:	f823 6b02 	strh.w	r6, [r3], #2
9001d9ba:	930c      	str	r3, [sp, #48]	; 0x30
9001d9bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9001d9be:	4413      	add	r3, r2
9001d9c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001d9c2:	931f      	str	r3, [sp, #124]	; 0x7c
9001d9c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001d9c6:	4413      	add	r3, r2
9001d9c8:	9320      	str	r3, [sp, #128]	; 0x80
9001d9ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001d9cc:	3b01      	subs	r3, #1
9001d9ce:	9311      	str	r3, [sp, #68]	; 0x44
9001d9d0:	e6db      	b.n	9001d78a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
9001d9d2:	b149      	cbz	r1, 9001d9e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
9001d9d4:	5cb2      	ldrb	r2, [r6, r2]
9001d9d6:	4628      	mov	r0, r5
9001d9d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001d9dc:	4422      	add	r2, r4
9001d9de:	462f      	mov	r7, r5
9001d9e0:	e771      	b.n	9001d8c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d9e2:	4628      	mov	r0, r5
9001d9e4:	462a      	mov	r2, r5
9001d9e6:	e76e      	b.n	9001d8c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
9001d9e8:	4628      	mov	r0, r5
9001d9ea:	462a      	mov	r2, r5
9001d9ec:	e7f7      	b.n	9001d9de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9001d9ee:	b015      	add	sp, #84	; 0x54
9001d9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001d9f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
9001d9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d9f8:	880f      	ldrh	r7, [r1, #0]
9001d9fa:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
9001d9fe:	023c      	lsls	r4, r7, #8
9001da00:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
9001da04:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
9001da08:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
9001da0c:	017c      	lsls	r4, r7, #5
9001da0e:	00ff      	lsls	r7, r7, #3
9001da10:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9001da14:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
9001da18:	b2ff      	uxtb	r7, r7
9001da1a:	ea4b 0404 	orr.w	r4, fp, r4
9001da1e:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9001da22:	4327      	orrs	r7, r4
9001da24:	fb05 ca0e 	mla	sl, r5, lr, ip
9001da28:	2d00      	cmp	r5, #0
9001da2a:	9701      	str	r7, [sp, #4]
9001da2c:	eb02 080a 	add.w	r8, r2, sl
9001da30:	db7e      	blt.n	9001db30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001da32:	45a9      	cmp	r9, r5
9001da34:	dd7c      	ble.n	9001db30 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9001da36:	f1bc 0f00 	cmp.w	ip, #0
9001da3a:	db77      	blt.n	9001db2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001da3c:	45e6      	cmp	lr, ip
9001da3e:	dd75      	ble.n	9001db2c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
9001da40:	f812 700a 	ldrb.w	r7, [r2, sl]
9001da44:	eb07 0747 	add.w	r7, r7, r7, lsl #1
9001da48:	441f      	add	r7, r3
9001da4a:	f11c 0201 	adds.w	r2, ip, #1
9001da4e:	d472      	bmi.n	9001db36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001da50:	4596      	cmp	lr, r2
9001da52:	dd70      	ble.n	9001db36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001da54:	2800      	cmp	r0, #0
9001da56:	d06e      	beq.n	9001db36 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9001da58:	f898 4001 	ldrb.w	r4, [r8, #1]
9001da5c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
9001da60:	441c      	add	r4, r3
9001da62:	3501      	adds	r5, #1
9001da64:	d46b      	bmi.n	9001db3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001da66:	45a9      	cmp	r9, r5
9001da68:	dd69      	ble.n	9001db3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001da6a:	2e00      	cmp	r6, #0
9001da6c:	d067      	beq.n	9001db3e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9001da6e:	f1bc 0f00 	cmp.w	ip, #0
9001da72:	db62      	blt.n	9001db3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001da74:	45e6      	cmp	lr, ip
9001da76:	dd60      	ble.n	9001db3a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9001da78:	f818 500e 	ldrb.w	r5, [r8, lr]
9001da7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
9001da80:	441d      	add	r5, r3
9001da82:	f11c 0201 	adds.w	r2, ip, #1
9001da86:	d45d      	bmi.n	9001db44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001da88:	4596      	cmp	lr, r2
9001da8a:	dd5b      	ble.n	9001db44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001da8c:	2800      	cmp	r0, #0
9001da8e:	d059      	beq.n	9001db44 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
9001da90:	44c6      	add	lr, r8
9001da92:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001da96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001da9a:	4413      	add	r3, r2
9001da9c:	b280      	uxth	r0, r0
9001da9e:	f897 e002 	ldrb.w	lr, [r7, #2]
9001daa2:	b2b2      	uxth	r2, r6
9001daa4:	f897 9000 	ldrb.w	r9, [r7]
9001daa8:	787f      	ldrb	r7, [r7, #1]
9001daaa:	fb00 f602 	mul.w	r6, r0, r2
9001daae:	0100      	lsls	r0, r0, #4
9001dab0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9001dab4:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
9001dab8:	1b80      	subs	r0, r0, r6
9001daba:	fa1f fc82 	uxth.w	ip, r2
9001dabe:	b282      	uxth	r2, r0
9001dac0:	78a0      	ldrb	r0, [r4, #2]
9001dac2:	eba8 080c 	sub.w	r8, r8, ip
9001dac6:	4350      	muls	r0, r2
9001dac8:	fa1f f888 	uxth.w	r8, r8
9001dacc:	fb08 0e0e 	mla	lr, r8, lr, r0
9001dad0:	78a8      	ldrb	r0, [r5, #2]
9001dad2:	fb0c e000 	mla	r0, ip, r0, lr
9001dad6:	f893 e002 	ldrb.w	lr, [r3, #2]
9001dada:	fb06 0e0e 	mla	lr, r6, lr, r0
9001dade:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
9001dae2:	f894 e000 	ldrb.w	lr, [r4]
9001dae6:	fb02 fe0e 	mul.w	lr, r2, lr
9001daea:	fb08 e909 	mla	r9, r8, r9, lr
9001daee:	f895 e000 	ldrb.w	lr, [r5]
9001daf2:	fb0c 990e 	mla	r9, ip, lr, r9
9001daf6:	f893 e000 	ldrb.w	lr, [r3]
9001dafa:	785b      	ldrb	r3, [r3, #1]
9001dafc:	fb06 9e0e 	mla	lr, r6, lr, r9
9001db00:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001db04:	ea4e 0e00 	orr.w	lr, lr, r0
9001db08:	7860      	ldrb	r0, [r4, #1]
9001db0a:	4350      	muls	r0, r2
9001db0c:	786a      	ldrb	r2, [r5, #1]
9001db0e:	fb08 0007 	mla	r0, r8, r7, r0
9001db12:	fb0c 0202 	mla	r2, ip, r2, r0
9001db16:	fb06 2303 	mla	r3, r6, r3, r2
9001db1a:	095b      	lsrs	r3, r3, #5
9001db1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001db20:	ea4e 0303 	orr.w	r3, lr, r3
9001db24:	800b      	strh	r3, [r1, #0]
9001db26:	b003      	add	sp, #12
9001db28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001db2c:	af01      	add	r7, sp, #4
9001db2e:	e78c      	b.n	9001da4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
9001db30:	ac01      	add	r4, sp, #4
9001db32:	4627      	mov	r7, r4
9001db34:	e795      	b.n	9001da62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001db36:	ac01      	add	r4, sp, #4
9001db38:	e793      	b.n	9001da62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9001db3a:	ad01      	add	r5, sp, #4
9001db3c:	e7a1      	b.n	9001da82 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
9001db3e:	ab01      	add	r3, sp, #4
9001db40:	461d      	mov	r5, r3
9001db42:	e7ab      	b.n	9001da9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9001db44:	ab01      	add	r3, sp, #4
9001db46:	e7a9      	b.n	9001da9c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

9001db48 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001db4c:	b08f      	sub	sp, #60	; 0x3c
9001db4e:	920c      	str	r2, [sp, #48]	; 0x30
9001db50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9001db52:	900d      	str	r0, [sp, #52]	; 0x34
9001db54:	910a      	str	r1, [sp, #40]	; 0x28
9001db56:	6850      	ldr	r0, [r2, #4]
9001db58:	9306      	str	r3, [sp, #24]
9001db5a:	6812      	ldr	r2, [r2, #0]
9001db5c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
9001db60:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9001db64:	fb00 1303 	mla	r3, r0, r3, r1
9001db68:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001db6c:	9307      	str	r3, [sp, #28]
9001db6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001db70:	681b      	ldr	r3, [r3, #0]
9001db72:	9308      	str	r3, [sp, #32]
9001db74:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001db76:	685c      	ldr	r4, [r3, #4]
9001db78:	3404      	adds	r4, #4
9001db7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001db7c:	2b00      	cmp	r3, #0
9001db7e:	dc03      	bgt.n	9001db88 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001db80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001db82:	2b00      	cmp	r3, #0
9001db84:	f340 81d5 	ble.w	9001df32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001db88:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001db8a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001db8e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001db92:	1e48      	subs	r0, r1, #1
9001db94:	1e56      	subs	r6, r2, #1
9001db96:	9b06      	ldr	r3, [sp, #24]
9001db98:	2b00      	cmp	r3, #0
9001db9a:	f340 80b6 	ble.w	9001dd0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9001db9e:	ea5f 472b 	movs.w	r7, fp, asr #16
9001dba2:	ea4f 4325 	mov.w	r3, r5, asr #16
9001dba6:	d406      	bmi.n	9001dbb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001dba8:	4287      	cmp	r7, r0
9001dbaa:	da04      	bge.n	9001dbb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001dbac:	2b00      	cmp	r3, #0
9001dbae:	db02      	blt.n	9001dbb6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001dbb0:	42b3      	cmp	r3, r6
9001dbb2:	f2c0 80ab 	blt.w	9001dd0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9001dbb6:	3701      	adds	r7, #1
9001dbb8:	f100 809c 	bmi.w	9001dcf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001dbbc:	42b9      	cmp	r1, r7
9001dbbe:	f2c0 8099 	blt.w	9001dcf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001dbc2:	3301      	adds	r3, #1
9001dbc4:	f100 8096 	bmi.w	9001dcf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001dbc8:	429a      	cmp	r2, r3
9001dbca:	f2c0 8093 	blt.w	9001dcf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
9001dbce:	9b06      	ldr	r3, [sp, #24]
9001dbd0:	930b      	str	r3, [sp, #44]	; 0x2c
9001dbd2:	9b07      	ldr	r3, [sp, #28]
9001dbd4:	9309      	str	r3, [sp, #36]	; 0x24
9001dbd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001dbd8:	2b00      	cmp	r3, #0
9001dbda:	f340 80b4 	ble.w	9001dd46 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001dbde:	9820      	ldr	r0, [sp, #128]	; 0x80
9001dbe0:	142e      	asrs	r6, r5, #16
9001dbe2:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001dbe4:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001dbe8:	68c7      	ldr	r7, [r0, #12]
9001dbea:	ea5f 402b 	movs.w	r0, fp, asr #16
9001dbee:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001dbf2:	6892      	ldr	r2, [r2, #8]
9001dbf4:	f100 80fb 	bmi.w	9001ddee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001dbf8:	f102 3cff 	add.w	ip, r2, #4294967295
9001dbfc:	4560      	cmp	r0, ip
9001dbfe:	f280 80f6 	bge.w	9001ddee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001dc02:	2e00      	cmp	r6, #0
9001dc04:	f2c0 80f3 	blt.w	9001ddee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001dc08:	f107 3cff 	add.w	ip, r7, #4294967295
9001dc0c:	4566      	cmp	r6, ip
9001dc0e:	f280 80ee 	bge.w	9001ddee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
9001dc12:	b212      	sxth	r2, r2
9001dc14:	fb06 0002 	mla	r0, r6, r2, r0
9001dc18:	9e08      	ldr	r6, [sp, #32]
9001dc1a:	1837      	adds	r7, r6, r0
9001dc1c:	5c30      	ldrb	r0, [r6, r0]
9001dc1e:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9001dc22:	eb04 0c08 	add.w	ip, r4, r8
9001dc26:	2b00      	cmp	r3, #0
9001dc28:	f000 80d3 	beq.w	9001ddd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
9001dc2c:	787e      	ldrb	r6, [r7, #1]
9001dc2e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001dc32:	4426      	add	r6, r4
9001dc34:	2900      	cmp	r1, #0
9001dc36:	f000 80d4 	beq.w	9001dde2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001dc3a:	18b8      	adds	r0, r7, r2
9001dc3c:	5cba      	ldrb	r2, [r7, r2]
9001dc3e:	7840      	ldrb	r0, [r0, #1]
9001dc40:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001dc44:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001dc48:	4422      	add	r2, r4
9001dc4a:	4420      	add	r0, r4
9001dc4c:	b29b      	uxth	r3, r3
9001dc4e:	78b7      	ldrb	r7, [r6, #2]
9001dc50:	b289      	uxth	r1, r1
9001dc52:	f89c a002 	ldrb.w	sl, [ip, #2]
9001dc56:	f89c c001 	ldrb.w	ip, [ip, #1]
9001dc5a:	fb03 f901 	mul.w	r9, r3, r1
9001dc5e:	011b      	lsls	r3, r3, #4
9001dc60:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001dc64:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001dc68:	eba3 0309 	sub.w	r3, r3, r9
9001dc6c:	b289      	uxth	r1, r1
9001dc6e:	b29b      	uxth	r3, r3
9001dc70:	ebae 0e01 	sub.w	lr, lr, r1
9001dc74:	435f      	muls	r7, r3
9001dc76:	fa1f fe8e 	uxth.w	lr, lr
9001dc7a:	fb0e 770a 	mla	r7, lr, sl, r7
9001dc7e:	f892 a002 	ldrb.w	sl, [r2, #2]
9001dc82:	fb01 770a 	mla	r7, r1, sl, r7
9001dc86:	f890 a002 	ldrb.w	sl, [r0, #2]
9001dc8a:	fb09 7a0a 	mla	sl, r9, sl, r7
9001dc8e:	f814 7008 	ldrb.w	r7, [r4, r8]
9001dc92:	f896 8000 	ldrb.w	r8, [r6]
9001dc96:	7876      	ldrb	r6, [r6, #1]
9001dc98:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001dc9c:	fb03 f808 	mul.w	r8, r3, r8
9001dca0:	4373      	muls	r3, r6
9001dca2:	fb0e 8807 	mla	r8, lr, r7, r8
9001dca6:	7817      	ldrb	r7, [r2, #0]
9001dca8:	fb0e 330c 	mla	r3, lr, ip, r3
9001dcac:	fb01 8807 	mla	r8, r1, r7, r8
9001dcb0:	7807      	ldrb	r7, [r0, #0]
9001dcb2:	fb09 8707 	mla	r7, r9, r7, r8
9001dcb6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001dcba:	ea47 070a 	orr.w	r7, r7, sl
9001dcbe:	f892 a001 	ldrb.w	sl, [r2, #1]
9001dcc2:	fb01 310a 	mla	r1, r1, sl, r3
9001dcc6:	f890 a001 	ldrb.w	sl, [r0, #1]
9001dcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dccc:	fb09 1a0a 	mla	sl, r9, sl, r1
9001dcd0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001dcd4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001dcd8:	ea47 070a 	orr.w	r7, r7, sl
9001dcdc:	801f      	strh	r7, [r3, #0]
9001dcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dce0:	3302      	adds	r3, #2
9001dce2:	9309      	str	r3, [sp, #36]	; 0x24
9001dce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001dce6:	449b      	add	fp, r3
9001dce8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001dcea:	441d      	add	r5, r3
9001dcec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001dcee:	3b01      	subs	r3, #1
9001dcf0:	930b      	str	r3, [sp, #44]	; 0x2c
9001dcf2:	e770      	b.n	9001dbd6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9001dcf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001dcf6:	449b      	add	fp, r3
9001dcf8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001dcfa:	441d      	add	r5, r3
9001dcfc:	9b06      	ldr	r3, [sp, #24]
9001dcfe:	3b01      	subs	r3, #1
9001dd00:	9306      	str	r3, [sp, #24]
9001dd02:	9b07      	ldr	r3, [sp, #28]
9001dd04:	3302      	adds	r3, #2
9001dd06:	9307      	str	r3, [sp, #28]
9001dd08:	e745      	b.n	9001db96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
9001dd0a:	d023      	beq.n	9001dd54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9001dd0c:	9b06      	ldr	r3, [sp, #24]
9001dd0e:	981b      	ldr	r0, [sp, #108]	; 0x6c
9001dd10:	3b01      	subs	r3, #1
9001dd12:	fb00 b003 	mla	r0, r0, r3, fp
9001dd16:	1400      	asrs	r0, r0, #16
9001dd18:	f53f af59 	bmi.w	9001dbce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001dd1c:	3901      	subs	r1, #1
9001dd1e:	4288      	cmp	r0, r1
9001dd20:	f6bf af55 	bge.w	9001dbce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001dd24:	991c      	ldr	r1, [sp, #112]	; 0x70
9001dd26:	fb01 5303 	mla	r3, r1, r3, r5
9001dd2a:	141b      	asrs	r3, r3, #16
9001dd2c:	f53f af4f 	bmi.w	9001dbce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001dd30:	3a01      	subs	r2, #1
9001dd32:	4293      	cmp	r3, r2
9001dd34:	f6bf af4b 	bge.w	9001dbce <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001dd38:	9b06      	ldr	r3, [sp, #24]
9001dd3a:	9309      	str	r3, [sp, #36]	; 0x24
9001dd3c:	9b07      	ldr	r3, [sp, #28]
9001dd3e:	930b      	str	r3, [sp, #44]	; 0x2c
9001dd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001dd42:	2b00      	cmp	r3, #0
9001dd44:	dc70      	bgt.n	9001de28 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9001dd46:	9b06      	ldr	r3, [sp, #24]
9001dd48:	9a07      	ldr	r2, [sp, #28]
9001dd4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001dd4e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001dd52:	9307      	str	r3, [sp, #28]
9001dd54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001dd56:	2b00      	cmp	r3, #0
9001dd58:	f340 80eb 	ble.w	9001df32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
9001dd5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001dd60:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001dd62:	ee30 0a04 	vadd.f32	s0, s0, s8
9001dd66:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001dd6a:	eef0 6a62 	vmov.f32	s13, s5
9001dd6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001dd72:	ee31 1a05 	vadd.f32	s2, s2, s10
9001dd76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dd7a:	ee16 ba90 	vmov	fp, s13
9001dd7e:	eef0 6a43 	vmov.f32	s13, s6
9001dd82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001dd86:	ee16 5a90 	vmov	r5, s13
9001dd8a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001dd8e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001dd92:	ee77 2a62 	vsub.f32	s5, s14, s5
9001dd96:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001dd9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001dd9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001dda2:	ee12 2a90 	vmov	r2, s5
9001dda6:	eef0 2a47 	vmov.f32	s5, s14
9001ddaa:	fb92 f3f3 	sdiv	r3, r2, r3
9001ddae:	ee13 2a10 	vmov	r2, s6
9001ddb2:	931b      	str	r3, [sp, #108]	; 0x6c
9001ddb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001ddb6:	eeb0 3a67 	vmov.f32	s6, s15
9001ddba:	fb92 f3f3 	sdiv	r3, r2, r3
9001ddbe:	931c      	str	r3, [sp, #112]	; 0x70
9001ddc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ddc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001ddc4:	3b01      	subs	r3, #1
9001ddc6:	930a      	str	r3, [sp, #40]	; 0x28
9001ddc8:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001ddca:	bf08      	it	eq
9001ddcc:	4613      	moveq	r3, r2
9001ddce:	9306      	str	r3, [sp, #24]
9001ddd0:	e6d3      	b.n	9001db7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001ddd2:	b149      	cbz	r1, 9001dde8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
9001ddd4:	5cba      	ldrb	r2, [r7, r2]
9001ddd6:	4660      	mov	r0, ip
9001ddd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001dddc:	4422      	add	r2, r4
9001ddde:	4666      	mov	r6, ip
9001dde0:	e734      	b.n	9001dc4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001dde2:	4660      	mov	r0, ip
9001dde4:	4662      	mov	r2, ip
9001dde6:	e731      	b.n	9001dc4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
9001dde8:	4660      	mov	r0, ip
9001ddea:	4662      	mov	r2, ip
9001ddec:	e7f7      	b.n	9001ddde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
9001ddee:	f110 0c01 	adds.w	ip, r0, #1
9001ddf2:	f53f af74 	bmi.w	9001dcde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001ddf6:	4562      	cmp	r2, ip
9001ddf8:	f6ff af71 	blt.w	9001dcde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001ddfc:	f116 0c01 	adds.w	ip, r6, #1
9001de00:	f53f af6d 	bmi.w	9001dcde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001de04:	4567      	cmp	r7, ip
9001de06:	f6ff af6a 	blt.w	9001dcde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001de0a:	b23f      	sxth	r7, r7
9001de0c:	b212      	sxth	r2, r2
9001de0e:	9701      	str	r7, [sp, #4]
9001de10:	9200      	str	r2, [sp, #0]
9001de12:	e9cd 3104 	strd	r3, r1, [sp, #16]
9001de16:	e9cd 0602 	strd	r0, r6, [sp, #8]
9001de1a:	4623      	mov	r3, r4
9001de1c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001de1e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001de22:	f7ff fde7 	bl	9001d9f4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9001de26:	e75a      	b.n	9001dcde <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001de28:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001de2a:	ea4f 462b 	mov.w	r6, fp, asr #16
9001de2e:	1428      	asrs	r0, r5, #16
9001de30:	f3cb 3303 	ubfx	r3, fp, #12, #4
9001de34:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
9001de38:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001de3c:	fb02 6000 	mla	r0, r2, r0, r6
9001de40:	9e08      	ldr	r6, [sp, #32]
9001de42:	f816 8000 	ldrb.w	r8, [r6, r0]
9001de46:	1837      	adds	r7, r6, r0
9001de48:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001de4c:	eb04 0c08 	add.w	ip, r4, r8
9001de50:	2b00      	cmp	r3, #0
9001de52:	d060      	beq.n	9001df16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9001de54:	787e      	ldrb	r6, [r7, #1]
9001de56:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9001de5a:	4426      	add	r6, r4
9001de5c:	2900      	cmp	r1, #0
9001de5e:	d062      	beq.n	9001df26 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
9001de60:	18b8      	adds	r0, r7, r2
9001de62:	5cba      	ldrb	r2, [r7, r2]
9001de64:	7840      	ldrb	r0, [r0, #1]
9001de66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001de6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
9001de6e:	4422      	add	r2, r4
9001de70:	4420      	add	r0, r4
9001de72:	b29b      	uxth	r3, r3
9001de74:	78b7      	ldrb	r7, [r6, #2]
9001de76:	b289      	uxth	r1, r1
9001de78:	f89c a002 	ldrb.w	sl, [ip, #2]
9001de7c:	f89c c001 	ldrb.w	ip, [ip, #1]
9001de80:	fb03 f901 	mul.w	r9, r3, r1
9001de84:	011b      	lsls	r3, r3, #4
9001de86:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001de8a:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
9001de8e:	eba3 0309 	sub.w	r3, r3, r9
9001de92:	b289      	uxth	r1, r1
9001de94:	b29b      	uxth	r3, r3
9001de96:	ebae 0e01 	sub.w	lr, lr, r1
9001de9a:	435f      	muls	r7, r3
9001de9c:	fa1f fe8e 	uxth.w	lr, lr
9001dea0:	fb0e 770a 	mla	r7, lr, sl, r7
9001dea4:	f892 a002 	ldrb.w	sl, [r2, #2]
9001dea8:	fb01 770a 	mla	r7, r1, sl, r7
9001deac:	f890 a002 	ldrb.w	sl, [r0, #2]
9001deb0:	fb09 7a0a 	mla	sl, r9, sl, r7
9001deb4:	f814 7008 	ldrb.w	r7, [r4, r8]
9001deb8:	f896 8000 	ldrb.w	r8, [r6]
9001debc:	7876      	ldrb	r6, [r6, #1]
9001debe:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
9001dec2:	fb03 f808 	mul.w	r8, r3, r8
9001dec6:	4373      	muls	r3, r6
9001dec8:	7856      	ldrb	r6, [r2, #1]
9001deca:	fb0e 8807 	mla	r8, lr, r7, r8
9001dece:	7817      	ldrb	r7, [r2, #0]
9001ded0:	fb0e 330c 	mla	r3, lr, ip, r3
9001ded4:	fb01 8807 	mla	r8, r1, r7, r8
9001ded8:	7807      	ldrb	r7, [r0, #0]
9001deda:	fb01 3306 	mla	r3, r1, r6, r3
9001dede:	fb09 8707 	mla	r7, r9, r7, r8
9001dee2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001dee6:	ea47 070a 	orr.w	r7, r7, sl
9001deea:	f890 a001 	ldrb.w	sl, [r0, #1]
9001deee:	fb09 3a0a 	mla	sl, r9, sl, r3
9001def2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001def4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001def8:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001defc:	ea47 070a 	orr.w	r7, r7, sl
9001df00:	f823 7b02 	strh.w	r7, [r3], #2
9001df04:	930b      	str	r3, [sp, #44]	; 0x2c
9001df06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001df08:	449b      	add	fp, r3
9001df0a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001df0c:	441d      	add	r5, r3
9001df0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001df10:	3b01      	subs	r3, #1
9001df12:	9309      	str	r3, [sp, #36]	; 0x24
9001df14:	e714      	b.n	9001dd40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
9001df16:	b149      	cbz	r1, 9001df2c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
9001df18:	5cba      	ldrb	r2, [r7, r2]
9001df1a:	4660      	mov	r0, ip
9001df1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9001df20:	4422      	add	r2, r4
9001df22:	4666      	mov	r6, ip
9001df24:	e7a5      	b.n	9001de72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001df26:	4660      	mov	r0, ip
9001df28:	4662      	mov	r2, ip
9001df2a:	e7a2      	b.n	9001de72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9001df2c:	4660      	mov	r0, ip
9001df2e:	4662      	mov	r2, ip
9001df30:	e7f7      	b.n	9001df22 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9001df32:	b00f      	add	sp, #60	; 0x3c
9001df34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001df38 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
9001df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001df3c:	b085      	sub	sp, #20
9001df3e:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9001df42:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9001df46:	9102      	str	r1, [sp, #8]
9001df48:	2c00      	cmp	r4, #0
9001df4a:	fb04 710c 	mla	r1, r4, ip, r7
9001df4e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9001df52:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9001df56:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
9001df5a:	eb02 0e01 	add.w	lr, r2, r1
9001df5e:	f2c0 8122 	blt.w	9001e1a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001df62:	45a0      	cmp	r8, r4
9001df64:	f340 811f 	ble.w	9001e1a6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9001df68:	2f00      	cmp	r7, #0
9001df6a:	f2c0 811a 	blt.w	9001e1a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001df6e:	45bc      	cmp	ip, r7
9001df70:	f340 8117 	ble.w	9001e1a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9001df74:	5c52      	ldrb	r2, [r2, r1]
9001df76:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
9001df7a:	1c7a      	adds	r2, r7, #1
9001df7c:	f100 8116 	bmi.w	9001e1ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001df80:	4594      	cmp	ip, r2
9001df82:	f340 8113 	ble.w	9001e1ac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9001df86:	2e00      	cmp	r6, #0
9001df88:	f000 8112 	beq.w	9001e1b0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
9001df8c:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001df90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001df94:	3401      	adds	r4, #1
9001df96:	f100 810f 	bmi.w	9001e1b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001df9a:	45a0      	cmp	r8, r4
9001df9c:	f340 810c 	ble.w	9001e1b8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
9001dfa0:	2800      	cmp	r0, #0
9001dfa2:	f000 810c 	beq.w	9001e1be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9001dfa6:	2f00      	cmp	r7, #0
9001dfa8:	f2c0 8104 	blt.w	9001e1b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001dfac:	45bc      	cmp	ip, r7
9001dfae:	f340 8101 	ble.w	9001e1b4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9001dfb2:	f81e 200c 	ldrb.w	r2, [lr, ip]
9001dfb6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
9001dfba:	3701      	adds	r7, #1
9001dfbc:	f100 8102 	bmi.w	9001e1c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001dfc0:	45bc      	cmp	ip, r7
9001dfc2:	f340 80ff 	ble.w	9001e1c4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
9001dfc6:	2e00      	cmp	r6, #0
9001dfc8:	f000 80fe 	beq.w	9001e1c8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
9001dfcc:	44f4      	add	ip, lr
9001dfce:	f89c 2001 	ldrb.w	r2, [ip, #1]
9001dfd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
9001dfd6:	b2b6      	uxth	r6, r6
9001dfd8:	b280      	uxth	r0, r0
9001dfda:	ea4f 6a11 	mov.w	sl, r1, lsr #24
9001dfde:	fb00 fe06 	mul.w	lr, r0, r6
9001dfe2:	0136      	lsls	r6, r6, #4
9001dfe4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9001dfe8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
9001dfec:	eba6 070e 	sub.w	r7, r6, lr
9001dff0:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9001dff4:	ea4f 6914 	mov.w	r9, r4, lsr #24
9001dff8:	b280      	uxth	r0, r0
9001dffa:	b2bf      	uxth	r7, r7
9001dffc:	1a1b      	subs	r3, r3, r0
9001dffe:	ea4f 6812 	mov.w	r8, r2, lsr #24
9001e002:	fb0a f607 	mul.w	r6, sl, r7
9001e006:	b29b      	uxth	r3, r3
9001e008:	fb0b 6603 	mla	r6, fp, r3, r6
9001e00c:	fb00 6609 	mla	r6, r0, r9, r6
9001e010:	fb0e 6608 	mla	r6, lr, r8, r6
9001e014:	f3c6 2607 	ubfx	r6, r6, #8, #8
9001e018:	9600      	str	r6, [sp, #0]
9001e01a:	2e00      	cmp	r6, #0
9001e01c:	f000 80be 	beq.w	9001e19c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
9001e020:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9001e024:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9001e028:	9e02      	ldr	r6, [sp, #8]
9001e02a:	fb0b fc0c 	mul.w	ip, fp, ip
9001e02e:	fb0b f505 	mul.w	r5, fp, r5
9001e032:	8836      	ldrh	r6, [r6, #0]
9001e034:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9001e038:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001e03c:	9501      	str	r5, [sp, #4]
9001e03e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9001e042:	44dc      	add	ip, fp
9001e044:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e048:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
9001e04c:	9503      	str	r5, [sp, #12]
9001e04e:	9d01      	ldr	r5, [sp, #4]
9001e050:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9001e054:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001e058:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
9001e05c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e060:	fb0a fc0c 	mul.w	ip, sl, ip
9001e064:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9001e068:	fb0a fa01 	mul.w	sl, sl, r1
9001e06c:	ea4f 251c 	mov.w	r5, ip, lsr #8
9001e070:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001e074:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9001e078:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e07c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
9001e080:	4465      	add	r5, ip
9001e082:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e086:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
9001e08a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e08e:	fb09 fc0c 	mul.w	ip, r9, ip
9001e092:	0a2d      	lsrs	r5, r5, #8
9001e094:	fb09 f904 	mul.w	r9, r9, r4
9001e098:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e09c:	ea4f 211c 	mov.w	r1, ip, lsr #8
9001e0a0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001e0a4:	f509 7480 	add.w	r4, r9, #256	; 0x100
9001e0a8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001e0ac:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001e0b0:	437d      	muls	r5, r7
9001e0b2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9001e0b6:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
9001e0ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9001e0be:	4461      	add	r1, ip
9001e0c0:	fb08 f404 	mul.w	r4, r8, r4
9001e0c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e0c8:	fb08 f802 	mul.w	r8, r8, r2
9001e0cc:	0a09      	lsrs	r1, r1, #8
9001e0ce:	0a22      	lsrs	r2, r4, #8
9001e0d0:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9001e0d4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9001e0d8:	fb07 f70a 	mul.w	r7, r7, sl
9001e0dc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9001e0e0:	4414      	add	r4, r2
9001e0e2:	f508 7280 	add.w	r2, r8, #256	; 0x100
9001e0e6:	0a24      	lsrs	r4, r4, #8
9001e0e8:	eb02 2818 	add.w	r8, r2, r8, lsr #8
9001e0ec:	9a03      	ldr	r2, [sp, #12]
9001e0ee:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
9001e0f2:	fb02 5503 	mla	r5, r2, r3, r5
9001e0f6:	ea4f 2818 	mov.w	r8, r8, lsr #8
9001e0fa:	9a00      	ldr	r2, [sp, #0]
9001e0fc:	fb04 540e 	mla	r4, r4, lr, r5
9001e100:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9001e104:	1235      	asrs	r5, r6, #8
9001e106:	fb01 4100 	mla	r1, r1, r0, r4
9001e10a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001e10e:	0a09      	lsrs	r1, r1, #8
9001e110:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9001e114:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9001e118:	fb03 7101 	mla	r1, r3, r1, r7
9001e11c:	fb0e 1e08 	mla	lr, lr, r8, r1
9001e120:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9001e124:	fb00 e101 	mla	r1, r0, r1, lr
9001e128:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
9001e12c:	b287      	uxth	r7, r0
9001e12e:	0a09      	lsrs	r1, r1, #8
9001e130:	437a      	muls	r2, r7
9001e132:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001e136:	1c53      	adds	r3, r2, #1
9001e138:	4321      	orrs	r1, r4
9001e13a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001e13e:	0c0a      	lsrs	r2, r1, #16
9001e140:	f3c1 2407 	ubfx	r4, r1, #8, #8
9001e144:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9001e148:	b2c8      	uxtb	r0, r1
9001e14a:	fb12 f207 	smulbb	r2, r2, r7
9001e14e:	fb14 f407 	smulbb	r4, r4, r7
9001e152:	b2db      	uxtb	r3, r3
9001e154:	fb10 f007 	smulbb	r0, r0, r7
9001e158:	fb05 2503 	mla	r5, r5, r3, r2
9001e15c:	10f2      	asrs	r2, r6, #3
9001e15e:	00f6      	lsls	r6, r6, #3
9001e160:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001e164:	b2ad      	uxth	r5, r5
9001e166:	b2f6      	uxtb	r6, r6
9001e168:	fb02 4203 	mla	r2, r2, r3, r4
9001e16c:	fb06 0303 	mla	r3, r6, r3, r0
9001e170:	b294      	uxth	r4, r2
9001e172:	b299      	uxth	r1, r3
9001e174:	1c6b      	adds	r3, r5, #1
9001e176:	1c62      	adds	r2, r4, #1
9001e178:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001e17c:	1c4b      	adds	r3, r1, #1
9001e17e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
9001e182:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001e186:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001e18a:	0952      	lsrs	r2, r2, #5
9001e18c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001e190:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e194:	432b      	orrs	r3, r5
9001e196:	4313      	orrs	r3, r2
9001e198:	9a02      	ldr	r2, [sp, #8]
9001e19a:	8013      	strh	r3, [r2, #0]
9001e19c:	b005      	add	sp, #20
9001e19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e1a2:	2500      	movs	r5, #0
9001e1a4:	e6e9      	b.n	9001df7a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
9001e1a6:	2100      	movs	r1, #0
9001e1a8:	460d      	mov	r5, r1
9001e1aa:	e6f3      	b.n	9001df94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001e1ac:	2100      	movs	r1, #0
9001e1ae:	e6f1      	b.n	9001df94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001e1b0:	4631      	mov	r1, r6
9001e1b2:	e6ef      	b.n	9001df94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
9001e1b4:	2400      	movs	r4, #0
9001e1b6:	e700      	b.n	9001dfba <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
9001e1b8:	2200      	movs	r2, #0
9001e1ba:	4614      	mov	r4, r2
9001e1bc:	e70b      	b.n	9001dfd6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001e1be:	4602      	mov	r2, r0
9001e1c0:	4604      	mov	r4, r0
9001e1c2:	e708      	b.n	9001dfd6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001e1c4:	2200      	movs	r2, #0
9001e1c6:	e706      	b.n	9001dfd6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
9001e1c8:	4632      	mov	r2, r6
9001e1ca:	e704      	b.n	9001dfd6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

9001e1cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001e1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e1d0:	b09f      	sub	sp, #124	; 0x7c
9001e1d2:	921b      	str	r2, [sp, #108]	; 0x6c
9001e1d4:	9309      	str	r3, [sp, #36]	; 0x24
9001e1d6:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
9001e1d8:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
9001e1dc:	901d      	str	r0, [sp, #116]	; 0x74
9001e1de:	931c      	str	r3, [sp, #112]	; 0x70
9001e1e0:	6850      	ldr	r0, [r2, #4]
9001e1e2:	9119      	str	r1, [sp, #100]	; 0x64
9001e1e4:	6812      	ldr	r2, [r2, #0]
9001e1e6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001e1e8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
9001e1ec:	fb00 1303 	mla	r3, r0, r3, r1
9001e1f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001e1f4:	930c      	str	r3, [sp, #48]	; 0x30
9001e1f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001e1f8:	681b      	ldr	r3, [r3, #0]
9001e1fa:	9312      	str	r3, [sp, #72]	; 0x48
9001e1fc:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001e1fe:	685e      	ldr	r6, [r3, #4]
9001e200:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
9001e204:	3604      	adds	r6, #4
9001e206:	930d      	str	r3, [sp, #52]	; 0x34
9001e208:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001e20a:	2b00      	cmp	r3, #0
9001e20c:	dc03      	bgt.n	9001e216 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001e20e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9001e210:	2b00      	cmp	r3, #0
9001e212:	f340 8387 	ble.w	9001e924 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001e216:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001e218:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e21c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001e220:	1e48      	subs	r0, r1, #1
9001e222:	1e57      	subs	r7, r2, #1
9001e224:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e226:	2b00      	cmp	r3, #0
9001e228:	f340 8194 	ble.w	9001e554 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
9001e22c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001e22e:	142b      	asrs	r3, r5, #16
9001e230:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001e234:	d406      	bmi.n	9001e244 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001e236:	4584      	cmp	ip, r0
9001e238:	da04      	bge.n	9001e244 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001e23a:	2b00      	cmp	r3, #0
9001e23c:	db02      	blt.n	9001e244 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001e23e:	42bb      	cmp	r3, r7
9001e240:	f2c0 8189 	blt.w	9001e556 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001e244:	f11c 0c01 	adds.w	ip, ip, #1
9001e248:	f100 8177 	bmi.w	9001e53a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001e24c:	4561      	cmp	r1, ip
9001e24e:	f2c0 8174 	blt.w	9001e53a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001e252:	3301      	adds	r3, #1
9001e254:	f100 8171 	bmi.w	9001e53a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001e258:	429a      	cmp	r2, r3
9001e25a:	f2c0 816e 	blt.w	9001e53a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
9001e25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e260:	9f0c      	ldr	r7, [sp, #48]	; 0x30
9001e262:	931a      	str	r3, [sp, #104]	; 0x68
9001e264:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001e266:	2b00      	cmp	r3, #0
9001e268:	f340 8193 	ble.w	9001e592 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
9001e26c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001e26e:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001e272:	f3c5 3103 	ubfx	r1, r5, #12, #4
9001e276:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e27a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001e27c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
9001e280:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001e282:	141b      	asrs	r3, r3, #16
9001e284:	f100 81d6 	bmi.w	9001e634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001e288:	f100 38ff 	add.w	r8, r0, #4294967295
9001e28c:	4543      	cmp	r3, r8
9001e28e:	f280 81d1 	bge.w	9001e634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001e292:	f1bc 0f00 	cmp.w	ip, #0
9001e296:	f2c0 81cd 	blt.w	9001e634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001e29a:	f10e 38ff 	add.w	r8, lr, #4294967295
9001e29e:	45c4      	cmp	ip, r8
9001e2a0:	f280 81c8 	bge.w	9001e634 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
9001e2a4:	b200      	sxth	r0, r0
9001e2a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e2a8:	fb0c 3300 	mla	r3, ip, r0, r3
9001e2ac:	eb04 0803 	add.w	r8, r4, r3
9001e2b0:	5ce3      	ldrb	r3, [r4, r3]
9001e2b2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e2b6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001e2ba:	2a00      	cmp	r2, #0
9001e2bc:	f000 81af 	beq.w	9001e61e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001e2c0:	f898 c001 	ldrb.w	ip, [r8, #1]
9001e2c4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001e2c8:	940e      	str	r4, [sp, #56]	; 0x38
9001e2ca:	0e24      	lsrs	r4, r4, #24
9001e2cc:	9415      	str	r4, [sp, #84]	; 0x54
9001e2ce:	b179      	cbz	r1, 9001e2f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001e2d0:	eb08 0c00 	add.w	ip, r8, r0
9001e2d4:	f818 0000 	ldrb.w	r0, [r8, r0]
9001e2d8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001e2dc:	900a      	str	r0, [sp, #40]	; 0x28
9001e2de:	0e00      	lsrs	r0, r0, #24
9001e2e0:	9013      	str	r0, [sp, #76]	; 0x4c
9001e2e2:	f89c 0001 	ldrb.w	r0, [ip, #1]
9001e2e6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001e2ea:	900f      	str	r0, [sp, #60]	; 0x3c
9001e2ec:	0e00      	lsrs	r0, r0, #24
9001e2ee:	9016      	str	r0, [sp, #88]	; 0x58
9001e2f0:	b292      	uxth	r2, r2
9001e2f2:	9815      	ldr	r0, [sp, #84]	; 0x54
9001e2f4:	b289      	uxth	r1, r1
9001e2f6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e2f8:	fb02 f901 	mul.w	r9, r2, r1
9001e2fc:	0112      	lsls	r2, r2, #4
9001e2fe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9001e302:	eba2 0809 	sub.w	r8, r2, r9
9001e306:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001e30a:	b289      	uxth	r1, r1
9001e30c:	fa1f f888 	uxth.w	r8, r8
9001e310:	1a52      	subs	r2, r2, r1
9001e312:	fb08 f000 	mul.w	r0, r8, r0
9001e316:	b292      	uxth	r2, r2
9001e318:	fb02 000e 	mla	r0, r2, lr, r0
9001e31c:	fb01 0004 	mla	r0, r1, r4, r0
9001e320:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001e322:	fb09 0004 	mla	r0, r9, r4, r0
9001e326:	f3c0 2007 	ubfx	r0, r0, #8, #8
9001e32a:	2800      	cmp	r0, #0
9001e32c:	f000 80fa 	beq.w	9001e524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e330:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001e334:	d01b      	beq.n	9001e36e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9001e336:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e33a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e33e:	fb0e fa0a 	mul.w	sl, lr, sl
9001e342:	fb0e fe03 	mul.w	lr, lr, r3
9001e346:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e34a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e34e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001e352:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e356:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001e35a:	4453      	add	r3, sl
9001e35c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e360:	0a1b      	lsrs	r3, r3, #8
9001e362:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e366:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e36a:	ea43 030c 	orr.w	r3, r3, ip
9001e36e:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e370:	2cff      	cmp	r4, #255	; 0xff
9001e372:	d021      	beq.n	9001e3b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
9001e374:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e376:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e37a:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e37c:	fb04 fb0b 	mul.w	fp, r4, fp
9001e380:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e382:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e386:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001e388:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e38c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e390:	fb04 fa0a 	mul.w	sl, r4, sl
9001e394:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e398:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e39c:	44de      	add	lr, fp
9001e39e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e3a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e3a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e3aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e3ae:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e3b2:	ea4e 040a 	orr.w	r4, lr, sl
9001e3b6:	940e      	str	r4, [sp, #56]	; 0x38
9001e3b8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e3ba:	2cff      	cmp	r4, #255	; 0xff
9001e3bc:	d021      	beq.n	9001e402 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001e3be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001e3c0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e3c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e3c6:	fb04 fb0b 	mul.w	fp, r4, fp
9001e3ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001e3cc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e3d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001e3d2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e3d6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e3da:	fb04 fa0a 	mul.w	sl, r4, sl
9001e3de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e3e2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e3e6:	44de      	add	lr, fp
9001e3e8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e3ec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e3f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e3f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e3f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e3fc:	ea4e 040a 	orr.w	r4, lr, sl
9001e400:	940a      	str	r4, [sp, #40]	; 0x28
9001e402:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001e404:	2cff      	cmp	r4, #255	; 0xff
9001e406:	d021      	beq.n	9001e44c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
9001e408:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e40a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001e40e:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001e410:	fb04 fb0b 	mul.w	fp, r4, fp
9001e414:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e416:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e41a:	9c16      	ldr	r4, [sp, #88]	; 0x58
9001e41c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001e420:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001e424:	fb04 fa0a 	mul.w	sl, r4, sl
9001e428:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e42c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001e430:	44de      	add	lr, fp
9001e432:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001e436:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001e43a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e43e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001e442:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e446:	ea4e 040a 	orr.w	r4, lr, sl
9001e44a:	940f      	str	r4, [sp, #60]	; 0x3c
9001e44c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e44e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001e452:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e456:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e45a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001e45c:	fb08 fc0c 	mul.w	ip, r8, ip
9001e460:	fb02 cc0e 	mla	ip, r2, lr, ip
9001e464:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e468:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001e46a:	fb01 cc0e 	mla	ip, r1, lr, ip
9001e46e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001e472:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001e474:	fb09 cc0e 	mla	ip, r9, lr, ip
9001e478:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001e47c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e47e:	fb08 f80e 	mul.w	r8, r8, lr
9001e482:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e486:	fb02 8303 	mla	r3, r2, r3, r8
9001e48a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9001e48c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e490:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e494:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001e496:	fb01 330a 	mla	r3, r1, sl, r3
9001e49a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
9001e49e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001e4a0:	fb09 3901 	mla	r9, r9, r1, r3
9001e4a4:	883b      	ldrh	r3, [r7, #0]
9001e4a6:	4342      	muls	r2, r0
9001e4a8:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001e4ac:	1c50      	adds	r0, r2, #1
9001e4ae:	1219      	asrs	r1, r3, #8
9001e4b0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001e4b4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
9001e4b8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001e4bc:	ea4c 0c09 	orr.w	ip, ip, r9
9001e4c0:	ea6f 2010 	mvn.w	r0, r0, lsr #8
9001e4c4:	ea4f 421c 	mov.w	r2, ip, lsr #16
9001e4c8:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9001e4cc:	b2c0      	uxtb	r0, r0
9001e4ce:	fb12 f204 	smulbb	r2, r2, r4
9001e4d2:	fa5f fc8c 	uxtb.w	ip, ip
9001e4d6:	fb1e fe04 	smulbb	lr, lr, r4
9001e4da:	fb01 2100 	mla	r1, r1, r0, r2
9001e4de:	10da      	asrs	r2, r3, #3
9001e4e0:	fb1c fc04 	smulbb	ip, ip, r4
9001e4e4:	00db      	lsls	r3, r3, #3
9001e4e6:	b289      	uxth	r1, r1
9001e4e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001e4ec:	b2db      	uxtb	r3, r3
9001e4ee:	fb02 e200 	mla	r2, r2, r0, lr
9001e4f2:	fb03 c300 	mla	r3, r3, r0, ip
9001e4f6:	b292      	uxth	r2, r2
9001e4f8:	fa1f fc83 	uxth.w	ip, r3
9001e4fc:	1c4b      	adds	r3, r1, #1
9001e4fe:	eb03 2111 	add.w	r1, r3, r1, lsr #8
9001e502:	f10c 0301 	add.w	r3, ip, #1
9001e506:	eb03 231c 	add.w	r3, r3, ip, lsr #8
9001e50a:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001e50e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001e512:	430b      	orrs	r3, r1
9001e514:	1c51      	adds	r1, r2, #1
9001e516:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001e51a:	0952      	lsrs	r2, r2, #5
9001e51c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001e520:	4313      	orrs	r3, r2
9001e522:	803b      	strh	r3, [r7, #0]
9001e524:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001e526:	3702      	adds	r7, #2
9001e528:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e52a:	441a      	add	r2, r3
9001e52c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e52e:	441d      	add	r5, r3
9001e530:	9b1a      	ldr	r3, [sp, #104]	; 0x68
9001e532:	9229      	str	r2, [sp, #164]	; 0xa4
9001e534:	3b01      	subs	r3, #1
9001e536:	931a      	str	r3, [sp, #104]	; 0x68
9001e538:	e694      	b.n	9001e264 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001e53a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001e53c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001e53e:	441c      	add	r4, r3
9001e540:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e542:	441d      	add	r5, r3
9001e544:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e546:	9429      	str	r4, [sp, #164]	; 0xa4
9001e548:	3b01      	subs	r3, #1
9001e54a:	9309      	str	r3, [sp, #36]	; 0x24
9001e54c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001e54e:	3302      	adds	r3, #2
9001e550:	930c      	str	r3, [sp, #48]	; 0x30
9001e552:	e667      	b.n	9001e224 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001e554:	d024      	beq.n	9001e5a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
9001e556:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e558:	982b      	ldr	r0, [sp, #172]	; 0xac
9001e55a:	3b01      	subs	r3, #1
9001e55c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001e55e:	fb00 4003 	mla	r0, r0, r3, r4
9001e562:	1400      	asrs	r0, r0, #16
9001e564:	f53f ae7b 	bmi.w	9001e25e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001e568:	3901      	subs	r1, #1
9001e56a:	4288      	cmp	r0, r1
9001e56c:	f6bf ae77 	bge.w	9001e25e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001e570:	992c      	ldr	r1, [sp, #176]	; 0xb0
9001e572:	fb01 5303 	mla	r3, r1, r3, r5
9001e576:	141b      	asrs	r3, r3, #16
9001e578:	f53f ae71 	bmi.w	9001e25e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001e57c:	3a01      	subs	r2, #1
9001e57e:	4293      	cmp	r3, r2
9001e580:	f6bf ae6d 	bge.w	9001e25e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001e584:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
9001e588:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
9001e58c:	f1bb 0f00 	cmp.w	fp, #0
9001e590:	dc70      	bgt.n	9001e674 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
9001e592:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001e594:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001e598:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001e59a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001e59e:	930c      	str	r3, [sp, #48]	; 0x30
9001e5a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001e5a2:	2b00      	cmp	r3, #0
9001e5a4:	f340 81be 	ble.w	9001e924 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
9001e5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001e5ac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e5ae:	ee30 0a04 	vadd.f32	s0, s0, s8
9001e5b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001e5b6:	eef0 6a62 	vmov.f32	s13, s5
9001e5ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001e5be:	ee31 1a05 	vadd.f32	s2, s2, s10
9001e5c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e5c6:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
9001e5ca:	eef0 6a43 	vmov.f32	s13, s6
9001e5ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001e5d2:	ee16 5a90 	vmov	r5, s13
9001e5d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001e5da:	ee61 7a27 	vmul.f32	s15, s2, s15
9001e5de:	ee77 2a62 	vsub.f32	s5, s14, s5
9001e5e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001e5e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001e5ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001e5ee:	ee12 2a90 	vmov	r2, s5
9001e5f2:	eef0 2a47 	vmov.f32	s5, s14
9001e5f6:	fb92 f3f3 	sdiv	r3, r2, r3
9001e5fa:	ee13 2a10 	vmov	r2, s6
9001e5fe:	932b      	str	r3, [sp, #172]	; 0xac
9001e600:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e602:	eeb0 3a67 	vmov.f32	s6, s15
9001e606:	fb92 f3f3 	sdiv	r3, r2, r3
9001e60a:	932c      	str	r3, [sp, #176]	; 0xb0
9001e60c:	9b19      	ldr	r3, [sp, #100]	; 0x64
9001e60e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
9001e610:	3b01      	subs	r3, #1
9001e612:	9319      	str	r3, [sp, #100]	; 0x64
9001e614:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001e616:	bf08      	it	eq
9001e618:	4613      	moveq	r3, r2
9001e61a:	9309      	str	r3, [sp, #36]	; 0x24
9001e61c:	e5f4      	b.n	9001e208 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001e61e:	2900      	cmp	r1, #0
9001e620:	f43f ae66 	beq.w	9001e2f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001e624:	f818 0000 	ldrb.w	r0, [r8, r0]
9001e628:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
9001e62c:	900a      	str	r0, [sp, #40]	; 0x28
9001e62e:	0e00      	lsrs	r0, r0, #24
9001e630:	9013      	str	r0, [sp, #76]	; 0x4c
9001e632:	e65d      	b.n	9001e2f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
9001e634:	f113 0801 	adds.w	r8, r3, #1
9001e638:	f53f af74 	bmi.w	9001e524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e63c:	4540      	cmp	r0, r8
9001e63e:	f6ff af71 	blt.w	9001e524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e642:	f11c 0801 	adds.w	r8, ip, #1
9001e646:	f53f af6d 	bmi.w	9001e524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e64a:	45c6      	cmp	lr, r8
9001e64c:	f6ff af6a 	blt.w	9001e524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e650:	9c1c      	ldr	r4, [sp, #112]	; 0x70
9001e652:	b200      	sxth	r0, r0
9001e654:	9302      	str	r3, [sp, #8]
9001e656:	fa0f f38e 	sxth.w	r3, lr
9001e65a:	9000      	str	r0, [sp, #0]
9001e65c:	9301      	str	r3, [sp, #4]
9001e65e:	4633      	mov	r3, r6
9001e660:	981d      	ldr	r0, [sp, #116]	; 0x74
9001e662:	e9cd 1405 	strd	r1, r4, [sp, #20]
9001e666:	e9cd c203 	strd	ip, r2, [sp, #12]
9001e66a:	4639      	mov	r1, r7
9001e66c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001e66e:	f7ff fc63 	bl	9001df38 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
9001e672:	e757      	b.n	9001e524 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001e674:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9001e676:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001e67a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
9001e67c:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001e680:	9b30      	ldr	r3, [sp, #192]	; 0xc0
9001e682:	1427      	asrs	r7, r4, #16
9001e684:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001e686:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001e68a:	142b      	asrs	r3, r5, #16
9001e68c:	fb01 7303 	mla	r3, r1, r3, r7
9001e690:	18e7      	adds	r7, r4, r3
9001e692:	5ce3      	ldrb	r3, [r4, r3]
9001e694:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001e698:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001e69c:	2a00      	cmp	r2, #0
9001e69e:	f000 8137 	beq.w	9001e910 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
9001e6a2:	f897 e001 	ldrb.w	lr, [r7, #1]
9001e6a6:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001e6aa:	9410      	str	r4, [sp, #64]	; 0x40
9001e6ac:	0e24      	lsrs	r4, r4, #24
9001e6ae:	9417      	str	r4, [sp, #92]	; 0x5c
9001e6b0:	b170      	cbz	r0, 9001e6d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e6b2:	eb07 0e01 	add.w	lr, r7, r1
9001e6b6:	5c79      	ldrb	r1, [r7, r1]
9001e6b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e6bc:	910b      	str	r1, [sp, #44]	; 0x2c
9001e6be:	0e09      	lsrs	r1, r1, #24
9001e6c0:	9114      	str	r1, [sp, #80]	; 0x50
9001e6c2:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001e6c6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e6ca:	9111      	str	r1, [sp, #68]	; 0x44
9001e6cc:	0e09      	lsrs	r1, r1, #24
9001e6ce:	9118      	str	r1, [sp, #96]	; 0x60
9001e6d0:	b292      	uxth	r2, r2
9001e6d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
9001e6d4:	b280      	uxth	r0, r0
9001e6d6:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e6d8:	fb02 f800 	mul.w	r8, r2, r0
9001e6dc:	0112      	lsls	r2, r2, #4
9001e6de:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001e6e2:	eba2 0e08 	sub.w	lr, r2, r8
9001e6e6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001e6ea:	b280      	uxth	r0, r0
9001e6ec:	fa1f fe8e 	uxth.w	lr, lr
9001e6f0:	1a12      	subs	r2, r2, r0
9001e6f2:	fb0e f101 	mul.w	r1, lr, r1
9001e6f6:	b292      	uxth	r2, r2
9001e6f8:	fb02 110c 	mla	r1, r2, ip, r1
9001e6fc:	fb00 1104 	mla	r1, r0, r4, r1
9001e700:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e702:	fb08 1104 	mla	r1, r8, r4, r1
9001e706:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001e70a:	2900      	cmp	r1, #0
9001e70c:	f000 80f5 	beq.w	9001e8fa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
9001e710:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001e714:	d019      	beq.n	9001e74a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
9001e716:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001e71a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e71e:	fb0c fa0a 	mul.w	sl, ip, sl
9001e722:	fb0c fc03 	mul.w	ip, ip, r3
9001e726:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001e72a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001e72e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001e732:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e736:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001e73a:	4453      	add	r3, sl
9001e73c:	0a3f      	lsrs	r7, r7, #8
9001e73e:	0a1b      	lsrs	r3, r3, #8
9001e740:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001e744:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001e748:	433b      	orrs	r3, r7
9001e74a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001e74c:	2cff      	cmp	r4, #255	; 0xff
9001e74e:	d020      	beq.n	9001e792 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
9001e750:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e752:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e756:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001e758:	4367      	muls	r7, r4
9001e75a:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e75c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e760:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e764:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9001e766:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e76a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e76e:	fb04 fa0a 	mul.w	sl, r4, sl
9001e772:	44bc      	add	ip, r7
9001e774:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e778:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e77c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e780:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e784:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e788:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e78c:	ea4c 040a 	orr.w	r4, ip, sl
9001e790:	9410      	str	r4, [sp, #64]	; 0x40
9001e792:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e794:	2cff      	cmp	r4, #255	; 0xff
9001e796:	d020      	beq.n	9001e7da <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
9001e798:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e79a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e79e:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e7a0:	4367      	muls	r7, r4
9001e7a2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e7a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e7a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e7ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001e7ae:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e7b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e7b6:	fb04 fa0a 	mul.w	sl, r4, sl
9001e7ba:	44bc      	add	ip, r7
9001e7bc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e7c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e7c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e7c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e7cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e7d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e7d4:	ea4c 040a 	orr.w	r4, ip, sl
9001e7d8:	940b      	str	r4, [sp, #44]	; 0x2c
9001e7da:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e7dc:	2cff      	cmp	r4, #255	; 0xff
9001e7de:	d020      	beq.n	9001e822 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
9001e7e0:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e7e2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e7e6:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e7e8:	4367      	muls	r7, r4
9001e7ea:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e7ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001e7f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001e7f4:	9c18      	ldr	r4, [sp, #96]	; 0x60
9001e7f6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001e7fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e7fe:	fb04 fa0a 	mul.w	sl, r4, sl
9001e802:	44bc      	add	ip, r7
9001e804:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001e808:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e80c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001e810:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001e814:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001e818:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001e81c:	ea4c 040a 	orr.w	r4, ip, sl
9001e820:	9411      	str	r4, [sp, #68]	; 0x44
9001e822:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e824:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001e828:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001e82c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001e830:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001e832:	fb0e f707 	mul.w	r7, lr, r7
9001e836:	fb02 770c 	mla	r7, r2, ip, r7
9001e83a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e83e:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001e840:	fb00 770c 	mla	r7, r0, ip, r7
9001e844:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001e848:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001e84a:	fb08 770c 	mla	r7, r8, ip, r7
9001e84e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001e852:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001e854:	fb0e fe0c 	mul.w	lr, lr, ip
9001e858:	0a3f      	lsrs	r7, r7, #8
9001e85a:	fb02 e303 	mla	r3, r2, r3, lr
9001e85e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9001e860:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001e864:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001e868:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001e86a:	fb00 330a 	mla	r3, r0, sl, r3
9001e86e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9001e872:	f8b9 0000 	ldrh.w	r0, [r9]
9001e876:	fb08 3c0c 	mla	ip, r8, ip, r3
9001e87a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001e87c:	1202      	asrs	r2, r0, #8
9001e87e:	434b      	muls	r3, r1
9001e880:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001e884:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001e888:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001e88c:	1c59      	adds	r1, r3, #1
9001e88e:	ea47 070c 	orr.w	r7, r7, ip
9001e892:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9001e896:	0c3b      	lsrs	r3, r7, #16
9001e898:	ea6f 2111 	mvn.w	r1, r1, lsr #8
9001e89c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
9001e8a0:	b2ff      	uxtb	r7, r7
9001e8a2:	fb13 f304 	smulbb	r3, r3, r4
9001e8a6:	b2c9      	uxtb	r1, r1
9001e8a8:	fb1c fc04 	smulbb	ip, ip, r4
9001e8ac:	fb02 3201 	mla	r2, r2, r1, r3
9001e8b0:	10c3      	asrs	r3, r0, #3
9001e8b2:	fb17 f704 	smulbb	r7, r7, r4
9001e8b6:	00c0      	lsls	r0, r0, #3
9001e8b8:	b292      	uxth	r2, r2
9001e8ba:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001e8be:	b2c0      	uxtb	r0, r0
9001e8c0:	fb03 c301 	mla	r3, r3, r1, ip
9001e8c4:	f102 0c01 	add.w	ip, r2, #1
9001e8c8:	fb00 7001 	mla	r0, r0, r1, r7
9001e8cc:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
9001e8d0:	b280      	uxth	r0, r0
9001e8d2:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
9001e8d6:	b29b      	uxth	r3, r3
9001e8d8:	1c42      	adds	r2, r0, #1
9001e8da:	eb02 2210 	add.w	r2, r2, r0, lsr #8
9001e8de:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e8e2:	ea42 020c 	orr.w	r2, r2, ip
9001e8e6:	f103 0c01 	add.w	ip, r3, #1
9001e8ea:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
9001e8ee:	095b      	lsrs	r3, r3, #5
9001e8f0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e8f4:	431a      	orrs	r2, r3
9001e8f6:	f8a9 2000 	strh.w	r2, [r9]
9001e8fa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
9001e8fc:	f109 0902 	add.w	r9, r9, #2
9001e900:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001e902:	f10b 3bff 	add.w	fp, fp, #4294967295
9001e906:	441a      	add	r2, r3
9001e908:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001e90a:	9229      	str	r2, [sp, #164]	; 0xa4
9001e90c:	441d      	add	r5, r3
9001e90e:	e63d      	b.n	9001e58c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
9001e910:	2800      	cmp	r0, #0
9001e912:	f43f aedd 	beq.w	9001e6d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e916:	5c79      	ldrb	r1, [r7, r1]
9001e918:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001e91c:	910b      	str	r1, [sp, #44]	; 0x2c
9001e91e:	0e09      	lsrs	r1, r1, #24
9001e920:	9114      	str	r1, [sp, #80]	; 0x50
9001e922:	e6d5      	b.n	9001e6d0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9001e924:	b01f      	add	sp, #124	; 0x7c
9001e926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001e92a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
9001e92a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e92e:	b089      	sub	sp, #36	; 0x24
9001e930:	9101      	str	r1, [sp, #4]
9001e932:	9801      	ldr	r0, [sp, #4]
9001e934:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
9001e938:	8800      	ldrh	r0, [r0, #0]
9001e93a:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
9001e93e:	1206      	asrs	r6, r0, #8
9001e940:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9001e944:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
9001e948:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e94c:	9602      	str	r6, [sp, #8]
9001e94e:	10c6      	asrs	r6, r0, #3
9001e950:	00c0      	lsls	r0, r0, #3
9001e952:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e956:	b2c0      	uxtb	r0, r0
9001e958:	9603      	str	r6, [sp, #12]
9001e95a:	9004      	str	r0, [sp, #16]
9001e95c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
9001e960:	fb07 100c 	mla	r0, r7, ip, r1
9001e964:	2f00      	cmp	r7, #0
9001e966:	eb02 0e00 	add.w	lr, r2, r0
9001e96a:	f2c0 810a 	blt.w	9001eb82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e96e:	45b8      	cmp	r8, r7
9001e970:	f340 8107 	ble.w	9001eb82 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9001e974:	2900      	cmp	r1, #0
9001e976:	f2c0 8102 	blt.w	9001eb7e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e97a:	458c      	cmp	ip, r1
9001e97c:	f340 80ff 	ble.w	9001eb7e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
9001e980:	5c12      	ldrb	r2, [r2, r0]
9001e982:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9001e986:	1c4a      	adds	r2, r1, #1
9001e988:	f100 80fe 	bmi.w	9001eb88 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e98c:	4594      	cmp	ip, r2
9001e98e:	f340 80fb 	ble.w	9001eb88 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9001e992:	2d00      	cmp	r5, #0
9001e994:	f000 80fa 	beq.w	9001eb8c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
9001e998:	f89e 2001 	ldrb.w	r2, [lr, #1]
9001e99c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001e9a0:	3701      	adds	r7, #1
9001e9a2:	f100 80f7 	bmi.w	9001eb94 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e9a6:	45b8      	cmp	r8, r7
9001e9a8:	f340 80f4 	ble.w	9001eb94 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9001e9ac:	2c00      	cmp	r4, #0
9001e9ae:	f000 80f4 	beq.w	9001eb9a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9001e9b2:	2900      	cmp	r1, #0
9001e9b4:	eb0e 020c 	add.w	r2, lr, ip
9001e9b8:	f2c0 80ea 	blt.w	9001eb90 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e9bc:	458c      	cmp	ip, r1
9001e9be:	f340 80e7 	ble.w	9001eb90 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
9001e9c2:	f81e 700c 	ldrb.w	r7, [lr, ip]
9001e9c6:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
9001e9ca:	3101      	adds	r1, #1
9001e9cc:	f100 80e8 	bmi.w	9001eba0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e9d0:	458c      	cmp	ip, r1
9001e9d2:	f340 80e5 	ble.w	9001eba0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
9001e9d6:	2d00      	cmp	r5, #0
9001e9d8:	f000 80e4 	beq.w	9001eba4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
9001e9dc:	7852      	ldrb	r2, [r2, #1]
9001e9de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9001e9e2:	0e0b      	lsrs	r3, r1, #24
9001e9e4:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
9001e9e8:	ea4f 6a10 	mov.w	sl, r0, lsr #24
9001e9ec:	9300      	str	r3, [sp, #0]
9001e9ee:	b2a4      	uxth	r4, r4
9001e9f0:	b2ab      	uxth	r3, r5
9001e9f2:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
9001e9f6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
9001e9fa:	fb03 f904 	mul.w	r9, r3, r4
9001e9fe:	011b      	lsls	r3, r3, #4
9001ea00:	fb0a f505 	mul.w	r5, sl, r5
9001ea04:	ea4f 6817 	mov.w	r8, r7, lsr #24
9001ea08:	eba3 0e09 	sub.w	lr, r3, r9
9001ea0c:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
9001ea10:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
9001ea14:	0a28      	lsrs	r0, r5, #8
9001ea16:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
9001ea1a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001ea1e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001ea22:	fb0a f303 	mul.w	r3, sl, r3
9001ea26:	fb08 f707 	mul.w	r7, r8, r7
9001ea2a:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
9001ea2e:	4405      	add	r5, r0
9001ea30:	fb08 fc0c 	mul.w	ip, r8, ip
9001ea34:	b2a4      	uxth	r4, r4
9001ea36:	0a2d      	lsrs	r5, r5, #8
9001ea38:	fa1f fe8e 	uxth.w	lr, lr
9001ea3c:	1b12      	subs	r2, r2, r4
9001ea3e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9001ea42:	b292      	uxth	r2, r2
9001ea44:	9005      	str	r0, [sp, #20]
9001ea46:	f503 7080 	add.w	r0, r3, #256	; 0x100
9001ea4a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
9001ea4e:	ea4f 201c 	mov.w	r0, ip, lsr #8
9001ea52:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9001ea56:	0a1b      	lsrs	r3, r3, #8
9001ea58:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001ea5c:	9306      	str	r3, [sp, #24]
9001ea5e:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9001ea62:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001ea66:	4460      	add	r0, ip
9001ea68:	fb0b f303 	mul.w	r3, fp, r3
9001ea6c:	fb0b f606 	mul.w	r6, fp, r6
9001ea70:	0a00      	lsrs	r0, r0, #8
9001ea72:	0a1d      	lsrs	r5, r3, #8
9001ea74:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
9001ea78:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9001ea7c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001ea80:	441d      	add	r5, r3
9001ea82:	f506 7380 	add.w	r3, r6, #256	; 0x100
9001ea86:	eb03 2616 	add.w	r6, r3, r6, lsr #8
9001ea8a:	f507 7380 	add.w	r3, r7, #256	; 0x100
9001ea8e:	0a2d      	lsrs	r5, r5, #8
9001ea90:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9001ea94:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
9001ea98:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001ea9c:	0a36      	lsrs	r6, r6, #8
9001ea9e:	0a1b      	lsrs	r3, r3, #8
9001eaa0:	fb05 f50e 	mul.w	r5, r5, lr
9001eaa4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9001eaa8:	9307      	str	r3, [sp, #28]
9001eaaa:	0e0b      	lsrs	r3, r1, #24
9001eaac:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001eab0:	fb0e f606 	mul.w	r6, lr, r6
9001eab4:	435f      	muls	r7, r3
9001eab6:	4359      	muls	r1, r3
9001eab8:	9b05      	ldr	r3, [sp, #20]
9001eaba:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001eabe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001eac2:	fb03 5502 	mla	r5, r3, r2, r5
9001eac6:	9b06      	ldr	r3, [sp, #24]
9001eac8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001eacc:	fb0e fe0b 	mul.w	lr, lr, fp
9001ead0:	44bc      	add	ip, r7
9001ead2:	f501 7780 	add.w	r7, r1, #256	; 0x100
9001ead6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001eada:	eb07 2111 	add.w	r1, r7, r1, lsr #8
9001eade:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001eae2:	0a09      	lsrs	r1, r1, #8
9001eae4:	fb0c 5509 	mla	r5, ip, r9, r5
9001eae8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9001eaec:	fb00 5504 	mla	r5, r0, r4, r5
9001eaf0:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
9001eaf4:	9b07      	ldr	r3, [sp, #28]
9001eaf6:	fb02 6000 	mla	r0, r2, r0, r6
9001eafa:	0a2d      	lsrs	r5, r5, #8
9001eafc:	fb02 e20a 	mla	r2, r2, sl, lr
9001eb00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001eb04:	fb09 0001 	mla	r0, r9, r1, r0
9001eb08:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9001eb0c:	fb04 0003 	mla	r0, r4, r3, r0
9001eb10:	9b00      	ldr	r3, [sp, #0]
9001eb12:	fb04 2408 	mla	r4, r4, r8, r2
9001eb16:	9a04      	ldr	r2, [sp, #16]
9001eb18:	0a00      	lsrs	r0, r0, #8
9001eb1a:	fb09 4903 	mla	r9, r9, r3, r4
9001eb1e:	9b02      	ldr	r3, [sp, #8]
9001eb20:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9001eb24:	ea6f 2929 	mvn.w	r9, r9, asr #8
9001eb28:	4305      	orrs	r5, r0
9001eb2a:	fa5f f989 	uxtb.w	r9, r9
9001eb2e:	fb03 f109 	mul.w	r1, r3, r9
9001eb32:	9b03      	ldr	r3, [sp, #12]
9001eb34:	fb03 f309 	mul.w	r3, r3, r9
9001eb38:	fb02 f909 	mul.w	r9, r2, r9
9001eb3c:	1c4a      	adds	r2, r1, #1
9001eb3e:	1c58      	adds	r0, r3, #1
9001eb40:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eb44:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001eb48:	0c2a      	lsrs	r2, r5, #16
9001eb4a:	0a2b      	lsrs	r3, r5, #8
9001eb4c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
9001eb50:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001eb54:	0212      	lsls	r2, r2, #8
9001eb56:	00db      	lsls	r3, r3, #3
9001eb58:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
9001eb5c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eb60:	4313      	orrs	r3, r2
9001eb62:	f109 0201 	add.w	r2, r9, #1
9001eb66:	eb02 2919 	add.w	r9, r2, r9, lsr #8
9001eb6a:	eb05 2519 	add.w	r5, r5, r9, lsr #8
9001eb6e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001eb72:	431d      	orrs	r5, r3
9001eb74:	9b01      	ldr	r3, [sp, #4]
9001eb76:	801d      	strh	r5, [r3, #0]
9001eb78:	b009      	add	sp, #36	; 0x24
9001eb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001eb7e:	2000      	movs	r0, #0
9001eb80:	e701      	b.n	9001e986 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9001eb82:	2600      	movs	r6, #0
9001eb84:	4630      	mov	r0, r6
9001eb86:	e70b      	b.n	9001e9a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001eb88:	2600      	movs	r6, #0
9001eb8a:	e709      	b.n	9001e9a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001eb8c:	462e      	mov	r6, r5
9001eb8e:	e707      	b.n	9001e9a0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
9001eb90:	2700      	movs	r7, #0
9001eb92:	e71a      	b.n	9001e9ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9001eb94:	2100      	movs	r1, #0
9001eb96:	460f      	mov	r7, r1
9001eb98:	e723      	b.n	9001e9e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001eb9a:	4621      	mov	r1, r4
9001eb9c:	4627      	mov	r7, r4
9001eb9e:	e720      	b.n	9001e9e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001eba0:	2100      	movs	r1, #0
9001eba2:	e71e      	b.n	9001e9e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9001eba4:	4629      	mov	r1, r5
9001eba6:	e71c      	b.n	9001e9e2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

9001eba8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001eba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ebac:	b09b      	sub	sp, #108	; 0x6c
9001ebae:	9218      	str	r2, [sp, #96]	; 0x60
9001ebb0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9001ebb2:	9019      	str	r0, [sp, #100]	; 0x64
9001ebb4:	9116      	str	r1, [sp, #88]	; 0x58
9001ebb6:	6850      	ldr	r0, [r2, #4]
9001ebb8:	9307      	str	r3, [sp, #28]
9001ebba:	6812      	ldr	r2, [r2, #0]
9001ebbc:	9d26      	ldr	r5, [sp, #152]	; 0x98
9001ebbe:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
9001ebc2:	fb00 1303 	mla	r3, r0, r3, r1
9001ebc6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001ebca:	930a      	str	r3, [sp, #40]	; 0x28
9001ebcc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001ebce:	681b      	ldr	r3, [r3, #0]
9001ebd0:	930f      	str	r3, [sp, #60]	; 0x3c
9001ebd2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001ebd4:	685e      	ldr	r6, [r3, #4]
9001ebd6:	3604      	adds	r6, #4
9001ebd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001ebda:	2b00      	cmp	r3, #0
9001ebdc:	dc03      	bgt.n	9001ebe6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001ebde:	9b18      	ldr	r3, [sp, #96]	; 0x60
9001ebe0:	2b00      	cmp	r3, #0
9001ebe2:	f340 8373 	ble.w	9001f2cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001ebe6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001ebe8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001ebec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001ebf0:	1e48      	subs	r0, r1, #1
9001ebf2:	1e57      	subs	r7, r2, #1
9001ebf4:	9b07      	ldr	r3, [sp, #28]
9001ebf6:	2b00      	cmp	r3, #0
9001ebf8:	f340 818f 	ble.w	9001ef1a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
9001ebfc:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001ebfe:	142b      	asrs	r3, r5, #16
9001ec00:	ea5f 4c24 	movs.w	ip, r4, asr #16
9001ec04:	d406      	bmi.n	9001ec14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001ec06:	4584      	cmp	ip, r0
9001ec08:	da04      	bge.n	9001ec14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001ec0a:	2b00      	cmp	r3, #0
9001ec0c:	db02      	blt.n	9001ec14 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001ec0e:	42bb      	cmp	r3, r7
9001ec10:	f2c0 8184 	blt.w	9001ef1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
9001ec14:	f11c 0c01 	adds.w	ip, ip, #1
9001ec18:	f100 8172 	bmi.w	9001ef00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001ec1c:	4561      	cmp	r1, ip
9001ec1e:	f2c0 816f 	blt.w	9001ef00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001ec22:	3301      	adds	r3, #1
9001ec24:	f100 816c 	bmi.w	9001ef00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001ec28:	429a      	cmp	r2, r3
9001ec2a:	f2c0 8169 	blt.w	9001ef00 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9001ec2e:	9b07      	ldr	r3, [sp, #28]
9001ec30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9001ec32:	9317      	str	r3, [sp, #92]	; 0x5c
9001ec34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001ec36:	2b00      	cmp	r3, #0
9001ec38:	f340 818e 	ble.w	9001ef58 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
9001ec3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001ec3e:	ea4f 4c25 	mov.w	ip, r5, asr #16
9001ec42:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001ec46:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001ec4a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001ec4c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
9001ec50:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001ec52:	141b      	asrs	r3, r3, #16
9001ec54:	f100 81d1 	bmi.w	9001effa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001ec58:	f101 38ff 	add.w	r8, r1, #4294967295
9001ec5c:	4543      	cmp	r3, r8
9001ec5e:	f280 81cc 	bge.w	9001effa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001ec62:	f1bc 0f00 	cmp.w	ip, #0
9001ec66:	f2c0 81c8 	blt.w	9001effa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001ec6a:	f10e 38ff 	add.w	r8, lr, #4294967295
9001ec6e:	45c4      	cmp	ip, r8
9001ec70:	f280 81c3 	bge.w	9001effa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9001ec74:	b209      	sxth	r1, r1
9001ec76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001ec78:	fb0c 3301 	mla	r3, ip, r1, r3
9001ec7c:	eb04 0803 	add.w	r8, r4, r3
9001ec80:	5ce3      	ldrb	r3, [r4, r3]
9001ec82:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001ec86:	ea4f 6e13 	mov.w	lr, r3, lsr #24
9001ec8a:	2a00      	cmp	r2, #0
9001ec8c:	f000 81aa 	beq.w	9001efe4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
9001ec90:	f898 c001 	ldrb.w	ip, [r8, #1]
9001ec94:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
9001ec98:	940b      	str	r4, [sp, #44]	; 0x2c
9001ec9a:	0e24      	lsrs	r4, r4, #24
9001ec9c:	9412      	str	r4, [sp, #72]	; 0x48
9001ec9e:	b178      	cbz	r0, 9001ecc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001eca0:	eb08 0c01 	add.w	ip, r8, r1
9001eca4:	f818 1001 	ldrb.w	r1, [r8, r1]
9001eca8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001ecac:	9108      	str	r1, [sp, #32]
9001ecae:	0e09      	lsrs	r1, r1, #24
9001ecb0:	9110      	str	r1, [sp, #64]	; 0x40
9001ecb2:	f89c 1001 	ldrb.w	r1, [ip, #1]
9001ecb6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001ecba:	910c      	str	r1, [sp, #48]	; 0x30
9001ecbc:	0e09      	lsrs	r1, r1, #24
9001ecbe:	9113      	str	r1, [sp, #76]	; 0x4c
9001ecc0:	b292      	uxth	r2, r2
9001ecc2:	9912      	ldr	r1, [sp, #72]	; 0x48
9001ecc4:	b280      	uxth	r0, r0
9001ecc6:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001ecc8:	fb02 f900 	mul.w	r9, r2, r0
9001eccc:	0112      	lsls	r2, r2, #4
9001ecce:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
9001ecd2:	eba2 0809 	sub.w	r8, r2, r9
9001ecd6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
9001ecda:	b280      	uxth	r0, r0
9001ecdc:	fa1f f888 	uxth.w	r8, r8
9001ece0:	1a12      	subs	r2, r2, r0
9001ece2:	fb08 f101 	mul.w	r1, r8, r1
9001ece6:	b292      	uxth	r2, r2
9001ece8:	fb02 110e 	mla	r1, r2, lr, r1
9001ecec:	fb00 1104 	mla	r1, r0, r4, r1
9001ecf0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001ecf2:	fb09 1104 	mla	r1, r9, r4, r1
9001ecf6:	f3c1 2107 	ubfx	r1, r1, #8, #8
9001ecfa:	2900      	cmp	r1, #0
9001ecfc:	f000 80f5 	beq.w	9001eeea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001ed00:	f1be 0fff 	cmp.w	lr, #255	; 0xff
9001ed04:	d01b      	beq.n	9001ed3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001ed06:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001ed0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001ed0e:	fb0e fa0a 	mul.w	sl, lr, sl
9001ed12:	fb0e fe03 	mul.w	lr, lr, r3
9001ed16:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001ed1a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001ed1e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9001ed22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ed26:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9001ed2a:	4453      	add	r3, sl
9001ed2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ed30:	0a1b      	lsrs	r3, r3, #8
9001ed32:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001ed36:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001ed3a:	ea43 030c 	orr.w	r3, r3, ip
9001ed3e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ed40:	2cff      	cmp	r4, #255	; 0xff
9001ed42:	d021      	beq.n	9001ed88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001ed44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ed46:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001ed4a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ed4c:	fb04 fb0b 	mul.w	fp, r4, fp
9001ed50:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ed52:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001ed56:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ed58:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001ed5c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001ed60:	fb04 fa0a 	mul.w	sl, r4, sl
9001ed64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001ed68:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001ed6c:	44de      	add	lr, fp
9001ed6e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001ed72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001ed76:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ed7a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001ed7e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001ed82:	ea4e 040a 	orr.w	r4, lr, sl
9001ed86:	940b      	str	r4, [sp, #44]	; 0x2c
9001ed88:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001ed8a:	2cff      	cmp	r4, #255	; 0xff
9001ed8c:	d021      	beq.n	9001edd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001ed8e:	9c08      	ldr	r4, [sp, #32]
9001ed90:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001ed94:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001ed96:	fb04 fb0b 	mul.w	fp, r4, fp
9001ed9a:	9c08      	ldr	r4, [sp, #32]
9001ed9c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001eda0:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001eda2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001eda6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001edaa:	fb04 fa0a 	mul.w	sl, r4, sl
9001edae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001edb2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001edb6:	44de      	add	lr, fp
9001edb8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001edbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001edc0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001edc4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001edc8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001edcc:	ea4e 040a 	orr.w	r4, lr, sl
9001edd0:	9408      	str	r4, [sp, #32]
9001edd2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001edd4:	2cff      	cmp	r4, #255	; 0xff
9001edd6:	d021      	beq.n	9001ee1c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
9001edd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001edda:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9001edde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001ede0:	fb04 fb0b 	mul.w	fp, r4, fp
9001ede4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001ede6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001edea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001edec:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9001edf0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9001edf4:	fb04 fa0a 	mul.w	sl, r4, sl
9001edf8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001edfc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9001ee00:	44de      	add	lr, fp
9001ee02:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9001ee06:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001ee0a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001ee0e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9001ee12:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001ee16:	ea4e 040a 	orr.w	r4, lr, sl
9001ee1a:	940c      	str	r4, [sp, #48]	; 0x30
9001ee1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ee1e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9001ee22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001ee26:	43c9      	mvns	r1, r1
9001ee28:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001ee2c:	9c08      	ldr	r4, [sp, #32]
9001ee2e:	fb08 fc0c 	mul.w	ip, r8, ip
9001ee32:	fb02 cc0e 	mla	ip, r2, lr, ip
9001ee36:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001ee3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
9001ee3c:	fb00 cc0e 	mla	ip, r0, lr, ip
9001ee40:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9001ee44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001ee46:	fb09 cc0e 	mla	ip, r9, lr, ip
9001ee4a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
9001ee4e:	fb08 f80e 	mul.w	r8, r8, lr
9001ee52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001ee56:	fa5f fe81 	uxtb.w	lr, r1
9001ee5a:	fb02 8303 	mla	r3, r2, r3, r8
9001ee5e:	9a08      	ldr	r2, [sp, #32]
9001ee60:	f8b7 8000 	ldrh.w	r8, [r7]
9001ee64:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001ee68:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
9001ee6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
9001ee6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9001ee72:	fb00 330a 	mla	r3, r0, sl, r3
9001ee76:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
9001ee7a:	ea4f 2228 	mov.w	r2, r8, asr #8
9001ee7e:	fb09 3900 	mla	r9, r9, r0, r3
9001ee82:	ea4f 00e8 	mov.w	r0, r8, asr #3
9001ee86:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9001ee8a:	b2c9      	uxtb	r1, r1
9001ee8c:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001ee90:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001ee94:	fb02 f20e 	mul.w	r2, r2, lr
9001ee98:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
9001ee9c:	fb00 f00e 	mul.w	r0, r0, lr
9001eea0:	1c53      	adds	r3, r2, #1
9001eea2:	fb01 f10e 	mul.w	r1, r1, lr
9001eea6:	ea4c 0c09 	orr.w	ip, ip, r9
9001eeaa:	eb03 2212 	add.w	r2, r3, r2, lsr #8
9001eeae:	ea4f 431c 	mov.w	r3, ip, lsr #16
9001eeb2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001eeb6:	4a60      	ldr	r2, [pc, #384]	; (9001f038 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
9001eeb8:	b2db      	uxtb	r3, r3
9001eeba:	ea02 2203 	and.w	r2, r2, r3, lsl #8
9001eebe:	1c43      	adds	r3, r0, #1
9001eec0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001eec4:	ea4f 231c 	mov.w	r3, ip, lsr #8
9001eec8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9001eecc:	00db      	lsls	r3, r3, #3
9001eece:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eed2:	4313      	orrs	r3, r2
9001eed4:	1c4a      	adds	r2, r1, #1
9001eed6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001eeda:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
9001eede:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
9001eee2:	ea4c 0c03 	orr.w	ip, ip, r3
9001eee6:	f8a7 c000 	strh.w	ip, [r7]
9001eeea:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001eeec:	3702      	adds	r7, #2
9001eeee:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001eef0:	441a      	add	r2, r3
9001eef2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001eef4:	441d      	add	r5, r3
9001eef6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9001eef8:	9225      	str	r2, [sp, #148]	; 0x94
9001eefa:	3b01      	subs	r3, #1
9001eefc:	9317      	str	r3, [sp, #92]	; 0x5c
9001eefe:	e699      	b.n	9001ec34 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001ef00:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001ef02:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001ef04:	441c      	add	r4, r3
9001ef06:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001ef08:	441d      	add	r5, r3
9001ef0a:	9b07      	ldr	r3, [sp, #28]
9001ef0c:	9425      	str	r4, [sp, #148]	; 0x94
9001ef0e:	3b01      	subs	r3, #1
9001ef10:	9307      	str	r3, [sp, #28]
9001ef12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ef14:	3302      	adds	r3, #2
9001ef16:	930a      	str	r3, [sp, #40]	; 0x28
9001ef18:	e66c      	b.n	9001ebf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001ef1a:	d024      	beq.n	9001ef66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
9001ef1c:	9b07      	ldr	r3, [sp, #28]
9001ef1e:	9827      	ldr	r0, [sp, #156]	; 0x9c
9001ef20:	3b01      	subs	r3, #1
9001ef22:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001ef24:	fb00 4003 	mla	r0, r0, r3, r4
9001ef28:	1400      	asrs	r0, r0, #16
9001ef2a:	f53f ae80 	bmi.w	9001ec2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001ef2e:	3901      	subs	r1, #1
9001ef30:	4288      	cmp	r0, r1
9001ef32:	f6bf ae7c 	bge.w	9001ec2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001ef36:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001ef38:	fb01 5303 	mla	r3, r1, r3, r5
9001ef3c:	141b      	asrs	r3, r3, #16
9001ef3e:	f53f ae76 	bmi.w	9001ec2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001ef42:	3a01      	subs	r2, #1
9001ef44:	4293      	cmp	r3, r2
9001ef46:	f6bf ae72 	bge.w	9001ec2e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001ef4a:	f8dd b01c 	ldr.w	fp, [sp, #28]
9001ef4e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9001ef52:	f1bb 0f00 	cmp.w	fp, #0
9001ef56:	dc71      	bgt.n	9001f03c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9001ef58:	9b07      	ldr	r3, [sp, #28]
9001ef5a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001ef5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001ef60:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001ef64:	930a      	str	r3, [sp, #40]	; 0x28
9001ef66:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001ef68:	2b00      	cmp	r3, #0
9001ef6a:	f340 81af 	ble.w	9001f2cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
9001ef6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001ef72:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001ef74:	ee30 0a04 	vadd.f32	s0, s0, s8
9001ef78:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001ef7c:	eef0 6a62 	vmov.f32	s13, s5
9001ef80:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001ef84:	ee31 1a05 	vadd.f32	s2, s2, s10
9001ef88:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ef8c:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
9001ef90:	eef0 6a43 	vmov.f32	s13, s6
9001ef94:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001ef98:	ee16 5a90 	vmov	r5, s13
9001ef9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001efa0:	ee61 7a27 	vmul.f32	s15, s2, s15
9001efa4:	ee77 2a62 	vsub.f32	s5, s14, s5
9001efa8:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001efac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001efb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001efb4:	ee12 2a90 	vmov	r2, s5
9001efb8:	eef0 2a47 	vmov.f32	s5, s14
9001efbc:	fb92 f3f3 	sdiv	r3, r2, r3
9001efc0:	ee13 2a10 	vmov	r2, s6
9001efc4:	9327      	str	r3, [sp, #156]	; 0x9c
9001efc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001efc8:	eeb0 3a67 	vmov.f32	s6, s15
9001efcc:	fb92 f3f3 	sdiv	r3, r2, r3
9001efd0:	9328      	str	r3, [sp, #160]	; 0xa0
9001efd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
9001efd4:	9a18      	ldr	r2, [sp, #96]	; 0x60
9001efd6:	3b01      	subs	r3, #1
9001efd8:	9316      	str	r3, [sp, #88]	; 0x58
9001efda:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001efdc:	bf08      	it	eq
9001efde:	4613      	moveq	r3, r2
9001efe0:	9307      	str	r3, [sp, #28]
9001efe2:	e5f9      	b.n	9001ebd8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001efe4:	2800      	cmp	r0, #0
9001efe6:	f43f ae6b 	beq.w	9001ecc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001efea:	f818 1001 	ldrb.w	r1, [r8, r1]
9001efee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001eff2:	9108      	str	r1, [sp, #32]
9001eff4:	0e09      	lsrs	r1, r1, #24
9001eff6:	9110      	str	r1, [sp, #64]	; 0x40
9001eff8:	e662      	b.n	9001ecc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
9001effa:	f113 0801 	adds.w	r8, r3, #1
9001effe:	f53f af74 	bmi.w	9001eeea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001f002:	4541      	cmp	r1, r8
9001f004:	f6ff af71 	blt.w	9001eeea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001f008:	f11c 0801 	adds.w	r8, ip, #1
9001f00c:	f53f af6d 	bmi.w	9001eeea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001f010:	45c6      	cmp	lr, r8
9001f012:	f6ff af6a 	blt.w	9001eeea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001f016:	b209      	sxth	r1, r1
9001f018:	e9cd 3c02 	strd	r3, ip, [sp, #8]
9001f01c:	fa0f f38e 	sxth.w	r3, lr
9001f020:	9100      	str	r1, [sp, #0]
9001f022:	4639      	mov	r1, r7
9001f024:	9301      	str	r3, [sp, #4]
9001f026:	4633      	mov	r3, r6
9001f028:	e9cd 2004 	strd	r2, r0, [sp, #16]
9001f02c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001f02e:	9819      	ldr	r0, [sp, #100]	; 0x64
9001f030:	f7ff fc7b 	bl	9001e92a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9001f034:	e759      	b.n	9001eeea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9001f036:	bf00      	nop
9001f038:	fffff800 	.word	0xfffff800
9001f03c:	9b25      	ldr	r3, [sp, #148]	; 0x94
9001f03e:	f3c5 3003 	ubfx	r0, r5, #12, #4
9001f042:	9c25      	ldr	r4, [sp, #148]	; 0x94
9001f044:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001f048:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9001f04a:	1427      	asrs	r7, r4, #16
9001f04c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001f04e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f052:	142b      	asrs	r3, r5, #16
9001f054:	fb01 7303 	mla	r3, r1, r3, r7
9001f058:	18e7      	adds	r7, r4, r3
9001f05a:	5ce3      	ldrb	r3, [r4, r3]
9001f05c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9001f060:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9001f064:	2a00      	cmp	r2, #0
9001f066:	f000 8127 	beq.w	9001f2b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
9001f06a:	f897 e001 	ldrb.w	lr, [r7, #1]
9001f06e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9001f072:	940d      	str	r4, [sp, #52]	; 0x34
9001f074:	0e24      	lsrs	r4, r4, #24
9001f076:	9414      	str	r4, [sp, #80]	; 0x50
9001f078:	b170      	cbz	r0, 9001f098 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001f07a:	eb07 0e01 	add.w	lr, r7, r1
9001f07e:	5c79      	ldrb	r1, [r7, r1]
9001f080:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001f084:	9109      	str	r1, [sp, #36]	; 0x24
9001f086:	0e09      	lsrs	r1, r1, #24
9001f088:	9111      	str	r1, [sp, #68]	; 0x44
9001f08a:	f89e 1001 	ldrb.w	r1, [lr, #1]
9001f08e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001f092:	910e      	str	r1, [sp, #56]	; 0x38
9001f094:	0e09      	lsrs	r1, r1, #24
9001f096:	9115      	str	r1, [sp, #84]	; 0x54
9001f098:	b292      	uxth	r2, r2
9001f09a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001f09c:	b280      	uxth	r0, r0
9001f09e:	fb02 f800 	mul.w	r8, r2, r0
9001f0a2:	0112      	lsls	r2, r2, #4
9001f0a4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
9001f0a8:	eba2 0e08 	sub.w	lr, r2, r8
9001f0ac:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
9001f0b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001f0b2:	b280      	uxth	r0, r0
9001f0b4:	fa1f fe8e 	uxth.w	lr, lr
9001f0b8:	1a09      	subs	r1, r1, r0
9001f0ba:	fb0e f202 	mul.w	r2, lr, r2
9001f0be:	b289      	uxth	r1, r1
9001f0c0:	fb01 220c 	mla	r2, r1, ip, r2
9001f0c4:	fb00 2204 	mla	r2, r0, r4, r2
9001f0c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001f0ca:	fb08 2204 	mla	r2, r8, r4, r2
9001f0ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
9001f0d2:	2a00      	cmp	r2, #0
9001f0d4:	f000 80e5 	beq.w	9001f2a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
9001f0d8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
9001f0dc:	d019      	beq.n	9001f112 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
9001f0de:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
9001f0e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001f0e6:	fb0c fa0a 	mul.w	sl, ip, sl
9001f0ea:	fb0c fc03 	mul.w	ip, ip, r3
9001f0ee:	ea4f 231a 	mov.w	r3, sl, lsr #8
9001f0f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9001f0f6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9001f0fa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001f0fe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001f102:	4453      	add	r3, sl
9001f104:	0a3f      	lsrs	r7, r7, #8
9001f106:	0a1b      	lsrs	r3, r3, #8
9001f108:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9001f10c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9001f110:	433b      	orrs	r3, r7
9001f112:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001f114:	2cff      	cmp	r4, #255	; 0xff
9001f116:	d020      	beq.n	9001f15a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
9001f118:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001f11a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001f11e:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001f120:	4367      	muls	r7, r4
9001f122:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001f124:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001f128:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001f12c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001f12e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001f132:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f136:	fb04 fa0a 	mul.w	sl, r4, sl
9001f13a:	44bc      	add	ip, r7
9001f13c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001f140:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f144:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001f148:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f14c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f150:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f154:	ea4c 040a 	orr.w	r4, ip, sl
9001f158:	940d      	str	r4, [sp, #52]	; 0x34
9001f15a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001f15c:	2cff      	cmp	r4, #255	; 0xff
9001f15e:	d020      	beq.n	9001f1a2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
9001f160:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001f162:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001f166:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001f168:	4367      	muls	r7, r4
9001f16a:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001f16c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001f170:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001f174:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001f176:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001f17a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f17e:	fb04 fa0a 	mul.w	sl, r4, sl
9001f182:	44bc      	add	ip, r7
9001f184:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001f188:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f18c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001f190:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f194:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f198:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f19c:	ea4c 040a 	orr.w	r4, ip, sl
9001f1a0:	9409      	str	r4, [sp, #36]	; 0x24
9001f1a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001f1a4:	2cff      	cmp	r4, #255	; 0xff
9001f1a6:	d020      	beq.n	9001f1ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
9001f1a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f1aa:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001f1ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001f1b0:	4367      	muls	r7, r4
9001f1b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f1b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9001f1b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9001f1bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001f1be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9001f1c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f1c6:	fb04 fa0a 	mul.w	sl, r4, sl
9001f1ca:	44bc      	add	ip, r7
9001f1cc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
9001f1d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f1d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9001f1d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9001f1dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9001f1e0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9001f1e4:	ea4c 040a 	orr.w	r4, ip, sl
9001f1e8:	940e      	str	r4, [sp, #56]	; 0x38
9001f1ea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001f1ec:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
9001f1f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9001f1f4:	43d2      	mvns	r2, r2
9001f1f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9001f1fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
9001f1fc:	b2d2      	uxtb	r2, r2
9001f1fe:	fb0e f707 	mul.w	r7, lr, r7
9001f202:	fb01 770c 	mla	r7, r1, ip, r7
9001f206:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001f20a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f20c:	fb00 770c 	mla	r7, r0, ip, r7
9001f210:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9001f214:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001f216:	fb08 770c 	mla	r7, r8, ip, r7
9001f21a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9001f21e:	fb0e fe0c 	mul.w	lr, lr, ip
9001f222:	0a3f      	lsrs	r7, r7, #8
9001f224:	fb01 e303 	mla	r3, r1, r3, lr
9001f228:	9909      	ldr	r1, [sp, #36]	; 0x24
9001f22a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9001f22e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9001f232:	990e      	ldr	r1, [sp, #56]	; 0x38
9001f234:	fb00 330a 	mla	r3, r0, sl, r3
9001f238:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
9001f23c:	fb08 3c0c 	mla	ip, r8, ip, r3
9001f240:	f8b9 3000 	ldrh.w	r3, [r9]
9001f244:	1218      	asrs	r0, r3, #8
9001f246:	10d9      	asrs	r1, r3, #3
9001f248:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001f24c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f250:	00db      	lsls	r3, r3, #3
9001f252:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f256:	4350      	muls	r0, r2
9001f258:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9001f25c:	b2db      	uxtb	r3, r3
9001f25e:	4351      	muls	r1, r2
9001f260:	ea47 070c 	orr.w	r7, r7, ip
9001f264:	4353      	muls	r3, r2
9001f266:	1c42      	adds	r2, r0, #1
9001f268:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001f26c:	0c3a      	lsrs	r2, r7, #16
9001f26e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9001f272:	4a18      	ldr	r2, [pc, #96]	; (9001f2d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
9001f274:	b2c0      	uxtb	r0, r0
9001f276:	ea02 2000 	and.w	r0, r2, r0, lsl #8
9001f27a:	1c4a      	adds	r2, r1, #1
9001f27c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001f280:	0a3a      	lsrs	r2, r7, #8
9001f282:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001f286:	00c9      	lsls	r1, r1, #3
9001f288:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f28c:	4301      	orrs	r1, r0
9001f28e:	1c58      	adds	r0, r3, #1
9001f290:	eb00 2013 	add.w	r0, r0, r3, lsr #8
9001f294:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001f298:	f3c7 00c4 	ubfx	r0, r7, #3, #5
9001f29c:	4308      	orrs	r0, r1
9001f29e:	f8a9 0000 	strh.w	r0, [r9]
9001f2a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
9001f2a4:	f109 0902 	add.w	r9, r9, #2
9001f2a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001f2aa:	f10b 3bff 	add.w	fp, fp, #4294967295
9001f2ae:	441a      	add	r2, r3
9001f2b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f2b2:	9225      	str	r2, [sp, #148]	; 0x94
9001f2b4:	441d      	add	r5, r3
9001f2b6:	e64c      	b.n	9001ef52 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001f2b8:	2800      	cmp	r0, #0
9001f2ba:	f43f aeed 	beq.w	9001f098 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001f2be:	5c79      	ldrb	r1, [r7, r1]
9001f2c0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9001f2c4:	9109      	str	r1, [sp, #36]	; 0x24
9001f2c6:	0e09      	lsrs	r1, r1, #24
9001f2c8:	9111      	str	r1, [sp, #68]	; 0x44
9001f2ca:	e6e5      	b.n	9001f098 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
9001f2cc:	b01b      	add	sp, #108	; 0x6c
9001f2ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f2d2:	bf00      	nop
9001f2d4:	fffff800 	.word	0xfffff800

9001f2d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
9001f2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f2dc:	b085      	sub	sp, #20
9001f2de:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001f2e2:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001f2e6:	2800      	cmp	r0, #0
9001f2e8:	9103      	str	r1, [sp, #12]
9001f2ea:	fb00 7406 	mla	r4, r0, r6, r7
9001f2ee:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001f2f2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001f2f6:	eb02 0544 	add.w	r5, r2, r4, lsl #1
9001f2fa:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001f2fe:	eb03 0904 	add.w	r9, r3, r4
9001f302:	9501      	str	r5, [sp, #4]
9001f304:	f2c0 8150 	blt.w	9001f5a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001f308:	4583      	cmp	fp, r0
9001f30a:	f340 814d 	ble.w	9001f5a8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
9001f30e:	2f00      	cmp	r7, #0
9001f310:	f2c0 8146 	blt.w	9001f5a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001f314:	42be      	cmp	r6, r7
9001f316:	f340 8143 	ble.w	9001f5a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
9001f31a:	f813 c004 	ldrb.w	ip, [r3, r4]
9001f31e:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
9001f322:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001f326:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001f32a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001f32e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f332:	4355      	muls	r5, r2
9001f334:	fb0c f203 	mul.w	r2, ip, r3
9001f338:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001f33c:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001f340:	441d      	add	r5, r3
9001f342:	f102 0320 	add.w	r3, r2, #32
9001f346:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f34a:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001f34e:	0a1b      	lsrs	r3, r3, #8
9001f350:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001f354:	431c      	orrs	r4, r3
9001f356:	1c7b      	adds	r3, r7, #1
9001f358:	f100 812b 	bmi.w	9001f5b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001f35c:	429e      	cmp	r6, r3
9001f35e:	f340 8128 	ble.w	9001f5b2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
9001f362:	2900      	cmp	r1, #0
9001f364:	f000 8128 	beq.w	9001f5b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
9001f368:	9a01      	ldr	r2, [sp, #4]
9001f36a:	f899 3001 	ldrb.w	r3, [r9, #1]
9001f36e:	8855      	ldrh	r5, [r2, #2]
9001f370:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001f374:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001f378:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f37c:	fb08 f802 	mul.w	r8, r8, r2
9001f380:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001f384:	435d      	muls	r5, r3
9001f386:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001f38a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f38e:	44d0      	add	r8, sl
9001f390:	f105 0a20 	add.w	sl, r5, #32
9001f394:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001f398:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001f39c:	0a2d      	lsrs	r5, r5, #8
9001f39e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f3a2:	432a      	orrs	r2, r5
9001f3a4:	3001      	adds	r0, #1
9001f3a6:	f100 810d 	bmi.w	9001f5c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001f3aa:	4583      	cmp	fp, r0
9001f3ac:	f340 810a 	ble.w	9001f5c4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
9001f3b0:	f1be 0f00 	cmp.w	lr, #0
9001f3b4:	f000 810b 	beq.w	9001f5ce <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
9001f3b8:	2f00      	cmp	r7, #0
9001f3ba:	f2c0 8100 	blt.w	9001f5be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001f3be:	42be      	cmp	r6, r7
9001f3c0:	f340 80fd 	ble.w	9001f5be <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
9001f3c4:	9801      	ldr	r0, [sp, #4]
9001f3c6:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001f3ca:	f819 5006 	ldrb.w	r5, [r9, r6]
9001f3ce:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001f3d2:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001f3d6:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001f3da:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001f3de:	fb0a fa00 	mul.w	sl, sl, r0
9001f3e2:	fb05 f808 	mul.w	r8, r5, r8
9001f3e6:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001f3ea:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001f3ee:	4482      	add	sl, r0
9001f3f0:	f108 0020 	add.w	r0, r8, #32
9001f3f4:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f3f8:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001f3fc:	0a00      	lsrs	r0, r0, #8
9001f3fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f402:	ea4b 0b00 	orr.w	fp, fp, r0
9001f406:	3701      	adds	r7, #1
9001f408:	f100 80e6 	bmi.w	9001f5d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001f40c:	42be      	cmp	r6, r7
9001f40e:	f340 80e3 	ble.w	9001f5d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
9001f412:	2900      	cmp	r1, #0
9001f414:	f000 80e3 	beq.w	9001f5de <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
9001f418:	3601      	adds	r6, #1
9001f41a:	9801      	ldr	r0, [sp, #4]
9001f41c:	f819 7006 	ldrb.w	r7, [r9, r6]
9001f420:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001f424:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001f428:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001f42c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f430:	fb09 f906 	mul.w	r9, r9, r6
9001f434:	fb07 f800 	mul.w	r8, r7, r0
9001f438:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001f43c:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001f440:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001f444:	44d1      	add	r9, sl
9001f446:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001f44a:	f108 0020 	add.w	r0, r8, #32
9001f44e:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001f452:	0a00      	lsrs	r0, r0, #8
9001f454:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f458:	4330      	orrs	r0, r6
9001f45a:	b28e      	uxth	r6, r1
9001f45c:	fa1f f98e 	uxth.w	r9, lr
9001f460:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001f464:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001f468:	fb06 f809 	mul.w	r8, r6, r9
9001f46c:	0136      	lsls	r6, r6, #4
9001f46e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f472:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001f476:	9601      	str	r6, [sp, #4]
9001f478:	ea4a 0404 	orr.w	r4, sl, r4
9001f47c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f480:	fa1f f689 	uxth.w	r6, r9
9001f484:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f488:	fb11 f90e 	smulbb	r9, r1, lr
9001f48c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f490:	9602      	str	r6, [sp, #8]
9001f492:	4626      	mov	r6, r4
9001f494:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001f498:	f1ce 0410 	rsb	r4, lr, #16
9001f49c:	ea4a 0202 	orr.w	r2, sl, r2
9001f4a0:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f4a4:	1a64      	subs	r4, r4, r1
9001f4a6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001f4aa:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f4ae:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f4b2:	434a      	muls	r2, r1
9001f4b4:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001f4b8:	ea4a 0000 	orr.w	r0, sl, r0
9001f4bc:	9903      	ldr	r1, [sp, #12]
9001f4be:	fb04 2406 	mla	r4, r4, r6, r2
9001f4c2:	9e02      	ldr	r6, [sp, #8]
9001f4c4:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001f4c8:	fb09 4200 	mla	r2, r9, r0, r4
9001f4cc:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001f4d0:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001f4d4:	8808      	ldrh	r0, [r1, #0]
9001f4d6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001f4da:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
9001f4de:	ea44 0b0b 	orr.w	fp, r4, fp
9001f4e2:	9c01      	ldr	r4, [sp, #4]
9001f4e4:	b289      	uxth	r1, r1
9001f4e6:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
9001f4ea:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001f4ee:	1ba4      	subs	r4, r4, r6
9001f4f0:	9e01      	ldr	r6, [sp, #4]
9001f4f2:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f4f6:	eba6 0608 	sub.w	r6, r6, r8
9001f4fa:	b2a4      	uxth	r4, r4
9001f4fc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f500:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f504:	b2b6      	uxth	r6, r6
9001f506:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f50a:	4373      	muls	r3, r6
9001f50c:	ea42 0e0e 	orr.w	lr, r2, lr
9001f510:	fb0c 3304 	mla	r3, ip, r4, r3
9001f514:	9c02      	ldr	r4, [sp, #8]
9001f516:	fa1f f28e 	uxth.w	r2, lr
9001f51a:	fb04 3505 	mla	r5, r4, r5, r3
9001f51e:	10d4      	asrs	r4, r2, #3
9001f520:	fb08 5707 	mla	r7, r8, r7, r5
9001f524:	1215      	asrs	r5, r2, #8
9001f526:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001f52a:	00d2      	lsls	r2, r2, #3
9001f52c:	f3c7 2707 	ubfx	r7, r7, #8, #8
9001f530:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f534:	b2d2      	uxtb	r2, r2
9001f536:	434f      	muls	r7, r1
9001f538:	1c7b      	adds	r3, r7, #1
9001f53a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
9001f53e:	1203      	asrs	r3, r0, #8
9001f540:	ea6f 2717 	mvn.w	r7, r7, lsr #8
9001f544:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f548:	b2ff      	uxtb	r7, r7
9001f54a:	fb13 f307 	smulbb	r3, r3, r7
9001f54e:	fb05 3501 	mla	r5, r5, r1, r3
9001f552:	10c3      	asrs	r3, r0, #3
9001f554:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001f558:	b2ad      	uxth	r5, r5
9001f55a:	fb13 f307 	smulbb	r3, r3, r7
9001f55e:	fb04 3401 	mla	r4, r4, r1, r3
9001f562:	00c3      	lsls	r3, r0, #3
9001f564:	b2db      	uxtb	r3, r3
9001f566:	b2a4      	uxth	r4, r4
9001f568:	fb13 f307 	smulbb	r3, r3, r7
9001f56c:	fb02 3101 	mla	r1, r2, r1, r3
9001f570:	1c6b      	adds	r3, r5, #1
9001f572:	1c62      	adds	r2, r4, #1
9001f574:	b289      	uxth	r1, r1
9001f576:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f57a:	1c4b      	adds	r3, r1, #1
9001f57c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
9001f580:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f584:	9a03      	ldr	r2, [sp, #12]
9001f586:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9001f58a:	0964      	lsrs	r4, r4, #5
9001f58c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001f590:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001f594:	432b      	orrs	r3, r5
9001f596:	4323      	orrs	r3, r4
9001f598:	8013      	strh	r3, [r2, #0]
9001f59a:	b005      	add	sp, #20
9001f59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f5a0:	f04f 0c00 	mov.w	ip, #0
9001f5a4:	4664      	mov	r4, ip
9001f5a6:	e6d6      	b.n	9001f356 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
9001f5a8:	2300      	movs	r3, #0
9001f5aa:	469c      	mov	ip, r3
9001f5ac:	461a      	mov	r2, r3
9001f5ae:	461c      	mov	r4, r3
9001f5b0:	e6f8      	b.n	9001f3a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001f5b2:	2300      	movs	r3, #0
9001f5b4:	461a      	mov	r2, r3
9001f5b6:	e6f5      	b.n	9001f3a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001f5b8:	460b      	mov	r3, r1
9001f5ba:	460a      	mov	r2, r1
9001f5bc:	e6f2      	b.n	9001f3a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
9001f5be:	2500      	movs	r5, #0
9001f5c0:	46ab      	mov	fp, r5
9001f5c2:	e720      	b.n	9001f406 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
9001f5c4:	2700      	movs	r7, #0
9001f5c6:	463d      	mov	r5, r7
9001f5c8:	4638      	mov	r0, r7
9001f5ca:	46bb      	mov	fp, r7
9001f5cc:	e745      	b.n	9001f45a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001f5ce:	4677      	mov	r7, lr
9001f5d0:	4675      	mov	r5, lr
9001f5d2:	4670      	mov	r0, lr
9001f5d4:	46f3      	mov	fp, lr
9001f5d6:	e740      	b.n	9001f45a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001f5d8:	2700      	movs	r7, #0
9001f5da:	4638      	mov	r0, r7
9001f5dc:	e73d      	b.n	9001f45a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
9001f5de:	460f      	mov	r7, r1
9001f5e0:	4608      	mov	r0, r1
9001f5e2:	e73a      	b.n	9001f45a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

9001f5e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001f5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f5e8:	b097      	sub	sp, #92	; 0x5c
9001f5ea:	9214      	str	r2, [sp, #80]	; 0x50
9001f5ec:	9308      	str	r3, [sp, #32]
9001f5ee:	9a25      	ldr	r2, [sp, #148]	; 0x94
9001f5f0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001f5f4:	9015      	str	r0, [sp, #84]	; 0x54
9001f5f6:	9312      	str	r3, [sp, #72]	; 0x48
9001f5f8:	6850      	ldr	r0, [r2, #4]
9001f5fa:	9111      	str	r1, [sp, #68]	; 0x44
9001f5fc:	6812      	ldr	r2, [r2, #0]
9001f5fe:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
9001f602:	fb00 1303 	mla	r3, r0, r3, r1
9001f606:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001f60a:	9309      	str	r3, [sp, #36]	; 0x24
9001f60c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f60e:	681b      	ldr	r3, [r3, #0]
9001f610:	930b      	str	r3, [sp, #44]	; 0x2c
9001f612:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f614:	685b      	ldr	r3, [r3, #4]
9001f616:	930c      	str	r3, [sp, #48]	; 0x30
9001f618:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001f61c:	930a      	str	r3, [sp, #40]	; 0x28
9001f61e:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f620:	2b00      	cmp	r3, #0
9001f622:	dc03      	bgt.n	9001f62c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001f624:	9b14      	ldr	r3, [sp, #80]	; 0x50
9001f626:	2b00      	cmp	r3, #0
9001f628:	f340 83cd 	ble.w	9001fdc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001f62c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f62e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001f632:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9001f636:	1e48      	subs	r0, r1, #1
9001f638:	1e55      	subs	r5, r2, #1
9001f63a:	9b08      	ldr	r3, [sp, #32]
9001f63c:	2b00      	cmp	r3, #0
9001f63e:	f340 81a5 	ble.w	9001f98c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
9001f642:	9e21      	ldr	r6, [sp, #132]	; 0x84
9001f644:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f646:	1436      	asrs	r6, r6, #16
9001f648:	ea4f 4323 	mov.w	r3, r3, asr #16
9001f64c:	d406      	bmi.n	9001f65c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001f64e:	4286      	cmp	r6, r0
9001f650:	da04      	bge.n	9001f65c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001f652:	2b00      	cmp	r3, #0
9001f654:	db02      	blt.n	9001f65c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001f656:	42ab      	cmp	r3, r5
9001f658:	f2c0 8199 	blt.w	9001f98e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
9001f65c:	3601      	adds	r6, #1
9001f65e:	f100 8186 	bmi.w	9001f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001f662:	42b1      	cmp	r1, r6
9001f664:	f2c0 8183 	blt.w	9001f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001f668:	3301      	adds	r3, #1
9001f66a:	f100 8180 	bmi.w	9001f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001f66e:	429a      	cmp	r2, r3
9001f670:	f2c0 817d 	blt.w	9001f96e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9001f674:	9b08      	ldr	r3, [sp, #32]
9001f676:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f67a:	9f09      	ldr	r7, [sp, #36]	; 0x24
9001f67c:	9313      	str	r3, [sp, #76]	; 0x4c
9001f67e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f680:	2b00      	cmp	r3, #0
9001f682:	f340 81a6 	ble.w	9001f9d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
9001f686:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f688:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001f68a:	1418      	asrs	r0, r3, #16
9001f68c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f68e:	142d      	asrs	r5, r5, #16
9001f690:	f3c3 3103 	ubfx	r1, r3, #12, #4
9001f694:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001f696:	f3c3 3c03 	ubfx	ip, r3, #12, #4
9001f69a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f69c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9001f6a0:	f100 81fa 	bmi.w	9001fa98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001f6a4:	f102 3eff 	add.w	lr, r2, #4294967295
9001f6a8:	4575      	cmp	r5, lr
9001f6aa:	f280 81f5 	bge.w	9001fa98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001f6ae:	2800      	cmp	r0, #0
9001f6b0:	f2c0 81f2 	blt.w	9001fa98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001f6b4:	f103 3eff 	add.w	lr, r3, #4294967295
9001f6b8:	4570      	cmp	r0, lr
9001f6ba:	f280 81ed 	bge.w	9001fa98 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9001f6be:	b212      	sxth	r2, r2
9001f6c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001f6c2:	fa1f fe81 	uxth.w	lr, r1
9001f6c6:	fb00 5002 	mla	r0, r0, r2, r5
9001f6ca:	ea4f 150e 	mov.w	r5, lr, lsl #4
9001f6ce:	eb03 0a00 	add.w	sl, r3, r0
9001f6d2:	f813 9000 	ldrb.w	r9, [r3, r0]
9001f6d6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
9001f6da:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001f6de:	b29b      	uxth	r3, r3
9001f6e0:	f1bc 0f00 	cmp.w	ip, #0
9001f6e4:	f000 81bb 	beq.w	9001fa5e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
9001f6e8:	f81a 4002 	ldrb.w	r4, [sl, r2]
9001f6ec:	eb0a 0b02 	add.w	fp, sl, r2
9001f6f0:	fa1f fa8c 	uxth.w	sl, ip
9001f6f4:	940d      	str	r4, [sp, #52]	; 0x34
9001f6f6:	fb0a fe0e 	mul.w	lr, sl, lr
9001f6fa:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001f6fe:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
9001f702:	eba5 050e 	sub.w	r5, r5, lr
9001f706:	940e      	str	r4, [sp, #56]	; 0x38
9001f708:	fa1f fa8a 	uxth.w	sl, sl
9001f70c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001f70e:	b2ad      	uxth	r5, r5
9001f710:	eba3 030a 	sub.w	r3, r3, sl
9001f714:	fb08 f505 	mul.w	r5, r8, r5
9001f718:	b29b      	uxth	r3, r3
9001f71a:	fb09 5303 	mla	r3, r9, r3, r5
9001f71e:	fb0a 3304 	mla	r3, sl, r4, r3
9001f722:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f724:	fb0e 3304 	mla	r3, lr, r4, r3
9001f728:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f72c:	2b00      	cmp	r3, #0
9001f72e:	f000 8111 	beq.w	9001f954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001f732:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001f734:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001f738:	eb04 0540 	add.w	r5, r4, r0, lsl #1
9001f73c:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9001f740:	f000 8192 	beq.w	9001fa68 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9001f744:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001f748:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001f74c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f750:	fb0a fe0e 	mul.w	lr, sl, lr
9001f754:	fb09 f000 	mul.w	r0, r9, r0
9001f758:	ea06 195e 	and.w	r9, r6, lr, lsr #5
9001f75c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001f760:	f100 0b20 	add.w	fp, r0, #32
9001f764:	44ce      	add	lr, r9
9001f766:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
9001f76a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001f76e:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001f772:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f776:	ea4e 0909 	orr.w	r9, lr, r9
9001f77a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001f77e:	8868      	ldrh	r0, [r5, #2]
9001f780:	d019      	beq.n	9001f7b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001f782:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9001f786:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001f78a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f78e:	fb0a fe0e 	mul.w	lr, sl, lr
9001f792:	fb08 f800 	mul.w	r8, r8, r0
9001f796:	ea06 105e 	and.w	r0, r6, lr, lsr #5
9001f79a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9001f79e:	f108 0b20 	add.w	fp, r8, #32
9001f7a2:	4486      	add	lr, r0
9001f7a4:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
9001f7a8:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9001f7ac:	0a00      	lsrs	r0, r0, #8
9001f7ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001f7b2:	ea4e 0000 	orr.w	r0, lr, r0
9001f7b6:	ea4f 4e09 	mov.w	lr, r9, lsl #16
9001f7ba:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001f7be:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001f7c2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001f7c6:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
9001f7ca:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f7ce:	ea4e 0909 	orr.w	r9, lr, r9
9001f7d2:	ea4a 0000 	orr.w	r0, sl, r0
9001f7d6:	f1bc 0f00 	cmp.w	ip, #0
9001f7da:	f000 8147 	beq.w	9001fa6c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
9001f7de:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
9001f7e2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9001f7e4:	3a01      	subs	r2, #1
9001f7e6:	2cff      	cmp	r4, #255	; 0xff
9001f7e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
9001f7ec:	f102 0202 	add.w	r2, r2, #2
9001f7f0:	eb05 0e02 	add.w	lr, r5, r2
9001f7f4:	5aaa      	ldrh	r2, [r5, r2]
9001f7f6:	d018      	beq.n	9001f82a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
9001f7f8:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
9001f7fc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f800:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f804:	fb04 fa02 	mul.w	sl, r4, r2
9001f808:	fb08 f805 	mul.w	r8, r8, r5
9001f80c:	f10a 0520 	add.w	r5, sl, #32
9001f810:	ea06 1258 	and.w	r2, r6, r8, lsr #5
9001f814:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f818:	eb05 251a 	add.w	r5, r5, sl, lsr #8
9001f81c:	4442      	add	r2, r8
9001f81e:	0a2d      	lsrs	r5, r5, #8
9001f820:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9001f824:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f828:	432a      	orrs	r2, r5
9001f82a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9001f82c:	f8be 5002 	ldrh.w	r5, [lr, #2]
9001f830:	2cff      	cmp	r4, #255	; 0xff
9001f832:	d01a      	beq.n	9001f86a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9001f834:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
9001f838:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f83c:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001f840:	fb04 fa05 	mul.w	sl, r4, r5
9001f844:	fb08 f80e 	mul.w	r8, r8, lr
9001f848:	f10a 0e20 	add.w	lr, sl, #32
9001f84c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9001f850:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001f854:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
9001f858:	4445      	add	r5, r8
9001f85a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9001f85e:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9001f862:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9001f866:	ea45 050e 	orr.w	r5, r5, lr
9001f86a:	fb1c fe01 	smulbb	lr, ip, r1
9001f86e:	f1cc 0810 	rsb	r8, ip, #16
9001f872:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001f876:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001f87a:	ea4f 0eee 	mov.w	lr, lr, asr #3
9001f87e:	eba8 0801 	sub.w	r8, r8, r1
9001f882:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9001f886:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001f88a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9001f88e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9001f892:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9001f896:	ea4a 0202 	orr.w	r2, sl, r2
9001f89a:	4341      	muls	r1, r0
9001f89c:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9001f8a0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001f8a4:	fb09 1108 	mla	r1, r9, r8, r1
9001f8a8:	ea4b 0505 	orr.w	r5, fp, r5
9001f8ac:	fb0c 1102 	mla	r1, ip, r2, r1
9001f8b0:	fb0e 1e05 	mla	lr, lr, r5, r1
9001f8b4:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001f8b8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001f8bc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f8c0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001f8c4:	ea42 0e0e 	orr.w	lr, r2, lr
9001f8c8:	fa1f f28e 	uxth.w	r2, lr
9001f8cc:	2bff      	cmp	r3, #255	; 0xff
9001f8ce:	d103      	bne.n	9001f8d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9001f8d0:	9912      	ldr	r1, [sp, #72]	; 0x48
9001f8d2:	29ff      	cmp	r1, #255	; 0xff
9001f8d4:	f000 80de 	beq.w	9001fa94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
9001f8d8:	990a      	ldr	r1, [sp, #40]	; 0x28
9001f8da:	1215      	asrs	r5, r2, #8
9001f8dc:	8838      	ldrh	r0, [r7, #0]
9001f8de:	434b      	muls	r3, r1
9001f8e0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f8e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001f8e6:	f103 0c01 	add.w	ip, r3, #1
9001f8ea:	eb0c 2323 	add.w	r3, ip, r3, asr #8
9001f8ee:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001f8f2:	fa5f fc83 	uxtb.w	ip, r3
9001f8f6:	1203      	asrs	r3, r0, #8
9001f8f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
9001f8fc:	fb13 f30c 	smulbb	r3, r3, ip
9001f900:	fb05 3501 	mla	r5, r5, r1, r3
9001f904:	10c3      	asrs	r3, r0, #3
9001f906:	10d1      	asrs	r1, r2, #3
9001f908:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
9001f90c:	00d2      	lsls	r2, r2, #3
9001f90e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f912:	b2ad      	uxth	r5, r5
9001f914:	fb13 f30c 	smulbb	r3, r3, ip
9001f918:	b2d2      	uxtb	r2, r2
9001f91a:	fb01 3104 	mla	r1, r1, r4, r3
9001f91e:	00c3      	lsls	r3, r0, #3
9001f920:	b2db      	uxtb	r3, r3
9001f922:	b289      	uxth	r1, r1
9001f924:	fb13 f30c 	smulbb	r3, r3, ip
9001f928:	fb02 3304 	mla	r3, r2, r4, r3
9001f92c:	b29a      	uxth	r2, r3
9001f92e:	1c6b      	adds	r3, r5, #1
9001f930:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001f934:	1c53      	adds	r3, r2, #1
9001f936:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f93a:	1c4a      	adds	r2, r1, #1
9001f93c:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001f940:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9001f944:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9001f948:	0949      	lsrs	r1, r1, #5
9001f94a:	432b      	orrs	r3, r5
9001f94c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001f950:	430b      	orrs	r3, r1
9001f952:	803b      	strh	r3, [r7, #0]
9001f954:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f956:	3702      	adds	r7, #2
9001f958:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001f95a:	4413      	add	r3, r2
9001f95c:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001f95e:	9321      	str	r3, [sp, #132]	; 0x84
9001f960:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f962:	441a      	add	r2, r3
9001f964:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f966:	3b01      	subs	r3, #1
9001f968:	9222      	str	r2, [sp, #136]	; 0x88
9001f96a:	9313      	str	r3, [sp, #76]	; 0x4c
9001f96c:	e687      	b.n	9001f67e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001f96e:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001f970:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9001f972:	9c22      	ldr	r4, [sp, #136]	; 0x88
9001f974:	4433      	add	r3, r6
9001f976:	9321      	str	r3, [sp, #132]	; 0x84
9001f978:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001f97a:	441c      	add	r4, r3
9001f97c:	9b08      	ldr	r3, [sp, #32]
9001f97e:	3b01      	subs	r3, #1
9001f980:	9422      	str	r4, [sp, #136]	; 0x88
9001f982:	9308      	str	r3, [sp, #32]
9001f984:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f986:	3302      	adds	r3, #2
9001f988:	9309      	str	r3, [sp, #36]	; 0x24
9001f98a:	e656      	b.n	9001f63a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
9001f98c:	d028      	beq.n	9001f9e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
9001f98e:	9b08      	ldr	r3, [sp, #32]
9001f990:	9823      	ldr	r0, [sp, #140]	; 0x8c
9001f992:	3b01      	subs	r3, #1
9001f994:	9d21      	ldr	r5, [sp, #132]	; 0x84
9001f996:	fb00 5003 	mla	r0, r0, r3, r5
9001f99a:	1400      	asrs	r0, r0, #16
9001f99c:	f53f ae6a 	bmi.w	9001f674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f9a0:	3901      	subs	r1, #1
9001f9a2:	4288      	cmp	r0, r1
9001f9a4:	f6bf ae66 	bge.w	9001f674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f9a8:	9924      	ldr	r1, [sp, #144]	; 0x90
9001f9aa:	9822      	ldr	r0, [sp, #136]	; 0x88
9001f9ac:	fb01 0303 	mla	r3, r1, r3, r0
9001f9b0:	141b      	asrs	r3, r3, #16
9001f9b2:	f53f ae5f 	bmi.w	9001f674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f9b6:	3a01      	subs	r2, #1
9001f9b8:	4293      	cmp	r3, r2
9001f9ba:	f6bf ae5b 	bge.w	9001f674 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001f9be:	9b08      	ldr	r3, [sp, #32]
9001f9c0:	f64f 061f 	movw	r6, #63519	; 0xf81f
9001f9c4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
9001f9c8:	9313      	str	r3, [sp, #76]	; 0x4c
9001f9ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f9cc:	2b00      	cmp	r3, #0
9001f9ce:	f300 8082 	bgt.w	9001fad6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
9001f9d2:	9b08      	ldr	r3, [sp, #32]
9001f9d4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
9001f9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f9da:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9001f9de:	9309      	str	r3, [sp, #36]	; 0x24
9001f9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f9e2:	2b00      	cmp	r3, #0
9001f9e4:	f340 81ef 	ble.w	9001fdc6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
9001f9e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001f9ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001f9ee:	ee30 0a04 	vadd.f32	s0, s0, s8
9001f9f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001f9f6:	eef0 6a62 	vmov.f32	s13, s5
9001f9fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001f9fe:	ee31 1a05 	vadd.f32	s2, s2, s10
9001fa02:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fa06:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
9001fa0a:	eef0 6a43 	vmov.f32	s13, s6
9001fa0e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001fa12:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
9001fa16:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001fa1a:	ee61 7a27 	vmul.f32	s15, s2, s15
9001fa1e:	ee77 2a62 	vsub.f32	s5, s14, s5
9001fa22:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001fa26:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001fa2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001fa2e:	ee12 2a90 	vmov	r2, s5
9001fa32:	eef0 2a47 	vmov.f32	s5, s14
9001fa36:	fb92 f3f3 	sdiv	r3, r2, r3
9001fa3a:	ee13 2a10 	vmov	r2, s6
9001fa3e:	9323      	str	r3, [sp, #140]	; 0x8c
9001fa40:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fa42:	eeb0 3a67 	vmov.f32	s6, s15
9001fa46:	fb92 f3f3 	sdiv	r3, r2, r3
9001fa4a:	9324      	str	r3, [sp, #144]	; 0x90
9001fa4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001fa4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001fa50:	3b01      	subs	r3, #1
9001fa52:	9311      	str	r3, [sp, #68]	; 0x44
9001fa54:	9b20      	ldr	r3, [sp, #128]	; 0x80
9001fa56:	bf08      	it	eq
9001fa58:	4613      	moveq	r3, r2
9001fa5a:	9308      	str	r3, [sp, #32]
9001fa5c:	e5df      	b.n	9001f61e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001fa5e:	fb08 f505 	mul.w	r5, r8, r5
9001fa62:	fb09 5303 	mla	r3, r9, r3, r5
9001fa66:	e65f      	b.n	9001f728 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
9001fa68:	4681      	mov	r9, r0
9001fa6a:	e686      	b.n	9001f77a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
9001fa6c:	f1c1 0210 	rsb	r2, r1, #16
9001fa70:	4341      	muls	r1, r0
9001fa72:	fb09 1902 	mla	r9, r9, r2, r1
9001fa76:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fa7a:	ea4f 5259 	mov.w	r2, r9, lsr #21
9001fa7e:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001fa82:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fa86:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fa8a:	ea42 0909 	orr.w	r9, r2, r9
9001fa8e:	fa1f f289 	uxth.w	r2, r9
9001fa92:	e71b      	b.n	9001f8cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9001fa94:	803a      	strh	r2, [r7, #0]
9001fa96:	e75d      	b.n	9001f954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001fa98:	f115 0e01 	adds.w	lr, r5, #1
9001fa9c:	f53f af5a 	bmi.w	9001f954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001faa0:	4572      	cmp	r2, lr
9001faa2:	f6ff af57 	blt.w	9001f954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001faa6:	f110 0e01 	adds.w	lr, r0, #1
9001faaa:	f53f af53 	bmi.w	9001f954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001faae:	4573      	cmp	r3, lr
9001fab0:	f6ff af50 	blt.w	9001f954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001fab4:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001fab6:	b21b      	sxth	r3, r3
9001fab8:	b212      	sxth	r2, r2
9001faba:	9502      	str	r5, [sp, #8]
9001fabc:	9301      	str	r3, [sp, #4]
9001fabe:	9200      	str	r2, [sp, #0]
9001fac0:	e9cd 0103 	strd	r0, r1, [sp, #12]
9001fac4:	e9cd c405 	strd	ip, r4, [sp, #20]
9001fac8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
9001facc:	4639      	mov	r1, r7
9001face:	9815      	ldr	r0, [sp, #84]	; 0x54
9001fad0:	f7ff fc02 	bl	9001f2d8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
9001fad4:	e73e      	b.n	9001f954 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9001fad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001fad8:	f3c3 3203 	ubfx	r2, r3, #12, #4
9001fadc:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001fade:	f3c3 3503 	ubfx	r5, r3, #12, #4
9001fae2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001fae4:	fa1f fc82 	uxth.w	ip, r2
9001fae8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9001faec:	9b22      	ldr	r3, [sp, #136]	; 0x88
9001faee:	ea4f 100c 	mov.w	r0, ip, lsl #4
9001faf2:	141f      	asrs	r7, r3, #16
9001faf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001faf6:	141b      	asrs	r3, r3, #16
9001faf8:	fb01 3707 	mla	r7, r1, r7, r3
9001fafc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001fafe:	eb03 0a07 	add.w	sl, r3, r7
9001fb02:	f813 9007 	ldrb.w	r9, [r3, r7]
9001fb06:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
9001fb0a:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001fb0e:	b29b      	uxth	r3, r3
9001fb10:	2d00      	cmp	r5, #0
9001fb12:	f000 813d 	beq.w	9001fd90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
9001fb16:	f81a 4001 	ldrb.w	r4, [sl, r1]
9001fb1a:	eb0a 0b01 	add.w	fp, sl, r1
9001fb1e:	fa1f fa85 	uxth.w	sl, r5
9001fb22:	940f      	str	r4, [sp, #60]	; 0x3c
9001fb24:	fb0a fc0c 	mul.w	ip, sl, ip
9001fb28:	f89b 4001 	ldrb.w	r4, [fp, #1]
9001fb2c:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
9001fb30:	eba0 000c 	sub.w	r0, r0, ip
9001fb34:	9410      	str	r4, [sp, #64]	; 0x40
9001fb36:	fa1f fa8a 	uxth.w	sl, sl
9001fb3a:	b280      	uxth	r0, r0
9001fb3c:	eba3 030a 	sub.w	r3, r3, sl
9001fb40:	fb08 f000 	mul.w	r0, r8, r0
9001fb44:	b29b      	uxth	r3, r3
9001fb46:	fb09 0303 	mla	r3, r9, r3, r0
9001fb4a:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001fb4c:	fb0a 3300 	mla	r3, sl, r0, r3
9001fb50:	fb0c 3304 	mla	r3, ip, r4, r3
9001fb54:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001fb58:	2b00      	cmp	r3, #0
9001fb5a:	f000 810b 	beq.w	9001fd74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001fb5e:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001fb60:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001fb64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9001fb66:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9001fb6a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
9001fb6e:	f000 8114 	beq.w	9001fd9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9001fb72:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001fb76:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9001fb7a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fb7e:	fb0a fc0c 	mul.w	ip, sl, ip
9001fb82:	fb09 f707 	mul.w	r7, r9, r7
9001fb86:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9001fb8a:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001fb8e:	f107 0b20 	add.w	fp, r7, #32
9001fb92:	44cc      	add	ip, r9
9001fb94:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9001fb98:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fb9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
9001fba0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001fba4:	ea4c 0909 	orr.w	r9, ip, r9
9001fba8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9001fbac:	8847      	ldrh	r7, [r0, #2]
9001fbae:	d019      	beq.n	9001fbe4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
9001fbb0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9001fbb4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9001fbb8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fbbc:	fb0a fc0c 	mul.w	ip, sl, ip
9001fbc0:	fb08 f807 	mul.w	r8, r8, r7
9001fbc4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9001fbc8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
9001fbcc:	f108 0b20 	add.w	fp, r8, #32
9001fbd0:	44bc      	add	ip, r7
9001fbd2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9001fbd6:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9001fbda:	0a3f      	lsrs	r7, r7, #8
9001fbdc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fbe0:	ea4c 0707 	orr.w	r7, ip, r7
9001fbe4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9001fbe8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9001fbec:	ea4f 4a07 	mov.w	sl, r7, lsl #16
9001fbf0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
9001fbf4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9001fbf8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fbfc:	ea4c 0909 	orr.w	r9, ip, r9
9001fc00:	ea4a 0707 	orr.w	r7, sl, r7
9001fc04:	2d00      	cmp	r5, #0
9001fc06:	f000 80ca 	beq.w	9001fd9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
9001fc0a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
9001fc0e:	3901      	subs	r1, #1
9001fc10:	0049      	lsls	r1, r1, #1
9001fc12:	3102      	adds	r1, #2
9001fc14:	eb00 0c01 	add.w	ip, r0, r1
9001fc18:	5a41      	ldrh	r1, [r0, r1]
9001fc1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001fc1c:	28ff      	cmp	r0, #255	; 0xff
9001fc1e:	d019      	beq.n	9001fc54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
9001fc20:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9001fc24:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9001fc26:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9001fc2a:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fc2e:	fb04 fa01 	mul.w	sl, r4, r1
9001fc32:	fb08 f800 	mul.w	r8, r8, r0
9001fc36:	f10a 0020 	add.w	r0, sl, #32
9001fc3a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
9001fc3e:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fc42:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9001fc46:	4441      	add	r1, r8
9001fc48:	0a00      	lsrs	r0, r0, #8
9001fc4a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
9001fc4e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fc52:	4301      	orrs	r1, r0
9001fc54:	9c10      	ldr	r4, [sp, #64]	; 0x40
9001fc56:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9001fc5a:	2cff      	cmp	r4, #255	; 0xff
9001fc5c:	d01a      	beq.n	9001fc94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
9001fc5e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9001fc62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fc66:	ea4f 08e4 	mov.w	r8, r4, asr #3
9001fc6a:	fb04 fa00 	mul.w	sl, r4, r0
9001fc6e:	fb08 f80c 	mul.w	r8, r8, ip
9001fc72:	f10a 0c20 	add.w	ip, sl, #32
9001fc76:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9001fc7a:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fc7e:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9001fc82:	4440      	add	r0, r8
9001fc84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9001fc88:	ea06 1050 	and.w	r0, r6, r0, lsr #5
9001fc8c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9001fc90:	ea40 000c 	orr.w	r0, r0, ip
9001fc94:	fb15 fc02 	smulbb	ip, r5, r2
9001fc98:	f1c5 0810 	rsb	r8, r5, #16
9001fc9c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9001fca0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9001fca4:	ea4f 0cec 	mov.w	ip, ip, asr #3
9001fca8:	eba8 0802 	sub.w	r8, r8, r2
9001fcac:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9001fcb0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001fcb4:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9001fcb8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001fcbc:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9001fcc0:	ea4a 0101 	orr.w	r1, sl, r1
9001fcc4:	437a      	muls	r2, r7
9001fcc6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9001fcca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9001fcce:	fb09 2208 	mla	r2, r9, r8, r2
9001fcd2:	ea4b 0000 	orr.w	r0, fp, r0
9001fcd6:	fb05 2201 	mla	r2, r5, r1, r2
9001fcda:	fb0c 2200 	mla	r2, ip, r0, r2
9001fcde:	0d57      	lsrs	r7, r2, #21
9001fce0:	0952      	lsrs	r2, r2, #5
9001fce2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fce6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fcea:	433a      	orrs	r2, r7
9001fcec:	2bff      	cmp	r3, #255	; 0xff
9001fcee:	b292      	uxth	r2, r2
9001fcf0:	d102      	bne.n	9001fcf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
9001fcf2:	9912      	ldr	r1, [sp, #72]	; 0x48
9001fcf4:	29ff      	cmp	r1, #255	; 0xff
9001fcf6:	d063      	beq.n	9001fdc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
9001fcf8:	980a      	ldr	r0, [sp, #40]	; 0x28
9001fcfa:	1215      	asrs	r5, r2, #8
9001fcfc:	f8be 1000 	ldrh.w	r1, [lr]
9001fd00:	4343      	muls	r3, r0
9001fd02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
9001fd04:	10cf      	asrs	r7, r1, #3
9001fd06:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001fd0a:	1c58      	adds	r0, r3, #1
9001fd0c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001fd10:	eb00 2323 	add.w	r3, r0, r3, asr #8
9001fd14:	1208      	asrs	r0, r1, #8
9001fd16:	ea6f 2323 	mvn.w	r3, r3, asr #8
9001fd1a:	00c9      	lsls	r1, r1, #3
9001fd1c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001fd20:	b2db      	uxtb	r3, r3
9001fd22:	b2c9      	uxtb	r1, r1
9001fd24:	fb10 f003 	smulbb	r0, r0, r3
9001fd28:	fb11 f103 	smulbb	r1, r1, r3
9001fd2c:	fb05 0504 	mla	r5, r5, r4, r0
9001fd30:	10d0      	asrs	r0, r2, #3
9001fd32:	fb17 f703 	smulbb	r7, r7, r3
9001fd36:	00d2      	lsls	r2, r2, #3
9001fd38:	b2ad      	uxth	r5, r5
9001fd3a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001fd3e:	b2d2      	uxtb	r2, r2
9001fd40:	fb00 7004 	mla	r0, r0, r4, r7
9001fd44:	1c6b      	adds	r3, r5, #1
9001fd46:	fb02 1204 	mla	r2, r2, r4, r1
9001fd4a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9001fd4e:	b292      	uxth	r2, r2
9001fd50:	b280      	uxth	r0, r0
9001fd52:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001fd56:	1c57      	adds	r7, r2, #1
9001fd58:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001fd5c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001fd60:	433d      	orrs	r5, r7
9001fd62:	1c47      	adds	r7, r0, #1
9001fd64:	eb07 2710 	add.w	r7, r7, r0, lsr #8
9001fd68:	097f      	lsrs	r7, r7, #5
9001fd6a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001fd6e:	433d      	orrs	r5, r7
9001fd70:	f8ae 5000 	strh.w	r5, [lr]
9001fd74:	9b21      	ldr	r3, [sp, #132]	; 0x84
9001fd76:	f10e 0e02 	add.w	lr, lr, #2
9001fd7a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
9001fd7c:	4413      	add	r3, r2
9001fd7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
9001fd80:	9321      	str	r3, [sp, #132]	; 0x84
9001fd82:	9b24      	ldr	r3, [sp, #144]	; 0x90
9001fd84:	441a      	add	r2, r3
9001fd86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001fd88:	3b01      	subs	r3, #1
9001fd8a:	9222      	str	r2, [sp, #136]	; 0x88
9001fd8c:	9313      	str	r3, [sp, #76]	; 0x4c
9001fd8e:	e61c      	b.n	9001f9ca <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
9001fd90:	fb08 f000 	mul.w	r0, r8, r0
9001fd94:	fb09 0303 	mla	r3, r9, r3, r0
9001fd98:	e6dc      	b.n	9001fb54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
9001fd9a:	46b9      	mov	r9, r7
9001fd9c:	e704      	b.n	9001fba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
9001fd9e:	f1c2 0110 	rsb	r1, r2, #16
9001fda2:	437a      	muls	r2, r7
9001fda4:	fb09 2901 	mla	r9, r9, r1, r2
9001fda8:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001fdac:	ea4f 5059 	mov.w	r0, r9, lsr #21
9001fdb0:	ea4f 1259 	mov.w	r2, r9, lsr #5
9001fdb4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fdb8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001fdbc:	4302      	orrs	r2, r0
9001fdbe:	e795      	b.n	9001fcec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
9001fdc0:	f8ae 2000 	strh.w	r2, [lr]
9001fdc4:	e7d6      	b.n	9001fd74 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
9001fdc6:	b017      	add	sp, #92	; 0x5c
9001fdc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001fdcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
9001fdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001fdd0:	b085      	sub	sp, #20
9001fdd2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
9001fdd6:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
9001fdda:	2800      	cmp	r0, #0
9001fddc:	9103      	str	r1, [sp, #12]
9001fdde:	fb00 7406 	mla	r4, r0, r6, r7
9001fde2:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
9001fde6:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
9001fdea:	eb03 0544 	add.w	r5, r3, r4, lsl #1
9001fdee:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
9001fdf2:	eb02 0904 	add.w	r9, r2, r4
9001fdf6:	9501      	str	r5, [sp, #4]
9001fdf8:	f2c0 8141 	blt.w	9002007e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001fdfc:	4583      	cmp	fp, r0
9001fdfe:	f340 813e 	ble.w	9002007e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
9001fe02:	2f00      	cmp	r7, #0
9001fe04:	f2c0 8137 	blt.w	90020076 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001fe08:	42be      	cmp	r6, r7
9001fe0a:	f340 8134 	ble.w	90020076 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
9001fe0e:	f812 c004 	ldrb.w	ip, [r2, r4]
9001fe12:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
9001fe16:	f64f 041f 	movw	r4, #63519	; 0xf81f
9001fe1a:	ea4f 02ec 	mov.w	r2, ip, asr #3
9001fe1e:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9001fe22:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001fe26:	4355      	muls	r5, r2
9001fe28:	fb0c f203 	mul.w	r2, ip, r3
9001fe2c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
9001fe30:	f605 0501 	addw	r5, r5, #2049	; 0x801
9001fe34:	441d      	add	r5, r3
9001fe36:	f102 0320 	add.w	r3, r2, #32
9001fe3a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001fe3e:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9001fe42:	0a1b      	lsrs	r3, r3, #8
9001fe44:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001fe48:	431c      	orrs	r4, r3
9001fe4a:	1c7b      	adds	r3, r7, #1
9001fe4c:	f100 811c 	bmi.w	90020088 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001fe50:	429e      	cmp	r6, r3
9001fe52:	f340 8119 	ble.w	90020088 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9001fe56:	2900      	cmp	r1, #0
9001fe58:	f000 8119 	beq.w	9002008e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
9001fe5c:	9a01      	ldr	r2, [sp, #4]
9001fe5e:	f899 3001 	ldrb.w	r3, [r9, #1]
9001fe62:	8855      	ldrh	r5, [r2, #2]
9001fe64:	ea4f 08e3 	mov.w	r8, r3, asr #3
9001fe68:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
9001fe6c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001fe70:	fb08 f802 	mul.w	r8, r8, r2
9001fe74:	f64f 021f 	movw	r2, #63519	; 0xf81f
9001fe78:	435d      	muls	r5, r3
9001fe7a:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
9001fe7e:	f608 0801 	addw	r8, r8, #2049	; 0x801
9001fe82:	44d0      	add	r8, sl
9001fe84:	f105 0a20 	add.w	sl, r5, #32
9001fe88:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
9001fe8c:	ea02 1258 	and.w	r2, r2, r8, lsr #5
9001fe90:	0a2d      	lsrs	r5, r5, #8
9001fe92:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001fe96:	432a      	orrs	r2, r5
9001fe98:	3001      	adds	r0, #1
9001fe9a:	f100 80fe 	bmi.w	9002009a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001fe9e:	4583      	cmp	fp, r0
9001fea0:	f340 80fb 	ble.w	9002009a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9001fea4:	f1be 0f00 	cmp.w	lr, #0
9001fea8:	f000 80fc 	beq.w	900200a4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
9001feac:	2f00      	cmp	r7, #0
9001feae:	f2c0 80f1 	blt.w	90020094 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001feb2:	42be      	cmp	r6, r7
9001feb4:	f340 80ee 	ble.w	90020094 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9001feb8:	9801      	ldr	r0, [sp, #4]
9001feba:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
9001febe:	f819 5006 	ldrb.w	r5, [r9, r6]
9001fec2:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
9001fec6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001feca:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
9001fece:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001fed2:	fb0a fa00 	mul.w	sl, sl, r0
9001fed6:	fb05 f808 	mul.w	r8, r5, r8
9001feda:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
9001fede:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
9001fee2:	4482      	add	sl, r0
9001fee4:	f108 0020 	add.w	r0, r8, #32
9001fee8:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001feec:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
9001fef0:	0a00      	lsrs	r0, r0, #8
9001fef2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001fef6:	ea4b 0b00 	orr.w	fp, fp, r0
9001fefa:	3701      	adds	r7, #1
9001fefc:	f100 80d7 	bmi.w	900200ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001ff00:	42be      	cmp	r6, r7
9001ff02:	f340 80d4 	ble.w	900200ae <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
9001ff06:	2900      	cmp	r1, #0
9001ff08:	f000 80d4 	beq.w	900200b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
9001ff0c:	3601      	adds	r6, #1
9001ff0e:	9801      	ldr	r0, [sp, #4]
9001ff10:	f819 7006 	ldrb.w	r7, [r9, r6]
9001ff14:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
9001ff18:	ea4f 09e7 	mov.w	r9, r7, asr #3
9001ff1c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
9001ff20:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ff24:	fb09 f906 	mul.w	r9, r9, r6
9001ff28:	fb07 f800 	mul.w	r8, r7, r0
9001ff2c:	f64f 001f 	movw	r0, #63519	; 0xf81f
9001ff30:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9001ff34:	f609 0901 	addw	r9, r9, #2049	; 0x801
9001ff38:	44d1      	add	r9, sl
9001ff3a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
9001ff3e:	f108 0020 	add.w	r0, r8, #32
9001ff42:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9001ff46:	0a00      	lsrs	r0, r0, #8
9001ff48:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001ff4c:	4330      	orrs	r0, r6
9001ff4e:	b28e      	uxth	r6, r1
9001ff50:	fa1f f98e 	uxth.w	r9, lr
9001ff54:	ea4f 4a04 	mov.w	sl, r4, lsl #16
9001ff58:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
9001ff5c:	fb06 f809 	mul.w	r8, r6, r9
9001ff60:	0136      	lsls	r6, r6, #4
9001ff62:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ff66:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
9001ff6a:	9601      	str	r6, [sp, #4]
9001ff6c:	ea4a 0404 	orr.w	r4, sl, r4
9001ff70:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9001ff74:	fa1f f689 	uxth.w	r6, r9
9001ff78:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9001ff7c:	fb11 f90e 	smulbb	r9, r1, lr
9001ff80:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ff84:	9602      	str	r6, [sp, #8]
9001ff86:	4626      	mov	r6, r4
9001ff88:	f3c9 09c7 	ubfx	r9, r9, #3, #8
9001ff8c:	f1ce 0410 	rsb	r4, lr, #16
9001ff90:	ea4a 0202 	orr.w	r2, sl, r2
9001ff94:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9001ff98:	1a64      	subs	r4, r4, r1
9001ff9a:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
9001ff9e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9001ffa2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9001ffa6:	434a      	muls	r2, r1
9001ffa8:	eb09 0444 	add.w	r4, r9, r4, lsl #1
9001ffac:	ea4a 0000 	orr.w	r0, sl, r0
9001ffb0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9001ffb4:	fb04 2406 	mla	r4, r4, r6, r2
9001ffb8:	9903      	ldr	r1, [sp, #12]
9001ffba:	fb09 4200 	mla	r2, r9, r0, r4
9001ffbe:	ea4f 440b 	mov.w	r4, fp, lsl #16
9001ffc2:	9801      	ldr	r0, [sp, #4]
9001ffc4:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
9001ffc8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
9001ffcc:	8809      	ldrh	r1, [r1, #0]
9001ffce:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
9001ffd2:	ea44 0b0b 	orr.w	fp, r4, fp
9001ffd6:	9c02      	ldr	r4, [sp, #8]
9001ffd8:	1b00      	subs	r0, r0, r4
9001ffda:	9c01      	ldr	r4, [sp, #4]
9001ffdc:	fb0e 2e0b 	mla	lr, lr, fp, r2
9001ffe0:	eba4 0608 	sub.w	r6, r4, r8
9001ffe4:	b280      	uxth	r0, r0
9001ffe6:	ea4f 525e 	mov.w	r2, lr, lsr #21
9001ffea:	b2b6      	uxth	r6, r6
9001ffec:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
9001fff0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001fff4:	4373      	muls	r3, r6
9001fff6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9001fffa:	fb0c 3300 	mla	r3, ip, r0, r3
9001fffe:	9802      	ldr	r0, [sp, #8]
90020000:	ea42 0e0e 	orr.w	lr, r2, lr
90020004:	fb00 3505 	mla	r5, r0, r5, r3
90020008:	120b      	asrs	r3, r1, #8
9002000a:	10c8      	asrs	r0, r1, #3
9002000c:	fb08 5707 	mla	r7, r8, r7, r5
90020010:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90020014:	00c9      	lsls	r1, r1, #3
90020016:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002001a:	ea6f 2727 	mvn.w	r7, r7, asr #8
9002001e:	fa1f f28e 	uxth.w	r2, lr
90020022:	b2c9      	uxtb	r1, r1
90020024:	b2ff      	uxtb	r7, r7
90020026:	437b      	muls	r3, r7
90020028:	4378      	muls	r0, r7
9002002a:	434f      	muls	r7, r1
9002002c:	1c59      	adds	r1, r3, #1
9002002e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90020032:	1213      	asrs	r3, r2, #8
90020034:	f023 0307 	bic.w	r3, r3, #7
90020038:	eb03 2311 	add.w	r3, r3, r1, lsr #8
9002003c:	1c41      	adds	r1, r0, #1
9002003e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90020042:	10d1      	asrs	r1, r2, #3
90020044:	021b      	lsls	r3, r3, #8
90020046:	f021 0103 	bic.w	r1, r1, #3
9002004a:	00d2      	lsls	r2, r2, #3
9002004c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90020050:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90020054:	00c9      	lsls	r1, r1, #3
90020056:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002005a:	430b      	orrs	r3, r1
9002005c:	1c79      	adds	r1, r7, #1
9002005e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
90020062:	eb02 2217 	add.w	r2, r2, r7, lsr #8
90020066:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002006a:	431a      	orrs	r2, r3
9002006c:	9b03      	ldr	r3, [sp, #12]
9002006e:	801a      	strh	r2, [r3, #0]
90020070:	b005      	add	sp, #20
90020072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020076:	f04f 0c00 	mov.w	ip, #0
9002007a:	4664      	mov	r4, ip
9002007c:	e6e5      	b.n	9001fe4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
9002007e:	2300      	movs	r3, #0
90020080:	469c      	mov	ip, r3
90020082:	461a      	mov	r2, r3
90020084:	461c      	mov	r4, r3
90020086:	e707      	b.n	9001fe98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90020088:	2300      	movs	r3, #0
9002008a:	461a      	mov	r2, r3
9002008c:	e704      	b.n	9001fe98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9002008e:	460b      	mov	r3, r1
90020090:	460a      	mov	r2, r1
90020092:	e701      	b.n	9001fe98 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90020094:	2500      	movs	r5, #0
90020096:	46ab      	mov	fp, r5
90020098:	e72f      	b.n	9001fefa <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
9002009a:	2700      	movs	r7, #0
9002009c:	463d      	mov	r5, r7
9002009e:	4638      	mov	r0, r7
900200a0:	46bb      	mov	fp, r7
900200a2:	e754      	b.n	9001ff4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
900200a4:	4677      	mov	r7, lr
900200a6:	4675      	mov	r5, lr
900200a8:	4670      	mov	r0, lr
900200aa:	46f3      	mov	fp, lr
900200ac:	e74f      	b.n	9001ff4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
900200ae:	2700      	movs	r7, #0
900200b0:	4638      	mov	r0, r7
900200b2:	e74c      	b.n	9001ff4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
900200b4:	460f      	mov	r7, r1
900200b6:	4608      	mov	r0, r1
900200b8:	e749      	b.n	9001ff4e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

900200bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900200bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900200c0:	b093      	sub	sp, #76	; 0x4c
900200c2:	9210      	str	r2, [sp, #64]	; 0x40
900200c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
900200c6:	9011      	str	r0, [sp, #68]	; 0x44
900200c8:	910e      	str	r1, [sp, #56]	; 0x38
900200ca:	6850      	ldr	r0, [r2, #4]
900200cc:	9306      	str	r3, [sp, #24]
900200ce:	6812      	ldr	r2, [r2, #0]
900200d0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900200d4:	fb00 1303 	mla	r3, r0, r3, r1
900200d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900200dc:	9307      	str	r3, [sp, #28]
900200de:	9b24      	ldr	r3, [sp, #144]	; 0x90
900200e0:	681b      	ldr	r3, [r3, #0]
900200e2:	9308      	str	r3, [sp, #32]
900200e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900200e6:	685b      	ldr	r3, [r3, #4]
900200e8:	9309      	str	r3, [sp, #36]	; 0x24
900200ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900200ec:	2b00      	cmp	r3, #0
900200ee:	dc03      	bgt.n	900200f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900200f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
900200f2:	2b00      	cmp	r3, #0
900200f4:	f340 83b6 	ble.w	90020864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
900200f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900200fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900200fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020102:	1e48      	subs	r0, r1, #1
90020104:	1e55      	subs	r5, r2, #1
90020106:	9b06      	ldr	r3, [sp, #24]
90020108:	2b00      	cmp	r3, #0
9002010a:	f340 8165 	ble.w	900203d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
9002010e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
90020110:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020112:	1436      	asrs	r6, r6, #16
90020114:	ea4f 4323 	mov.w	r3, r3, asr #16
90020118:	d406      	bmi.n	90020128 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9002011a:	4286      	cmp	r6, r0
9002011c:	da04      	bge.n	90020128 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9002011e:	2b00      	cmp	r3, #0
90020120:	db02      	blt.n	90020128 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90020122:	42ab      	cmp	r3, r5
90020124:	f2c0 8159 	blt.w	900203da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90020128:	3601      	adds	r6, #1
9002012a:	f100 8146 	bmi.w	900203ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9002012e:	42b1      	cmp	r1, r6
90020130:	f2c0 8143 	blt.w	900203ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90020134:	3301      	adds	r3, #1
90020136:	f100 8140 	bmi.w	900203ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
9002013a:	429a      	cmp	r2, r3
9002013c:	f2c0 813d 	blt.w	900203ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90020140:	9b06      	ldr	r3, [sp, #24]
90020142:	f64f 061f 	movw	r6, #63519	; 0xf81f
90020146:	9f07      	ldr	r7, [sp, #28]
90020148:	930f      	str	r3, [sp, #60]	; 0x3c
9002014a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9002014c:	2b00      	cmp	r3, #0
9002014e:	f340 8166 	ble.w	9002041e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90020152:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020154:	9d1d      	ldr	r5, [sp, #116]	; 0x74
90020156:	1418      	asrs	r0, r3, #16
90020158:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9002015a:	142d      	asrs	r5, r5, #16
9002015c:	f3c3 3103 	ubfx	r1, r3, #12, #4
90020160:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020162:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90020166:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020168:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
9002016c:	f100 81f0 	bmi.w	90020550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90020170:	f102 3eff 	add.w	lr, r2, #4294967295
90020174:	4575      	cmp	r5, lr
90020176:	f280 81eb 	bge.w	90020550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9002017a:	2800      	cmp	r0, #0
9002017c:	f2c0 81e8 	blt.w	90020550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90020180:	f103 3eff 	add.w	lr, r3, #4294967295
90020184:	4570      	cmp	r0, lr
90020186:	f280 81e3 	bge.w	90020550 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
9002018a:	b212      	sxth	r2, r2
9002018c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002018e:	fa1f fe81 	uxth.w	lr, r1
90020192:	fb00 5002 	mla	r0, r0, r2, r5
90020196:	ea4f 150e 	mov.w	r5, lr, lsl #4
9002019a:	eb03 0a00 	add.w	sl, r3, r0
9002019e:	f813 9000 	ldrb.w	r9, [r3, r0]
900201a2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
900201a6:	f89a 8001 	ldrb.w	r8, [sl, #1]
900201aa:	b29b      	uxth	r3, r3
900201ac:	f1bc 0f00 	cmp.w	ip, #0
900201b0:	f000 817b 	beq.w	900204aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
900201b4:	f81a 4002 	ldrb.w	r4, [sl, r2]
900201b8:	eb0a 0b02 	add.w	fp, sl, r2
900201bc:	fa1f fa8c 	uxth.w	sl, ip
900201c0:	940a      	str	r4, [sp, #40]	; 0x28
900201c2:	fb0a fe0e 	mul.w	lr, sl, lr
900201c6:	f89b 4001 	ldrb.w	r4, [fp, #1]
900201ca:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
900201ce:	eba5 050e 	sub.w	r5, r5, lr
900201d2:	940b      	str	r4, [sp, #44]	; 0x2c
900201d4:	fa1f fa8a 	uxth.w	sl, sl
900201d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900201da:	b2ad      	uxth	r5, r5
900201dc:	eba3 030a 	sub.w	r3, r3, sl
900201e0:	fb08 f505 	mul.w	r5, r8, r5
900201e4:	b29b      	uxth	r3, r3
900201e6:	fb09 5303 	mla	r3, r9, r3, r5
900201ea:	fb0a 3304 	mla	r3, sl, r4, r3
900201ee:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900201f0:	fb0e 3304 	mla	r3, lr, r4, r3
900201f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
900201f8:	2b00      	cmp	r3, #0
900201fa:	f000 80d1 	beq.w	900203a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
900201fe:	9c08      	ldr	r4, [sp, #32]
90020200:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90020204:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90020208:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
9002020c:	f000 8152 	beq.w	900204b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90020210:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90020214:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90020218:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002021c:	fb0a fe0e 	mul.w	lr, sl, lr
90020220:	fb09 f000 	mul.w	r0, r9, r0
90020224:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90020228:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9002022c:	f100 0b20 	add.w	fp, r0, #32
90020230:	44ce      	add	lr, r9
90020232:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90020236:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
9002023a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002023e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90020242:	ea4e 0909 	orr.w	r9, lr, r9
90020246:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
9002024a:	8868      	ldrh	r0, [r5, #2]
9002024c:	d019      	beq.n	90020282 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9002024e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90020252:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90020256:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002025a:	fb0a fe0e 	mul.w	lr, sl, lr
9002025e:	fb08 f800 	mul.w	r8, r8, r0
90020262:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90020266:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
9002026a:	f108 0b20 	add.w	fp, r8, #32
9002026e:	4486      	add	lr, r0
90020270:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90020274:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90020278:	0a00      	lsrs	r0, r0, #8
9002027a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002027e:	ea4e 0000 	orr.w	r0, lr, r0
90020282:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90020286:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
9002028a:	ea4f 4a00 	mov.w	sl, r0, lsl #16
9002028e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020292:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90020296:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002029a:	ea4e 0909 	orr.w	r9, lr, r9
9002029e:	ea4a 0000 	orr.w	r0, sl, r0
900202a2:	f1bc 0f00 	cmp.w	ip, #0
900202a6:	f000 8107 	beq.w	900204b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
900202aa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
900202ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900202b0:	3a01      	subs	r2, #1
900202b2:	2cff      	cmp	r4, #255	; 0xff
900202b4:	ea4f 0242 	mov.w	r2, r2, lsl #1
900202b8:	f102 0202 	add.w	r2, r2, #2
900202bc:	eb05 0e02 	add.w	lr, r5, r2
900202c0:	5aaa      	ldrh	r2, [r5, r2]
900202c2:	d018      	beq.n	900202f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
900202c4:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
900202c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900202cc:	ea4f 08e4 	mov.w	r8, r4, asr #3
900202d0:	fb04 fa02 	mul.w	sl, r4, r2
900202d4:	fb08 f805 	mul.w	r8, r8, r5
900202d8:	f10a 0520 	add.w	r5, sl, #32
900202dc:	ea06 1258 	and.w	r2, r6, r8, lsr #5
900202e0:	f608 0801 	addw	r8, r8, #2049	; 0x801
900202e4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
900202e8:	4442      	add	r2, r8
900202ea:	0a2d      	lsrs	r5, r5, #8
900202ec:	ea06 1252 	and.w	r2, r6, r2, lsr #5
900202f0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
900202f4:	432a      	orrs	r2, r5
900202f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
900202f8:	f8be 5002 	ldrh.w	r5, [lr, #2]
900202fc:	2cff      	cmp	r4, #255	; 0xff
900202fe:	d01a      	beq.n	90020336 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90020300:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90020304:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90020308:	ea4f 08e4 	mov.w	r8, r4, asr #3
9002030c:	fb04 fa05 	mul.w	sl, r4, r5
90020310:	fb08 f80e 	mul.w	r8, r8, lr
90020314:	f10a 0e20 	add.w	lr, sl, #32
90020318:	ea06 1558 	and.w	r5, r6, r8, lsr #5
9002031c:	f608 0801 	addw	r8, r8, #2049	; 0x801
90020320:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90020324:	4445      	add	r5, r8
90020326:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002032a:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9002032e:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
90020332:	ea45 050e 	orr.w	r5, r5, lr
90020336:	fb1c fe01 	smulbb	lr, ip, r1
9002033a:	f1cc 0810 	rsb	r8, ip, #16
9002033e:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90020342:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020346:	ea4f 0eee 	mov.w	lr, lr, asr #3
9002034a:	eba8 0801 	sub.w	r8, r8, r1
9002034e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
90020352:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90020356:	ebce 0141 	rsb	r1, lr, r1, lsl #1
9002035a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002035e:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
90020362:	ea4a 0202 	orr.w	r2, sl, r2
90020366:	4341      	muls	r1, r0
90020368:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
9002036c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020370:	fb09 1108 	mla	r1, r9, r8, r1
90020374:	ea4b 0505 	orr.w	r5, fp, r5
90020378:	fb0c 1102 	mla	r1, ip, r2, r1
9002037c:	fb0e 1e05 	mla	lr, lr, r5, r1
90020380:	ea4f 525e 	mov.w	r2, lr, lsr #21
90020384:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90020388:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002038c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90020390:	ea42 0e0e 	orr.w	lr, r2, lr
90020394:	fa1f f28e 	uxth.w	r2, lr
90020398:	2bff      	cmp	r3, #255	; 0xff
9002039a:	f040 80a1 	bne.w	900204e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
9002039e:	803a      	strh	r2, [r7, #0]
900203a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900203a2:	3702      	adds	r7, #2
900203a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
900203a6:	4413      	add	r3, r2
900203a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
900203aa:	931d      	str	r3, [sp, #116]	; 0x74
900203ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
900203ae:	441a      	add	r2, r3
900203b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900203b2:	3b01      	subs	r3, #1
900203b4:	921e      	str	r2, [sp, #120]	; 0x78
900203b6:	930f      	str	r3, [sp, #60]	; 0x3c
900203b8:	e6c7      	b.n	9002014a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900203ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900203bc:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
900203be:	9c1e      	ldr	r4, [sp, #120]	; 0x78
900203c0:	4433      	add	r3, r6
900203c2:	931d      	str	r3, [sp, #116]	; 0x74
900203c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
900203c6:	441c      	add	r4, r3
900203c8:	9b06      	ldr	r3, [sp, #24]
900203ca:	3b01      	subs	r3, #1
900203cc:	941e      	str	r4, [sp, #120]	; 0x78
900203ce:	9306      	str	r3, [sp, #24]
900203d0:	9b07      	ldr	r3, [sp, #28]
900203d2:	3302      	adds	r3, #2
900203d4:	9307      	str	r3, [sp, #28]
900203d6:	e696      	b.n	90020106 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
900203d8:	d028      	beq.n	9002042c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900203da:	9b06      	ldr	r3, [sp, #24]
900203dc:	981f      	ldr	r0, [sp, #124]	; 0x7c
900203de:	3b01      	subs	r3, #1
900203e0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
900203e2:	fb00 5003 	mla	r0, r0, r3, r5
900203e6:	1400      	asrs	r0, r0, #16
900203e8:	f53f aeaa 	bmi.w	90020140 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
900203ec:	3901      	subs	r1, #1
900203ee:	4288      	cmp	r0, r1
900203f0:	f6bf aea6 	bge.w	90020140 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
900203f4:	9920      	ldr	r1, [sp, #128]	; 0x80
900203f6:	981e      	ldr	r0, [sp, #120]	; 0x78
900203f8:	fb01 0303 	mla	r3, r1, r3, r0
900203fc:	141b      	asrs	r3, r3, #16
900203fe:	f53f ae9f 	bmi.w	90020140 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90020402:	3a01      	subs	r2, #1
90020404:	4293      	cmp	r3, r2
90020406:	f6bf ae9b 	bge.w	90020140 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9002040a:	9b06      	ldr	r3, [sp, #24]
9002040c:	f64f 061f 	movw	r6, #63519	; 0xf81f
90020410:	f8dd e01c 	ldr.w	lr, [sp, #28]
90020414:	930f      	str	r3, [sp, #60]	; 0x3c
90020416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90020418:	2b00      	cmp	r3, #0
9002041a:	f300 80b6 	bgt.w	9002058a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
9002041e:	9b06      	ldr	r3, [sp, #24]
90020420:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90020424:	9b07      	ldr	r3, [sp, #28]
90020426:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9002042a:	9307      	str	r3, [sp, #28]
9002042c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9002042e:	2b00      	cmp	r3, #0
90020430:	f340 8218 	ble.w	90020864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
90020434:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020438:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002043a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002043e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020442:	eef0 6a62 	vmov.f32	s13, s5
90020446:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002044a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002044e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020452:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
90020456:	eef0 6a43 	vmov.f32	s13, s6
9002045a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002045e:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
90020462:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020466:	ee61 7a27 	vmul.f32	s15, s2, s15
9002046a:	ee77 2a62 	vsub.f32	s5, s14, s5
9002046e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020472:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020476:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002047a:	ee12 2a90 	vmov	r2, s5
9002047e:	eef0 2a47 	vmov.f32	s5, s14
90020482:	fb92 f3f3 	sdiv	r3, r2, r3
90020486:	ee13 2a10 	vmov	r2, s6
9002048a:	931f      	str	r3, [sp, #124]	; 0x7c
9002048c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002048e:	eeb0 3a67 	vmov.f32	s6, s15
90020492:	fb92 f3f3 	sdiv	r3, r2, r3
90020496:	9320      	str	r3, [sp, #128]	; 0x80
90020498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9002049a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9002049c:	3b01      	subs	r3, #1
9002049e:	930e      	str	r3, [sp, #56]	; 0x38
900204a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900204a2:	bf08      	it	eq
900204a4:	4613      	moveq	r3, r2
900204a6:	9306      	str	r3, [sp, #24]
900204a8:	e61f      	b.n	900200ea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
900204aa:	fb08 f505 	mul.w	r5, r8, r5
900204ae:	fb09 5303 	mla	r3, r9, r3, r5
900204b2:	e69f      	b.n	900201f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
900204b4:	4681      	mov	r9, r0
900204b6:	e6c6      	b.n	90020246 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
900204b8:	f1c1 0210 	rsb	r2, r1, #16
900204bc:	4341      	muls	r1, r0
900204be:	fb09 1902 	mla	r9, r9, r2, r1
900204c2:	ea4f 0949 	mov.w	r9, r9, lsl #1
900204c6:	ea4f 5259 	mov.w	r2, r9, lsr #21
900204ca:	ea4f 1959 	mov.w	r9, r9, lsr #5
900204ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900204d2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900204d6:	ea42 0909 	orr.w	r9, r2, r9
900204da:	fa1f f289 	uxth.w	r2, r9
900204de:	e75b      	b.n	90020398 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
900204e0:	f8b7 c000 	ldrh.w	ip, [r7]
900204e4:	43db      	mvns	r3, r3
900204e6:	ea4f 202c 	mov.w	r0, ip, asr #8
900204ea:	fa5f fe83 	uxtb.w	lr, r3
900204ee:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900204f2:	ea4f 05ec 	mov.w	r5, ip, asr #3
900204f6:	ea4f 03cc 	mov.w	r3, ip, lsl #3
900204fa:	fb00 f00e 	mul.w	r0, r0, lr
900204fe:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90020502:	b2db      	uxtb	r3, r3
90020504:	1c41      	adds	r1, r0, #1
90020506:	fb05 f50e 	mul.w	r5, r5, lr
9002050a:	fb03 f30e 	mul.w	r3, r3, lr
9002050e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90020512:	1211      	asrs	r1, r2, #8
90020514:	f021 0107 	bic.w	r1, r1, #7
90020518:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9002051c:	48d3      	ldr	r0, [pc, #844]	; (9002086c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
9002051e:	b2c9      	uxtb	r1, r1
90020520:	ea00 2001 	and.w	r0, r0, r1, lsl #8
90020524:	1c69      	adds	r1, r5, #1
90020526:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9002052a:	10d1      	asrs	r1, r2, #3
9002052c:	00d2      	lsls	r2, r2, #3
9002052e:	f021 0103 	bic.w	r1, r1, #3
90020532:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90020536:	00c9      	lsls	r1, r1, #3
90020538:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002053c:	4301      	orrs	r1, r0
9002053e:	1c58      	adds	r0, r3, #1
90020540:	eb00 2313 	add.w	r3, r0, r3, lsr #8
90020544:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90020548:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002054c:	430a      	orrs	r2, r1
9002054e:	e726      	b.n	9002039e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
90020550:	f115 0e01 	adds.w	lr, r5, #1
90020554:	f53f af24 	bmi.w	900203a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90020558:	4572      	cmp	r2, lr
9002055a:	f6ff af21 	blt.w	900203a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9002055e:	f110 0e01 	adds.w	lr, r0, #1
90020562:	f53f af1d 	bmi.w	900203a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90020566:	4573      	cmp	r3, lr
90020568:	f6ff af1a 	blt.w	900203a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9002056c:	b21b      	sxth	r3, r3
9002056e:	b212      	sxth	r2, r2
90020570:	9301      	str	r3, [sp, #4]
90020572:	9200      	str	r2, [sp, #0]
90020574:	e9cd 1c04 	strd	r1, ip, [sp, #16]
90020578:	e9cd 5002 	strd	r5, r0, [sp, #8]
9002057c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
90020580:	4639      	mov	r1, r7
90020582:	9811      	ldr	r0, [sp, #68]	; 0x44
90020584:	f7ff fc22 	bl	9001fdcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90020588:	e70a      	b.n	900203a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
9002058a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
9002058c:	f3c3 3203 	ubfx	r2, r3, #12, #4
90020590:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90020592:	f3c3 3503 	ubfx	r5, r3, #12, #4
90020596:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020598:	fa1f fc82 	uxth.w	ip, r2
9002059c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900205a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900205a2:	ea4f 100c 	mov.w	r0, ip, lsl #4
900205a6:	141f      	asrs	r7, r3, #16
900205a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900205aa:	141b      	asrs	r3, r3, #16
900205ac:	fb01 3707 	mla	r7, r1, r7, r3
900205b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900205b2:	eb03 0a07 	add.w	sl, r3, r7
900205b6:	f813 9007 	ldrb.w	r9, [r3, r7]
900205ba:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
900205be:	f89a 8001 	ldrb.w	r8, [sl, #1]
900205c2:	b29b      	uxth	r3, r3
900205c4:	2d00      	cmp	r5, #0
900205c6:	f000 80fe 	beq.w	900207c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
900205ca:	f81a 4001 	ldrb.w	r4, [sl, r1]
900205ce:	eb0a 0b01 	add.w	fp, sl, r1
900205d2:	fa1f fa85 	uxth.w	sl, r5
900205d6:	940c      	str	r4, [sp, #48]	; 0x30
900205d8:	fb0a fc0c 	mul.w	ip, sl, ip
900205dc:	f89b 4001 	ldrb.w	r4, [fp, #1]
900205e0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
900205e4:	eba0 000c 	sub.w	r0, r0, ip
900205e8:	940d      	str	r4, [sp, #52]	; 0x34
900205ea:	fa1f fa8a 	uxth.w	sl, sl
900205ee:	b280      	uxth	r0, r0
900205f0:	eba3 030a 	sub.w	r3, r3, sl
900205f4:	fb08 f000 	mul.w	r0, r8, r0
900205f8:	b29b      	uxth	r3, r3
900205fa:	fb09 0303 	mla	r3, r9, r3, r0
900205fe:	980c      	ldr	r0, [sp, #48]	; 0x30
90020600:	fb0a 3300 	mla	r3, sl, r0, r3
90020604:	fb0c 3304 	mla	r3, ip, r4, r3
90020608:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002060c:	2b00      	cmp	r3, #0
9002060e:	f000 80cc 	beq.w	900207aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90020612:	9808      	ldr	r0, [sp, #32]
90020614:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90020618:	9c08      	ldr	r4, [sp, #32]
9002061a:	eb00 0047 	add.w	r0, r0, r7, lsl #1
9002061e:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90020622:	f000 80d5 	beq.w	900207d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
90020626:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9002062a:	ea4f 0ae9 	mov.w	sl, r9, asr #3
9002062e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90020632:	fb0a fc0c 	mul.w	ip, sl, ip
90020636:	fb09 f707 	mul.w	r7, r9, r7
9002063a:	ea06 195c 	and.w	r9, r6, ip, lsr #5
9002063e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90020642:	f107 0b20 	add.w	fp, r7, #32
90020646:	44cc      	add	ip, r9
90020648:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
9002064c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90020650:	ea4f 2919 	mov.w	r9, r9, lsr #8
90020654:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90020658:	ea4c 0909 	orr.w	r9, ip, r9
9002065c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90020660:	8847      	ldrh	r7, [r0, #2]
90020662:	d019      	beq.n	90020698 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
90020664:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90020668:	ea4f 0ae8 	mov.w	sl, r8, asr #3
9002066c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90020670:	fb0a fc0c 	mul.w	ip, sl, ip
90020674:	fb08 f807 	mul.w	r8, r8, r7
90020678:	ea06 175c 	and.w	r7, r6, ip, lsr #5
9002067c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90020680:	f108 0b20 	add.w	fp, r8, #32
90020684:	44bc      	add	ip, r7
90020686:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
9002068a:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
9002068e:	0a3f      	lsrs	r7, r7, #8
90020690:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90020694:	ea4c 0707 	orr.w	r7, ip, r7
90020698:	ea4f 4c09 	mov.w	ip, r9, lsl #16
9002069c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900206a0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
900206a4:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900206a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900206ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900206b0:	ea4c 0909 	orr.w	r9, ip, r9
900206b4:	ea4a 0707 	orr.w	r7, sl, r7
900206b8:	2d00      	cmp	r5, #0
900206ba:	f000 808b 	beq.w	900207d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
900206be:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
900206c2:	3901      	subs	r1, #1
900206c4:	0049      	lsls	r1, r1, #1
900206c6:	3102      	adds	r1, #2
900206c8:	eb00 0c01 	add.w	ip, r0, r1
900206cc:	5a41      	ldrh	r1, [r0, r1]
900206ce:	980c      	ldr	r0, [sp, #48]	; 0x30
900206d0:	28ff      	cmp	r0, #255	; 0xff
900206d2:	d019      	beq.n	90020708 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
900206d4:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
900206d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900206da:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900206de:	ea4f 08e4 	mov.w	r8, r4, asr #3
900206e2:	fb04 fa01 	mul.w	sl, r4, r1
900206e6:	fb08 f800 	mul.w	r8, r8, r0
900206ea:	f10a 0020 	add.w	r0, sl, #32
900206ee:	ea06 1158 	and.w	r1, r6, r8, lsr #5
900206f2:	f608 0801 	addw	r8, r8, #2049	; 0x801
900206f6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
900206fa:	4441      	add	r1, r8
900206fc:	0a00      	lsrs	r0, r0, #8
900206fe:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90020702:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90020706:	4301      	orrs	r1, r0
90020708:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002070a:	f8bc 0002 	ldrh.w	r0, [ip, #2]
9002070e:	2cff      	cmp	r4, #255	; 0xff
90020710:	d01a      	beq.n	90020748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
90020712:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
90020716:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002071a:	ea4f 08e4 	mov.w	r8, r4, asr #3
9002071e:	fb04 fa00 	mul.w	sl, r4, r0
90020722:	fb08 f80c 	mul.w	r8, r8, ip
90020726:	f10a 0c20 	add.w	ip, sl, #32
9002072a:	ea06 1058 	and.w	r0, r6, r8, lsr #5
9002072e:	f608 0801 	addw	r8, r8, #2049	; 0x801
90020732:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
90020736:	4440      	add	r0, r8
90020738:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002073c:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90020740:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90020744:	ea40 000c 	orr.w	r0, r0, ip
90020748:	fb15 fc02 	smulbb	ip, r5, r2
9002074c:	f1c5 0810 	rsb	r8, r5, #16
90020750:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90020754:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020758:	ea4f 0cec 	mov.w	ip, ip, asr #3
9002075c:	eba8 0802 	sub.w	r8, r8, r2
90020760:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90020764:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90020768:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
9002076c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020770:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
90020774:	ea4a 0101 	orr.w	r1, sl, r1
90020778:	437a      	muls	r2, r7
9002077a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
9002077e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020782:	fb09 2208 	mla	r2, r9, r8, r2
90020786:	ea4b 0000 	orr.w	r0, fp, r0
9002078a:	fb05 2201 	mla	r2, r5, r1, r2
9002078e:	fb0c 2200 	mla	r2, ip, r0, r2
90020792:	0d57      	lsrs	r7, r2, #21
90020794:	0952      	lsrs	r2, r2, #5
90020796:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9002079a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002079e:	433a      	orrs	r2, r7
900207a0:	2bff      	cmp	r3, #255	; 0xff
900207a2:	b292      	uxth	r2, r2
900207a4:	d127      	bne.n	900207f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
900207a6:	f8ae 2000 	strh.w	r2, [lr]
900207aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
900207ac:	f10e 0e02 	add.w	lr, lr, #2
900207b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
900207b2:	4413      	add	r3, r2
900207b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
900207b6:	931d      	str	r3, [sp, #116]	; 0x74
900207b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
900207ba:	441a      	add	r2, r3
900207bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900207be:	3b01      	subs	r3, #1
900207c0:	921e      	str	r2, [sp, #120]	; 0x78
900207c2:	930f      	str	r3, [sp, #60]	; 0x3c
900207c4:	e627      	b.n	90020416 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
900207c6:	fb08 f000 	mul.w	r0, r8, r0
900207ca:	fb09 0303 	mla	r3, r9, r3, r0
900207ce:	e71b      	b.n	90020608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
900207d0:	46b9      	mov	r9, r7
900207d2:	e743      	b.n	9002065c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
900207d4:	f1c2 0110 	rsb	r1, r2, #16
900207d8:	437a      	muls	r2, r7
900207da:	fb09 2901 	mla	r9, r9, r1, r2
900207de:	ea4f 0949 	mov.w	r9, r9, lsl #1
900207e2:	ea4f 5059 	mov.w	r0, r9, lsr #21
900207e6:	ea4f 1259 	mov.w	r2, r9, lsr #5
900207ea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900207ee:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900207f2:	4302      	orrs	r2, r0
900207f4:	e7d4      	b.n	900207a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
900207f6:	f8be 7000 	ldrh.w	r7, [lr]
900207fa:	43db      	mvns	r3, r3
900207fc:	4c1b      	ldr	r4, [pc, #108]	; (9002086c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
900207fe:	1238      	asrs	r0, r7, #8
90020800:	fa5f fc83 	uxtb.w	ip, r3
90020804:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020808:	10fd      	asrs	r5, r7, #3
9002080a:	00fb      	lsls	r3, r7, #3
9002080c:	fb00 f00c 	mul.w	r0, r0, ip
90020810:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90020814:	b2db      	uxtb	r3, r3
90020816:	fb05 f10c 	mul.w	r1, r5, ip
9002081a:	1c45      	adds	r5, r0, #1
9002081c:	fb03 f30c 	mul.w	r3, r3, ip
90020820:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90020824:	1215      	asrs	r5, r2, #8
90020826:	f025 0507 	bic.w	r5, r5, #7
9002082a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9002082e:	1c4d      	adds	r5, r1, #1
90020830:	eb05 2511 	add.w	r5, r5, r1, lsr #8
90020834:	10d1      	asrs	r1, r2, #3
90020836:	b2c0      	uxtb	r0, r0
90020838:	f021 0103 	bic.w	r1, r1, #3
9002083c:	00d2      	lsls	r2, r2, #3
9002083e:	ea04 2000 	and.w	r0, r4, r0, lsl #8
90020842:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90020846:	00c9      	lsls	r1, r1, #3
90020848:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002084c:	4308      	orrs	r0, r1
9002084e:	1c59      	adds	r1, r3, #1
90020850:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90020854:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90020858:	f3c3 03c4 	ubfx	r3, r3, #3, #5
9002085c:	4318      	orrs	r0, r3
9002085e:	f8ae 0000 	strh.w	r0, [lr]
90020862:	e7a2      	b.n	900207aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90020864:	b013      	add	sp, #76	; 0x4c
90020866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002086a:	bf00      	nop
9002086c:	fffff800 	.word	0xfffff800

90020870 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90020870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90020874:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
90020878:	f9bd a020 	ldrsh.w	sl, [sp, #32]
9002087c:	fb05 4c03 	mla	ip, r5, r3, r4
90020880:	2d00      	cmp	r5, #0
90020882:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
90020886:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002088a:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
9002088e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
90020892:	8808      	ldrh	r0, [r1, #0]
90020894:	f2c0 80a7 	blt.w	900209e6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90020898:	45aa      	cmp	sl, r5
9002089a:	f340 80a4 	ble.w	900209e6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
9002089e:	2c00      	cmp	r4, #0
900208a0:	f2c0 809f 	blt.w	900209e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
900208a4:	42a3      	cmp	r3, r4
900208a6:	f340 809c 	ble.w	900209e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
900208aa:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
900208ae:	1c62      	adds	r2, r4, #1
900208b0:	f100 809c 	bmi.w	900209ec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900208b4:	4293      	cmp	r3, r2
900208b6:	f340 8099 	ble.w	900209ec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900208ba:	f1b9 0f00 	cmp.w	r9, #0
900208be:	f000 8095 	beq.w	900209ec <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900208c2:	f8be c002 	ldrh.w	ip, [lr, #2]
900208c6:	3501      	adds	r5, #1
900208c8:	f100 8094 	bmi.w	900209f4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900208cc:	45aa      	cmp	sl, r5
900208ce:	f340 8091 	ble.w	900209f4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900208d2:	2f00      	cmp	r7, #0
900208d4:	f000 808e 	beq.w	900209f4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900208d8:	2c00      	cmp	r4, #0
900208da:	f2c0 8089 	blt.w	900209f0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
900208de:	42a3      	cmp	r3, r4
900208e0:	f340 8086 	ble.w	900209f0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
900208e4:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
900208e8:	3401      	adds	r4, #1
900208ea:	f100 8086 	bmi.w	900209fa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900208ee:	42a3      	cmp	r3, r4
900208f0:	f340 8083 	ble.w	900209fa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900208f4:	f1b9 0f00 	cmp.w	r9, #0
900208f8:	d07f      	beq.n	900209fa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900208fa:	3301      	adds	r3, #1
900208fc:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
90020900:	ea4f 4408 	mov.w	r4, r8, lsl #16
90020904:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
90020908:	fb19 fe07 	smulbb	lr, r9, r7
9002090c:	f1c7 0210 	rsb	r2, r7, #16
90020910:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90020914:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90020918:	eba2 0209 	sub.w	r2, r2, r9
9002091c:	ea44 0808 	orr.w	r8, r4, r8
90020920:	ea4f 440c 	mov.w	r4, ip, lsl #16
90020924:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020928:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
9002092c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90020930:	ebce 0747 	rsb	r7, lr, r7, lsl #1
90020934:	ea44 0c0c 	orr.w	ip, r4, ip
90020938:	ebce 0449 	rsb	r4, lr, r9, lsl #1
9002093c:	fb04 f40c 	mul.w	r4, r4, ip
90020940:	fb02 4808 	mla	r8, r2, r8, r4
90020944:	041a      	lsls	r2, r3, #16
90020946:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002094a:	b2b4      	uxth	r4, r6
9002094c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020950:	43f6      	mvns	r6, r6
90020952:	4313      	orrs	r3, r2
90020954:	042a      	lsls	r2, r5, #16
90020956:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002095a:	b2f6      	uxtb	r6, r6
9002095c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020960:	fb0e 8303 	mla	r3, lr, r3, r8
90020964:	432a      	orrs	r2, r5
90020966:	fb07 3202 	mla	r2, r7, r2, r3
9002096a:	10c7      	asrs	r7, r0, #3
9002096c:	0d53      	lsrs	r3, r2, #21
9002096e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90020972:	0952      	lsrs	r2, r2, #5
90020974:	fb17 f706 	smulbb	r7, r7, r6
90020978:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002097c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020980:	431a      	orrs	r2, r3
90020982:	b293      	uxth	r3, r2
90020984:	1202      	asrs	r2, r0, #8
90020986:	121d      	asrs	r5, r3, #8
90020988:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
9002098c:	00c0      	lsls	r0, r0, #3
9002098e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90020992:	fb12 f206 	smulbb	r2, r2, r6
90020996:	b2c0      	uxtb	r0, r0
90020998:	fb05 2504 	mla	r5, r5, r4, r2
9002099c:	10da      	asrs	r2, r3, #3
9002099e:	fb10 f006 	smulbb	r0, r0, r6
900209a2:	00db      	lsls	r3, r3, #3
900209a4:	b2ad      	uxth	r5, r5
900209a6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900209aa:	b2db      	uxtb	r3, r3
900209ac:	fb02 7204 	mla	r2, r2, r4, r7
900209b0:	fb03 0004 	mla	r0, r3, r4, r0
900209b4:	1c6b      	adds	r3, r5, #1
900209b6:	b292      	uxth	r2, r2
900209b8:	b280      	uxth	r0, r0
900209ba:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900209be:	1c43      	adds	r3, r0, #1
900209c0:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900209c4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900209c8:	1c50      	adds	r0, r2, #1
900209ca:	eb00 2212 	add.w	r2, r0, r2, lsr #8
900209ce:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900209d2:	0952      	lsrs	r2, r2, #5
900209d4:	432b      	orrs	r3, r5
900209d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900209da:	4313      	orrs	r3, r2
900209dc:	800b      	strh	r3, [r1, #0]
900209de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900209e2:	4680      	mov	r8, r0
900209e4:	e763      	b.n	900208ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
900209e6:	4684      	mov	ip, r0
900209e8:	4680      	mov	r8, r0
900209ea:	e76c      	b.n	900208c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900209ec:	4684      	mov	ip, r0
900209ee:	e76a      	b.n	900208c6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900209f0:	4605      	mov	r5, r0
900209f2:	e779      	b.n	900208e8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
900209f4:	4603      	mov	r3, r0
900209f6:	4605      	mov	r5, r0
900209f8:	e782      	b.n	90020900 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
900209fa:	4603      	mov	r3, r0
900209fc:	e780      	b.n	90020900 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

900209fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900209fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020a02:	b093      	sub	sp, #76	; 0x4c
90020a04:	461d      	mov	r5, r3
90020a06:	9210      	str	r2, [sp, #64]	; 0x40
90020a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
90020a0a:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
90020a0e:	910a      	str	r1, [sp, #40]	; 0x28
90020a10:	920b      	str	r2, [sp, #44]	; 0x2c
90020a12:	6859      	ldr	r1, [r3, #4]
90020a14:	681b      	ldr	r3, [r3, #0]
90020a16:	9011      	str	r0, [sp, #68]	; 0x44
90020a18:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
90020a1c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90020a20:	fb01 2707 	mla	r7, r1, r7, r2
90020a24:	eb03 0347 	add.w	r3, r3, r7, lsl #1
90020a28:	9307      	str	r3, [sp, #28]
90020a2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020a2c:	681b      	ldr	r3, [r3, #0]
90020a2e:	9309      	str	r3, [sp, #36]	; 0x24
90020a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020a32:	43db      	mvns	r3, r3
90020a34:	b2db      	uxtb	r3, r3
90020a36:	9308      	str	r3, [sp, #32]
90020a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020a3a:	2b00      	cmp	r3, #0
90020a3c:	dc03      	bgt.n	90020a46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90020a3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020a40:	2b00      	cmp	r3, #0
90020a42:	f340 8205 	ble.w	90020e50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020a46:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020a48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020a4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020a50:	1e48      	subs	r0, r1, #1
90020a52:	f102 3cff 	add.w	ip, r2, #4294967295
90020a56:	2d00      	cmp	r5, #0
90020a58:	f340 80da 	ble.w	90020c10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
90020a5c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020a60:	ea4f 4326 	mov.w	r3, r6, asr #16
90020a64:	d406      	bmi.n	90020a74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020a66:	4586      	cmp	lr, r0
90020a68:	da04      	bge.n	90020a74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020a6a:	2b00      	cmp	r3, #0
90020a6c:	db02      	blt.n	90020a74 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90020a6e:	4563      	cmp	r3, ip
90020a70:	f2c0 80cf 	blt.w	90020c12 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90020a74:	f11e 0e01 	adds.w	lr, lr, #1
90020a78:	f100 80c1 	bmi.w	90020bfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020a7c:	4571      	cmp	r1, lr
90020a7e:	f2c0 80be 	blt.w	90020bfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020a82:	3301      	adds	r3, #1
90020a84:	f100 80bb 	bmi.w	90020bfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020a88:	429a      	cmp	r2, r3
90020a8a:	f2c0 80b8 	blt.w	90020bfe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90020a8e:	46a9      	mov	r9, r5
90020a90:	f8dd 801c 	ldr.w	r8, [sp, #28]
90020a94:	f1b9 0f00 	cmp.w	r9, #0
90020a98:	f340 80d8 	ble.w	90020c4c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
90020a9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020a9e:	1421      	asrs	r1, r4, #16
90020aa0:	ea4f 4026 	mov.w	r0, r6, asr #16
90020aa4:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020aa8:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90020aac:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90020ab0:	f100 8112 	bmi.w	90020cd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020ab4:	f10e 3aff 	add.w	sl, lr, #4294967295
90020ab8:	4551      	cmp	r1, sl
90020aba:	f280 810d 	bge.w	90020cd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020abe:	2800      	cmp	r0, #0
90020ac0:	f2c0 810a 	blt.w	90020cd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020ac4:	f103 3aff 	add.w	sl, r3, #4294967295
90020ac8:	4550      	cmp	r0, sl
90020aca:	f280 8105 	bge.w	90020cd8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
90020ace:	fa0f f38e 	sxth.w	r3, lr
90020ad2:	fb00 1103 	mla	r1, r0, r3, r1
90020ad6:	9809      	ldr	r0, [sp, #36]	; 0x24
90020ad8:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
90020adc:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
90020ae0:	f8ba 1002 	ldrh.w	r1, [sl, #2]
90020ae4:	f1bc 0f00 	cmp.w	ip, #0
90020ae8:	d007      	beq.n	90020afa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
90020aea:	005b      	lsls	r3, r3, #1
90020aec:	eb0a 0003 	add.w	r0, sl, r3
90020af0:	f83a 3003 	ldrh.w	r3, [sl, r3]
90020af4:	930c      	str	r3, [sp, #48]	; 0x30
90020af6:	8843      	ldrh	r3, [r0, #2]
90020af8:	930d      	str	r3, [sp, #52]	; 0x34
90020afa:	ea4f 400e 	mov.w	r0, lr, lsl #16
90020afe:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90020b02:	fb12 f30c 	smulbb	r3, r2, ip
90020b06:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90020b0a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020b0e:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020b12:	10db      	asrs	r3, r3, #3
90020b14:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90020b18:	ea40 000e 	orr.w	r0, r0, lr
90020b1c:	f1cc 0e10 	rsb	lr, ip, #16
90020b20:	ea4a 0101 	orr.w	r1, sl, r1
90020b24:	9f08      	ldr	r7, [sp, #32]
90020b26:	ebae 0e02 	sub.w	lr, lr, r2
90020b2a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020b2e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90020b32:	4351      	muls	r1, r2
90020b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90020b36:	fb0e 1e00 	mla	lr, lr, r0, r1
90020b3a:	990c      	ldr	r1, [sp, #48]	; 0x30
90020b3c:	0410      	lsls	r0, r2, #16
90020b3e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020b42:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020b46:	4310      	orrs	r0, r2
90020b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90020b4a:	0412      	lsls	r2, r2, #16
90020b4c:	fb03 e000 	mla	r0, r3, r0, lr
90020b50:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90020b54:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90020b58:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020b5c:	ea42 020e 	orr.w	r2, r2, lr
90020b60:	fb03 0302 	mla	r3, r3, r2, r0
90020b64:	f8b8 0000 	ldrh.w	r0, [r8]
90020b68:	0d5a      	lsrs	r2, r3, #21
90020b6a:	095b      	lsrs	r3, r3, #5
90020b6c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020b70:	1201      	asrs	r1, r0, #8
90020b72:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020b76:	ea4f 0ee0 	mov.w	lr, r0, asr #3
90020b7a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020b7e:	00c0      	lsls	r0, r0, #3
90020b80:	4313      	orrs	r3, r2
90020b82:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90020b86:	fb11 f107 	smulbb	r1, r1, r7
90020b8a:	b2c0      	uxtb	r0, r0
90020b8c:	b29b      	uxth	r3, r3
90020b8e:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90020b92:	fb10 f007 	smulbb	r0, r0, r7
90020b96:	fb1e fe07 	smulbb	lr, lr, r7
90020b9a:	ea4f 2c23 	mov.w	ip, r3, asr #8
90020b9e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020ba2:	fb0c 1c02 	mla	ip, ip, r2, r1
90020ba6:	10d9      	asrs	r1, r3, #3
90020ba8:	00db      	lsls	r3, r3, #3
90020baa:	fa1f fc8c 	uxth.w	ip, ip
90020bae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020bb2:	b2db      	uxtb	r3, r3
90020bb4:	fb01 e102 	mla	r1, r1, r2, lr
90020bb8:	fb03 0302 	mla	r3, r3, r2, r0
90020bbc:	b289      	uxth	r1, r1
90020bbe:	b29a      	uxth	r2, r3
90020bc0:	f10c 0301 	add.w	r3, ip, #1
90020bc4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90020bc8:	1c53      	adds	r3, r2, #1
90020bca:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90020bce:	1c4a      	adds	r2, r1, #1
90020bd0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
90020bd4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90020bd8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90020bdc:	0949      	lsrs	r1, r1, #5
90020bde:	ea43 030c 	orr.w	r3, r3, ip
90020be2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90020be6:	430b      	orrs	r3, r1
90020be8:	f8a8 3000 	strh.w	r3, [r8]
90020bec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020bee:	f108 0802 	add.w	r8, r8, #2
90020bf2:	f109 39ff 	add.w	r9, r9, #4294967295
90020bf6:	441c      	add	r4, r3
90020bf8:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020bfa:	441e      	add	r6, r3
90020bfc:	e74a      	b.n	90020a94 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
90020bfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020c00:	3d01      	subs	r5, #1
90020c02:	441c      	add	r4, r3
90020c04:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020c06:	441e      	add	r6, r3
90020c08:	9b07      	ldr	r3, [sp, #28]
90020c0a:	3302      	adds	r3, #2
90020c0c:	9307      	str	r3, [sp, #28]
90020c0e:	e722      	b.n	90020a56 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90020c10:	d022      	beq.n	90020c58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
90020c12:	1e6b      	subs	r3, r5, #1
90020c14:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020c16:	fb00 4003 	mla	r0, r0, r3, r4
90020c1a:	1400      	asrs	r0, r0, #16
90020c1c:	f53f af37 	bmi.w	90020a8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020c20:	3901      	subs	r1, #1
90020c22:	4288      	cmp	r0, r1
90020c24:	f6bf af33 	bge.w	90020a8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020c28:	9920      	ldr	r1, [sp, #128]	; 0x80
90020c2a:	fb01 6303 	mla	r3, r1, r3, r6
90020c2e:	141b      	asrs	r3, r3, #16
90020c30:	f53f af2d 	bmi.w	90020a8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020c34:	3a01      	subs	r2, #1
90020c36:	4293      	cmp	r3, r2
90020c38:	f6bf af29 	bge.w	90020a8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90020c3c:	46a8      	mov	r8, r5
90020c3e:	f8dd 901c 	ldr.w	r9, [sp, #28]
90020c42:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
90020c46:	f1b8 0f00 	cmp.w	r8, #0
90020c4a:	dc60      	bgt.n	90020d0e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
90020c4c:	9b07      	ldr	r3, [sp, #28]
90020c4e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90020c52:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90020c56:	9307      	str	r3, [sp, #28]
90020c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020c5a:	2b00      	cmp	r3, #0
90020c5c:	f340 80f8 	ble.w	90020e50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90020c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020c64:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020c66:	ee30 0a04 	vadd.f32	s0, s0, s8
90020c6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020c6e:	eef0 6a62 	vmov.f32	s13, s5
90020c72:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020c76:	ee31 1a05 	vadd.f32	s2, s2, s10
90020c7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020c7e:	ee16 4a90 	vmov	r4, s13
90020c82:	eef0 6a43 	vmov.f32	s13, s6
90020c86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020c8a:	ee16 6a90 	vmov	r6, s13
90020c8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020c92:	ee61 7a27 	vmul.f32	s15, s2, s15
90020c96:	ee77 2a62 	vsub.f32	s5, s14, s5
90020c9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020c9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020ca2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020ca6:	ee12 2a90 	vmov	r2, s5
90020caa:	eef0 2a47 	vmov.f32	s5, s14
90020cae:	fb92 f3f3 	sdiv	r3, r2, r3
90020cb2:	ee13 2a10 	vmov	r2, s6
90020cb6:	931f      	str	r3, [sp, #124]	; 0x7c
90020cb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020cba:	eeb0 3a67 	vmov.f32	s6, s15
90020cbe:	fb92 f3f3 	sdiv	r3, r2, r3
90020cc2:	9320      	str	r3, [sp, #128]	; 0x80
90020cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020cc6:	9a10      	ldr	r2, [sp, #64]	; 0x40
90020cc8:	3b01      	subs	r3, #1
90020cca:	930a      	str	r3, [sp, #40]	; 0x28
90020ccc:	bf08      	it	eq
90020cce:	4615      	moveq	r5, r2
90020cd0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020cd2:	bf18      	it	ne
90020cd4:	461d      	movne	r5, r3
90020cd6:	e6af      	b.n	90020a38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90020cd8:	f111 0a01 	adds.w	sl, r1, #1
90020cdc:	d486      	bmi.n	90020bec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020cde:	45d6      	cmp	lr, sl
90020ce0:	db84      	blt.n	90020bec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020ce2:	f110 0a01 	adds.w	sl, r0, #1
90020ce6:	d481      	bmi.n	90020bec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020ce8:	4553      	cmp	r3, sl
90020cea:	f6ff af7f 	blt.w	90020bec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020cee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
90020cf0:	b21b      	sxth	r3, r3
90020cf2:	9101      	str	r1, [sp, #4]
90020cf4:	4641      	mov	r1, r8
90020cf6:	9300      	str	r3, [sp, #0]
90020cf8:	fa0f f38e 	sxth.w	r3, lr
90020cfc:	e9cd 0202 	strd	r0, r2, [sp, #8]
90020d00:	e9cd c704 	strd	ip, r7, [sp, #16]
90020d04:	9a09      	ldr	r2, [sp, #36]	; 0x24
90020d06:	9811      	ldr	r0, [sp, #68]	; 0x44
90020d08:	f7ff fdb2 	bl	90020870 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
90020d0c:	e76e      	b.n	90020bec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
90020d0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020d10:	1430      	asrs	r0, r6, #16
90020d12:	9f09      	ldr	r7, [sp, #36]	; 0x24
90020d14:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90020d18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020d1c:	1423      	asrs	r3, r4, #16
90020d1e:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020d22:	fb01 3000 	mla	r0, r1, r0, r3
90020d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020d28:	eb03 0340 	add.w	r3, r3, r0, lsl #1
90020d2c:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
90020d30:	8858      	ldrh	r0, [r3, #2]
90020d32:	f1be 0f00 	cmp.w	lr, #0
90020d36:	d00b      	beq.n	90020d50 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90020d38:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90020d3c:	3901      	subs	r1, #1
90020d3e:	0049      	lsls	r1, r1, #1
90020d40:	3102      	adds	r1, #2
90020d42:	eb03 0b01 	add.w	fp, r3, r1
90020d46:	5a5b      	ldrh	r3, [r3, r1]
90020d48:	930e      	str	r3, [sp, #56]	; 0x38
90020d4a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90020d4e:	930f      	str	r3, [sp, #60]	; 0x3c
90020d50:	ea4f 410c 	mov.w	r1, ip, lsl #16
90020d54:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020d58:	fb12 f30e 	smulbb	r3, r2, lr
90020d5c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90020d60:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
90020d64:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020d68:	10db      	asrs	r3, r3, #3
90020d6a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020d6e:	ea41 010c 	orr.w	r1, r1, ip
90020d72:	f1ce 0c10 	rsb	ip, lr, #16
90020d76:	ea4b 0000 	orr.w	r0, fp, r0
90020d7a:	9f08      	ldr	r7, [sp, #32]
90020d7c:	ebac 0c02 	sub.w	ip, ip, r2
90020d80:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90020d84:	f108 38ff 	add.w	r8, r8, #4294967295
90020d88:	4350      	muls	r0, r2
90020d8a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90020d8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020d90:	fb0c 0c01 	mla	ip, ip, r1, r0
90020d94:	980e      	ldr	r0, [sp, #56]	; 0x38
90020d96:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90020d9a:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
90020d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90020da0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020da4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020da8:	0412      	lsls	r2, r2, #16
90020daa:	ea4b 0101 	orr.w	r1, fp, r1
90020dae:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90020db2:	fb03 c101 	mla	r1, r3, r1, ip
90020db6:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90020dba:	4302      	orrs	r2, r0
90020dbc:	fb03 1202 	mla	r2, r3, r2, r1
90020dc0:	ea4f 5b52 	mov.w	fp, r2, lsr #21
90020dc4:	0952      	lsrs	r2, r2, #5
90020dc6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
90020dca:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
90020dce:	f8b9 2000 	ldrh.w	r2, [r9]
90020dd2:	ea4b 0303 	orr.w	r3, fp, r3
90020dd6:	1211      	asrs	r1, r2, #8
90020dd8:	ea4f 0ce2 	mov.w	ip, r2, asr #3
90020ddc:	b29b      	uxth	r3, r3
90020dde:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020de2:	00d2      	lsls	r2, r2, #3
90020de4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
90020de8:	fb11 f107 	smulbb	r1, r1, r7
90020dec:	1218      	asrs	r0, r3, #8
90020dee:	fb1c fc07 	smulbb	ip, ip, r7
90020df2:	b2d2      	uxtb	r2, r2
90020df4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90020df8:	fb12 f207 	smulbb	r2, r2, r7
90020dfc:	fb00 100a 	mla	r0, r0, sl, r1
90020e00:	10d9      	asrs	r1, r3, #3
90020e02:	00db      	lsls	r3, r3, #3
90020e04:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020e08:	b280      	uxth	r0, r0
90020e0a:	b2db      	uxtb	r3, r3
90020e0c:	fb01 c10a 	mla	r1, r1, sl, ip
90020e10:	fb03 230a 	mla	r3, r3, sl, r2
90020e14:	1c42      	adds	r2, r0, #1
90020e16:	b289      	uxth	r1, r1
90020e18:	b29b      	uxth	r3, r3
90020e1a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90020e1e:	f101 0c01 	add.w	ip, r1, #1
90020e22:	1c5a      	adds	r2, r3, #1
90020e24:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90020e28:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90020e2c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90020e30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020e32:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90020e36:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020e3a:	441c      	add	r4, r3
90020e3c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90020e40:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020e42:	4310      	orrs	r0, r2
90020e44:	441e      	add	r6, r3
90020e46:	ea40 000c 	orr.w	r0, r0, ip
90020e4a:	f829 0b02 	strh.w	r0, [r9], #2
90020e4e:	e6fa      	b.n	90020c46 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90020e50:	b013      	add	sp, #76	; 0x4c
90020e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020e56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
90020e56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90020e5a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
90020e5e:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
90020e62:	fb0e 4703 	mla	r7, lr, r3, r4
90020e66:	f1be 0f00 	cmp.w	lr, #0
90020e6a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
90020e6e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
90020e72:	eb02 0847 	add.w	r8, r2, r7, lsl #1
90020e76:	8808      	ldrh	r0, [r1, #0]
90020e78:	db60      	blt.n	90020f3c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90020e7a:	45f1      	cmp	r9, lr
90020e7c:	dd5e      	ble.n	90020f3c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90020e7e:	2c00      	cmp	r4, #0
90020e80:	db5a      	blt.n	90020f38 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
90020e82:	42a3      	cmp	r3, r4
90020e84:	dd58      	ble.n	90020f38 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
90020e86:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
90020e8a:	1c62      	adds	r2, r4, #1
90020e8c:	d459      	bmi.n	90020f42 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020e8e:	4293      	cmp	r3, r2
90020e90:	dd57      	ble.n	90020f42 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020e92:	2d00      	cmp	r5, #0
90020e94:	d055      	beq.n	90020f42 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90020e96:	f8b8 7002 	ldrh.w	r7, [r8, #2]
90020e9a:	f11e 0e01 	adds.w	lr, lr, #1
90020e9e:	d454      	bmi.n	90020f4a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020ea0:	45f1      	cmp	r9, lr
90020ea2:	dd52      	ble.n	90020f4a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020ea4:	2e00      	cmp	r6, #0
90020ea6:	d050      	beq.n	90020f4a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90020ea8:	2c00      	cmp	r4, #0
90020eaa:	db4c      	blt.n	90020f46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90020eac:	42a3      	cmp	r3, r4
90020eae:	dd4a      	ble.n	90020f46 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90020eb0:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
90020eb4:	3401      	adds	r4, #1
90020eb6:	d405      	bmi.n	90020ec4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020eb8:	42a3      	cmp	r3, r4
90020eba:	dd03      	ble.n	90020ec4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020ebc:	b115      	cbz	r5, 90020ec4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
90020ebe:	3301      	adds	r3, #1
90020ec0:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
90020ec4:	fb15 f406 	smulbb	r4, r5, r6
90020ec8:	ea4f 430c 	mov.w	r3, ip, lsl #16
90020ecc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
90020ed0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020ed4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020ed8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
90020edc:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90020ee0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90020ee4:	ea43 0c0c 	orr.w	ip, r3, ip
90020ee8:	f1c6 0310 	rsb	r3, r6, #16
90020eec:	ea4e 0707 	orr.w	r7, lr, r7
90020ef0:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
90020ef4:	1b5b      	subs	r3, r3, r5
90020ef6:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
90020efa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90020efe:	437d      	muls	r5, r7
90020f00:	fb03 5c0c 	mla	ip, r3, ip, r5
90020f04:	0403      	lsls	r3, r0, #16
90020f06:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020f0a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020f0e:	4318      	orrs	r0, r3
90020f10:	0413      	lsls	r3, r2, #16
90020f12:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020f16:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020f1a:	fb04 c000 	mla	r0, r4, r0, ip
90020f1e:	4313      	orrs	r3, r2
90020f20:	fb06 0003 	mla	r0, r6, r3, r0
90020f24:	0d43      	lsrs	r3, r0, #21
90020f26:	0940      	lsrs	r0, r0, #5
90020f28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020f2c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020f30:	4318      	orrs	r0, r3
90020f32:	8008      	strh	r0, [r1, #0]
90020f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90020f38:	4684      	mov	ip, r0
90020f3a:	e7a6      	b.n	90020e8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
90020f3c:	4607      	mov	r7, r0
90020f3e:	4684      	mov	ip, r0
90020f40:	e7ab      	b.n	90020e9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
90020f42:	4607      	mov	r7, r0
90020f44:	e7a9      	b.n	90020e9a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
90020f46:	4602      	mov	r2, r0
90020f48:	e7b4      	b.n	90020eb4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
90020f4a:	4602      	mov	r2, r0
90020f4c:	e7ba      	b.n	90020ec4 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

90020f4e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020f4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020f52:	b08f      	sub	sp, #60	; 0x3c
90020f54:	461d      	mov	r5, r3
90020f56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90020f58:	9107      	str	r1, [sp, #28]
90020f5a:	920c      	str	r2, [sp, #48]	; 0x30
90020f5c:	6859      	ldr	r1, [r3, #4]
90020f5e:	681b      	ldr	r3, [r3, #0]
90020f60:	900d      	str	r0, [sp, #52]	; 0x34
90020f62:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
90020f66:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
90020f6a:	fb01 2707 	mla	r7, r1, r7, r2
90020f6e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
90020f72:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020f74:	f8d3 8000 	ldr.w	r8, [r3]
90020f78:	9b07      	ldr	r3, [sp, #28]
90020f7a:	2b00      	cmp	r3, #0
90020f7c:	dc03      	bgt.n	90020f86 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90020f7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020f80:	2b00      	cmp	r3, #0
90020f82:	f340 8182 	ble.w	9002128a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90020f86:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020f88:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020f8c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020f90:	1e48      	subs	r0, r1, #1
90020f92:	f102 3cff 	add.w	ip, r2, #4294967295
90020f96:	2d00      	cmp	r5, #0
90020f98:	f340 809b 	ble.w	900210d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
90020f9c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90020fa0:	ea4f 4326 	mov.w	r3, r6, asr #16
90020fa4:	d406      	bmi.n	90020fb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020fa6:	4586      	cmp	lr, r0
90020fa8:	da04      	bge.n	90020fb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020faa:	2b00      	cmp	r3, #0
90020fac:	db02      	blt.n	90020fb4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90020fae:	4563      	cmp	r3, ip
90020fb0:	f2c0 8090 	blt.w	900210d4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020fb4:	f11e 0e01 	adds.w	lr, lr, #1
90020fb8:	f100 8084 	bmi.w	900210c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020fbc:	4571      	cmp	r1, lr
90020fbe:	f2c0 8081 	blt.w	900210c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020fc2:	3301      	adds	r3, #1
90020fc4:	d47e      	bmi.n	900210c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020fc6:	429a      	cmp	r2, r3
90020fc8:	db7c      	blt.n	900210c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
90020fca:	46aa      	mov	sl, r5
90020fcc:	46b9      	mov	r9, r7
90020fce:	f1ba 0f00 	cmp.w	sl, #0
90020fd2:	f340 8099 	ble.w	90021108 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
90020fd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020fd8:	1421      	asrs	r1, r4, #16
90020fda:	ea4f 4026 	mov.w	r0, r6, asr #16
90020fde:	f3c4 3203 	ubfx	r2, r4, #12, #4
90020fe2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90020fe6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90020fea:	f100 80d1 	bmi.w	90021190 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90020fee:	f10e 3bff 	add.w	fp, lr, #4294967295
90020ff2:	4559      	cmp	r1, fp
90020ff4:	f280 80cc 	bge.w	90021190 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90020ff8:	2800      	cmp	r0, #0
90020ffa:	f2c0 80c9 	blt.w	90021190 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90020ffe:	f103 3bff 	add.w	fp, r3, #4294967295
90021002:	4558      	cmp	r0, fp
90021004:	f280 80c4 	bge.w	90021190 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
90021008:	fa0f fe8e 	sxth.w	lr, lr
9002100c:	fb00 110e 	mla	r1, r0, lr, r1
90021010:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90021014:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
90021018:	8841      	ldrh	r1, [r0, #2]
9002101a:	f1bc 0f00 	cmp.w	ip, #0
9002101e:	d00b      	beq.n	90021038 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
90021020:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
90021024:	3b01      	subs	r3, #1
90021026:	005b      	lsls	r3, r3, #1
90021028:	3302      	adds	r3, #2
9002102a:	eb00 0e03 	add.w	lr, r0, r3
9002102e:	5ac3      	ldrh	r3, [r0, r3]
90021030:	9308      	str	r3, [sp, #32]
90021032:	f8be 3002 	ldrh.w	r3, [lr, #2]
90021036:	9309      	str	r3, [sp, #36]	; 0x24
90021038:	ea4f 400b 	mov.w	r0, fp, lsl #16
9002103c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90021040:	fb12 f30c 	smulbb	r3, r2, ip
90021044:	f1cc 0e10 	rsb	lr, ip, #16
90021048:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002104c:	10db      	asrs	r3, r3, #3
9002104e:	ebae 0e02 	sub.w	lr, lr, r2
90021052:	ea40 000b 	orr.w	r0, r0, fp
90021056:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9002105a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002105e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90021062:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90021066:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9002106a:	ea4b 0101 	orr.w	r1, fp, r1
9002106e:	4351      	muls	r1, r2
90021070:	9a09      	ldr	r2, [sp, #36]	; 0x24
90021072:	fb0e 1e00 	mla	lr, lr, r0, r1
90021076:	0410      	lsls	r0, r2, #16
90021078:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002107c:	9908      	ldr	r1, [sp, #32]
9002107e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90021082:	4310      	orrs	r0, r2
90021084:	9a08      	ldr	r2, [sp, #32]
90021086:	0412      	lsls	r2, r2, #16
90021088:	fb03 e000 	mla	r0, r3, r0, lr
9002108c:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90021090:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90021094:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90021098:	ea42 020e 	orr.w	r2, r2, lr
9002109c:	fb03 0302 	mla	r3, r3, r2, r0
900210a0:	0d5a      	lsrs	r2, r3, #21
900210a2:	095b      	lsrs	r3, r3, #5
900210a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900210a8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900210ac:	4313      	orrs	r3, r2
900210ae:	f8a9 3000 	strh.w	r3, [r9]
900210b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900210b4:	f109 0902 	add.w	r9, r9, #2
900210b8:	f10a 3aff 	add.w	sl, sl, #4294967295
900210bc:	441c      	add	r4, r3
900210be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900210c0:	441e      	add	r6, r3
900210c2:	e784      	b.n	90020fce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900210c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900210c6:	3d01      	subs	r5, #1
900210c8:	3702      	adds	r7, #2
900210ca:	441c      	add	r4, r3
900210cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900210ce:	441e      	add	r6, r3
900210d0:	e761      	b.n	90020f96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900210d2:	d01d      	beq.n	90021110 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900210d4:	1e6b      	subs	r3, r5, #1
900210d6:	981b      	ldr	r0, [sp, #108]	; 0x6c
900210d8:	fb00 4003 	mla	r0, r0, r3, r4
900210dc:	1400      	asrs	r0, r0, #16
900210de:	f53f af74 	bmi.w	90020fca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900210e2:	3901      	subs	r1, #1
900210e4:	4288      	cmp	r0, r1
900210e6:	f6bf af70 	bge.w	90020fca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900210ea:	991c      	ldr	r1, [sp, #112]	; 0x70
900210ec:	fb01 6303 	mla	r3, r1, r3, r6
900210f0:	141b      	asrs	r3, r3, #16
900210f2:	f53f af6a 	bmi.w	90020fca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900210f6:	3a01      	subs	r2, #1
900210f8:	4293      	cmp	r3, r2
900210fa:	f6bf af66 	bge.w	90020fca <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900210fe:	46a9      	mov	r9, r5
90021100:	46ba      	mov	sl, r7
90021102:	f1b9 0f00 	cmp.w	r9, #0
90021106:	dc5b      	bgt.n	900211c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
90021108:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002110c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
90021110:	9b07      	ldr	r3, [sp, #28]
90021112:	2b00      	cmp	r3, #0
90021114:	f340 80b9 	ble.w	9002128a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90021118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002111c:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002111e:	ee30 0a04 	vadd.f32	s0, s0, s8
90021122:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021126:	eef0 6a62 	vmov.f32	s13, s5
9002112a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002112e:	ee31 1a05 	vadd.f32	s2, s2, s10
90021132:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021136:	ee16 4a90 	vmov	r4, s13
9002113a:	eef0 6a43 	vmov.f32	s13, s6
9002113e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021142:	ee16 6a90 	vmov	r6, s13
90021146:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002114a:	ee61 7a27 	vmul.f32	s15, s2, s15
9002114e:	ee77 2a62 	vsub.f32	s5, s14, s5
90021152:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021156:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002115a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002115e:	ee12 2a90 	vmov	r2, s5
90021162:	eef0 2a47 	vmov.f32	s5, s14
90021166:	fb92 f3f3 	sdiv	r3, r2, r3
9002116a:	ee13 2a10 	vmov	r2, s6
9002116e:	931b      	str	r3, [sp, #108]	; 0x6c
90021170:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021172:	eeb0 3a67 	vmov.f32	s6, s15
90021176:	fb92 f3f3 	sdiv	r3, r2, r3
9002117a:	931c      	str	r3, [sp, #112]	; 0x70
9002117c:	9b07      	ldr	r3, [sp, #28]
9002117e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90021180:	3b01      	subs	r3, #1
90021182:	9307      	str	r3, [sp, #28]
90021184:	bf08      	it	eq
90021186:	4615      	moveq	r5, r2
90021188:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002118a:	bf18      	it	ne
9002118c:	461d      	movne	r5, r3
9002118e:	e6f3      	b.n	90020f78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90021190:	f111 0b01 	adds.w	fp, r1, #1
90021194:	d48d      	bmi.n	900210b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90021196:	45de      	cmp	lr, fp
90021198:	db8b      	blt.n	900210b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9002119a:	f110 0b01 	adds.w	fp, r0, #1
9002119e:	d488      	bmi.n	900210b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900211a0:	455b      	cmp	r3, fp
900211a2:	db86      	blt.n	900210b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900211a4:	b21b      	sxth	r3, r3
900211a6:	e9cd 1001 	strd	r1, r0, [sp, #4]
900211aa:	e9cd 2c03 	strd	r2, ip, [sp, #12]
900211ae:	9300      	str	r3, [sp, #0]
900211b0:	4642      	mov	r2, r8
900211b2:	fa0f f38e 	sxth.w	r3, lr
900211b6:	4649      	mov	r1, r9
900211b8:	980d      	ldr	r0, [sp, #52]	; 0x34
900211ba:	f7ff fe4c 	bl	90020e56 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
900211be:	e778      	b.n	900210b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
900211c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900211c2:	1420      	asrs	r0, r4, #16
900211c4:	1431      	asrs	r1, r6, #16
900211c6:	f3c6 3e03 	ubfx	lr, r6, #12, #4
900211ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
900211ce:	f3c4 3203 	ubfx	r2, r4, #12, #4
900211d2:	fb03 0101 	mla	r1, r3, r1, r0
900211d6:	eb08 0041 	add.w	r0, r8, r1, lsl #1
900211da:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
900211de:	8841      	ldrh	r1, [r0, #2]
900211e0:	f1be 0f00 	cmp.w	lr, #0
900211e4:	d00b      	beq.n	900211fe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
900211e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
900211ea:	3b01      	subs	r3, #1
900211ec:	005b      	lsls	r3, r3, #1
900211ee:	3302      	adds	r3, #2
900211f0:	eb00 0b03 	add.w	fp, r0, r3
900211f4:	5ac3      	ldrh	r3, [r0, r3]
900211f6:	930a      	str	r3, [sp, #40]	; 0x28
900211f8:	f8bb 3002 	ldrh.w	r3, [fp, #2]
900211fc:	930b      	str	r3, [sp, #44]	; 0x2c
900211fe:	ea4f 400c 	mov.w	r0, ip, lsl #16
90021202:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90021206:	fb12 f30e 	smulbb	r3, r2, lr
9002120a:	ea4f 4b01 	mov.w	fp, r1, lsl #16
9002120e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90021212:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90021216:	10db      	asrs	r3, r3, #3
90021218:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002121c:	ea40 000c 	orr.w	r0, r0, ip
90021220:	f1ce 0c10 	rsb	ip, lr, #16
90021224:	ea4b 0101 	orr.w	r1, fp, r1
90021228:	f109 39ff 	add.w	r9, r9, #4294967295
9002122c:	ebac 0c02 	sub.w	ip, ip, r2
90021230:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90021234:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90021238:	4351      	muls	r1, r2
9002123a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9002123c:	fb0c 1c00 	mla	ip, ip, r0, r1
90021240:	990a      	ldr	r1, [sp, #40]	; 0x28
90021242:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90021246:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
9002124a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9002124c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90021250:	0412      	lsls	r2, r2, #16
90021252:	ea4b 0000 	orr.w	r0, fp, r0
90021256:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
9002125a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002125e:	fb03 c000 	mla	r0, r3, r0, ip
90021262:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90021266:	ea42 0b0b 	orr.w	fp, r2, fp
9002126a:	fb03 000b 	mla	r0, r3, fp, r0
9002126e:	0d43      	lsrs	r3, r0, #21
90021270:	0940      	lsrs	r0, r0, #5
90021272:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021276:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002127a:	4318      	orrs	r0, r3
9002127c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002127e:	441c      	add	r4, r3
90021280:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90021282:	f82a 0b02 	strh.w	r0, [sl], #2
90021286:	441e      	add	r6, r3
90021288:	e73b      	b.n	90021102 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
9002128a:	b00f      	add	sp, #60	; 0x3c
9002128c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021290 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90021290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021294:	b085      	sub	sp, #20
90021296:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9002129a:	9102      	str	r1, [sp, #8]
9002129c:	2c00      	cmp	r4, #0
9002129e:	fb04 7103 	mla	r1, r4, r3, r7
900212a2:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
900212a6:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
900212aa:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
900212ae:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
900212b2:	f2c0 811b 	blt.w	900214ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
900212b6:	45a6      	cmp	lr, r4
900212b8:	f340 8118 	ble.w	900214ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
900212bc:	2f00      	cmp	r7, #0
900212be:	f2c0 8113 	blt.w	900214e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
900212c2:	42bb      	cmp	r3, r7
900212c4:	f340 8110 	ble.w	900214e8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
900212c8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
900212cc:	1c7a      	adds	r2, r7, #1
900212ce:	f100 8110 	bmi.w	900214f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
900212d2:	4293      	cmp	r3, r2
900212d4:	f340 810d 	ble.w	900214f2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
900212d8:	2e00      	cmp	r6, #0
900212da:	f000 810c 	beq.w	900214f6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
900212de:	f8dc 1004 	ldr.w	r1, [ip, #4]
900212e2:	3401      	adds	r4, #1
900212e4:	f100 810b 	bmi.w	900214fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
900212e8:	45a6      	cmp	lr, r4
900212ea:	f340 8108 	ble.w	900214fe <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
900212ee:	2800      	cmp	r0, #0
900212f0:	f000 8108 	beq.w	90021504 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
900212f4:	2f00      	cmp	r7, #0
900212f6:	f2c0 8100 	blt.w	900214fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
900212fa:	42bb      	cmp	r3, r7
900212fc:	f340 80fd 	ble.w	900214fa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90021300:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90021304:	3701      	adds	r7, #1
90021306:	f100 8100 	bmi.w	9002150a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
9002130a:	42bb      	cmp	r3, r7
9002130c:	f340 80fd 	ble.w	9002150a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90021310:	2e00      	cmp	r6, #0
90021312:	f000 80fc 	beq.w	9002150e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
90021316:	3301      	adds	r3, #1
90021318:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
9002131c:	b2b6      	uxth	r6, r6
9002131e:	b280      	uxth	r0, r0
90021320:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90021324:	fb00 fe06 	mul.w	lr, r0, r6
90021328:	0136      	lsls	r6, r6, #4
9002132a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
9002132e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90021332:	eba6 070e 	sub.w	r7, r6, lr
90021336:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
9002133a:	ea4f 6914 	mov.w	r9, r4, lsr #24
9002133e:	b280      	uxth	r0, r0
90021340:	b2bf      	uxth	r7, r7
90021342:	1a1b      	subs	r3, r3, r0
90021344:	ea4f 6812 	mov.w	r8, r2, lsr #24
90021348:	fb0a f607 	mul.w	r6, sl, r7
9002134c:	b29b      	uxth	r3, r3
9002134e:	fb0b 6603 	mla	r6, fp, r3, r6
90021352:	fb00 6609 	mla	r6, r0, r9, r6
90021356:	fb0e 6608 	mla	r6, lr, r8, r6
9002135a:	f3c6 2607 	ubfx	r6, r6, #8, #8
9002135e:	9600      	str	r6, [sp, #0]
90021360:	2e00      	cmp	r6, #0
90021362:	f000 80be 	beq.w	900214e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90021366:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002136a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9002136e:	9e02      	ldr	r6, [sp, #8]
90021370:	fb0b fc0c 	mul.w	ip, fp, ip
90021374:	fb0b f505 	mul.w	r5, fp, r5
90021378:	8836      	ldrh	r6, [r6, #0]
9002137a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9002137e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021382:	9501      	str	r5, [sp, #4]
90021384:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90021388:	44dc      	add	ip, fp
9002138a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002138e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90021392:	9503      	str	r5, [sp, #12]
90021394:	9d01      	ldr	r5, [sp, #4]
90021396:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002139a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9002139e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
900213a2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900213a6:	fb0a fc0c 	mul.w	ip, sl, ip
900213aa:	ea4f 2b15 	mov.w	fp, r5, lsr #8
900213ae:	fb0a fa01 	mul.w	sl, sl, r1
900213b2:	ea4f 251c 	mov.w	r5, ip, lsr #8
900213b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900213ba:	f50a 7180 	add.w	r1, sl, #256	; 0x100
900213be:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900213c2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
900213c6:	4465      	add	r5, ip
900213c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
900213cc:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
900213d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900213d4:	fb09 fc0c 	mul.w	ip, r9, ip
900213d8:	0a2d      	lsrs	r5, r5, #8
900213da:	fb09 f904 	mul.w	r9, r9, r4
900213de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900213e2:	ea4f 211c 	mov.w	r1, ip, lsr #8
900213e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900213ea:	f509 7480 	add.w	r4, r9, #256	; 0x100
900213ee:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
900213f2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900213f6:	437d      	muls	r5, r7
900213f8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
900213fc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90021400:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021404:	4461      	add	r1, ip
90021406:	fb08 f404 	mul.w	r4, r8, r4
9002140a:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002140e:	fb08 f802 	mul.w	r8, r8, r2
90021412:	0a09      	lsrs	r1, r1, #8
90021414:	0a22      	lsrs	r2, r4, #8
90021416:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
9002141a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
9002141e:	fb07 f70a 	mul.w	r7, r7, sl
90021422:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021426:	4414      	add	r4, r2
90021428:	f508 7280 	add.w	r2, r8, #256	; 0x100
9002142c:	0a24      	lsrs	r4, r4, #8
9002142e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90021432:	9a03      	ldr	r2, [sp, #12]
90021434:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90021438:	fb02 5503 	mla	r5, r2, r3, r5
9002143c:	ea4f 2818 	mov.w	r8, r8, lsr #8
90021440:	9a00      	ldr	r2, [sp, #0]
90021442:	fb04 540e 	mla	r4, r4, lr, r5
90021446:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
9002144a:	1235      	asrs	r5, r6, #8
9002144c:	fb01 4100 	mla	r1, r1, r0, r4
90021450:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90021454:	0a09      	lsrs	r1, r1, #8
90021456:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
9002145a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
9002145e:	fb03 7101 	mla	r1, r3, r1, r7
90021462:	fb0e 1e08 	mla	lr, lr, r8, r1
90021466:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
9002146a:	fb00 e101 	mla	r1, r0, r1, lr
9002146e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90021472:	b287      	uxth	r7, r0
90021474:	0a09      	lsrs	r1, r1, #8
90021476:	437a      	muls	r2, r7
90021478:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
9002147c:	1c53      	adds	r3, r2, #1
9002147e:	4321      	orrs	r1, r4
90021480:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021484:	0c0a      	lsrs	r2, r1, #16
90021486:	f3c1 2407 	ubfx	r4, r1, #8, #8
9002148a:	ea6f 2313 	mvn.w	r3, r3, lsr #8
9002148e:	b2c8      	uxtb	r0, r1
90021490:	fb12 f207 	smulbb	r2, r2, r7
90021494:	fb14 f407 	smulbb	r4, r4, r7
90021498:	b2db      	uxtb	r3, r3
9002149a:	fb10 f007 	smulbb	r0, r0, r7
9002149e:	fb05 2503 	mla	r5, r5, r3, r2
900214a2:	10f2      	asrs	r2, r6, #3
900214a4:	00f6      	lsls	r6, r6, #3
900214a6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900214aa:	b2ad      	uxth	r5, r5
900214ac:	b2f6      	uxtb	r6, r6
900214ae:	fb02 4203 	mla	r2, r2, r3, r4
900214b2:	fb06 0303 	mla	r3, r6, r3, r0
900214b6:	b294      	uxth	r4, r2
900214b8:	b299      	uxth	r1, r3
900214ba:	1c6b      	adds	r3, r5, #1
900214bc:	1c62      	adds	r2, r4, #1
900214be:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900214c2:	1c4b      	adds	r3, r1, #1
900214c4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
900214c8:	eb03 2311 	add.w	r3, r3, r1, lsr #8
900214cc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900214d0:	0952      	lsrs	r2, r2, #5
900214d2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900214d6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900214da:	432b      	orrs	r3, r5
900214dc:	4313      	orrs	r3, r2
900214de:	9a02      	ldr	r2, [sp, #8]
900214e0:	8013      	strh	r3, [r2, #0]
900214e2:	b005      	add	sp, #20
900214e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900214e8:	2500      	movs	r5, #0
900214ea:	e6ef      	b.n	900212cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
900214ec:	2100      	movs	r1, #0
900214ee:	460d      	mov	r5, r1
900214f0:	e6f7      	b.n	900212e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
900214f2:	2100      	movs	r1, #0
900214f4:	e6f5      	b.n	900212e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
900214f6:	4631      	mov	r1, r6
900214f8:	e6f3      	b.n	900212e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
900214fa:	2400      	movs	r4, #0
900214fc:	e702      	b.n	90021304 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
900214fe:	2200      	movs	r2, #0
90021500:	4614      	mov	r4, r2
90021502:	e70b      	b.n	9002131c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90021504:	4602      	mov	r2, r0
90021506:	4604      	mov	r4, r0
90021508:	e708      	b.n	9002131c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9002150a:	2200      	movs	r2, #0
9002150c:	e706      	b.n	9002131c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
9002150e:	4632      	mov	r2, r6
90021510:	e704      	b.n	9002131c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90021512 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021516:	b09d      	sub	sp, #116	; 0x74
90021518:	9219      	str	r2, [sp, #100]	; 0x64
9002151a:	9307      	str	r3, [sp, #28]
9002151c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
9002151e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90021522:	901b      	str	r0, [sp, #108]	; 0x6c
90021524:	931a      	str	r3, [sp, #104]	; 0x68
90021526:	6850      	ldr	r0, [r2, #4]
90021528:	9117      	str	r1, [sp, #92]	; 0x5c
9002152a:	6812      	ldr	r2, [r2, #0]
9002152c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90021530:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
90021534:	fb00 1303 	mla	r3, r0, r3, r1
90021538:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002153c:	930a      	str	r3, [sp, #40]	; 0x28
9002153e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90021540:	681b      	ldr	r3, [r3, #0]
90021542:	9310      	str	r3, [sp, #64]	; 0x40
90021544:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90021548:	930b      	str	r3, [sp, #44]	; 0x2c
9002154a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002154c:	2b00      	cmp	r3, #0
9002154e:	dc03      	bgt.n	90021558 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90021550:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021552:	2b00      	cmp	r3, #0
90021554:	f340 8375 	ble.w	90021c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90021558:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9002155a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002155e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021562:	1e48      	subs	r0, r1, #1
90021564:	1e57      	subs	r7, r2, #1
90021566:	9b07      	ldr	r3, [sp, #28]
90021568:	2b00      	cmp	r3, #0
9002156a:	f340 818e 	ble.w	9002188a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
9002156e:	ea5f 4c24 	movs.w	ip, r4, asr #16
90021572:	ea4f 4326 	mov.w	r3, r6, asr #16
90021576:	d406      	bmi.n	90021586 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90021578:	4584      	cmp	ip, r0
9002157a:	da04      	bge.n	90021586 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9002157c:	2b00      	cmp	r3, #0
9002157e:	db02      	blt.n	90021586 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90021580:	42bb      	cmp	r3, r7
90021582:	f2c0 8183 	blt.w	9002188c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90021586:	f11c 0c01 	adds.w	ip, ip, #1
9002158a:	f100 8173 	bmi.w	90021874 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9002158e:	4561      	cmp	r1, ip
90021590:	f2c0 8170 	blt.w	90021874 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90021594:	3301      	adds	r3, #1
90021596:	f100 816d 	bmi.w	90021874 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
9002159a:	429a      	cmp	r2, r3
9002159c:	f2c0 816a 	blt.w	90021874 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
900215a0:	9b07      	ldr	r3, [sp, #28]
900215a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
900215a4:	9318      	str	r3, [sp, #96]	; 0x60
900215a6:	9b18      	ldr	r3, [sp, #96]	; 0x60
900215a8:	2b00      	cmp	r3, #0
900215aa:	f340 818c 	ble.w	900218c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
900215ae:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
900215b0:	ea4f 4c26 	mov.w	ip, r6, asr #16
900215b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900215b6:	f3c4 3003 	ubfx	r0, r4, #12, #4
900215ba:	f8d2 e00c 	ldr.w	lr, [r2, #12]
900215be:	1422      	asrs	r2, r4, #16
900215c0:	f3c6 3103 	ubfx	r1, r6, #12, #4
900215c4:	689b      	ldr	r3, [r3, #8]
900215c6:	f100 81cd 	bmi.w	90021964 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900215ca:	f103 38ff 	add.w	r8, r3, #4294967295
900215ce:	4542      	cmp	r2, r8
900215d0:	f280 81c8 	bge.w	90021964 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900215d4:	f1bc 0f00 	cmp.w	ip, #0
900215d8:	f2c0 81c4 	blt.w	90021964 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900215dc:	f10e 38ff 	add.w	r8, lr, #4294967295
900215e0:	45c4      	cmp	ip, r8
900215e2:	f280 81bf 	bge.w	90021964 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
900215e6:	b21b      	sxth	r3, r3
900215e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
900215ea:	fb0c 2203 	mla	r2, ip, r3, r2
900215ee:	eb05 0882 	add.w	r8, r5, r2, lsl #2
900215f2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
900215f6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
900215fa:	2800      	cmp	r0, #0
900215fc:	f000 81a9 	beq.w	90021952 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90021600:	f8d8 5004 	ldr.w	r5, [r8, #4]
90021604:	950c      	str	r5, [sp, #48]	; 0x30
90021606:	0e2d      	lsrs	r5, r5, #24
90021608:	9513      	str	r5, [sp, #76]	; 0x4c
9002160a:	b181      	cbz	r1, 9002162e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9002160c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90021610:	3b01      	subs	r3, #1
90021612:	009b      	lsls	r3, r3, #2
90021614:	3304      	adds	r3, #4
90021616:	eb08 0c03 	add.w	ip, r8, r3
9002161a:	f858 3003 	ldr.w	r3, [r8, r3]
9002161e:	9308      	str	r3, [sp, #32]
90021620:	0e1b      	lsrs	r3, r3, #24
90021622:	9311      	str	r3, [sp, #68]	; 0x44
90021624:	f8dc 3004 	ldr.w	r3, [ip, #4]
90021628:	930d      	str	r3, [sp, #52]	; 0x34
9002162a:	0e1b      	lsrs	r3, r3, #24
9002162c:	9314      	str	r3, [sp, #80]	; 0x50
9002162e:	b280      	uxth	r0, r0
90021630:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021632:	b289      	uxth	r1, r1
90021634:	fb00 f901 	mul.w	r9, r0, r1
90021638:	0100      	lsls	r0, r0, #4
9002163a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9002163e:	eba0 0809 	sub.w	r8, r0, r9
90021642:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90021646:	9813      	ldr	r0, [sp, #76]	; 0x4c
90021648:	b289      	uxth	r1, r1
9002164a:	fa1f f888 	uxth.w	r8, r8
9002164e:	1a5b      	subs	r3, r3, r1
90021650:	fb08 f000 	mul.w	r0, r8, r0
90021654:	b29b      	uxth	r3, r3
90021656:	fb03 000e 	mla	r0, r3, lr, r0
9002165a:	fb01 0005 	mla	r0, r1, r5, r0
9002165e:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021660:	fb09 0005 	mla	r0, r9, r5, r0
90021664:	f3c0 2007 	ubfx	r0, r0, #8, #8
90021668:	2800      	cmp	r0, #0
9002166a:	f000 80fa 	beq.w	90021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002166e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90021672:	d01b      	beq.n	900216ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90021674:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90021678:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002167c:	fb0e fa0a 	mul.w	sl, lr, sl
90021680:	fb0e fe02 	mul.w	lr, lr, r2
90021684:	ea4f 221a 	mov.w	r2, sl, lsr #8
90021688:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002168c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90021690:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021694:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90021698:	4452      	add	r2, sl
9002169a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002169e:	0a12      	lsrs	r2, r2, #8
900216a0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
900216a4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900216a8:	ea42 020c 	orr.w	r2, r2, ip
900216ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900216ae:	2dff      	cmp	r5, #255	; 0xff
900216b0:	d021      	beq.n	900216f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
900216b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900216b4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900216b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900216ba:	fb05 fb0b 	mul.w	fp, r5, fp
900216be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900216c0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900216c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900216c6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900216ca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900216ce:	fb05 fa0a 	mul.w	sl, r5, sl
900216d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900216d6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900216da:	44de      	add	lr, fp
900216dc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900216e0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900216e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900216e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900216ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900216f0:	ea4e 050a 	orr.w	r5, lr, sl
900216f4:	950c      	str	r5, [sp, #48]	; 0x30
900216f6:	9d11      	ldr	r5, [sp, #68]	; 0x44
900216f8:	2dff      	cmp	r5, #255	; 0xff
900216fa:	d021      	beq.n	90021740 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
900216fc:	9d08      	ldr	r5, [sp, #32]
900216fe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90021702:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021704:	fb05 fb0b 	mul.w	fp, r5, fp
90021708:	9d08      	ldr	r5, [sp, #32]
9002170a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002170e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90021710:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021714:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021718:	fb05 fa0a 	mul.w	sl, r5, sl
9002171c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021720:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021724:	44de      	add	lr, fp
90021726:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002172a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002172e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021732:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021736:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002173a:	ea4e 050a 	orr.w	r5, lr, sl
9002173e:	9508      	str	r5, [sp, #32]
90021740:	9d14      	ldr	r5, [sp, #80]	; 0x50
90021742:	2dff      	cmp	r5, #255	; 0xff
90021744:	d021      	beq.n	9002178a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
90021746:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021748:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002174c:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002174e:	fb05 fb0b 	mul.w	fp, r5, fp
90021752:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90021754:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021758:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002175a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002175e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021762:	fb05 fa0a 	mul.w	sl, r5, sl
90021766:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002176a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002176e:	44de      	add	lr, fp
90021770:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021774:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021778:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002177c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021780:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021784:	ea4e 050a 	orr.w	r5, lr, sl
90021788:	950d      	str	r5, [sp, #52]	; 0x34
9002178a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002178c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90021790:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021794:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021798:	9d08      	ldr	r5, [sp, #32]
9002179a:	fb08 fc0c 	mul.w	ip, r8, ip
9002179e:	fb03 cc0e 	mla	ip, r3, lr, ip
900217a2:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900217a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900217a8:	fb01 cc0e 	mla	ip, r1, lr, ip
900217ac:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
900217b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900217b2:	fb09 cc0e 	mla	ip, r9, lr, ip
900217b6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
900217ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900217bc:	fb08 f80e 	mul.w	r8, r8, lr
900217c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900217c4:	fb03 8202 	mla	r2, r3, r2, r8
900217c8:	9b08      	ldr	r3, [sp, #32]
900217ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900217ce:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
900217d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900217d4:	fb01 220a 	mla	r2, r1, sl, r2
900217d8:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
900217dc:	883b      	ldrh	r3, [r7, #0]
900217de:	fb09 2901 	mla	r9, r9, r1, r2
900217e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900217e4:	1219      	asrs	r1, r3, #8
900217e6:	4342      	muls	r2, r0
900217e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
900217ec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900217f0:	1c50      	adds	r0, r2, #1
900217f2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
900217f6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
900217fa:	ea4c 0c09 	orr.w	ip, ip, r9
900217fe:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90021802:	ea4f 421c 	mov.w	r2, ip, lsr #16
90021806:	f3cc 2e07 	ubfx	lr, ip, #8, #8
9002180a:	fa5f fc8c 	uxtb.w	ip, ip
9002180e:	fb12 f205 	smulbb	r2, r2, r5
90021812:	b2c0      	uxtb	r0, r0
90021814:	fb1c fc05 	smulbb	ip, ip, r5
90021818:	fb01 2100 	mla	r1, r1, r0, r2
9002181c:	10da      	asrs	r2, r3, #3
9002181e:	fb1e fe05 	smulbb	lr, lr, r5
90021822:	00db      	lsls	r3, r3, #3
90021824:	b289      	uxth	r1, r1
90021826:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9002182a:	b2db      	uxtb	r3, r3
9002182c:	fb02 e200 	mla	r2, r2, r0, lr
90021830:	fb03 c300 	mla	r3, r3, r0, ip
90021834:	b292      	uxth	r2, r2
90021836:	fa1f fc83 	uxth.w	ip, r3
9002183a:	1c4b      	adds	r3, r1, #1
9002183c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021840:	f10c 0301 	add.w	r3, ip, #1
90021844:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90021848:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9002184c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021850:	430b      	orrs	r3, r1
90021852:	1c51      	adds	r1, r2, #1
90021854:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021858:	0952      	lsrs	r2, r2, #5
9002185a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002185e:	4313      	orrs	r3, r2
90021860:	803b      	strh	r3, [r7, #0]
90021862:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021864:	3702      	adds	r7, #2
90021866:	441c      	add	r4, r3
90021868:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002186a:	441e      	add	r6, r3
9002186c:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002186e:	3b01      	subs	r3, #1
90021870:	9318      	str	r3, [sp, #96]	; 0x60
90021872:	e698      	b.n	900215a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90021874:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021876:	441c      	add	r4, r3
90021878:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9002187a:	441e      	add	r6, r3
9002187c:	9b07      	ldr	r3, [sp, #28]
9002187e:	3b01      	subs	r3, #1
90021880:	9307      	str	r3, [sp, #28]
90021882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021884:	3302      	adds	r3, #2
90021886:	930a      	str	r3, [sp, #40]	; 0x28
90021888:	e66d      	b.n	90021566 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9002188a:	d023      	beq.n	900218d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
9002188c:	9b07      	ldr	r3, [sp, #28]
9002188e:	9829      	ldr	r0, [sp, #164]	; 0xa4
90021890:	3b01      	subs	r3, #1
90021892:	fb00 4003 	mla	r0, r0, r3, r4
90021896:	1400      	asrs	r0, r0, #16
90021898:	f53f ae82 	bmi.w	900215a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002189c:	3901      	subs	r1, #1
9002189e:	4288      	cmp	r0, r1
900218a0:	f6bf ae7e 	bge.w	900215a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900218a4:	992a      	ldr	r1, [sp, #168]	; 0xa8
900218a6:	fb01 6303 	mla	r3, r1, r3, r6
900218aa:	141b      	asrs	r3, r3, #16
900218ac:	f53f ae78 	bmi.w	900215a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900218b0:	3a01      	subs	r2, #1
900218b2:	4293      	cmp	r3, r2
900218b4:	f6bf ae74 	bge.w	900215a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900218b8:	f8dd b01c 	ldr.w	fp, [sp, #28]
900218bc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
900218c0:	f1bb 0f00 	cmp.w	fp, #0
900218c4:	dc6c      	bgt.n	900219a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900218c6:	9b07      	ldr	r3, [sp, #28]
900218c8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900218cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900218ce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900218d2:	930a      	str	r3, [sp, #40]	; 0x28
900218d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900218d6:	2b00      	cmp	r3, #0
900218d8:	f340 81b3 	ble.w	90021c42 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
900218dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900218e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
900218e2:	ee30 0a04 	vadd.f32	s0, s0, s8
900218e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
900218ea:	eef0 6a62 	vmov.f32	s13, s5
900218ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
900218f2:	ee31 1a05 	vadd.f32	s2, s2, s10
900218f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900218fa:	ee16 4a90 	vmov	r4, s13
900218fe:	eef0 6a43 	vmov.f32	s13, s6
90021902:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021906:	ee16 6a90 	vmov	r6, s13
9002190a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002190e:	ee61 7a27 	vmul.f32	s15, s2, s15
90021912:	ee77 2a62 	vsub.f32	s5, s14, s5
90021916:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002191a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002191e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021922:	ee12 2a90 	vmov	r2, s5
90021926:	eef0 2a47 	vmov.f32	s5, s14
9002192a:	fb92 f3f3 	sdiv	r3, r2, r3
9002192e:	ee13 2a10 	vmov	r2, s6
90021932:	9329      	str	r3, [sp, #164]	; 0xa4
90021934:	9b26      	ldr	r3, [sp, #152]	; 0x98
90021936:	eeb0 3a67 	vmov.f32	s6, s15
9002193a:	fb92 f3f3 	sdiv	r3, r2, r3
9002193e:	932a      	str	r3, [sp, #168]	; 0xa8
90021940:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90021942:	9a19      	ldr	r2, [sp, #100]	; 0x64
90021944:	3b01      	subs	r3, #1
90021946:	9317      	str	r3, [sp, #92]	; 0x5c
90021948:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002194a:	bf08      	it	eq
9002194c:	4613      	moveq	r3, r2
9002194e:	9307      	str	r3, [sp, #28]
90021950:	e5fb      	b.n	9002154a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90021952:	2900      	cmp	r1, #0
90021954:	f43f ae6b 	beq.w	9002162e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90021958:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
9002195c:	9308      	str	r3, [sp, #32]
9002195e:	0e1b      	lsrs	r3, r3, #24
90021960:	9311      	str	r3, [sp, #68]	; 0x44
90021962:	e664      	b.n	9002162e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90021964:	f112 0801 	adds.w	r8, r2, #1
90021968:	f53f af7b 	bmi.w	90021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002196c:	4543      	cmp	r3, r8
9002196e:	f6ff af78 	blt.w	90021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021972:	f11c 0801 	adds.w	r8, ip, #1
90021976:	f53f af74 	bmi.w	90021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002197a:	45c6      	cmp	lr, r8
9002197c:	f6ff af71 	blt.w	90021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90021980:	9d1a      	ldr	r5, [sp, #104]	; 0x68
90021982:	b21b      	sxth	r3, r3
90021984:	9201      	str	r2, [sp, #4]
90021986:	fa0f f28e 	sxth.w	r2, lr
9002198a:	e9cd 1504 	strd	r1, r5, [sp, #16]
9002198e:	e9cd c002 	strd	ip, r0, [sp, #8]
90021992:	9200      	str	r2, [sp, #0]
90021994:	4639      	mov	r1, r7
90021996:	9a10      	ldr	r2, [sp, #64]	; 0x40
90021998:	981b      	ldr	r0, [sp, #108]	; 0x6c
9002199a:	f7ff fc79 	bl	90021290 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
9002199e:	e760      	b.n	90021862 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
900219a0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
900219a2:	1427      	asrs	r7, r4, #16
900219a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
900219a6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900219aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900219ae:	1433      	asrs	r3, r6, #16
900219b0:	f3c6 3003 	ubfx	r0, r6, #12, #4
900219b4:	fb01 7303 	mla	r3, r1, r3, r7
900219b8:	eb05 0783 	add.w	r7, r5, r3, lsl #2
900219bc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
900219c0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
900219c4:	2a00      	cmp	r2, #0
900219c6:	f000 8133 	beq.w	90021c30 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
900219ca:	687d      	ldr	r5, [r7, #4]
900219cc:	950e      	str	r5, [sp, #56]	; 0x38
900219ce:	0e2d      	lsrs	r5, r5, #24
900219d0:	9515      	str	r5, [sp, #84]	; 0x54
900219d2:	b178      	cbz	r0, 900219f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900219d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
900219d8:	3901      	subs	r1, #1
900219da:	0089      	lsls	r1, r1, #2
900219dc:	3104      	adds	r1, #4
900219de:	eb07 0e01 	add.w	lr, r7, r1
900219e2:	5879      	ldr	r1, [r7, r1]
900219e4:	9109      	str	r1, [sp, #36]	; 0x24
900219e6:	0e09      	lsrs	r1, r1, #24
900219e8:	9112      	str	r1, [sp, #72]	; 0x48
900219ea:	f8de 1004 	ldr.w	r1, [lr, #4]
900219ee:	910f      	str	r1, [sp, #60]	; 0x3c
900219f0:	0e09      	lsrs	r1, r1, #24
900219f2:	9116      	str	r1, [sp, #88]	; 0x58
900219f4:	b292      	uxth	r2, r2
900219f6:	9915      	ldr	r1, [sp, #84]	; 0x54
900219f8:	b280      	uxth	r0, r0
900219fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
900219fc:	fb02 f800 	mul.w	r8, r2, r0
90021a00:	0112      	lsls	r2, r2, #4
90021a02:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90021a06:	eba2 0e08 	sub.w	lr, r2, r8
90021a0a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021a0e:	b280      	uxth	r0, r0
90021a10:	fa1f fe8e 	uxth.w	lr, lr
90021a14:	1a12      	subs	r2, r2, r0
90021a16:	fb0e f101 	mul.w	r1, lr, r1
90021a1a:	b292      	uxth	r2, r2
90021a1c:	fb02 110c 	mla	r1, r2, ip, r1
90021a20:	fb00 1105 	mla	r1, r0, r5, r1
90021a24:	9d16      	ldr	r5, [sp, #88]	; 0x58
90021a26:	fb08 1105 	mla	r1, r8, r5, r1
90021a2a:	f3c1 2107 	ubfx	r1, r1, #8, #8
90021a2e:	2900      	cmp	r1, #0
90021a30:	f000 80f5 	beq.w	90021c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
90021a34:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021a38:	d019      	beq.n	90021a6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
90021a3a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021a3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021a42:	fb0c fa0a 	mul.w	sl, ip, sl
90021a46:	fb0c fc03 	mul.w	ip, ip, r3
90021a4a:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021a4e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021a52:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90021a56:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021a5a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90021a5e:	4453      	add	r3, sl
90021a60:	0a3f      	lsrs	r7, r7, #8
90021a62:	0a1b      	lsrs	r3, r3, #8
90021a64:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90021a68:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021a6c:	433b      	orrs	r3, r7
90021a6e:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021a70:	2dff      	cmp	r5, #255	; 0xff
90021a72:	d020      	beq.n	90021ab6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
90021a74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021a76:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021a7a:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021a7c:	436f      	muls	r7, r5
90021a7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021a80:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021a84:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021a88:	9d15      	ldr	r5, [sp, #84]	; 0x54
90021a8a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021a8e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021a92:	fb05 fa0a 	mul.w	sl, r5, sl
90021a96:	44bc      	add	ip, r7
90021a98:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021a9c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021aa0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021aa4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021aa8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021aac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021ab0:	ea4c 050a 	orr.w	r5, ip, sl
90021ab4:	950e      	str	r5, [sp, #56]	; 0x38
90021ab6:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021ab8:	2dff      	cmp	r5, #255	; 0xff
90021aba:	d020      	beq.n	90021afe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
90021abc:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021abe:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021ac2:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021ac4:	436f      	muls	r7, r5
90021ac6:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021ac8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021acc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021ad0:	9d12      	ldr	r5, [sp, #72]	; 0x48
90021ad2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021ad6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021ada:	fb05 fa0a 	mul.w	sl, r5, sl
90021ade:	44bc      	add	ip, r7
90021ae0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021ae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021ae8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021aec:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021af0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021af4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021af8:	ea4c 050a 	orr.w	r5, ip, sl
90021afc:	9509      	str	r5, [sp, #36]	; 0x24
90021afe:	9d16      	ldr	r5, [sp, #88]	; 0x58
90021b00:	2dff      	cmp	r5, #255	; 0xff
90021b02:	d020      	beq.n	90021b46 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
90021b04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021b06:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021b0a:	9d16      	ldr	r5, [sp, #88]	; 0x58
90021b0c:	436f      	muls	r7, r5
90021b0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021b10:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90021b14:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90021b18:	9d16      	ldr	r5, [sp, #88]	; 0x58
90021b1a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90021b1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021b22:	fb05 fa0a 	mul.w	sl, r5, sl
90021b26:	44bc      	add	ip, r7
90021b28:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90021b2c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021b30:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90021b34:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021b38:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021b3c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021b40:	ea4c 050a 	orr.w	r5, ip, sl
90021b44:	950f      	str	r5, [sp, #60]	; 0x3c
90021b46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021b48:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90021b4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021b50:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90021b54:	9d09      	ldr	r5, [sp, #36]	; 0x24
90021b56:	fb0e f707 	mul.w	r7, lr, r7
90021b5a:	fb02 770c 	mla	r7, r2, ip, r7
90021b5e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021b62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021b64:	fb00 770c 	mla	r7, r0, ip, r7
90021b68:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021b6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90021b6e:	fb08 770c 	mla	r7, r8, ip, r7
90021b72:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90021b76:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90021b78:	fb0e fe0c 	mul.w	lr, lr, ip
90021b7c:	0a3f      	lsrs	r7, r7, #8
90021b7e:	fb02 e303 	mla	r3, r2, r3, lr
90021b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
90021b84:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90021b88:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90021b8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021b8e:	fb00 330a 	mla	r3, r0, sl, r3
90021b92:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
90021b96:	f8b9 0000 	ldrh.w	r0, [r9]
90021b9a:	fb08 3c0c 	mla	ip, r8, ip, r3
90021b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90021ba0:	1202      	asrs	r2, r0, #8
90021ba2:	4359      	muls	r1, r3
90021ba4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021ba8:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90021bac:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021bb0:	1c4b      	adds	r3, r1, #1
90021bb2:	ea47 070c 	orr.w	r7, r7, ip
90021bb6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021bba:	0c3b      	lsrs	r3, r7, #16
90021bbc:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90021bc0:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90021bc4:	b2ff      	uxtb	r7, r7
90021bc6:	fb13 f305 	smulbb	r3, r3, r5
90021bca:	b2c9      	uxtb	r1, r1
90021bcc:	fb17 f705 	smulbb	r7, r7, r5
90021bd0:	fb02 3201 	mla	r2, r2, r1, r3
90021bd4:	10c3      	asrs	r3, r0, #3
90021bd6:	fb1c fc05 	smulbb	ip, ip, r5
90021bda:	00c0      	lsls	r0, r0, #3
90021bdc:	b292      	uxth	r2, r2
90021bde:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90021be2:	b2c0      	uxtb	r0, r0
90021be4:	fb03 c301 	mla	r3, r3, r1, ip
90021be8:	fb00 7001 	mla	r0, r0, r1, r7
90021bec:	1c51      	adds	r1, r2, #1
90021bee:	b29b      	uxth	r3, r3
90021bf0:	b280      	uxth	r0, r0
90021bf2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021bf6:	f100 0c01 	add.w	ip, r0, #1
90021bfa:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90021bfe:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
90021c02:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90021c06:	ea4c 0202 	orr.w	r2, ip, r2
90021c0a:	f103 0c01 	add.w	ip, r3, #1
90021c0e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
90021c12:	095b      	lsrs	r3, r3, #5
90021c14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021c18:	431a      	orrs	r2, r3
90021c1a:	f8a9 2000 	strh.w	r2, [r9]
90021c1e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021c20:	f109 0902 	add.w	r9, r9, #2
90021c24:	f10b 3bff 	add.w	fp, fp, #4294967295
90021c28:	441c      	add	r4, r3
90021c2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90021c2c:	441e      	add	r6, r3
90021c2e:	e647      	b.n	900218c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90021c30:	2800      	cmp	r0, #0
90021c32:	f43f aedf 	beq.w	900219f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
90021c36:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
90021c3a:	9109      	str	r1, [sp, #36]	; 0x24
90021c3c:	0e09      	lsrs	r1, r1, #24
90021c3e:	9112      	str	r1, [sp, #72]	; 0x48
90021c40:	e6d8      	b.n	900219f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
90021c42:	b01d      	add	sp, #116	; 0x74
90021c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021c48 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
90021c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021c4c:	b085      	sub	sp, #20
90021c4e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90021c52:	9102      	str	r1, [sp, #8]
90021c54:	2c00      	cmp	r4, #0
90021c56:	fb04 7103 	mla	r1, r4, r3, r7
90021c5a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90021c5e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90021c62:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90021c66:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90021c6a:	f2c0 810c 	blt.w	90021e86 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90021c6e:	45a6      	cmp	lr, r4
90021c70:	f340 8109 	ble.w	90021e86 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90021c74:	2f00      	cmp	r7, #0
90021c76:	f2c0 8104 	blt.w	90021e82 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90021c7a:	42bb      	cmp	r3, r7
90021c7c:	f340 8101 	ble.w	90021e82 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90021c80:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90021c84:	1c7a      	adds	r2, r7, #1
90021c86:	f100 8101 	bmi.w	90021e8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90021c8a:	4293      	cmp	r3, r2
90021c8c:	f340 80fe 	ble.w	90021e8c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90021c90:	2e00      	cmp	r6, #0
90021c92:	f000 80fd 	beq.w	90021e90 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
90021c96:	f8dc 1004 	ldr.w	r1, [ip, #4]
90021c9a:	3401      	adds	r4, #1
90021c9c:	f100 80fc 	bmi.w	90021e98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90021ca0:	45a6      	cmp	lr, r4
90021ca2:	f340 80f9 	ble.w	90021e98 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90021ca6:	2800      	cmp	r0, #0
90021ca8:	f000 80f9 	beq.w	90021e9e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
90021cac:	2f00      	cmp	r7, #0
90021cae:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
90021cb2:	f2c0 80ef 	blt.w	90021e94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90021cb6:	42bb      	cmp	r3, r7
90021cb8:	f340 80ec 	ble.w	90021e94 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
90021cbc:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90021cc0:	3701      	adds	r7, #1
90021cc2:	f100 80ef 	bmi.w	90021ea4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
90021cc6:	42bb      	cmp	r3, r7
90021cc8:	f340 80ec 	ble.w	90021ea4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
90021ccc:	2e00      	cmp	r6, #0
90021cce:	f000 80eb 	beq.w	90021ea8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
90021cd2:	6852      	ldr	r2, [r2, #4]
90021cd4:	b2b6      	uxth	r6, r6
90021cd6:	b280      	uxth	r0, r0
90021cd8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90021cdc:	fb00 fe06 	mul.w	lr, r0, r6
90021ce0:	0136      	lsls	r6, r6, #4
90021ce2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90021ce6:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90021cea:	eba6 070e 	sub.w	r7, r6, lr
90021cee:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90021cf2:	ea4f 6914 	mov.w	r9, r4, lsr #24
90021cf6:	b280      	uxth	r0, r0
90021cf8:	b2bf      	uxth	r7, r7
90021cfa:	1a1b      	subs	r3, r3, r0
90021cfc:	ea4f 6812 	mov.w	r8, r2, lsr #24
90021d00:	fb07 f60a 	mul.w	r6, r7, sl
90021d04:	b29b      	uxth	r3, r3
90021d06:	fb0b 6603 	mla	r6, fp, r3, r6
90021d0a:	fb00 6609 	mla	r6, r0, r9, r6
90021d0e:	fb0e 6608 	mla	r6, lr, r8, r6
90021d12:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021d16:	9600      	str	r6, [sp, #0]
90021d18:	2e00      	cmp	r6, #0
90021d1a:	f000 80af 	beq.w	90021e7c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
90021d1e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90021d22:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90021d26:	9e02      	ldr	r6, [sp, #8]
90021d28:	fb0b fc0c 	mul.w	ip, fp, ip
90021d2c:	fb0b f505 	mul.w	r5, fp, r5
90021d30:	8836      	ldrh	r6, [r6, #0]
90021d32:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90021d36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021d3a:	9501      	str	r5, [sp, #4]
90021d3c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90021d40:	44dc      	add	ip, fp
90021d42:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021d46:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90021d4a:	9503      	str	r5, [sp, #12]
90021d4c:	9d01      	ldr	r5, [sp, #4]
90021d4e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90021d52:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021d56:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90021d5a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021d5e:	fb0a fc0c 	mul.w	ip, sl, ip
90021d62:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021d66:	fb0a fa01 	mul.w	sl, sl, r1
90021d6a:	ea4f 251c 	mov.w	r5, ip, lsr #8
90021d6e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021d72:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90021d76:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021d7a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90021d7e:	4465      	add	r5, ip
90021d80:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021d84:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90021d88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021d8c:	fb09 fc0c 	mul.w	ip, r9, ip
90021d90:	0a2d      	lsrs	r5, r5, #8
90021d92:	fb09 f904 	mul.w	r9, r9, r4
90021d96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021d9a:	ea4f 211c 	mov.w	r1, ip, lsr #8
90021d9e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021da2:	f509 7480 	add.w	r4, r9, #256	; 0x100
90021da6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021daa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021dae:	437d      	muls	r5, r7
90021db0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90021db4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90021db8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90021dbc:	4461      	add	r1, ip
90021dbe:	fb08 f404 	mul.w	r4, r8, r4
90021dc2:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021dc6:	fb08 f802 	mul.w	r8, r8, r2
90021dca:	0a09      	lsrs	r1, r1, #8
90021dcc:	0a22      	lsrs	r2, r4, #8
90021dce:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90021dd2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021dd6:	fb07 f70a 	mul.w	r7, r7, sl
90021dda:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90021dde:	4414      	add	r4, r2
90021de0:	f508 7280 	add.w	r2, r8, #256	; 0x100
90021de4:	0a24      	lsrs	r4, r4, #8
90021de6:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90021dea:	9a03      	ldr	r2, [sp, #12]
90021dec:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90021df0:	fb02 5503 	mla	r5, r2, r3, r5
90021df4:	ea4f 2818 	mov.w	r8, r8, lsr #8
90021df8:	fb04 540e 	mla	r4, r4, lr, r5
90021dfc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90021e00:	fb01 4100 	mla	r1, r1, r0, r4
90021e04:	0a09      	lsrs	r1, r1, #8
90021e06:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90021e0a:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90021e0e:	fb03 7101 	mla	r1, r3, r1, r7
90021e12:	9b00      	ldr	r3, [sp, #0]
90021e14:	fb0e 1e08 	mla	lr, lr, r8, r1
90021e18:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90021e1c:	43da      	mvns	r2, r3
90021e1e:	1233      	asrs	r3, r6, #8
90021e20:	fb00 e101 	mla	r1, r0, r1, lr
90021e24:	10f0      	asrs	r0, r6, #3
90021e26:	b2d2      	uxtb	r2, r2
90021e28:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90021e2c:	0a09      	lsrs	r1, r1, #8
90021e2e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90021e32:	00f6      	lsls	r6, r6, #3
90021e34:	4353      	muls	r3, r2
90021e36:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021e3a:	4350      	muls	r0, r2
90021e3c:	b2f6      	uxtb	r6, r6
90021e3e:	4321      	orrs	r1, r4
90021e40:	4356      	muls	r6, r2
90021e42:	1c5a      	adds	r2, r3, #1
90021e44:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90021e48:	0c0b      	lsrs	r3, r1, #16
90021e4a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021e4e:	1c42      	adds	r2, r0, #1
90021e50:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90021e54:	0a0a      	lsrs	r2, r1, #8
90021e56:	021b      	lsls	r3, r3, #8
90021e58:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90021e5c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90021e60:	00d2      	lsls	r2, r2, #3
90021e62:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021e66:	4313      	orrs	r3, r2
90021e68:	1c72      	adds	r2, r6, #1
90021e6a:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90021e6e:	eb01 2116 	add.w	r1, r1, r6, lsr #8
90021e72:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90021e76:	4319      	orrs	r1, r3
90021e78:	9b02      	ldr	r3, [sp, #8]
90021e7a:	8019      	strh	r1, [r3, #0]
90021e7c:	b005      	add	sp, #20
90021e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021e82:	2500      	movs	r5, #0
90021e84:	e6fe      	b.n	90021c84 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
90021e86:	2100      	movs	r1, #0
90021e88:	460d      	mov	r5, r1
90021e8a:	e706      	b.n	90021c9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021e8c:	2100      	movs	r1, #0
90021e8e:	e704      	b.n	90021c9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021e90:	4631      	mov	r1, r6
90021e92:	e702      	b.n	90021c9a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90021e94:	2400      	movs	r4, #0
90021e96:	e713      	b.n	90021cc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90021e98:	2200      	movs	r2, #0
90021e9a:	4614      	mov	r4, r2
90021e9c:	e71a      	b.n	90021cd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021e9e:	4602      	mov	r2, r0
90021ea0:	4604      	mov	r4, r0
90021ea2:	e717      	b.n	90021cd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021ea4:	2200      	movs	r2, #0
90021ea6:	e715      	b.n	90021cd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90021ea8:	4632      	mov	r2, r6
90021eaa:	e713      	b.n	90021cd4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

90021eac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021eb0:	b09b      	sub	sp, #108	; 0x6c
90021eb2:	9218      	str	r2, [sp, #96]	; 0x60
90021eb4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021eb6:	9019      	str	r0, [sp, #100]	; 0x64
90021eb8:	9116      	str	r1, [sp, #88]	; 0x58
90021eba:	6850      	ldr	r0, [r2, #4]
90021ebc:	9307      	str	r3, [sp, #28]
90021ebe:	6812      	ldr	r2, [r2, #0]
90021ec0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
90021ec4:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
90021ec8:	fb00 1303 	mla	r3, r0, r3, r1
90021ecc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021ed0:	930a      	str	r3, [sp, #40]	; 0x28
90021ed2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021ed4:	681b      	ldr	r3, [r3, #0]
90021ed6:	930f      	str	r3, [sp, #60]	; 0x3c
90021ed8:	9b16      	ldr	r3, [sp, #88]	; 0x58
90021eda:	2b00      	cmp	r3, #0
90021edc:	dc03      	bgt.n	90021ee6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90021ede:	9b18      	ldr	r3, [sp, #96]	; 0x60
90021ee0:	2b00      	cmp	r3, #0
90021ee2:	f340 8387 	ble.w	900225f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90021ee6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021ee8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021eec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021ef0:	1e48      	subs	r0, r1, #1
90021ef2:	1e57      	subs	r7, r2, #1
90021ef4:	9b07      	ldr	r3, [sp, #28]
90021ef6:	2b00      	cmp	r3, #0
90021ef8:	f340 8166 	ble.w	900221c8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
90021efc:	ea5f 4c24 	movs.w	ip, r4, asr #16
90021f00:	ea4f 4326 	mov.w	r3, r6, asr #16
90021f04:	d406      	bmi.n	90021f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90021f06:	4584      	cmp	ip, r0
90021f08:	da04      	bge.n	90021f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90021f0a:	2b00      	cmp	r3, #0
90021f0c:	db02      	blt.n	90021f14 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
90021f0e:	42bb      	cmp	r3, r7
90021f10:	f2c0 815b 	blt.w	900221ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90021f14:	f11c 0c01 	adds.w	ip, ip, #1
90021f18:	f100 814b 	bmi.w	900221b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021f1c:	4561      	cmp	r1, ip
90021f1e:	f2c0 8148 	blt.w	900221b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021f22:	3301      	adds	r3, #1
90021f24:	f100 8145 	bmi.w	900221b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021f28:	429a      	cmp	r2, r3
90021f2a:	f2c0 8142 	blt.w	900221b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90021f2e:	9b07      	ldr	r3, [sp, #28]
90021f30:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90021f32:	9317      	str	r3, [sp, #92]	; 0x5c
90021f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90021f36:	2b00      	cmp	r3, #0
90021f38:	f340 8165 	ble.w	90022206 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90021f3c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
90021f3e:	ea4f 4c26 	mov.w	ip, r6, asr #16
90021f42:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021f44:	f3c4 3103 	ubfx	r1, r4, #12, #4
90021f48:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90021f4c:	1422      	asrs	r2, r4, #16
90021f4e:	f3c6 3003 	ubfx	r0, r6, #12, #4
90021f52:	689b      	ldr	r3, [r3, #8]
90021f54:	f100 81d5 	bmi.w	90022302 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021f58:	f103 38ff 	add.w	r8, r3, #4294967295
90021f5c:	4542      	cmp	r2, r8
90021f5e:	f280 81d0 	bge.w	90022302 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021f62:	f1bc 0f00 	cmp.w	ip, #0
90021f66:	f2c0 81cc 	blt.w	90022302 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021f6a:	f10e 38ff 	add.w	r8, lr, #4294967295
90021f6e:	45c4      	cmp	ip, r8
90021f70:	f280 81c7 	bge.w	90022302 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90021f74:	b21b      	sxth	r3, r3
90021f76:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90021f78:	fb0c 2203 	mla	r2, ip, r3, r2
90021f7c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90021f80:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90021f84:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90021f88:	2900      	cmp	r1, #0
90021f8a:	f000 8182 	beq.w	90022292 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90021f8e:	f8d8 5004 	ldr.w	r5, [r8, #4]
90021f92:	950b      	str	r5, [sp, #44]	; 0x2c
90021f94:	0e2d      	lsrs	r5, r5, #24
90021f96:	9512      	str	r5, [sp, #72]	; 0x48
90021f98:	b180      	cbz	r0, 90021fbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90021f9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90021f9e:	3b01      	subs	r3, #1
90021fa0:	009b      	lsls	r3, r3, #2
90021fa2:	3304      	adds	r3, #4
90021fa4:	eb08 0c03 	add.w	ip, r8, r3
90021fa8:	f858 3003 	ldr.w	r3, [r8, r3]
90021fac:	9308      	str	r3, [sp, #32]
90021fae:	0e1b      	lsrs	r3, r3, #24
90021fb0:	9310      	str	r3, [sp, #64]	; 0x40
90021fb2:	f8dc 3004 	ldr.w	r3, [ip, #4]
90021fb6:	930c      	str	r3, [sp, #48]	; 0x30
90021fb8:	0e1b      	lsrs	r3, r3, #24
90021fba:	9313      	str	r3, [sp, #76]	; 0x4c
90021fbc:	b289      	uxth	r1, r1
90021fbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
90021fc0:	b280      	uxth	r0, r0
90021fc2:	9d10      	ldr	r5, [sp, #64]	; 0x40
90021fc4:	fb01 f900 	mul.w	r9, r1, r0
90021fc8:	0109      	lsls	r1, r1, #4
90021fca:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90021fce:	eba1 0809 	sub.w	r8, r1, r9
90021fd2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
90021fd6:	b280      	uxth	r0, r0
90021fd8:	fa1f f888 	uxth.w	r8, r8
90021fdc:	1a09      	subs	r1, r1, r0
90021fde:	fb08 f303 	mul.w	r3, r8, r3
90021fe2:	b289      	uxth	r1, r1
90021fe4:	fb01 330e 	mla	r3, r1, lr, r3
90021fe8:	fb00 3305 	mla	r3, r0, r5, r3
90021fec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90021fee:	fb09 3305 	mla	r3, r9, r5, r3
90021ff2:	f3c3 2307 	ubfx	r3, r3, #8, #8
90021ff6:	2b00      	cmp	r3, #0
90021ff8:	f000 80d2 	beq.w	900221a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90021ffc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90022000:	d01b      	beq.n	9002203a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
90022002:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90022006:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002200a:	fb0e fa0a 	mul.w	sl, lr, sl
9002200e:	fb0e fe02 	mul.w	lr, lr, r2
90022012:	ea4f 221a 	mov.w	r2, sl, lsr #8
90022016:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002201a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9002201e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90022022:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90022026:	4452      	add	r2, sl
90022028:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002202c:	0a12      	lsrs	r2, r2, #8
9002202e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022032:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90022036:	ea42 020c 	orr.w	r2, r2, ip
9002203a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002203c:	2dff      	cmp	r5, #255	; 0xff
9002203e:	d021      	beq.n	90022084 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90022040:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90022042:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90022046:	9d12      	ldr	r5, [sp, #72]	; 0x48
90022048:	fb05 fb0b 	mul.w	fp, r5, fp
9002204c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002204e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90022052:	9d12      	ldr	r5, [sp, #72]	; 0x48
90022054:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022058:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002205c:	fb05 fa0a 	mul.w	sl, r5, sl
90022060:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022064:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022068:	44de      	add	lr, fp
9002206a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002206e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022072:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022076:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002207a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002207e:	ea4e 050a 	orr.w	r5, lr, sl
90022082:	950b      	str	r5, [sp, #44]	; 0x2c
90022084:	9d10      	ldr	r5, [sp, #64]	; 0x40
90022086:	2dff      	cmp	r5, #255	; 0xff
90022088:	d021      	beq.n	900220ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
9002208a:	9d08      	ldr	r5, [sp, #32]
9002208c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90022090:	9d10      	ldr	r5, [sp, #64]	; 0x40
90022092:	fb05 fb0b 	mul.w	fp, r5, fp
90022096:	9d08      	ldr	r5, [sp, #32]
90022098:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
9002209c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002209e:	fb05 fa0e 	mul.w	sl, r5, lr
900220a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900220a6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900220aa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900220ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900220b2:	44de      	add	lr, fp
900220b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900220b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900220bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900220c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900220c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900220c8:	ea4e 050a 	orr.w	r5, lr, sl
900220cc:	9508      	str	r5, [sp, #32]
900220ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900220d0:	2dff      	cmp	r5, #255	; 0xff
900220d2:	d021      	beq.n	90022118 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
900220d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900220d6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900220da:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900220dc:	fb05 fb0b 	mul.w	fp, r5, fp
900220e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900220e2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900220e6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900220e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900220ec:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900220f0:	fb05 fa0a 	mul.w	sl, r5, sl
900220f4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900220f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900220fc:	44de      	add	lr, fp
900220fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90022102:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90022106:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002210a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002210e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022112:	ea4e 050a 	orr.w	r5, lr, sl
90022116:	950c      	str	r5, [sp, #48]	; 0x30
90022118:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002211a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
9002211e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90022122:	2bff      	cmp	r3, #255	; 0xff
90022124:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90022128:	9d08      	ldr	r5, [sp, #32]
9002212a:	fb08 fc0c 	mul.w	ip, r8, ip
9002212e:	fb01 cc0e 	mla	ip, r1, lr, ip
90022132:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90022136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90022138:	fb00 cc0e 	mla	ip, r0, lr, ip
9002213c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90022140:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90022142:	fb09 cc0e 	mla	ip, r9, lr, ip
90022146:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
9002214a:	fb08 f80e 	mul.w	r8, r8, lr
9002214e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022152:	fb01 8202 	mla	r2, r1, r2, r8
90022156:	9908      	ldr	r1, [sp, #32]
90022158:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002215c:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90022160:	990c      	ldr	r1, [sp, #48]	; 0x30
90022162:	fb00 220a 	mla	r2, r0, sl, r2
90022166:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
9002216a:	fb09 2900 	mla	r9, r9, r0, r2
9002216e:	ea4f 2919 	mov.w	r9, r9, lsr #8
90022172:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90022176:	ea4c 0c09 	orr.w	ip, ip, r9
9002217a:	ea4f 221c 	mov.w	r2, ip, lsr #8
9002217e:	f040 8091 	bne.w	900222a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90022182:	ea4f 135c 	mov.w	r3, ip, lsr #5
90022186:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
9002218a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002218e:	f022 0207 	bic.w	r2, r2, #7
90022192:	431a      	orrs	r2, r3
90022194:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90022198:	ea4c 0c02 	orr.w	ip, ip, r2
9002219c:	f8a7 c000 	strh.w	ip, [r7]
900221a0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900221a2:	3702      	adds	r7, #2
900221a4:	441c      	add	r4, r3
900221a6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900221a8:	441e      	add	r6, r3
900221aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900221ac:	3b01      	subs	r3, #1
900221ae:	9317      	str	r3, [sp, #92]	; 0x5c
900221b0:	e6c0      	b.n	90021f34 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
900221b2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900221b4:	441c      	add	r4, r3
900221b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900221b8:	441e      	add	r6, r3
900221ba:	9b07      	ldr	r3, [sp, #28]
900221bc:	3b01      	subs	r3, #1
900221be:	9307      	str	r3, [sp, #28]
900221c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900221c2:	3302      	adds	r3, #2
900221c4:	930a      	str	r3, [sp, #40]	; 0x28
900221c6:	e695      	b.n	90021ef4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900221c8:	d024      	beq.n	90022214 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
900221ca:	9b07      	ldr	r3, [sp, #28]
900221cc:	9827      	ldr	r0, [sp, #156]	; 0x9c
900221ce:	3b01      	subs	r3, #1
900221d0:	fb00 4003 	mla	r0, r0, r3, r4
900221d4:	1400      	asrs	r0, r0, #16
900221d6:	f53f aeaa 	bmi.w	90021f2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900221da:	3901      	subs	r1, #1
900221dc:	4288      	cmp	r0, r1
900221de:	f6bf aea6 	bge.w	90021f2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900221e2:	9928      	ldr	r1, [sp, #160]	; 0xa0
900221e4:	fb01 6303 	mla	r3, r1, r3, r6
900221e8:	141b      	asrs	r3, r3, #16
900221ea:	f53f aea0 	bmi.w	90021f2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900221ee:	3a01      	subs	r2, #1
900221f0:	4293      	cmp	r3, r2
900221f2:	f6bf ae9c 	bge.w	90021f2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
900221f6:	f8dd b01c 	ldr.w	fp, [sp, #28]
900221fa:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
900221fe:	f1bb 0f00 	cmp.w	fp, #0
90022202:	f300 809a 	bgt.w	9002233a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90022206:	9b07      	ldr	r3, [sp, #28]
90022208:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
9002220c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002220e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90022212:	930a      	str	r3, [sp, #40]	; 0x28
90022214:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022216:	2b00      	cmp	r3, #0
90022218:	f340 81ec 	ble.w	900225f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
9002221c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90022220:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022222:	ee30 0a04 	vadd.f32	s0, s0, s8
90022226:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002222a:	eef0 6a62 	vmov.f32	s13, s5
9002222e:	eec7 7a00 	vdiv.f32	s15, s14, s0
90022232:	ee31 1a05 	vadd.f32	s2, s2, s10
90022236:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002223a:	ee16 4a90 	vmov	r4, s13
9002223e:	eef0 6a43 	vmov.f32	s13, s6
90022242:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022246:	ee16 6a90 	vmov	r6, s13
9002224a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002224e:	ee61 7a27 	vmul.f32	s15, s2, s15
90022252:	ee77 2a62 	vsub.f32	s5, s14, s5
90022256:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002225a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002225e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022262:	ee12 2a90 	vmov	r2, s5
90022266:	eef0 2a47 	vmov.f32	s5, s14
9002226a:	fb92 f3f3 	sdiv	r3, r2, r3
9002226e:	ee13 2a10 	vmov	r2, s6
90022272:	9327      	str	r3, [sp, #156]	; 0x9c
90022274:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022276:	eeb0 3a67 	vmov.f32	s6, s15
9002227a:	fb92 f3f3 	sdiv	r3, r2, r3
9002227e:	9328      	str	r3, [sp, #160]	; 0xa0
90022280:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022282:	9a18      	ldr	r2, [sp, #96]	; 0x60
90022284:	3b01      	subs	r3, #1
90022286:	9316      	str	r3, [sp, #88]	; 0x58
90022288:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002228a:	bf08      	it	eq
9002228c:	4613      	moveq	r3, r2
9002228e:	9307      	str	r3, [sp, #28]
90022290:	e622      	b.n	90021ed8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
90022292:	2800      	cmp	r0, #0
90022294:	f43f ae92 	beq.w	90021fbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90022298:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
9002229c:	9308      	str	r3, [sp, #32]
9002229e:	0e1b      	lsrs	r3, r3, #24
900222a0:	9310      	str	r3, [sp, #64]	; 0x40
900222a2:	e68b      	b.n	90021fbc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
900222a4:	8839      	ldrh	r1, [r7, #0]
900222a6:	43db      	mvns	r3, r3
900222a8:	4dd4      	ldr	r5, [pc, #848]	; (900225fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
900222aa:	ea4f 2e21 	mov.w	lr, r1, asr #8
900222ae:	fa5f f883 	uxtb.w	r8, r3
900222b2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
900222b6:	10c8      	asrs	r0, r1, #3
900222b8:	00cb      	lsls	r3, r1, #3
900222ba:	fb0e fe08 	mul.w	lr, lr, r8
900222be:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900222c2:	b2db      	uxtb	r3, r3
900222c4:	f10e 0101 	add.w	r1, lr, #1
900222c8:	fb00 f008 	mul.w	r0, r0, r8
900222cc:	fb03 f308 	mul.w	r3, r3, r8
900222d0:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
900222d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
900222d8:	eb01 211e 	add.w	r1, r1, lr, lsr #8
900222dc:	f100 0e01 	add.w	lr, r0, #1
900222e0:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
900222e4:	b2c9      	uxtb	r1, r1
900222e6:	eb02 2210 	add.w	r2, r2, r0, lsr #8
900222ea:	ea05 2101 	and.w	r1, r5, r1, lsl #8
900222ee:	00d2      	lsls	r2, r2, #3
900222f0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900222f4:	430a      	orrs	r2, r1
900222f6:	1c59      	adds	r1, r3, #1
900222f8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
900222fc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90022300:	e748      	b.n	90022194 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90022302:	f112 0801 	adds.w	r8, r2, #1
90022306:	f53f af4b 	bmi.w	900221a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9002230a:	4543      	cmp	r3, r8
9002230c:	f6ff af48 	blt.w	900221a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90022310:	f11c 0801 	adds.w	r8, ip, #1
90022314:	f53f af44 	bmi.w	900221a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90022318:	45c6      	cmp	lr, r8
9002231a:	f6ff af41 	blt.w	900221a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9002231e:	b21b      	sxth	r3, r3
90022320:	e9cd 2c01 	strd	r2, ip, [sp, #4]
90022324:	fa0f f28e 	sxth.w	r2, lr
90022328:	e9cd 1003 	strd	r1, r0, [sp, #12]
9002232c:	9200      	str	r2, [sp, #0]
9002232e:	4639      	mov	r1, r7
90022330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022332:	9819      	ldr	r0, [sp, #100]	; 0x64
90022334:	f7ff fc88 	bl	90021c48 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90022338:	e732      	b.n	900221a0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
9002233a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002233c:	1421      	asrs	r1, r4, #16
9002233e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90022340:	f3c4 3203 	ubfx	r2, r4, #12, #4
90022344:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90022348:	1433      	asrs	r3, r6, #16
9002234a:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002234e:	fb07 1303 	mla	r3, r7, r3, r1
90022352:	990f      	ldr	r1, [sp, #60]	; 0x3c
90022354:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90022358:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
9002235c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90022360:	2a00      	cmp	r2, #0
90022362:	f000 8108 	beq.w	90022576 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90022366:	684d      	ldr	r5, [r1, #4]
90022368:	950d      	str	r5, [sp, #52]	; 0x34
9002236a:	0e2d      	lsrs	r5, r5, #24
9002236c:	9514      	str	r5, [sp, #80]	; 0x50
9002236e:	b178      	cbz	r0, 90022390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90022370:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90022374:	3f01      	subs	r7, #1
90022376:	00bf      	lsls	r7, r7, #2
90022378:	3704      	adds	r7, #4
9002237a:	eb01 0e07 	add.w	lr, r1, r7
9002237e:	59c9      	ldr	r1, [r1, r7]
90022380:	9109      	str	r1, [sp, #36]	; 0x24
90022382:	0e09      	lsrs	r1, r1, #24
90022384:	9111      	str	r1, [sp, #68]	; 0x44
90022386:	f8de 1004 	ldr.w	r1, [lr, #4]
9002238a:	910e      	str	r1, [sp, #56]	; 0x38
9002238c:	0e09      	lsrs	r1, r1, #24
9002238e:	9115      	str	r1, [sp, #84]	; 0x54
90022390:	b292      	uxth	r2, r2
90022392:	9d11      	ldr	r5, [sp, #68]	; 0x44
90022394:	b280      	uxth	r0, r0
90022396:	fb02 f900 	mul.w	r9, r2, r0
9002239a:	0112      	lsls	r2, r2, #4
9002239c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900223a0:	eba2 0e09 	sub.w	lr, r2, r9
900223a4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
900223a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
900223aa:	b280      	uxth	r0, r0
900223ac:	fa1f fe8e 	uxth.w	lr, lr
900223b0:	1a09      	subs	r1, r1, r0
900223b2:	fb0e f202 	mul.w	r2, lr, r2
900223b6:	b289      	uxth	r1, r1
900223b8:	fb01 220c 	mla	r2, r1, ip, r2
900223bc:	fb00 2205 	mla	r2, r0, r5, r2
900223c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
900223c2:	fb09 2205 	mla	r2, r9, r5, r2
900223c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
900223ca:	2a00      	cmp	r2, #0
900223cc:	f000 80ca 	beq.w	90022564 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
900223d0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
900223d4:	d019      	beq.n	9002240a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
900223d6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900223da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900223de:	fb0c fa0a 	mul.w	sl, ip, sl
900223e2:	fb0c fc03 	mul.w	ip, ip, r3
900223e6:	ea4f 231a 	mov.w	r3, sl, lsr #8
900223ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900223ee:	f50c 7780 	add.w	r7, ip, #256	; 0x100
900223f2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900223f6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900223fa:	4453      	add	r3, sl
900223fc:	0a3f      	lsrs	r7, r7, #8
900223fe:	0a1b      	lsrs	r3, r3, #8
90022400:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90022404:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022408:	433b      	orrs	r3, r7
9002240a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002240c:	2dff      	cmp	r5, #255	; 0xff
9002240e:	d020      	beq.n	90022452 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90022410:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90022412:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90022416:	9d14      	ldr	r5, [sp, #80]	; 0x50
90022418:	436f      	muls	r7, r5
9002241a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002241c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022420:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90022424:	9d14      	ldr	r5, [sp, #80]	; 0x50
90022426:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002242a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002242e:	fb05 fa0a 	mul.w	sl, r5, sl
90022432:	44bc      	add	ip, r7
90022434:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022438:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002243c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022440:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022444:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022448:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002244c:	ea4c 050a 	orr.w	r5, ip, sl
90022450:	950d      	str	r5, [sp, #52]	; 0x34
90022452:	9d11      	ldr	r5, [sp, #68]	; 0x44
90022454:	2dff      	cmp	r5, #255	; 0xff
90022456:	d020      	beq.n	9002249a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90022458:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002245a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002245e:	9d11      	ldr	r5, [sp, #68]	; 0x44
90022460:	436f      	muls	r7, r5
90022462:	9d09      	ldr	r5, [sp, #36]	; 0x24
90022464:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90022468:	9d11      	ldr	r5, [sp, #68]	; 0x44
9002246a:	fb05 fa0c 	mul.w	sl, r5, ip
9002246e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022472:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022476:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002247a:	44bc      	add	ip, r7
9002247c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022480:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022484:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022488:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002248c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022490:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022494:	ea4c 050a 	orr.w	r5, ip, sl
90022498:	9509      	str	r5, [sp, #36]	; 0x24
9002249a:	9d15      	ldr	r5, [sp, #84]	; 0x54
9002249c:	2dff      	cmp	r5, #255	; 0xff
9002249e:	d020      	beq.n	900224e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
900224a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900224a2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900224a6:	9d15      	ldr	r5, [sp, #84]	; 0x54
900224a8:	436f      	muls	r7, r5
900224aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900224ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900224b0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900224b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
900224b6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900224ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900224be:	fb05 fa0a 	mul.w	sl, r5, sl
900224c2:	44bc      	add	ip, r7
900224c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900224c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900224cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900224d0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900224d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900224d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900224dc:	ea4c 050a 	orr.w	r5, ip, sl
900224e0:	950e      	str	r5, [sp, #56]	; 0x38
900224e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
900224e4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
900224e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900224ec:	2aff      	cmp	r2, #255	; 0xff
900224ee:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900224f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
900224f4:	fb0e f707 	mul.w	r7, lr, r7
900224f8:	fb01 770c 	mla	r7, r1, ip, r7
900224fc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90022500:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90022502:	fb00 770c 	mla	r7, r0, ip, r7
90022506:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002250a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002250c:	fb09 770c 	mla	r7, r9, ip, r7
90022510:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90022514:	fb0e fe0c 	mul.w	lr, lr, ip
90022518:	ea4f 2717 	mov.w	r7, r7, lsr #8
9002251c:	fb01 e303 	mla	r3, r1, r3, lr
90022520:	9909      	ldr	r1, [sp, #36]	; 0x24
90022522:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90022526:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
9002252a:	990e      	ldr	r1, [sp, #56]	; 0x38
9002252c:	fb00 330a 	mla	r3, r0, sl, r3
90022530:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90022534:	fb09 3c0c 	mla	ip, r9, ip, r3
90022538:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002253c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022540:	ea47 070c 	orr.w	r7, r7, ip
90022544:	ea4f 2317 	mov.w	r3, r7, lsr #8
90022548:	d11e      	bne.n	90022588 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
9002254a:	097a      	lsrs	r2, r7, #5
9002254c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90022550:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90022554:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022558:	f023 0307 	bic.w	r3, r3, #7
9002255c:	4313      	orrs	r3, r2
9002255e:	431f      	orrs	r7, r3
90022560:	f8a8 7000 	strh.w	r7, [r8]
90022564:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022566:	f108 0802 	add.w	r8, r8, #2
9002256a:	f10b 3bff 	add.w	fp, fp, #4294967295
9002256e:	441c      	add	r4, r3
90022570:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022572:	441e      	add	r6, r3
90022574:	e643      	b.n	900221fe <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90022576:	2800      	cmp	r0, #0
90022578:	f43f af0a 	beq.w	90022390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
9002257c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90022580:	9109      	str	r1, [sp, #36]	; 0x24
90022582:	0e09      	lsrs	r1, r1, #24
90022584:	9111      	str	r1, [sp, #68]	; 0x44
90022586:	e703      	b.n	90022390 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90022588:	f8b8 1000 	ldrh.w	r1, [r8]
9002258c:	43d2      	mvns	r2, r2
9002258e:	ea4f 2c21 	mov.w	ip, r1, asr #8
90022592:	fa5f fe82 	uxtb.w	lr, r2
90022596:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9002259a:	10c8      	asrs	r0, r1, #3
9002259c:	00ca      	lsls	r2, r1, #3
9002259e:	fb0c fc0e 	mul.w	ip, ip, lr
900225a2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
900225a6:	b2d2      	uxtb	r2, r2
900225a8:	f10c 0101 	add.w	r1, ip, #1
900225ac:	fb00 f00e 	mul.w	r0, r0, lr
900225b0:	fb02 f20e 	mul.w	r2, r2, lr
900225b4:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900225b8:	0c39      	lsrs	r1, r7, #16
900225ba:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900225be:	490f      	ldr	r1, [pc, #60]	; (900225fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
900225c0:	fa5f fc8c 	uxtb.w	ip, ip
900225c4:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
900225c8:	1c41      	adds	r1, r0, #1
900225ca:	eb01 2010 	add.w	r0, r1, r0, lsr #8
900225ce:	1c51      	adds	r1, r2, #1
900225d0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900225d4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900225d8:	00c0      	lsls	r0, r0, #3
900225da:	eb07 2712 	add.w	r7, r7, r2, lsr #8
900225de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900225e2:	f3c7 07c4 	ubfx	r7, r7, #3, #5
900225e6:	ea4c 0c00 	orr.w	ip, ip, r0
900225ea:	ea47 0c0c 	orr.w	ip, r7, ip
900225ee:	f8a8 c000 	strh.w	ip, [r8]
900225f2:	e7b7      	b.n	90022564 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
900225f4:	b01b      	add	sp, #108	; 0x6c
900225f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900225fa:	bf00      	nop
900225fc:	fffff800 	.word	0xfffff800

90022600 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90022600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90022604:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90022608:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
9002260c:	2d00      	cmp	r5, #0
9002260e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90022612:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90022616:	fb05 0e03 	mla	lr, r5, r3, r0
9002261a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
9002261e:	f2c0 808c 	blt.w	9002273a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90022622:	45a9      	cmp	r9, r5
90022624:	f340 8089 	ble.w	9002273a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90022628:	2800      	cmp	r0, #0
9002262a:	f2c0 8084 	blt.w	90022736 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
9002262e:	4580      	cmp	r8, r0
90022630:	f340 8081 	ble.w	90022736 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90022634:	ea4f 045e 	mov.w	r4, lr, lsr #1
90022638:	f01e 0f01 	tst.w	lr, #1
9002263c:	5d16      	ldrb	r6, [r2, r4]
9002263e:	bf0c      	ite	eq
90022640:	f006 060f 	andeq.w	r6, r6, #15
90022644:	1136      	asrne	r6, r6, #4
90022646:	eb06 1606 	add.w	r6, r6, r6, lsl #4
9002264a:	b2f6      	uxtb	r6, r6
9002264c:	1c44      	adds	r4, r0, #1
9002264e:	d477      	bmi.n	90022740 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90022650:	45a0      	cmp	r8, r4
90022652:	dd75      	ble.n	90022740 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90022654:	2f00      	cmp	r7, #0
90022656:	d075      	beq.n	90022744 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90022658:	f10e 0a01 	add.w	sl, lr, #1
9002265c:	ea4f 045a 	mov.w	r4, sl, lsr #1
90022660:	f01a 0f01 	tst.w	sl, #1
90022664:	5d14      	ldrb	r4, [r2, r4]
90022666:	bf0c      	ite	eq
90022668:	f004 040f 	andeq.w	r4, r4, #15
9002266c:	1124      	asrne	r4, r4, #4
9002266e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90022672:	b2e4      	uxtb	r4, r4
90022674:	3501      	adds	r5, #1
90022676:	d469      	bmi.n	9002274c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90022678:	45a9      	cmp	r9, r5
9002267a:	dd67      	ble.n	9002274c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
9002267c:	f1bc 0f00 	cmp.w	ip, #0
90022680:	d067      	beq.n	90022752 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90022682:	2800      	cmp	r0, #0
90022684:	db60      	blt.n	90022748 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90022686:	4580      	cmp	r8, r0
90022688:	dd5e      	ble.n	90022748 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
9002268a:	eb03 090e 	add.w	r9, r3, lr
9002268e:	ea4f 0559 	mov.w	r5, r9, lsr #1
90022692:	f019 0f01 	tst.w	r9, #1
90022696:	5d55      	ldrb	r5, [r2, r5]
90022698:	bf0c      	ite	eq
9002269a:	f005 050f 	andeq.w	r5, r5, #15
9002269e:	112d      	asrne	r5, r5, #4
900226a0:	eb05 1505 	add.w	r5, r5, r5, lsl #4
900226a4:	b2ed      	uxtb	r5, r5
900226a6:	3001      	adds	r0, #1
900226a8:	d456      	bmi.n	90022758 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
900226aa:	4580      	cmp	r8, r0
900226ac:	dd54      	ble.n	90022758 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
900226ae:	2f00      	cmp	r7, #0
900226b0:	d054      	beq.n	9002275c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
900226b2:	3301      	adds	r3, #1
900226b4:	449e      	add	lr, r3
900226b6:	ea4f 035e 	mov.w	r3, lr, lsr #1
900226ba:	f01e 0f01 	tst.w	lr, #1
900226be:	5cd0      	ldrb	r0, [r2, r3]
900226c0:	bf0c      	ite	eq
900226c2:	f000 000f 	andeq.w	r0, r0, #15
900226c6:	1100      	asrne	r0, r0, #4
900226c8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900226cc:	b2c3      	uxtb	r3, r0
900226ce:	b2ba      	uxth	r2, r7
900226d0:	fa1f fc8c 	uxth.w	ip, ip
900226d4:	fb02 f00c 	mul.w	r0, r2, ip
900226d8:	0112      	lsls	r2, r2, #4
900226da:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
900226de:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
900226e2:	1a12      	subs	r2, r2, r0
900226e4:	fa1f fc8c 	uxth.w	ip, ip
900226e8:	b292      	uxth	r2, r2
900226ea:	eba7 070c 	sub.w	r7, r7, ip
900226ee:	4362      	muls	r2, r4
900226f0:	b2bf      	uxth	r7, r7
900226f2:	fb06 2207 	mla	r2, r6, r7, r2
900226f6:	fb0c 2505 	mla	r5, ip, r5, r2
900226fa:	fb00 5303 	mla	r3, r0, r3, r5
900226fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022702:	b1b3      	cbz	r3, 90022732 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90022704:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90022708:	435a      	muls	r2, r3
9002270a:	1c53      	adds	r3, r2, #1
9002270c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022710:	4a2d      	ldr	r2, [pc, #180]	; (900227c8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90022712:	121b      	asrs	r3, r3, #8
90022714:	6812      	ldr	r2, [r2, #0]
90022716:	2bff      	cmp	r3, #255	; 0xff
90022718:	ea4f 2612 	mov.w	r6, r2, lsr #8
9002271c:	d120      	bne.n	90022760 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
9002271e:	0950      	lsrs	r0, r2, #5
90022720:	4b2a      	ldr	r3, [pc, #168]	; (900227cc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
90022722:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022726:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002272a:	4033      	ands	r3, r6
9002272c:	4318      	orrs	r0, r3
9002272e:	4302      	orrs	r2, r0
90022730:	800a      	strh	r2, [r1, #0]
90022732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90022736:	2600      	movs	r6, #0
90022738:	e788      	b.n	9002264c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
9002273a:	2400      	movs	r4, #0
9002273c:	4626      	mov	r6, r4
9002273e:	e799      	b.n	90022674 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90022740:	2400      	movs	r4, #0
90022742:	e797      	b.n	90022674 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90022744:	463c      	mov	r4, r7
90022746:	e795      	b.n	90022674 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90022748:	2500      	movs	r5, #0
9002274a:	e7ac      	b.n	900226a6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
9002274c:	2300      	movs	r3, #0
9002274e:	461d      	mov	r5, r3
90022750:	e7bd      	b.n	900226ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90022752:	4663      	mov	r3, ip
90022754:	4665      	mov	r5, ip
90022756:	e7ba      	b.n	900226ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90022758:	2300      	movs	r3, #0
9002275a:	e7b8      	b.n	900226ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
9002275c:	463b      	mov	r3, r7
9002275e:	e7b6      	b.n	900226ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90022760:	880d      	ldrh	r5, [r1, #0]
90022762:	b29f      	uxth	r7, r3
90022764:	f3c2 4007 	ubfx	r0, r2, #16, #8
90022768:	43db      	mvns	r3, r3
9002276a:	122c      	asrs	r4, r5, #8
9002276c:	fb10 f007 	smulbb	r0, r0, r7
90022770:	b2db      	uxtb	r3, r3
90022772:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90022776:	b2f6      	uxtb	r6, r6
90022778:	b2d2      	uxtb	r2, r2
9002277a:	fb04 0403 	mla	r4, r4, r3, r0
9002277e:	10e8      	asrs	r0, r5, #3
90022780:	fb12 f207 	smulbb	r2, r2, r7
90022784:	00ed      	lsls	r5, r5, #3
90022786:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002278a:	b2a4      	uxth	r4, r4
9002278c:	fb16 f607 	smulbb	r6, r6, r7
90022790:	b2ed      	uxtb	r5, r5
90022792:	fb00 6603 	mla	r6, r0, r3, r6
90022796:	fb05 2303 	mla	r3, r5, r3, r2
9002279a:	b2b0      	uxth	r0, r6
9002279c:	b29a      	uxth	r2, r3
9002279e:	1c63      	adds	r3, r4, #1
900227a0:	eb03 2414 	add.w	r4, r3, r4, lsr #8
900227a4:	1c53      	adds	r3, r2, #1
900227a6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900227aa:	1c42      	adds	r2, r0, #1
900227ac:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
900227b0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
900227b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900227b8:	0940      	lsrs	r0, r0, #5
900227ba:	4323      	orrs	r3, r4
900227bc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900227c0:	4303      	orrs	r3, r0
900227c2:	800b      	strh	r3, [r1, #0]
900227c4:	e7b5      	b.n	90022732 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
900227c6:	bf00      	nop
900227c8:	24026464 	.word	0x24026464
900227cc:	00fff800 	.word	0x00fff800

900227d0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900227d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900227d4:	b097      	sub	sp, #92	; 0x5c
900227d6:	9214      	str	r2, [sp, #80]	; 0x50
900227d8:	9309      	str	r3, [sp, #36]	; 0x24
900227da:	9a25      	ldr	r2, [sp, #148]	; 0x94
900227dc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
900227e0:	9015      	str	r0, [sp, #84]	; 0x54
900227e2:	910d      	str	r1, [sp, #52]	; 0x34
900227e4:	6850      	ldr	r0, [r2, #4]
900227e6:	930f      	str	r3, [sp, #60]	; 0x3c
900227e8:	6812      	ldr	r2, [r2, #0]
900227ea:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
900227ee:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
900227f2:	fb00 1303 	mla	r3, r0, r3, r1
900227f6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900227fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900227fc:	689b      	ldr	r3, [r3, #8]
900227fe:	3301      	adds	r3, #1
90022800:	f023 0301 	bic.w	r3, r3, #1
90022804:	930a      	str	r3, [sp, #40]	; 0x28
90022806:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022808:	681f      	ldr	r7, [r3, #0]
9002280a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002280c:	2b00      	cmp	r3, #0
9002280e:	dc03      	bgt.n	90022818 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90022810:	9b14      	ldr	r3, [sp, #80]	; 0x50
90022812:	2b00      	cmp	r3, #0
90022814:	f340 8289 	ble.w	90022d2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90022818:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002281a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002281e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022822:	1e48      	subs	r0, r1, #1
90022824:	f102 3cff 	add.w	ip, r2, #4294967295
90022828:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002282a:	2b00      	cmp	r3, #0
9002282c:	f340 80c5 	ble.w	900229ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90022830:	ea5f 4e24 	movs.w	lr, r4, asr #16
90022834:	ea4f 4326 	mov.w	r3, r6, asr #16
90022838:	d406      	bmi.n	90022848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002283a:	4586      	cmp	lr, r0
9002283c:	da04      	bge.n	90022848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002283e:	2b00      	cmp	r3, #0
90022840:	db02      	blt.n	90022848 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022842:	4563      	cmp	r3, ip
90022844:	f2c0 80ba 	blt.w	900229bc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90022848:	f11e 0e01 	adds.w	lr, lr, #1
9002284c:	f100 80ab 	bmi.w	900229a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022850:	4571      	cmp	r1, lr
90022852:	f2c0 80a8 	blt.w	900229a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022856:	3301      	adds	r3, #1
90022858:	f100 80a5 	bmi.w	900229a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002285c:	429a      	cmp	r2, r3
9002285e:	f2c0 80a2 	blt.w	900229a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90022862:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022864:	46c8      	mov	r8, r9
90022866:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
9002286a:	930e      	str	r3, [sp, #56]	; 0x38
9002286c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9002286e:	2b00      	cmp	r3, #0
90022870:	f340 80c4 	ble.w	900229fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
90022874:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022876:	1430      	asrs	r0, r6, #16
90022878:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002287c:	f3c6 3103 	ubfx	r1, r6, #12, #4
90022880:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90022884:	1423      	asrs	r3, r4, #16
90022886:	f100 814f 	bmi.w	90022b28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002288a:	f10c 3bff 	add.w	fp, ip, #4294967295
9002288e:	455b      	cmp	r3, fp
90022890:	f280 814a 	bge.w	90022b28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022894:	2800      	cmp	r0, #0
90022896:	f2c0 8147 	blt.w	90022b28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002289a:	f10e 3bff 	add.w	fp, lr, #4294967295
9002289e:	4558      	cmp	r0, fp
900228a0:	f280 8142 	bge.w	90022b28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
900228a4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
900228a6:	fb00 3305 	mla	r3, r0, r5, r3
900228aa:	0858      	lsrs	r0, r3, #1
900228ac:	07dd      	lsls	r5, r3, #31
900228ae:	f817 c000 	ldrb.w	ip, [r7, r0]
900228b2:	bf54      	ite	pl
900228b4:	f00c 0c0f 	andpl.w	ip, ip, #15
900228b8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900228bc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900228c0:	fa5f fc8c 	uxtb.w	ip, ip
900228c4:	2a00      	cmp	r2, #0
900228c6:	f000 80dd 	beq.w	90022a84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
900228ca:	1c58      	adds	r0, r3, #1
900228cc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900228d0:	07c0      	lsls	r0, r0, #31
900228d2:	f817 e00e 	ldrb.w	lr, [r7, lr]
900228d6:	bf54      	ite	pl
900228d8:	f00e 0e0f 	andpl.w	lr, lr, #15
900228dc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
900228e0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
900228e4:	fa5f f08e 	uxtb.w	r0, lr
900228e8:	9010      	str	r0, [sp, #64]	; 0x40
900228ea:	b1d9      	cbz	r1, 90022924 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900228ec:	4453      	add	r3, sl
900228ee:	0858      	lsrs	r0, r3, #1
900228f0:	07dd      	lsls	r5, r3, #31
900228f2:	f103 0301 	add.w	r3, r3, #1
900228f6:	5c38      	ldrb	r0, [r7, r0]
900228f8:	bf54      	ite	pl
900228fa:	f000 000f 	andpl.w	r0, r0, #15
900228fe:	1100      	asrmi	r0, r0, #4
90022900:	07dd      	lsls	r5, r3, #31
90022902:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90022906:	b2c0      	uxtb	r0, r0
90022908:	900b      	str	r0, [sp, #44]	; 0x2c
9002290a:	ea4f 0053 	mov.w	r0, r3, lsr #1
9002290e:	f817 e000 	ldrb.w	lr, [r7, r0]
90022912:	bf54      	ite	pl
90022914:	f00e 030f 	andpl.w	r3, lr, #15
90022918:	ea4f 132e 	movmi.w	r3, lr, asr #4
9002291c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022920:	b2db      	uxtb	r3, r3
90022922:	9311      	str	r3, [sp, #68]	; 0x44
90022924:	b292      	uxth	r2, r2
90022926:	9d10      	ldr	r5, [sp, #64]	; 0x40
90022928:	b289      	uxth	r1, r1
9002292a:	fb02 f301 	mul.w	r3, r2, r1
9002292e:	0112      	lsls	r2, r2, #4
90022930:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90022934:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90022938:	1ad2      	subs	r2, r2, r3
9002293a:	b289      	uxth	r1, r1
9002293c:	b292      	uxth	r2, r2
9002293e:	1a40      	subs	r0, r0, r1
90022940:	436a      	muls	r2, r5
90022942:	b280      	uxth	r0, r0
90022944:	fb0c 2c00 	mla	ip, ip, r0, r2
90022948:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
9002294a:	fb01 c102 	mla	r1, r1, r2, ip
9002294e:	9a11      	ldr	r2, [sp, #68]	; 0x44
90022950:	fb03 1302 	mla	r3, r3, r2, r1
90022954:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022958:	b1db      	cbz	r3, 90022992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002295a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9002295c:	4353      	muls	r3, r2
9002295e:	1c5a      	adds	r2, r3, #1
90022960:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90022964:	4ac6      	ldr	r2, [pc, #792]	; (90022c80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90022966:	121b      	asrs	r3, r3, #8
90022968:	6812      	ldr	r2, [r2, #0]
9002296a:	2bff      	cmp	r3, #255	; 0xff
9002296c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90022970:	f040 8099 	bne.w	90022aa6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
90022974:	0953      	lsrs	r3, r2, #5
90022976:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002297a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002297e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022982:	f02c 0c07 	bic.w	ip, ip, #7
90022986:	ea43 0c0c 	orr.w	ip, r3, ip
9002298a:	ea4c 0202 	orr.w	r2, ip, r2
9002298e:	f8a8 2000 	strh.w	r2, [r8]
90022992:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022994:	f108 0802 	add.w	r8, r8, #2
90022998:	441c      	add	r4, r3
9002299a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002299c:	441e      	add	r6, r3
9002299e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900229a0:	3b01      	subs	r3, #1
900229a2:	930e      	str	r3, [sp, #56]	; 0x38
900229a4:	e762      	b.n	9002286c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
900229a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
900229a8:	f109 0902 	add.w	r9, r9, #2
900229ac:	441c      	add	r4, r3
900229ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
900229b0:	441e      	add	r6, r3
900229b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900229b4:	3b01      	subs	r3, #1
900229b6:	9309      	str	r3, [sp, #36]	; 0x24
900229b8:	e736      	b.n	90022828 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900229ba:	d024      	beq.n	90022a06 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
900229bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
900229be:	9823      	ldr	r0, [sp, #140]	; 0x8c
900229c0:	3b01      	subs	r3, #1
900229c2:	fb00 4003 	mla	r0, r0, r3, r4
900229c6:	1400      	asrs	r0, r0, #16
900229c8:	f53f af4b 	bmi.w	90022862 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900229cc:	3901      	subs	r1, #1
900229ce:	4288      	cmp	r0, r1
900229d0:	f6bf af47 	bge.w	90022862 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900229d4:	9924      	ldr	r1, [sp, #144]	; 0x90
900229d6:	fb01 6303 	mla	r3, r1, r3, r6
900229da:	141b      	asrs	r3, r3, #16
900229dc:	f53f af41 	bmi.w	90022862 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900229e0:	3a01      	subs	r2, #1
900229e2:	4293      	cmp	r3, r2
900229e4:	f6bf af3d 	bge.w	90022862 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900229e8:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
900229ec:	46c8      	mov	r8, r9
900229ee:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
900229f2:	930e      	str	r3, [sp, #56]	; 0x38
900229f4:	f1bb 0f00 	cmp.w	fp, #0
900229f8:	f300 80b7 	bgt.w	90022b6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
900229fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
900229fe:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90022a02:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90022a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022a08:	2b00      	cmp	r3, #0
90022a0a:	f340 818e 	ble.w	90022d2a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90022a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90022a12:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022a14:	ee30 0a04 	vadd.f32	s0, s0, s8
90022a18:	ee70 0aa4 	vadd.f32	s1, s1, s9
90022a1c:	eef0 6a62 	vmov.f32	s13, s5
90022a20:	eec7 7a00 	vdiv.f32	s15, s14, s0
90022a24:	ee31 1a05 	vadd.f32	s2, s2, s10
90022a28:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022a2c:	ee16 4a90 	vmov	r4, s13
90022a30:	eef0 6a43 	vmov.f32	s13, s6
90022a34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022a38:	ee16 6a90 	vmov	r6, s13
90022a3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022a40:	ee61 7a27 	vmul.f32	s15, s2, s15
90022a44:	ee77 2a62 	vsub.f32	s5, s14, s5
90022a48:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022a4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022a50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90022a54:	ee12 2a90 	vmov	r2, s5
90022a58:	eef0 2a47 	vmov.f32	s5, s14
90022a5c:	fb92 f3f3 	sdiv	r3, r2, r3
90022a60:	ee13 2a10 	vmov	r2, s6
90022a64:	9323      	str	r3, [sp, #140]	; 0x8c
90022a66:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022a68:	eeb0 3a67 	vmov.f32	s6, s15
90022a6c:	fb92 f3f3 	sdiv	r3, r2, r3
90022a70:	9324      	str	r3, [sp, #144]	; 0x90
90022a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022a74:	9a14      	ldr	r2, [sp, #80]	; 0x50
90022a76:	3b01      	subs	r3, #1
90022a78:	930d      	str	r3, [sp, #52]	; 0x34
90022a7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
90022a7c:	bf08      	it	eq
90022a7e:	4613      	moveq	r3, r2
90022a80:	9309      	str	r3, [sp, #36]	; 0x24
90022a82:	e6c2      	b.n	9002280a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90022a84:	2900      	cmp	r1, #0
90022a86:	f43f af4d 	beq.w	90022924 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90022a8a:	eb0a 0003 	add.w	r0, sl, r3
90022a8e:	0843      	lsrs	r3, r0, #1
90022a90:	07c0      	lsls	r0, r0, #31
90022a92:	5cfb      	ldrb	r3, [r7, r3]
90022a94:	bf54      	ite	pl
90022a96:	f003 030f 	andpl.w	r3, r3, #15
90022a9a:	111b      	asrmi	r3, r3, #4
90022a9c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90022aa0:	b2db      	uxtb	r3, r3
90022aa2:	930b      	str	r3, [sp, #44]	; 0x2c
90022aa4:	e73e      	b.n	90022924 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90022aa6:	f8b8 e000 	ldrh.w	lr, [r8]
90022aaa:	fa1f fb83 	uxth.w	fp, r3
90022aae:	f3c2 4107 	ubfx	r1, r2, #16, #8
90022ab2:	43db      	mvns	r3, r3
90022ab4:	ea4f 202e 	mov.w	r0, lr, asr #8
90022ab8:	fb11 f10b 	smulbb	r1, r1, fp
90022abc:	b2db      	uxtb	r3, r3
90022abe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022ac2:	fa5f fc8c 	uxtb.w	ip, ip
90022ac6:	b2d2      	uxtb	r2, r2
90022ac8:	fb00 1003 	mla	r0, r0, r3, r1
90022acc:	ea4f 01ee 	mov.w	r1, lr, asr #3
90022ad0:	fb1c fc0b 	smulbb	ip, ip, fp
90022ad4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90022ad8:	b280      	uxth	r0, r0
90022ada:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022ade:	fb12 fb0b 	smulbb	fp, r2, fp
90022ae2:	fa5f fe8e 	uxtb.w	lr, lr
90022ae6:	fb01 cc03 	mla	ip, r1, r3, ip
90022aea:	fb0e bb03 	mla	fp, lr, r3, fp
90022aee:	1c43      	adds	r3, r0, #1
90022af0:	fa1f fc8c 	uxth.w	ip, ip
90022af4:	fa1f fb8b 	uxth.w	fp, fp
90022af8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90022afc:	f10c 0101 	add.w	r1, ip, #1
90022b00:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
90022b04:	f10b 0001 	add.w	r0, fp, #1
90022b08:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90022b0c:	eb00 201b 	add.w	r0, r0, fp, lsr #8
90022b10:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90022b14:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90022b18:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90022b1c:	4318      	orrs	r0, r3
90022b1e:	ea40 000c 	orr.w	r0, r0, ip
90022b22:	f8a8 0000 	strh.w	r0, [r8]
90022b26:	e734      	b.n	90022992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022b28:	f113 0b01 	adds.w	fp, r3, #1
90022b2c:	f53f af31 	bmi.w	90022992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022b30:	45dc      	cmp	ip, fp
90022b32:	f6ff af2e 	blt.w	90022992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022b36:	f110 0b01 	adds.w	fp, r0, #1
90022b3a:	f53f af2a 	bmi.w	90022992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022b3e:	45de      	cmp	lr, fp
90022b40:	f6ff af27 	blt.w	90022992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022b44:	9302      	str	r3, [sp, #8]
90022b46:	fa0f f38e 	sxth.w	r3, lr
90022b4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90022b4c:	9301      	str	r3, [sp, #4]
90022b4e:	fa0f f38c 	sxth.w	r3, ip
90022b52:	e9cd 0203 	strd	r0, r2, [sp, #12]
90022b56:	e9cd 1505 	strd	r1, r5, [sp, #20]
90022b5a:	9300      	str	r3, [sp, #0]
90022b5c:	463a      	mov	r2, r7
90022b5e:	4653      	mov	r3, sl
90022b60:	4641      	mov	r1, r8
90022b62:	9815      	ldr	r0, [sp, #84]	; 0x54
90022b64:	f7ff fd4c 	bl	90022600 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90022b68:	e713      	b.n	90022992 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90022b6a:	1422      	asrs	r2, r4, #16
90022b6c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90022b6e:	1433      	asrs	r3, r6, #16
90022b70:	f3c4 3103 	ubfx	r1, r4, #12, #4
90022b74:	f3c6 3003 	ubfx	r0, r6, #12, #4
90022b78:	fb05 2303 	mla	r3, r5, r3, r2
90022b7c:	085a      	lsrs	r2, r3, #1
90022b7e:	07dd      	lsls	r5, r3, #31
90022b80:	5cba      	ldrb	r2, [r7, r2]
90022b82:	bf54      	ite	pl
90022b84:	f002 020f 	andpl.w	r2, r2, #15
90022b88:	1112      	asrmi	r2, r2, #4
90022b8a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90022b8e:	b2d2      	uxtb	r2, r2
90022b90:	2900      	cmp	r1, #0
90022b92:	d077      	beq.n	90022c84 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022b94:	f103 0e01 	add.w	lr, r3, #1
90022b98:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90022b9c:	f01e 0f01 	tst.w	lr, #1
90022ba0:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022ba4:	bf0c      	ite	eq
90022ba6:	f00c 0c0f 	andeq.w	ip, ip, #15
90022baa:	ea4f 1c2c 	movne.w	ip, ip, asr #4
90022bae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022bb2:	fa5f f58c 	uxtb.w	r5, ip
90022bb6:	9512      	str	r5, [sp, #72]	; 0x48
90022bb8:	b308      	cbz	r0, 90022bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022bba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90022bbc:	442b      	add	r3, r5
90022bbe:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90022bc2:	07dd      	lsls	r5, r3, #31
90022bc4:	f103 0301 	add.w	r3, r3, #1
90022bc8:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022bcc:	bf54      	ite	pl
90022bce:	f00c 0c0f 	andpl.w	ip, ip, #15
90022bd2:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022bd6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022bda:	fa5f f58c 	uxtb.w	r5, ip
90022bde:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90022be2:	950c      	str	r5, [sp, #48]	; 0x30
90022be4:	07dd      	lsls	r5, r3, #31
90022be6:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022bea:	bf54      	ite	pl
90022bec:	f00c 0c0f 	andpl.w	ip, ip, #15
90022bf0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022bf4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022bf8:	fa5f f38c 	uxtb.w	r3, ip
90022bfc:	9313      	str	r3, [sp, #76]	; 0x4c
90022bfe:	b289      	uxth	r1, r1
90022c00:	9d12      	ldr	r5, [sp, #72]	; 0x48
90022c02:	b280      	uxth	r0, r0
90022c04:	fb01 f300 	mul.w	r3, r1, r0
90022c08:	0109      	lsls	r1, r1, #4
90022c0a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
90022c0e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
90022c12:	1ac9      	subs	r1, r1, r3
90022c14:	b280      	uxth	r0, r0
90022c16:	b289      	uxth	r1, r1
90022c18:	ebac 0c00 	sub.w	ip, ip, r0
90022c1c:	4369      	muls	r1, r5
90022c1e:	fa1f fc8c 	uxth.w	ip, ip
90022c22:	fb02 120c 	mla	r2, r2, ip, r1
90022c26:	990c      	ldr	r1, [sp, #48]	; 0x30
90022c28:	fb00 2001 	mla	r0, r0, r1, r2
90022c2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90022c2e:	fb03 0302 	mla	r3, r3, r2, r0
90022c32:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022c36:	b1d3      	cbz	r3, 90022c6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90022c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022c3a:	4353      	muls	r3, r2
90022c3c:	1c5a      	adds	r2, r3, #1
90022c3e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90022c42:	4a0f      	ldr	r2, [pc, #60]	; (90022c80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
90022c44:	121b      	asrs	r3, r3, #8
90022c46:	6812      	ldr	r2, [r2, #0]
90022c48:	2bff      	cmp	r3, #255	; 0xff
90022c4a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90022c4e:	d12d      	bne.n	90022cac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90022c50:	0953      	lsrs	r3, r2, #5
90022c52:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90022c56:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90022c5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022c5e:	f02c 0c07 	bic.w	ip, ip, #7
90022c62:	ea43 0c0c 	orr.w	ip, r3, ip
90022c66:	ea4c 0202 	orr.w	r2, ip, r2
90022c6a:	f8a8 2000 	strh.w	r2, [r8]
90022c6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90022c70:	f108 0802 	add.w	r8, r8, #2
90022c74:	f10b 3bff 	add.w	fp, fp, #4294967295
90022c78:	441c      	add	r4, r3
90022c7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022c7c:	441e      	add	r6, r3
90022c7e:	e6b9      	b.n	900229f4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90022c80:	24026464 	.word	0x24026464
90022c84:	2800      	cmp	r0, #0
90022c86:	d0ba      	beq.n	90022bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022c88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90022c8a:	442b      	add	r3, r5
90022c8c:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90022c90:	07db      	lsls	r3, r3, #31
90022c92:	f817 c00c 	ldrb.w	ip, [r7, ip]
90022c96:	bf54      	ite	pl
90022c98:	f00c 0c0f 	andpl.w	ip, ip, #15
90022c9c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022ca0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022ca4:	fa5f f38c 	uxtb.w	r3, ip
90022ca8:	930c      	str	r3, [sp, #48]	; 0x30
90022caa:	e7a8      	b.n	90022bfe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90022cac:	f8b8 e000 	ldrh.w	lr, [r8]
90022cb0:	fa1f fa83 	uxth.w	sl, r3
90022cb4:	f3c2 4107 	ubfx	r1, r2, #16, #8
90022cb8:	43db      	mvns	r3, r3
90022cba:	ea4f 202e 	mov.w	r0, lr, asr #8
90022cbe:	fb11 f10a 	smulbb	r1, r1, sl
90022cc2:	b2db      	uxtb	r3, r3
90022cc4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022cc8:	b2d2      	uxtb	r2, r2
90022cca:	fa5f fc8c 	uxtb.w	ip, ip
90022cce:	fb00 1003 	mla	r0, r0, r3, r1
90022cd2:	ea4f 01ee 	mov.w	r1, lr, asr #3
90022cd6:	fb12 f20a 	smulbb	r2, r2, sl
90022cda:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90022cde:	b280      	uxth	r0, r0
90022ce0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022ce4:	fb1c fc0a 	smulbb	ip, ip, sl
90022ce8:	fa5f fe8e 	uxtb.w	lr, lr
90022cec:	fb0e 2203 	mla	r2, lr, r3, r2
90022cf0:	fb01 cc03 	mla	ip, r1, r3, ip
90022cf4:	1c43      	adds	r3, r0, #1
90022cf6:	b292      	uxth	r2, r2
90022cf8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90022cfc:	1c51      	adds	r1, r2, #1
90022cfe:	fa1f fc8c 	uxth.w	ip, ip
90022d02:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90022d06:	eb01 2112 	add.w	r1, r1, r2, lsr #8
90022d0a:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90022d0e:	4308      	orrs	r0, r1
90022d10:	f10c 0101 	add.w	r1, ip, #1
90022d14:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90022d18:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90022d1c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90022d20:	ea40 000c 	orr.w	r0, r0, ip
90022d24:	f8a8 0000 	strh.w	r0, [r8]
90022d28:	e7a1      	b.n	90022c6e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90022d2a:	b017      	add	sp, #92	; 0x5c
90022d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90022d30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90022d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90022d34:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90022d38:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90022d3c:	2d00      	cmp	r5, #0
90022d3e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90022d42:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90022d46:	fb05 0e03 	mla	lr, r5, r3, r0
90022d4a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90022d4e:	f2c0 80b0 	blt.w	90022eb2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022d52:	45a9      	cmp	r9, r5
90022d54:	f340 80ad 	ble.w	90022eb2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90022d58:	2800      	cmp	r0, #0
90022d5a:	f2c0 80a8 	blt.w	90022eae <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90022d5e:	4580      	cmp	r8, r0
90022d60:	f340 80a5 	ble.w	90022eae <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90022d64:	ea4f 045e 	mov.w	r4, lr, lsr #1
90022d68:	f01e 0f01 	tst.w	lr, #1
90022d6c:	5d16      	ldrb	r6, [r2, r4]
90022d6e:	bf0c      	ite	eq
90022d70:	f006 060f 	andeq.w	r6, r6, #15
90022d74:	1136      	asrne	r6, r6, #4
90022d76:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90022d7a:	b2f6      	uxtb	r6, r6
90022d7c:	1c44      	adds	r4, r0, #1
90022d7e:	f100 809b 	bmi.w	90022eb8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90022d82:	45a0      	cmp	r8, r4
90022d84:	f340 8098 	ble.w	90022eb8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90022d88:	2f00      	cmp	r7, #0
90022d8a:	f000 8097 	beq.w	90022ebc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
90022d8e:	f10e 0a01 	add.w	sl, lr, #1
90022d92:	ea4f 045a 	mov.w	r4, sl, lsr #1
90022d96:	f01a 0f01 	tst.w	sl, #1
90022d9a:	5d14      	ldrb	r4, [r2, r4]
90022d9c:	bf0c      	ite	eq
90022d9e:	f004 040f 	andeq.w	r4, r4, #15
90022da2:	1124      	asrne	r4, r4, #4
90022da4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90022da8:	b2e4      	uxtb	r4, r4
90022daa:	3501      	adds	r5, #1
90022dac:	f100 808a 	bmi.w	90022ec4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90022db0:	45a9      	cmp	r9, r5
90022db2:	f340 8087 	ble.w	90022ec4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90022db6:	f1bc 0f00 	cmp.w	ip, #0
90022dba:	f000 8086 	beq.w	90022eca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
90022dbe:	2800      	cmp	r0, #0
90022dc0:	db7e      	blt.n	90022ec0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
90022dc2:	4580      	cmp	r8, r0
90022dc4:	dd7c      	ble.n	90022ec0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
90022dc6:	eb03 090e 	add.w	r9, r3, lr
90022dca:	ea4f 0559 	mov.w	r5, r9, lsr #1
90022dce:	f019 0f01 	tst.w	r9, #1
90022dd2:	5d55      	ldrb	r5, [r2, r5]
90022dd4:	bf0c      	ite	eq
90022dd6:	f005 050f 	andeq.w	r5, r5, #15
90022dda:	112d      	asrne	r5, r5, #4
90022ddc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90022de0:	b2ed      	uxtb	r5, r5
90022de2:	3001      	adds	r0, #1
90022de4:	d474      	bmi.n	90022ed0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90022de6:	4580      	cmp	r8, r0
90022de8:	dd72      	ble.n	90022ed0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
90022dea:	2f00      	cmp	r7, #0
90022dec:	d072      	beq.n	90022ed4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
90022dee:	3301      	adds	r3, #1
90022df0:	449e      	add	lr, r3
90022df2:	ea4f 035e 	mov.w	r3, lr, lsr #1
90022df6:	f01e 0f01 	tst.w	lr, #1
90022dfa:	5cd0      	ldrb	r0, [r2, r3]
90022dfc:	bf0c      	ite	eq
90022dfe:	f000 000f 	andeq.w	r0, r0, #15
90022e02:	1100      	asrne	r0, r0, #4
90022e04:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90022e08:	b2c3      	uxtb	r3, r0
90022e0a:	b2ba      	uxth	r2, r7
90022e0c:	fa1f fc8c 	uxth.w	ip, ip
90022e10:	fb02 f00c 	mul.w	r0, r2, ip
90022e14:	0112      	lsls	r2, r2, #4
90022e16:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90022e1a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90022e1e:	1a12      	subs	r2, r2, r0
90022e20:	fa1f fc8c 	uxth.w	ip, ip
90022e24:	b292      	uxth	r2, r2
90022e26:	eba7 070c 	sub.w	r7, r7, ip
90022e2a:	4362      	muls	r2, r4
90022e2c:	b2bf      	uxth	r7, r7
90022e2e:	fb06 2207 	mla	r2, r6, r7, r2
90022e32:	fb0c 2505 	mla	r5, ip, r5, r2
90022e36:	fb00 5303 	mla	r3, r0, r3, r5
90022e3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
90022e3e:	b3a3      	cbz	r3, 90022eaa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
90022e40:	4a25      	ldr	r2, [pc, #148]	; (90022ed8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
90022e42:	880e      	ldrh	r6, [r1, #0]
90022e44:	6815      	ldr	r5, [r2, #0]
90022e46:	b29a      	uxth	r2, r3
90022e48:	1234      	asrs	r4, r6, #8
90022e4a:	43db      	mvns	r3, r3
90022e4c:	f3c5 4007 	ubfx	r0, r5, #16, #8
90022e50:	f3c5 2707 	ubfx	r7, r5, #8, #8
90022e54:	b2db      	uxtb	r3, r3
90022e56:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90022e5a:	fb10 f002 	smulbb	r0, r0, r2
90022e5e:	b2ed      	uxtb	r5, r5
90022e60:	fb17 f702 	smulbb	r7, r7, r2
90022e64:	fb04 0403 	mla	r4, r4, r3, r0
90022e68:	10f0      	asrs	r0, r6, #3
90022e6a:	fb15 f202 	smulbb	r2, r5, r2
90022e6e:	00f6      	lsls	r6, r6, #3
90022e70:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90022e74:	b2a4      	uxth	r4, r4
90022e76:	b2f6      	uxtb	r6, r6
90022e78:	fb00 7003 	mla	r0, r0, r3, r7
90022e7c:	fb06 2303 	mla	r3, r6, r3, r2
90022e80:	b280      	uxth	r0, r0
90022e82:	b29a      	uxth	r2, r3
90022e84:	1c63      	adds	r3, r4, #1
90022e86:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90022e8a:	1c53      	adds	r3, r2, #1
90022e8c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022e90:	1c42      	adds	r2, r0, #1
90022e92:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90022e96:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022e9a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90022e9e:	0940      	lsrs	r0, r0, #5
90022ea0:	4323      	orrs	r3, r4
90022ea2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022ea6:	4303      	orrs	r3, r0
90022ea8:	800b      	strh	r3, [r1, #0]
90022eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90022eae:	2600      	movs	r6, #0
90022eb0:	e764      	b.n	90022d7c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
90022eb2:	2400      	movs	r4, #0
90022eb4:	4626      	mov	r6, r4
90022eb6:	e778      	b.n	90022daa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022eb8:	2400      	movs	r4, #0
90022eba:	e776      	b.n	90022daa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022ebc:	463c      	mov	r4, r7
90022ebe:	e774      	b.n	90022daa <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
90022ec0:	2500      	movs	r5, #0
90022ec2:	e78e      	b.n	90022de2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
90022ec4:	2300      	movs	r3, #0
90022ec6:	461d      	mov	r5, r3
90022ec8:	e79f      	b.n	90022e0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022eca:	4663      	mov	r3, ip
90022ecc:	4665      	mov	r5, ip
90022ece:	e79c      	b.n	90022e0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022ed0:	2300      	movs	r3, #0
90022ed2:	e79a      	b.n	90022e0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022ed4:	463b      	mov	r3, r7
90022ed6:	e798      	b.n	90022e0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
90022ed8:	24026464 	.word	0x24026464

90022edc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022ee0:	b093      	sub	sp, #76	; 0x4c
90022ee2:	461d      	mov	r5, r3
90022ee4:	920c      	str	r2, [sp, #48]	; 0x30
90022ee6:	9a21      	ldr	r2, [sp, #132]	; 0x84
90022ee8:	9011      	str	r0, [sp, #68]	; 0x44
90022eea:	9107      	str	r1, [sp, #28]
90022eec:	6850      	ldr	r0, [r2, #4]
90022eee:	6812      	ldr	r2, [r2, #0]
90022ef0:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
90022ef4:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90022ef8:	fb00 1303 	mla	r3, r0, r3, r1
90022efc:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90022f00:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022f02:	689b      	ldr	r3, [r3, #8]
90022f04:	3301      	adds	r3, #1
90022f06:	f023 0301 	bic.w	r3, r3, #1
90022f0a:	9306      	str	r3, [sp, #24]
90022f0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022f0e:	681f      	ldr	r7, [r3, #0]
90022f10:	9b07      	ldr	r3, [sp, #28]
90022f12:	2b00      	cmp	r3, #0
90022f14:	dc03      	bgt.n	90022f1e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
90022f16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022f18:	2b00      	cmp	r3, #0
90022f1a:	f340 8267 	ble.w	900233ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90022f1e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022f20:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022f24:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022f28:	1e48      	subs	r0, r1, #1
90022f2a:	f102 3cff 	add.w	ip, r2, #4294967295
90022f2e:	2d00      	cmp	r5, #0
90022f30:	f340 80b7 	ble.w	900230a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
90022f34:	ea5f 4e24 	movs.w	lr, r4, asr #16
90022f38:	ea4f 4326 	mov.w	r3, r6, asr #16
90022f3c:	d406      	bmi.n	90022f4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90022f3e:	4586      	cmp	lr, r0
90022f40:	da04      	bge.n	90022f4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90022f42:	2b00      	cmp	r3, #0
90022f44:	db02      	blt.n	90022f4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90022f46:	4563      	cmp	r3, ip
90022f48:	f2c0 80ac 	blt.w	900230a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90022f4c:	f11e 0e01 	adds.w	lr, lr, #1
90022f50:	f100 809f 	bmi.w	90023092 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022f54:	4571      	cmp	r1, lr
90022f56:	f2c0 809c 	blt.w	90023092 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022f5a:	3301      	adds	r3, #1
90022f5c:	f100 8099 	bmi.w	90023092 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022f60:	429a      	cmp	r2, r3
90022f62:	f2c0 8096 	blt.w	90023092 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90022f66:	46c8      	mov	r8, r9
90022f68:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90022f6c:	9509      	str	r5, [sp, #36]	; 0x24
90022f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90022f70:	2b00      	cmp	r3, #0
90022f72:	f340 80b5 	ble.w	900230e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
90022f76:	f3c4 3303 	ubfx	r3, r4, #12, #4
90022f7a:	1430      	asrs	r0, r6, #16
90022f7c:	f3c6 3103 	ubfx	r1, r6, #12, #4
90022f80:	9308      	str	r3, [sp, #32]
90022f82:	9b24      	ldr	r3, [sp, #144]	; 0x90
90022f84:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90022f88:	1423      	asrs	r3, r4, #16
90022f8a:	f100 813f 	bmi.w	9002320c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022f8e:	f10c 3bff 	add.w	fp, ip, #4294967295
90022f92:	455b      	cmp	r3, fp
90022f94:	f280 813a 	bge.w	9002320c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022f98:	2800      	cmp	r0, #0
90022f9a:	f2c0 8137 	blt.w	9002320c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022f9e:	f10e 3bff 	add.w	fp, lr, #4294967295
90022fa2:	4558      	cmp	r0, fp
90022fa4:	f280 8132 	bge.w	9002320c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90022fa8:	9a06      	ldr	r2, [sp, #24]
90022faa:	fb00 3302 	mla	r3, r0, r2, r3
90022fae:	0858      	lsrs	r0, r3, #1
90022fb0:	07da      	lsls	r2, r3, #31
90022fb2:	9a08      	ldr	r2, [sp, #32]
90022fb4:	f817 c000 	ldrb.w	ip, [r7, r0]
90022fb8:	bf54      	ite	pl
90022fba:	f00c 0c0f 	andpl.w	ip, ip, #15
90022fbe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90022fc2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
90022fc6:	fa5f fc8c 	uxtb.w	ip, ip
90022fca:	2a00      	cmp	r2, #0
90022fcc:	f000 80cc 	beq.w	90023168 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
90022fd0:	1c58      	adds	r0, r3, #1
90022fd2:	ea4f 0e50 	mov.w	lr, r0, lsr #1
90022fd6:	07c0      	lsls	r0, r0, #31
90022fd8:	f817 e00e 	ldrb.w	lr, [r7, lr]
90022fdc:	bf54      	ite	pl
90022fde:	f00e 0e0f 	andpl.w	lr, lr, #15
90022fe2:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
90022fe6:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
90022fea:	fa5f fe8e 	uxtb.w	lr, lr
90022fee:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90022ff2:	b1b9      	cbz	r1, 90023024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90022ff4:	4453      	add	r3, sl
90022ff6:	0858      	lsrs	r0, r3, #1
90022ff8:	07da      	lsls	r2, r3, #31
90022ffa:	5c38      	ldrb	r0, [r7, r0]
90022ffc:	bf54      	ite	pl
90022ffe:	f000 000f 	andpl.w	r0, r0, #15
90023002:	1100      	asrmi	r0, r0, #4
90023004:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90023008:	b2c0      	uxtb	r0, r0
9002300a:	900a      	str	r0, [sp, #40]	; 0x28
9002300c:	1c58      	adds	r0, r3, #1
9002300e:	0843      	lsrs	r3, r0, #1
90023010:	07c2      	lsls	r2, r0, #31
90023012:	5cfb      	ldrb	r3, [r7, r3]
90023014:	bf54      	ite	pl
90023016:	f003 030f 	andpl.w	r3, r3, #15
9002301a:	111b      	asrmi	r3, r3, #4
9002301c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90023020:	b2db      	uxtb	r3, r3
90023022:	930e      	str	r3, [sp, #56]	; 0x38
90023024:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90023028:	b289      	uxth	r1, r1
9002302a:	fb02 f301 	mul.w	r3, r2, r1
9002302e:	0112      	lsls	r2, r2, #4
90023030:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
90023034:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90023038:	1ad2      	subs	r2, r2, r3
9002303a:	b289      	uxth	r1, r1
9002303c:	b292      	uxth	r2, r2
9002303e:	1a40      	subs	r0, r0, r1
90023040:	fa1f fe80 	uxth.w	lr, r0
90023044:	980d      	ldr	r0, [sp, #52]	; 0x34
90023046:	4342      	muls	r2, r0
90023048:	fb0c 2c0e 	mla	ip, ip, lr, r2
9002304c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9002304e:	fb01 c102 	mla	r1, r1, r2, ip
90023052:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90023054:	fb03 1302 	mla	r3, r3, r2, r1
90023058:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002305c:	2bff      	cmp	r3, #255	; 0xff
9002305e:	f040 8094 	bne.w	9002318a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
90023062:	4bbf      	ldr	r3, [pc, #764]	; (90023360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90023064:	681a      	ldr	r2, [r3, #0]
90023066:	4bbf      	ldr	r3, [pc, #764]	; (90023364 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90023068:	0951      	lsrs	r1, r2, #5
9002306a:	ea03 2312 	and.w	r3, r3, r2, lsr #8
9002306e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023072:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023076:	430b      	orrs	r3, r1
90023078:	4313      	orrs	r3, r2
9002307a:	f8a8 3000 	strh.w	r3, [r8]
9002307e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90023080:	f108 0802 	add.w	r8, r8, #2
90023084:	441c      	add	r4, r3
90023086:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023088:	441e      	add	r6, r3
9002308a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002308c:	3b01      	subs	r3, #1
9002308e:	9309      	str	r3, [sp, #36]	; 0x24
90023090:	e76d      	b.n	90022f6e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90023092:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90023094:	3d01      	subs	r5, #1
90023096:	f109 0902 	add.w	r9, r9, #2
9002309a:	441c      	add	r4, r3
9002309c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002309e:	441e      	add	r6, r3
900230a0:	e745      	b.n	90022f2e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
900230a2:	d021      	beq.n	900230e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
900230a4:	1e6b      	subs	r3, r5, #1
900230a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
900230a8:	fb00 4003 	mla	r0, r0, r3, r4
900230ac:	1400      	asrs	r0, r0, #16
900230ae:	f53f af5a 	bmi.w	90022f66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900230b2:	3901      	subs	r1, #1
900230b4:	4288      	cmp	r0, r1
900230b6:	f6bf af56 	bge.w	90022f66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900230ba:	9920      	ldr	r1, [sp, #128]	; 0x80
900230bc:	fb01 6303 	mla	r3, r1, r3, r6
900230c0:	141b      	asrs	r3, r3, #16
900230c2:	f53f af50 	bmi.w	90022f66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900230c6:	3a01      	subs	r2, #1
900230c8:	4293      	cmp	r3, r2
900230ca:	f6bf af4c 	bge.w	90022f66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900230ce:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900230d2:	46a8      	mov	r8, r5
900230d4:	46ce      	mov	lr, r9
900230d6:	9308      	str	r3, [sp, #32]
900230d8:	f1b8 0f00 	cmp.w	r8, #0
900230dc:	f300 80b6 	bgt.w	9002324c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900230e0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900230e4:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900230e8:	9b07      	ldr	r3, [sp, #28]
900230ea:	2b00      	cmp	r3, #0
900230ec:	f340 817e 	ble.w	900233ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900230f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900230f4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900230f6:	ee30 0a04 	vadd.f32	s0, s0, s8
900230fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
900230fe:	eef0 6a62 	vmov.f32	s13, s5
90023102:	eec7 7a00 	vdiv.f32	s15, s14, s0
90023106:	ee31 1a05 	vadd.f32	s2, s2, s10
9002310a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002310e:	ee16 4a90 	vmov	r4, s13
90023112:	eef0 6a43 	vmov.f32	s13, s6
90023116:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002311a:	ee16 6a90 	vmov	r6, s13
9002311e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90023122:	ee61 7a27 	vmul.f32	s15, s2, s15
90023126:	ee77 2a62 	vsub.f32	s5, s14, s5
9002312a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002312e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90023132:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90023136:	ee12 2a90 	vmov	r2, s5
9002313a:	eef0 2a47 	vmov.f32	s5, s14
9002313e:	fb92 f3f3 	sdiv	r3, r2, r3
90023142:	ee13 2a10 	vmov	r2, s6
90023146:	931f      	str	r3, [sp, #124]	; 0x7c
90023148:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002314a:	eeb0 3a67 	vmov.f32	s6, s15
9002314e:	fb92 f3f3 	sdiv	r3, r2, r3
90023152:	9320      	str	r3, [sp, #128]	; 0x80
90023154:	9b07      	ldr	r3, [sp, #28]
90023156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90023158:	3b01      	subs	r3, #1
9002315a:	9307      	str	r3, [sp, #28]
9002315c:	bf08      	it	eq
9002315e:	4615      	moveq	r5, r2
90023160:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023162:	bf18      	it	ne
90023164:	461d      	movne	r5, r3
90023166:	e6d3      	b.n	90022f10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90023168:	2900      	cmp	r1, #0
9002316a:	f43f af5b 	beq.w	90023024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002316e:	eb0a 0003 	add.w	r0, sl, r3
90023172:	0843      	lsrs	r3, r0, #1
90023174:	07c0      	lsls	r0, r0, #31
90023176:	5cfb      	ldrb	r3, [r7, r3]
90023178:	bf54      	ite	pl
9002317a:	f003 030f 	andpl.w	r3, r3, #15
9002317e:	111b      	asrmi	r3, r3, #4
90023180:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90023184:	b2db      	uxtb	r3, r3
90023186:	930a      	str	r3, [sp, #40]	; 0x28
90023188:	e74c      	b.n	90023024 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
9002318a:	2b00      	cmp	r3, #0
9002318c:	f43f af77 	beq.w	9002307e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90023190:	4a73      	ldr	r2, [pc, #460]	; (90023360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90023192:	fa1f fe83 	uxth.w	lr, r3
90023196:	f8b8 c000 	ldrh.w	ip, [r8]
9002319a:	43db      	mvns	r3, r3
9002319c:	6810      	ldr	r0, [r2, #0]
9002319e:	ea4f 212c 	mov.w	r1, ip, asr #8
900231a2:	f3c0 4207 	ubfx	r2, r0, #16, #8
900231a6:	b2db      	uxtb	r3, r3
900231a8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900231ac:	f3c0 2b07 	ubfx	fp, r0, #8, #8
900231b0:	fb12 f20e 	smulbb	r2, r2, lr
900231b4:	b2c0      	uxtb	r0, r0
900231b6:	fb1b fb0e 	smulbb	fp, fp, lr
900231ba:	fb01 2103 	mla	r1, r1, r3, r2
900231be:	ea4f 02ec 	mov.w	r2, ip, asr #3
900231c2:	fb10 fe0e 	smulbb	lr, r0, lr
900231c6:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900231ca:	b289      	uxth	r1, r1
900231cc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900231d0:	fa5f fc8c 	uxtb.w	ip, ip
900231d4:	fb02 b203 	mla	r2, r2, r3, fp
900231d8:	1c48      	adds	r0, r1, #1
900231da:	fb0c e303 	mla	r3, ip, r3, lr
900231de:	b292      	uxth	r2, r2
900231e0:	b29b      	uxth	r3, r3
900231e2:	eb00 2111 	add.w	r1, r0, r1, lsr #8
900231e6:	f102 0b01 	add.w	fp, r2, #1
900231ea:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
900231ee:	1c59      	adds	r1, r3, #1
900231f0:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
900231f4:	eb01 2113 	add.w	r1, r1, r3, lsr #8
900231f8:	0952      	lsrs	r2, r2, #5
900231fa:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900231fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023202:	4301      	orrs	r1, r0
90023204:	4311      	orrs	r1, r2
90023206:	f8a8 1000 	strh.w	r1, [r8]
9002320a:	e738      	b.n	9002307e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002320c:	f113 0b01 	adds.w	fp, r3, #1
90023210:	f53f af35 	bmi.w	9002307e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90023214:	45dc      	cmp	ip, fp
90023216:	f6ff af32 	blt.w	9002307e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002321a:	f110 0b01 	adds.w	fp, r0, #1
9002321e:	f53f af2e 	bmi.w	9002307e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90023222:	45de      	cmp	lr, fp
90023224:	f6ff af2b 	blt.w	9002307e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90023228:	9302      	str	r3, [sp, #8]
9002322a:	fa0f f38e 	sxth.w	r3, lr
9002322e:	9a08      	ldr	r2, [sp, #32]
90023230:	9301      	str	r3, [sp, #4]
90023232:	fa0f f38c 	sxth.w	r3, ip
90023236:	9105      	str	r1, [sp, #20]
90023238:	4641      	mov	r1, r8
9002323a:	9300      	str	r3, [sp, #0]
9002323c:	4653      	mov	r3, sl
9002323e:	e9cd 0203 	strd	r0, r2, [sp, #12]
90023242:	463a      	mov	r2, r7
90023244:	9811      	ldr	r0, [sp, #68]	; 0x44
90023246:	f7ff fd73 	bl	90022d30 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
9002324a:	e718      	b.n	9002307e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
9002324c:	1422      	asrs	r2, r4, #16
9002324e:	9906      	ldr	r1, [sp, #24]
90023250:	1433      	asrs	r3, r6, #16
90023252:	f3c4 3003 	ubfx	r0, r4, #12, #4
90023256:	f3c6 3c03 	ubfx	ip, r6, #12, #4
9002325a:	fb01 2303 	mla	r3, r1, r3, r2
9002325e:	085a      	lsrs	r2, r3, #1
90023260:	07d9      	lsls	r1, r3, #31
90023262:	5cba      	ldrb	r2, [r7, r2]
90023264:	bf54      	ite	pl
90023266:	f002 020f 	andpl.w	r2, r2, #15
9002326a:	1112      	asrmi	r2, r2, #4
9002326c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90023270:	b2d2      	uxtb	r2, r2
90023272:	2800      	cmp	r0, #0
90023274:	d063      	beq.n	9002333e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90023276:	f103 0a01 	add.w	sl, r3, #1
9002327a:	ea4f 015a 	mov.w	r1, sl, lsr #1
9002327e:	f01a 0f01 	tst.w	sl, #1
90023282:	5c79      	ldrb	r1, [r7, r1]
90023284:	bf0c      	ite	eq
90023286:	f001 010f 	andeq.w	r1, r1, #15
9002328a:	1109      	asrne	r1, r1, #4
9002328c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90023290:	b2c9      	uxtb	r1, r1
90023292:	910f      	str	r1, [sp, #60]	; 0x3c
90023294:	f1bc 0f00 	cmp.w	ip, #0
90023298:	d01a      	beq.n	900232d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
9002329a:	9908      	ldr	r1, [sp, #32]
9002329c:	440b      	add	r3, r1
9002329e:	0859      	lsrs	r1, r3, #1
900232a0:	f013 0f01 	tst.w	r3, #1
900232a4:	f103 0301 	add.w	r3, r3, #1
900232a8:	5c79      	ldrb	r1, [r7, r1]
900232aa:	bf0c      	ite	eq
900232ac:	f001 010f 	andeq.w	r1, r1, #15
900232b0:	1109      	asrne	r1, r1, #4
900232b2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
900232b6:	b2c9      	uxtb	r1, r1
900232b8:	910b      	str	r1, [sp, #44]	; 0x2c
900232ba:	0859      	lsrs	r1, r3, #1
900232bc:	07db      	lsls	r3, r3, #31
900232be:	5c79      	ldrb	r1, [r7, r1]
900232c0:	bf54      	ite	pl
900232c2:	f001 010f 	andpl.w	r1, r1, #15
900232c6:	1109      	asrmi	r1, r1, #4
900232c8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
900232cc:	b2c9      	uxtb	r1, r1
900232ce:	9110      	str	r1, [sp, #64]	; 0x40
900232d0:	b280      	uxth	r0, r0
900232d2:	fa1f fc8c 	uxth.w	ip, ip
900232d6:	fb00 f30c 	mul.w	r3, r0, ip
900232da:	0100      	lsls	r0, r0, #4
900232dc:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
900232e0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
900232e4:	1ac0      	subs	r0, r0, r3
900232e6:	fa1f fc8c 	uxth.w	ip, ip
900232ea:	b280      	uxth	r0, r0
900232ec:	eba1 010c 	sub.w	r1, r1, ip
900232f0:	fa1f fa81 	uxth.w	sl, r1
900232f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
900232f6:	4348      	muls	r0, r1
900232f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
900232fa:	fb02 020a 	mla	r2, r2, sl, r0
900232fe:	fb0c 2c01 	mla	ip, ip, r1, r2
90023302:	9a10      	ldr	r2, [sp, #64]	; 0x40
90023304:	fb03 c302 	mla	r3, r3, r2, ip
90023308:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002330c:	2bff      	cmp	r3, #255	; 0xff
9002330e:	d12b      	bne.n	90023368 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90023310:	4b13      	ldr	r3, [pc, #76]	; (90023360 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90023312:	681a      	ldr	r2, [r3, #0]
90023314:	4b13      	ldr	r3, [pc, #76]	; (90023364 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90023316:	0951      	lsrs	r1, r2, #5
90023318:	ea03 2312 	and.w	r3, r3, r2, lsr #8
9002331c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023320:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023324:	430b      	orrs	r3, r1
90023326:	4313      	orrs	r3, r2
90023328:	f8ae 3000 	strh.w	r3, [lr]
9002332c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002332e:	f10e 0e02 	add.w	lr, lr, #2
90023332:	f108 38ff 	add.w	r8, r8, #4294967295
90023336:	441c      	add	r4, r3
90023338:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002333a:	441e      	add	r6, r3
9002333c:	e6cc      	b.n	900230d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
9002333e:	f1bc 0f00 	cmp.w	ip, #0
90023342:	d0c5      	beq.n	900232d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90023344:	9908      	ldr	r1, [sp, #32]
90023346:	440b      	add	r3, r1
90023348:	0859      	lsrs	r1, r3, #1
9002334a:	07db      	lsls	r3, r3, #31
9002334c:	5c79      	ldrb	r1, [r7, r1]
9002334e:	bf54      	ite	pl
90023350:	f001 010f 	andpl.w	r1, r1, #15
90023354:	1109      	asrmi	r1, r1, #4
90023356:	eb01 1101 	add.w	r1, r1, r1, lsl #4
9002335a:	b2c9      	uxtb	r1, r1
9002335c:	910b      	str	r1, [sp, #44]	; 0x2c
9002335e:	e7b7      	b.n	900232d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90023360:	24026464 	.word	0x24026464
90023364:	fffff800 	.word	0xfffff800
90023368:	2b00      	cmp	r3, #0
9002336a:	d0df      	beq.n	9002332c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
9002336c:	4a21      	ldr	r2, [pc, #132]	; (900233f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
9002336e:	fa1f fa83 	uxth.w	sl, r3
90023372:	f8be c000 	ldrh.w	ip, [lr]
90023376:	43db      	mvns	r3, r3
90023378:	6810      	ldr	r0, [r2, #0]
9002337a:	ea4f 212c 	mov.w	r1, ip, asr #8
9002337e:	f3c0 4207 	ubfx	r2, r0, #16, #8
90023382:	b2db      	uxtb	r3, r3
90023384:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90023388:	f3c0 2b07 	ubfx	fp, r0, #8, #8
9002338c:	fb12 f20a 	smulbb	r2, r2, sl
90023390:	b2c0      	uxtb	r0, r0
90023392:	fb1b fb0a 	smulbb	fp, fp, sl
90023396:	fb01 2103 	mla	r1, r1, r3, r2
9002339a:	ea4f 02ec 	mov.w	r2, ip, asr #3
9002339e:	fb10 f00a 	smulbb	r0, r0, sl
900233a2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
900233a6:	b289      	uxth	r1, r1
900233a8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
900233ac:	fa5f fc8c 	uxtb.w	ip, ip
900233b0:	fb02 b203 	mla	r2, r2, r3, fp
900233b4:	fb0c 0003 	mla	r0, ip, r3, r0
900233b8:	1c4b      	adds	r3, r1, #1
900233ba:	b292      	uxth	r2, r2
900233bc:	b280      	uxth	r0, r0
900233be:	eb03 2111 	add.w	r1, r3, r1, lsr #8
900233c2:	f100 0b01 	add.w	fp, r0, #1
900233c6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
900233ca:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
900233ce:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
900233d2:	ea4b 0101 	orr.w	r1, fp, r1
900233d6:	f102 0b01 	add.w	fp, r2, #1
900233da:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
900233de:	0952      	lsrs	r2, r2, #5
900233e0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900233e4:	4311      	orrs	r1, r2
900233e6:	f8ae 1000 	strh.w	r1, [lr]
900233ea:	e79f      	b.n	9002332c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
900233ec:	b013      	add	sp, #76	; 0x4c
900233ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900233f2:	bf00      	nop
900233f4:	24026464 	.word	0x24026464

900233f8 <CRC_Lock>:
900233f8:	4a20      	ldr	r2, [pc, #128]	; (9002347c <CRC_Lock+0x84>)
900233fa:	b530      	push	{r4, r5, lr}
900233fc:	6813      	ldr	r3, [r2, #0]
900233fe:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90023402:	f24c 2540 	movw	r5, #49728	; 0xc240
90023406:	f023 0301 	bic.w	r3, r3, #1
9002340a:	6013      	str	r3, [r2, #0]
9002340c:	4b1c      	ldr	r3, [pc, #112]	; (90023480 <CRC_Lock+0x88>)
9002340e:	681a      	ldr	r2, [r3, #0]
90023410:	4022      	ands	r2, r4
90023412:	42aa      	cmp	r2, r5
90023414:	d005      	beq.n	90023422 <CRC_Lock+0x2a>
90023416:	681b      	ldr	r3, [r3, #0]
90023418:	f24c 2270 	movw	r2, #49776	; 0xc270
9002341c:	4023      	ands	r3, r4
9002341e:	4293      	cmp	r3, r2
90023420:	d124      	bne.n	9002346c <CRC_Lock+0x74>
90023422:	4b18      	ldr	r3, [pc, #96]	; (90023484 <CRC_Lock+0x8c>)
90023424:	681b      	ldr	r3, [r3, #0]
90023426:	bb0b      	cbnz	r3, 9002346c <CRC_Lock+0x74>
90023428:	4b17      	ldr	r3, [pc, #92]	; (90023488 <CRC_Lock+0x90>)
9002342a:	681a      	ldr	r2, [r3, #0]
9002342c:	f3c2 020b 	ubfx	r2, r2, #0, #12
90023430:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
90023434:	d00d      	beq.n	90023452 <CRC_Lock+0x5a>
90023436:	681a      	ldr	r2, [r3, #0]
90023438:	f240 4483 	movw	r4, #1155	; 0x483
9002343c:	f3c2 020b 	ubfx	r2, r2, #0, #12
90023440:	42a2      	cmp	r2, r4
90023442:	d006      	beq.n	90023452 <CRC_Lock+0x5a>
90023444:	681b      	ldr	r3, [r3, #0]
90023446:	f240 4285 	movw	r2, #1157	; 0x485
9002344a:	f3c3 030b 	ubfx	r3, r3, #0, #12
9002344e:	4293      	cmp	r3, r2
90023450:	d10c      	bne.n	9002346c <CRC_Lock+0x74>
90023452:	4b0e      	ldr	r3, [pc, #56]	; (9002348c <CRC_Lock+0x94>)
90023454:	2201      	movs	r2, #1
90023456:	601a      	str	r2, [r3, #0]
90023458:	681a      	ldr	r2, [r3, #0]
9002345a:	2a00      	cmp	r2, #0
9002345c:	d1fc      	bne.n	90023458 <CRC_Lock+0x60>
9002345e:	4b0c      	ldr	r3, [pc, #48]	; (90023490 <CRC_Lock+0x98>)
90023460:	6018      	str	r0, [r3, #0]
90023462:	6818      	ldr	r0, [r3, #0]
90023464:	1a43      	subs	r3, r0, r1
90023466:	4258      	negs	r0, r3
90023468:	4158      	adcs	r0, r3
9002346a:	bd30      	pop	{r4, r5, pc}
9002346c:	4b09      	ldr	r3, [pc, #36]	; (90023494 <CRC_Lock+0x9c>)
9002346e:	2201      	movs	r2, #1
90023470:	601a      	str	r2, [r3, #0]
90023472:	681a      	ldr	r2, [r3, #0]
90023474:	2a00      	cmp	r2, #0
90023476:	d1fc      	bne.n	90023472 <CRC_Lock+0x7a>
90023478:	4b07      	ldr	r3, [pc, #28]	; (90023498 <CRC_Lock+0xa0>)
9002347a:	e7f1      	b.n	90023460 <CRC_Lock+0x68>
9002347c:	e0002000 	.word	0xe0002000
90023480:	e000ed00 	.word	0xe000ed00
90023484:	e0042000 	.word	0xe0042000
90023488:	5c001000 	.word	0x5c001000
9002348c:	58024c08 	.word	0x58024c08
90023490:	58024c00 	.word	0x58024c00
90023494:	40023008 	.word	0x40023008
90023498:	40023000 	.word	0x40023000

9002349c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
9002349c:	6101      	str	r1, [r0, #16]
9002349e:	4770      	bx	lr

900234a0 <_ZN8touchgfx8Gestures4tickEv>:
900234a0:	7b83      	ldrb	r3, [r0, #14]
900234a2:	b14b      	cbz	r3, 900234b8 <_ZN8touchgfx8Gestures4tickEv+0x18>
900234a4:	8903      	ldrh	r3, [r0, #8]
900234a6:	3301      	adds	r3, #1
900234a8:	b29b      	uxth	r3, r3
900234aa:	2b07      	cmp	r3, #7
900234ac:	8103      	strh	r3, [r0, #8]
900234ae:	bf81      	itttt	hi
900234b0:	2300      	movhi	r3, #0
900234b2:	8143      	strhhi	r3, [r0, #10]
900234b4:	8183      	strhhi	r3, [r0, #12]
900234b6:	7383      	strbhi	r3, [r0, #14]
900234b8:	4770      	bx	lr
	...

900234bc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
900234bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
900234c0:	4698      	mov	r8, r3
900234c2:	8883      	ldrh	r3, [r0, #4]
900234c4:	4604      	mov	r4, r0
900234c6:	4617      	mov	r7, r2
900234c8:	f8ad 3006 	strh.w	r3, [sp, #6]
900234cc:	eba8 0303 	sub.w	r3, r8, r3
900234d0:	4a19      	ldr	r2, [pc, #100]	; (90023538 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
900234d2:	460e      	mov	r6, r1
900234d4:	b21b      	sxth	r3, r3
900234d6:	88c1      	ldrh	r1, [r0, #6]
900234d8:	9200      	str	r2, [sp, #0]
900234da:	2000      	movs	r0, #0
900234dc:	2b00      	cmp	r3, #0
900234de:	8aa2      	ldrh	r2, [r4, #20]
900234e0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
900234e4:	bfb8      	it	lt
900234e6:	425b      	neglt	r3, r3
900234e8:	f88d 0004 	strb.w	r0, [sp, #4]
900234ec:	f8ad 1008 	strh.w	r1, [sp, #8]
900234f0:	b21b      	sxth	r3, r3
900234f2:	f8ad 800a 	strh.w	r8, [sp, #10]
900234f6:	f8ad 500c 	strh.w	r5, [sp, #12]
900234fa:	4293      	cmp	r3, r2
900234fc:	dc07      	bgt.n	9002350e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
900234fe:	1a69      	subs	r1, r5, r1
90023500:	b209      	sxth	r1, r1
90023502:	2900      	cmp	r1, #0
90023504:	bfb8      	it	lt
90023506:	4249      	neglt	r1, r1
90023508:	b209      	sxth	r1, r1
9002350a:	428a      	cmp	r2, r1
9002350c:	da10      	bge.n	90023530 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
9002350e:	6920      	ldr	r0, [r4, #16]
90023510:	4669      	mov	r1, sp
90023512:	eba8 0606 	sub.w	r6, r8, r6
90023516:	1bef      	subs	r7, r5, r7
90023518:	6803      	ldr	r3, [r0, #0]
9002351a:	685b      	ldr	r3, [r3, #4]
9002351c:	4798      	blx	r3
9002351e:	2300      	movs	r3, #0
90023520:	2001      	movs	r0, #1
90023522:	8166      	strh	r6, [r4, #10]
90023524:	8123      	strh	r3, [r4, #8]
90023526:	81a7      	strh	r7, [r4, #12]
90023528:	f8a4 8004 	strh.w	r8, [r4, #4]
9002352c:	80e5      	strh	r5, [r4, #6]
9002352e:	73a0      	strb	r0, [r4, #14]
90023530:	b004      	add	sp, #16
90023532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90023536:	bf00      	nop
90023538:	9002785c 	.word	0x9002785c

9002353c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
9002353c:	b5f0      	push	{r4, r5, r6, r7, lr}
9002353e:	461e      	mov	r6, r3
90023540:	1e4b      	subs	r3, r1, #1
90023542:	b085      	sub	sp, #20
90023544:	4604      	mov	r4, r0
90023546:	2b01      	cmp	r3, #1
90023548:	460d      	mov	r5, r1
9002354a:	4617      	mov	r7, r2
9002354c:	d84b      	bhi.n	900235e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
9002354e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90023552:	1cd3      	adds	r3, r2, #3
90023554:	b29b      	uxth	r3, r3
90023556:	2b06      	cmp	r3, #6
90023558:	d916      	bls.n	90023588 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
9002355a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 900235fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
9002355e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90023562:	f8cd c004 	str.w	ip, [sp, #4]
90023566:	f04f 0c00 	mov.w	ip, #0
9002356a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
9002356e:	6900      	ldr	r0, [r0, #16]
90023570:	f8ad 100c 	strh.w	r1, [sp, #12]
90023574:	a901      	add	r1, sp, #4
90023576:	f88d c008 	strb.w	ip, [sp, #8]
9002357a:	f8ad 200a 	strh.w	r2, [sp, #10]
9002357e:	f8ad 300e 	strh.w	r3, [sp, #14]
90023582:	6803      	ldr	r3, [r0, #0]
90023584:	689b      	ldr	r3, [r3, #8]
90023586:	4798      	blx	r3
90023588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
9002358c:	1cd3      	adds	r3, r2, #3
9002358e:	b29b      	uxth	r3, r3
90023590:	2b06      	cmp	r3, #6
90023592:	d916      	bls.n	900235c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90023594:	f8df c064 	ldr.w	ip, [pc, #100]	; 900235fc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90023598:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9002359c:	f8cd c004 	str.w	ip, [sp, #4]
900235a0:	f04f 0c01 	mov.w	ip, #1
900235a4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900235a8:	6920      	ldr	r0, [r4, #16]
900235aa:	f8ad 100c 	strh.w	r1, [sp, #12]
900235ae:	a901      	add	r1, sp, #4
900235b0:	f88d c008 	strb.w	ip, [sp, #8]
900235b4:	f8ad 200a 	strh.w	r2, [sp, #10]
900235b8:	f8ad 300e 	strh.w	r3, [sp, #14]
900235bc:	6803      	ldr	r3, [r0, #0]
900235be:	689b      	ldr	r3, [r3, #8]
900235c0:	4798      	blx	r3
900235c2:	4b0d      	ldr	r3, [pc, #52]	; (900235f8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
900235c4:	a901      	add	r1, sp, #4
900235c6:	6920      	ldr	r0, [r4, #16]
900235c8:	9301      	str	r3, [sp, #4]
900235ca:	2300      	movs	r3, #0
900235cc:	f88d 5008 	strb.w	r5, [sp, #8]
900235d0:	f8ad 700a 	strh.w	r7, [sp, #10]
900235d4:	f8ad 600c 	strh.w	r6, [sp, #12]
900235d8:	f8ad 300e 	strh.w	r3, [sp, #14]
900235dc:	6803      	ldr	r3, [r0, #0]
900235de:	681b      	ldr	r3, [r3, #0]
900235e0:	4798      	blx	r3
900235e2:	b005      	add	sp, #20
900235e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
900235e6:	2900      	cmp	r1, #0
900235e8:	d1eb      	bne.n	900235c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900235ea:	80a2      	strh	r2, [r4, #4]
900235ec:	80c6      	strh	r6, [r0, #6]
900235ee:	60a1      	str	r1, [r4, #8]
900235f0:	81a1      	strh	r1, [r4, #12]
900235f2:	73a1      	strb	r1, [r4, #14]
900235f4:	e7e5      	b.n	900235c2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
900235f6:	bf00      	nop
900235f8:	90027848 	.word	0x90027848
900235fc:	90027870 	.word	0x90027870

90023600 <__aeabi_atexit>:
90023600:	460b      	mov	r3, r1
90023602:	4601      	mov	r1, r0
90023604:	4618      	mov	r0, r3
90023606:	f000 b90f 	b.w	90023828 <__cxa_atexit>

9002360a <_ZdlPvj>:
9002360a:	f000 b812 	b.w	90023632 <_ZdlPv>

9002360e <__cxa_guard_acquire>:
9002360e:	6803      	ldr	r3, [r0, #0]
90023610:	07db      	lsls	r3, r3, #31
90023612:	d406      	bmi.n	90023622 <__cxa_guard_acquire+0x14>
90023614:	7843      	ldrb	r3, [r0, #1]
90023616:	b103      	cbz	r3, 9002361a <__cxa_guard_acquire+0xc>
90023618:	deff      	udf	#255	; 0xff
9002361a:	2301      	movs	r3, #1
9002361c:	7043      	strb	r3, [r0, #1]
9002361e:	4618      	mov	r0, r3
90023620:	4770      	bx	lr
90023622:	2000      	movs	r0, #0
90023624:	4770      	bx	lr

90023626 <__cxa_guard_release>:
90023626:	2301      	movs	r3, #1
90023628:	6003      	str	r3, [r0, #0]
9002362a:	4770      	bx	lr

9002362c <__cxa_pure_virtual>:
9002362c:	b508      	push	{r3, lr}
9002362e:	f000 f80f 	bl	90023650 <_ZSt9terminatev>

90023632 <_ZdlPv>:
90023632:	f000 b845 	b.w	900236c0 <free>

90023636 <_ZN10__cxxabiv111__terminateEPFvvE>:
90023636:	b508      	push	{r3, lr}
90023638:	4780      	blx	r0
9002363a:	f000 f80e 	bl	9002365a <abort>
	...

90023640 <_ZSt13get_terminatev>:
90023640:	4b02      	ldr	r3, [pc, #8]	; (9002364c <_ZSt13get_terminatev+0xc>)
90023642:	6818      	ldr	r0, [r3, #0]
90023644:	f3bf 8f5b 	dmb	ish
90023648:	4770      	bx	lr
9002364a:	bf00      	nop
9002364c:	240000e0 	.word	0x240000e0

90023650 <_ZSt9terminatev>:
90023650:	b508      	push	{r3, lr}
90023652:	f7ff fff5 	bl	90023640 <_ZSt13get_terminatev>
90023656:	f7ff ffee 	bl	90023636 <_ZN10__cxxabiv111__terminateEPFvvE>

9002365a <abort>:
9002365a:	b508      	push	{r3, lr}
9002365c:	2006      	movs	r0, #6
9002365e:	f000 fadf 	bl	90023c20 <raise>
90023662:	2001      	movs	r0, #1
90023664:	f7e1 fb40 	bl	90004ce8 <_exit>

90023668 <__assert_func>:
90023668:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9002366a:	4614      	mov	r4, r2
9002366c:	461a      	mov	r2, r3
9002366e:	4b09      	ldr	r3, [pc, #36]	; (90023694 <__assert_func+0x2c>)
90023670:	681b      	ldr	r3, [r3, #0]
90023672:	4605      	mov	r5, r0
90023674:	68d8      	ldr	r0, [r3, #12]
90023676:	b14c      	cbz	r4, 9002368c <__assert_func+0x24>
90023678:	4b07      	ldr	r3, [pc, #28]	; (90023698 <__assert_func+0x30>)
9002367a:	9100      	str	r1, [sp, #0]
9002367c:	e9cd 3401 	strd	r3, r4, [sp, #4]
90023680:	4906      	ldr	r1, [pc, #24]	; (9002369c <__assert_func+0x34>)
90023682:	462b      	mov	r3, r5
90023684:	f000 f982 	bl	9002398c <fiprintf>
90023688:	f7ff ffe7 	bl	9002365a <abort>
9002368c:	4b04      	ldr	r3, [pc, #16]	; (900236a0 <__assert_func+0x38>)
9002368e:	461c      	mov	r4, r3
90023690:	e7f3      	b.n	9002367a <__assert_func+0x12>
90023692:	bf00      	nop
90023694:	2400013c 	.word	0x2400013c
90023698:	90027b38 	.word	0x90027b38
9002369c:	90027b45 	.word	0x90027b45
900236a0:	90027b73 	.word	0x90027b73

900236a4 <atexit>:
900236a4:	2300      	movs	r3, #0
900236a6:	4601      	mov	r1, r0
900236a8:	461a      	mov	r2, r3
900236aa:	4618      	mov	r0, r3
900236ac:	f000 bb66 	b.w	90023d7c <__register_exitproc>

900236b0 <malloc>:
900236b0:	4b02      	ldr	r3, [pc, #8]	; (900236bc <malloc+0xc>)
900236b2:	4601      	mov	r1, r0
900236b4:	6818      	ldr	r0, [r3, #0]
900236b6:	f000 b82b 	b.w	90023710 <_malloc_r>
900236ba:	bf00      	nop
900236bc:	2400013c 	.word	0x2400013c

900236c0 <free>:
900236c0:	4b02      	ldr	r3, [pc, #8]	; (900236cc <free+0xc>)
900236c2:	4601      	mov	r1, r0
900236c4:	6818      	ldr	r0, [r3, #0]
900236c6:	f000 bbb7 	b.w	90023e38 <_free_r>
900236ca:	bf00      	nop
900236cc:	2400013c 	.word	0x2400013c

900236d0 <sbrk_aligned>:
900236d0:	b570      	push	{r4, r5, r6, lr}
900236d2:	4e0e      	ldr	r6, [pc, #56]	; (9002370c <sbrk_aligned+0x3c>)
900236d4:	460c      	mov	r4, r1
900236d6:	6831      	ldr	r1, [r6, #0]
900236d8:	4605      	mov	r5, r0
900236da:	b911      	cbnz	r1, 900236e2 <sbrk_aligned+0x12>
900236dc:	f000 faf0 	bl	90023cc0 <_sbrk_r>
900236e0:	6030      	str	r0, [r6, #0]
900236e2:	4621      	mov	r1, r4
900236e4:	4628      	mov	r0, r5
900236e6:	f000 faeb 	bl	90023cc0 <_sbrk_r>
900236ea:	1c43      	adds	r3, r0, #1
900236ec:	d00a      	beq.n	90023704 <sbrk_aligned+0x34>
900236ee:	1cc4      	adds	r4, r0, #3
900236f0:	f024 0403 	bic.w	r4, r4, #3
900236f4:	42a0      	cmp	r0, r4
900236f6:	d007      	beq.n	90023708 <sbrk_aligned+0x38>
900236f8:	1a21      	subs	r1, r4, r0
900236fa:	4628      	mov	r0, r5
900236fc:	f000 fae0 	bl	90023cc0 <_sbrk_r>
90023700:	3001      	adds	r0, #1
90023702:	d101      	bne.n	90023708 <sbrk_aligned+0x38>
90023704:	f04f 34ff 	mov.w	r4, #4294967295
90023708:	4620      	mov	r0, r4
9002370a:	bd70      	pop	{r4, r5, r6, pc}
9002370c:	2402655c 	.word	0x2402655c

90023710 <_malloc_r>:
90023710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90023714:	1ccd      	adds	r5, r1, #3
90023716:	f025 0503 	bic.w	r5, r5, #3
9002371a:	3508      	adds	r5, #8
9002371c:	2d0c      	cmp	r5, #12
9002371e:	bf38      	it	cc
90023720:	250c      	movcc	r5, #12
90023722:	2d00      	cmp	r5, #0
90023724:	4607      	mov	r7, r0
90023726:	db01      	blt.n	9002372c <_malloc_r+0x1c>
90023728:	42a9      	cmp	r1, r5
9002372a:	d905      	bls.n	90023738 <_malloc_r+0x28>
9002372c:	230c      	movs	r3, #12
9002372e:	603b      	str	r3, [r7, #0]
90023730:	2600      	movs	r6, #0
90023732:	4630      	mov	r0, r6
90023734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90023738:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 9002380c <_malloc_r+0xfc>
9002373c:	f000 f868 	bl	90023810 <__malloc_lock>
90023740:	f8d8 3000 	ldr.w	r3, [r8]
90023744:	461c      	mov	r4, r3
90023746:	bb5c      	cbnz	r4, 900237a0 <_malloc_r+0x90>
90023748:	4629      	mov	r1, r5
9002374a:	4638      	mov	r0, r7
9002374c:	f7ff ffc0 	bl	900236d0 <sbrk_aligned>
90023750:	1c43      	adds	r3, r0, #1
90023752:	4604      	mov	r4, r0
90023754:	d155      	bne.n	90023802 <_malloc_r+0xf2>
90023756:	f8d8 4000 	ldr.w	r4, [r8]
9002375a:	4626      	mov	r6, r4
9002375c:	2e00      	cmp	r6, #0
9002375e:	d145      	bne.n	900237ec <_malloc_r+0xdc>
90023760:	2c00      	cmp	r4, #0
90023762:	d048      	beq.n	900237f6 <_malloc_r+0xe6>
90023764:	6823      	ldr	r3, [r4, #0]
90023766:	4631      	mov	r1, r6
90023768:	4638      	mov	r0, r7
9002376a:	eb04 0903 	add.w	r9, r4, r3
9002376e:	f000 faa7 	bl	90023cc0 <_sbrk_r>
90023772:	4581      	cmp	r9, r0
90023774:	d13f      	bne.n	900237f6 <_malloc_r+0xe6>
90023776:	6821      	ldr	r1, [r4, #0]
90023778:	1a6d      	subs	r5, r5, r1
9002377a:	4629      	mov	r1, r5
9002377c:	4638      	mov	r0, r7
9002377e:	f7ff ffa7 	bl	900236d0 <sbrk_aligned>
90023782:	3001      	adds	r0, #1
90023784:	d037      	beq.n	900237f6 <_malloc_r+0xe6>
90023786:	6823      	ldr	r3, [r4, #0]
90023788:	442b      	add	r3, r5
9002378a:	6023      	str	r3, [r4, #0]
9002378c:	f8d8 3000 	ldr.w	r3, [r8]
90023790:	2b00      	cmp	r3, #0
90023792:	d038      	beq.n	90023806 <_malloc_r+0xf6>
90023794:	685a      	ldr	r2, [r3, #4]
90023796:	42a2      	cmp	r2, r4
90023798:	d12b      	bne.n	900237f2 <_malloc_r+0xe2>
9002379a:	2200      	movs	r2, #0
9002379c:	605a      	str	r2, [r3, #4]
9002379e:	e00f      	b.n	900237c0 <_malloc_r+0xb0>
900237a0:	6822      	ldr	r2, [r4, #0]
900237a2:	1b52      	subs	r2, r2, r5
900237a4:	d41f      	bmi.n	900237e6 <_malloc_r+0xd6>
900237a6:	2a0b      	cmp	r2, #11
900237a8:	d917      	bls.n	900237da <_malloc_r+0xca>
900237aa:	1961      	adds	r1, r4, r5
900237ac:	42a3      	cmp	r3, r4
900237ae:	6025      	str	r5, [r4, #0]
900237b0:	bf18      	it	ne
900237b2:	6059      	strne	r1, [r3, #4]
900237b4:	6863      	ldr	r3, [r4, #4]
900237b6:	bf08      	it	eq
900237b8:	f8c8 1000 	streq.w	r1, [r8]
900237bc:	5162      	str	r2, [r4, r5]
900237be:	604b      	str	r3, [r1, #4]
900237c0:	4638      	mov	r0, r7
900237c2:	f104 060b 	add.w	r6, r4, #11
900237c6:	f000 f829 	bl	9002381c <__malloc_unlock>
900237ca:	f026 0607 	bic.w	r6, r6, #7
900237ce:	1d23      	adds	r3, r4, #4
900237d0:	1af2      	subs	r2, r6, r3
900237d2:	d0ae      	beq.n	90023732 <_malloc_r+0x22>
900237d4:	1b9b      	subs	r3, r3, r6
900237d6:	50a3      	str	r3, [r4, r2]
900237d8:	e7ab      	b.n	90023732 <_malloc_r+0x22>
900237da:	42a3      	cmp	r3, r4
900237dc:	6862      	ldr	r2, [r4, #4]
900237de:	d1dd      	bne.n	9002379c <_malloc_r+0x8c>
900237e0:	f8c8 2000 	str.w	r2, [r8]
900237e4:	e7ec      	b.n	900237c0 <_malloc_r+0xb0>
900237e6:	4623      	mov	r3, r4
900237e8:	6864      	ldr	r4, [r4, #4]
900237ea:	e7ac      	b.n	90023746 <_malloc_r+0x36>
900237ec:	4634      	mov	r4, r6
900237ee:	6876      	ldr	r6, [r6, #4]
900237f0:	e7b4      	b.n	9002375c <_malloc_r+0x4c>
900237f2:	4613      	mov	r3, r2
900237f4:	e7cc      	b.n	90023790 <_malloc_r+0x80>
900237f6:	230c      	movs	r3, #12
900237f8:	603b      	str	r3, [r7, #0]
900237fa:	4638      	mov	r0, r7
900237fc:	f000 f80e 	bl	9002381c <__malloc_unlock>
90023800:	e797      	b.n	90023732 <_malloc_r+0x22>
90023802:	6025      	str	r5, [r4, #0]
90023804:	e7dc      	b.n	900237c0 <_malloc_r+0xb0>
90023806:	605b      	str	r3, [r3, #4]
90023808:	deff      	udf	#255	; 0xff
9002380a:	bf00      	nop
9002380c:	24026558 	.word	0x24026558

90023810 <__malloc_lock>:
90023810:	4801      	ldr	r0, [pc, #4]	; (90023818 <__malloc_lock+0x8>)
90023812:	f000 baa2 	b.w	90023d5a <__retarget_lock_acquire_recursive>
90023816:	bf00      	nop
90023818:	240266a1 	.word	0x240266a1

9002381c <__malloc_unlock>:
9002381c:	4801      	ldr	r0, [pc, #4]	; (90023824 <__malloc_unlock+0x8>)
9002381e:	f000 ba9d 	b.w	90023d5c <__retarget_lock_release_recursive>
90023822:	bf00      	nop
90023824:	240266a1 	.word	0x240266a1

90023828 <__cxa_atexit>:
90023828:	b510      	push	{r4, lr}
9002382a:	4c05      	ldr	r4, [pc, #20]	; (90023840 <__cxa_atexit+0x18>)
9002382c:	4613      	mov	r3, r2
9002382e:	b12c      	cbz	r4, 9002383c <__cxa_atexit+0x14>
90023830:	460a      	mov	r2, r1
90023832:	4601      	mov	r1, r0
90023834:	2002      	movs	r0, #2
90023836:	f000 faa1 	bl	90023d7c <__register_exitproc>
9002383a:	bd10      	pop	{r4, pc}
9002383c:	4620      	mov	r0, r4
9002383e:	e7fc      	b.n	9002383a <__cxa_atexit+0x12>
90023840:	90023d7d 	.word	0x90023d7d

90023844 <std>:
90023844:	2300      	movs	r3, #0
90023846:	b510      	push	{r4, lr}
90023848:	4604      	mov	r4, r0
9002384a:	e9c0 3300 	strd	r3, r3, [r0]
9002384e:	e9c0 3304 	strd	r3, r3, [r0, #16]
90023852:	6083      	str	r3, [r0, #8]
90023854:	8181      	strh	r1, [r0, #12]
90023856:	6643      	str	r3, [r0, #100]	; 0x64
90023858:	81c2      	strh	r2, [r0, #14]
9002385a:	6183      	str	r3, [r0, #24]
9002385c:	4619      	mov	r1, r3
9002385e:	2208      	movs	r2, #8
90023860:	305c      	adds	r0, #92	; 0x5c
90023862:	f000 f99b 	bl	90023b9c <memset>
90023866:	4b0d      	ldr	r3, [pc, #52]	; (9002389c <std+0x58>)
90023868:	6263      	str	r3, [r4, #36]	; 0x24
9002386a:	4b0d      	ldr	r3, [pc, #52]	; (900238a0 <std+0x5c>)
9002386c:	62a3      	str	r3, [r4, #40]	; 0x28
9002386e:	4b0d      	ldr	r3, [pc, #52]	; (900238a4 <std+0x60>)
90023870:	62e3      	str	r3, [r4, #44]	; 0x2c
90023872:	4b0d      	ldr	r3, [pc, #52]	; (900238a8 <std+0x64>)
90023874:	6323      	str	r3, [r4, #48]	; 0x30
90023876:	4b0d      	ldr	r3, [pc, #52]	; (900238ac <std+0x68>)
90023878:	6224      	str	r4, [r4, #32]
9002387a:	429c      	cmp	r4, r3
9002387c:	d006      	beq.n	9002388c <std+0x48>
9002387e:	f103 0268 	add.w	r2, r3, #104	; 0x68
90023882:	4294      	cmp	r4, r2
90023884:	d002      	beq.n	9002388c <std+0x48>
90023886:	33d0      	adds	r3, #208	; 0xd0
90023888:	429c      	cmp	r4, r3
9002388a:	d105      	bne.n	90023898 <std+0x54>
9002388c:	f104 0058 	add.w	r0, r4, #88	; 0x58
90023890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90023894:	f000 ba60 	b.w	90023d58 <__retarget_lock_init_recursive>
90023898:	bd10      	pop	{r4, pc}
9002389a:	bf00      	nop
9002389c:	900239ed 	.word	0x900239ed
900238a0:	90023a0f 	.word	0x90023a0f
900238a4:	90023a47 	.word	0x90023a47
900238a8:	90023a6b 	.word	0x90023a6b
900238ac:	24026560 	.word	0x24026560

900238b0 <stdio_exit_handler>:
900238b0:	4a02      	ldr	r2, [pc, #8]	; (900238bc <stdio_exit_handler+0xc>)
900238b2:	4903      	ldr	r1, [pc, #12]	; (900238c0 <stdio_exit_handler+0x10>)
900238b4:	4803      	ldr	r0, [pc, #12]	; (900238c4 <stdio_exit_handler+0x14>)
900238b6:	f000 b87b 	b.w	900239b0 <_fwalk_sglue>
900238ba:	bf00      	nop
900238bc:	240000e4 	.word	0x240000e4
900238c0:	90024585 	.word	0x90024585
900238c4:	240000f0 	.word	0x240000f0

900238c8 <cleanup_stdio>:
900238c8:	6841      	ldr	r1, [r0, #4]
900238ca:	4b0c      	ldr	r3, [pc, #48]	; (900238fc <cleanup_stdio+0x34>)
900238cc:	4299      	cmp	r1, r3
900238ce:	b510      	push	{r4, lr}
900238d0:	4604      	mov	r4, r0
900238d2:	d001      	beq.n	900238d8 <cleanup_stdio+0x10>
900238d4:	f000 fe56 	bl	90024584 <_fflush_r>
900238d8:	68a1      	ldr	r1, [r4, #8]
900238da:	4b09      	ldr	r3, [pc, #36]	; (90023900 <cleanup_stdio+0x38>)
900238dc:	4299      	cmp	r1, r3
900238de:	d002      	beq.n	900238e6 <cleanup_stdio+0x1e>
900238e0:	4620      	mov	r0, r4
900238e2:	f000 fe4f 	bl	90024584 <_fflush_r>
900238e6:	68e1      	ldr	r1, [r4, #12]
900238e8:	4b06      	ldr	r3, [pc, #24]	; (90023904 <cleanup_stdio+0x3c>)
900238ea:	4299      	cmp	r1, r3
900238ec:	d004      	beq.n	900238f8 <cleanup_stdio+0x30>
900238ee:	4620      	mov	r0, r4
900238f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900238f4:	f000 be46 	b.w	90024584 <_fflush_r>
900238f8:	bd10      	pop	{r4, pc}
900238fa:	bf00      	nop
900238fc:	24026560 	.word	0x24026560
90023900:	240265c8 	.word	0x240265c8
90023904:	24026630 	.word	0x24026630

90023908 <global_stdio_init.part.0>:
90023908:	b510      	push	{r4, lr}
9002390a:	4b0b      	ldr	r3, [pc, #44]	; (90023938 <global_stdio_init.part.0+0x30>)
9002390c:	4c0b      	ldr	r4, [pc, #44]	; (9002393c <global_stdio_init.part.0+0x34>)
9002390e:	4a0c      	ldr	r2, [pc, #48]	; (90023940 <global_stdio_init.part.0+0x38>)
90023910:	601a      	str	r2, [r3, #0]
90023912:	4620      	mov	r0, r4
90023914:	2200      	movs	r2, #0
90023916:	2104      	movs	r1, #4
90023918:	f7ff ff94 	bl	90023844 <std>
9002391c:	f104 0068 	add.w	r0, r4, #104	; 0x68
90023920:	2201      	movs	r2, #1
90023922:	2109      	movs	r1, #9
90023924:	f7ff ff8e 	bl	90023844 <std>
90023928:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
9002392c:	2202      	movs	r2, #2
9002392e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90023932:	2112      	movs	r1, #18
90023934:	f7ff bf86 	b.w	90023844 <std>
90023938:	24026698 	.word	0x24026698
9002393c:	24026560 	.word	0x24026560
90023940:	900238b1 	.word	0x900238b1

90023944 <__sfp_lock_acquire>:
90023944:	4801      	ldr	r0, [pc, #4]	; (9002394c <__sfp_lock_acquire+0x8>)
90023946:	f000 ba08 	b.w	90023d5a <__retarget_lock_acquire_recursive>
9002394a:	bf00      	nop
9002394c:	240266a2 	.word	0x240266a2

90023950 <__sfp_lock_release>:
90023950:	4801      	ldr	r0, [pc, #4]	; (90023958 <__sfp_lock_release+0x8>)
90023952:	f000 ba03 	b.w	90023d5c <__retarget_lock_release_recursive>
90023956:	bf00      	nop
90023958:	240266a2 	.word	0x240266a2

9002395c <__sinit>:
9002395c:	b510      	push	{r4, lr}
9002395e:	4604      	mov	r4, r0
90023960:	f7ff fff0 	bl	90023944 <__sfp_lock_acquire>
90023964:	6a23      	ldr	r3, [r4, #32]
90023966:	b11b      	cbz	r3, 90023970 <__sinit+0x14>
90023968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9002396c:	f7ff bff0 	b.w	90023950 <__sfp_lock_release>
90023970:	4b04      	ldr	r3, [pc, #16]	; (90023984 <__sinit+0x28>)
90023972:	6223      	str	r3, [r4, #32]
90023974:	4b04      	ldr	r3, [pc, #16]	; (90023988 <__sinit+0x2c>)
90023976:	681b      	ldr	r3, [r3, #0]
90023978:	2b00      	cmp	r3, #0
9002397a:	d1f5      	bne.n	90023968 <__sinit+0xc>
9002397c:	f7ff ffc4 	bl	90023908 <global_stdio_init.part.0>
90023980:	e7f2      	b.n	90023968 <__sinit+0xc>
90023982:	bf00      	nop
90023984:	900238c9 	.word	0x900238c9
90023988:	24026698 	.word	0x24026698

9002398c <fiprintf>:
9002398c:	b40e      	push	{r1, r2, r3}
9002398e:	b503      	push	{r0, r1, lr}
90023990:	4601      	mov	r1, r0
90023992:	ab03      	add	r3, sp, #12
90023994:	4805      	ldr	r0, [pc, #20]	; (900239ac <fiprintf+0x20>)
90023996:	f853 2b04 	ldr.w	r2, [r3], #4
9002399a:	6800      	ldr	r0, [r0, #0]
9002399c:	9301      	str	r3, [sp, #4]
9002399e:	f000 fac1 	bl	90023f24 <_vfiprintf_r>
900239a2:	b002      	add	sp, #8
900239a4:	f85d eb04 	ldr.w	lr, [sp], #4
900239a8:	b003      	add	sp, #12
900239aa:	4770      	bx	lr
900239ac:	2400013c 	.word	0x2400013c

900239b0 <_fwalk_sglue>:
900239b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
900239b4:	4607      	mov	r7, r0
900239b6:	4688      	mov	r8, r1
900239b8:	4614      	mov	r4, r2
900239ba:	2600      	movs	r6, #0
900239bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
900239c0:	f1b9 0901 	subs.w	r9, r9, #1
900239c4:	d505      	bpl.n	900239d2 <_fwalk_sglue+0x22>
900239c6:	6824      	ldr	r4, [r4, #0]
900239c8:	2c00      	cmp	r4, #0
900239ca:	d1f7      	bne.n	900239bc <_fwalk_sglue+0xc>
900239cc:	4630      	mov	r0, r6
900239ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
900239d2:	89ab      	ldrh	r3, [r5, #12]
900239d4:	2b01      	cmp	r3, #1
900239d6:	d907      	bls.n	900239e8 <_fwalk_sglue+0x38>
900239d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
900239dc:	3301      	adds	r3, #1
900239de:	d003      	beq.n	900239e8 <_fwalk_sglue+0x38>
900239e0:	4629      	mov	r1, r5
900239e2:	4638      	mov	r0, r7
900239e4:	47c0      	blx	r8
900239e6:	4306      	orrs	r6, r0
900239e8:	3568      	adds	r5, #104	; 0x68
900239ea:	e7e9      	b.n	900239c0 <_fwalk_sglue+0x10>

900239ec <__sread>:
900239ec:	b510      	push	{r4, lr}
900239ee:	460c      	mov	r4, r1
900239f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900239f4:	f000 f93e 	bl	90023c74 <_read_r>
900239f8:	2800      	cmp	r0, #0
900239fa:	bfab      	itete	ge
900239fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
900239fe:	89a3      	ldrhlt	r3, [r4, #12]
90023a00:	181b      	addge	r3, r3, r0
90023a02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
90023a06:	bfac      	ite	ge
90023a08:	6563      	strge	r3, [r4, #84]	; 0x54
90023a0a:	81a3      	strhlt	r3, [r4, #12]
90023a0c:	bd10      	pop	{r4, pc}

90023a0e <__swrite>:
90023a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90023a12:	461f      	mov	r7, r3
90023a14:	898b      	ldrh	r3, [r1, #12]
90023a16:	05db      	lsls	r3, r3, #23
90023a18:	4605      	mov	r5, r0
90023a1a:	460c      	mov	r4, r1
90023a1c:	4616      	mov	r6, r2
90023a1e:	d505      	bpl.n	90023a2c <__swrite+0x1e>
90023a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023a24:	2302      	movs	r3, #2
90023a26:	2200      	movs	r2, #0
90023a28:	f000 f912 	bl	90023c50 <_lseek_r>
90023a2c:	89a3      	ldrh	r3, [r4, #12]
90023a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
90023a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90023a36:	81a3      	strh	r3, [r4, #12]
90023a38:	4632      	mov	r2, r6
90023a3a:	463b      	mov	r3, r7
90023a3c:	4628      	mov	r0, r5
90023a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90023a42:	f000 b94d 	b.w	90023ce0 <_write_r>

90023a46 <__sseek>:
90023a46:	b510      	push	{r4, lr}
90023a48:	460c      	mov	r4, r1
90023a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023a4e:	f000 f8ff 	bl	90023c50 <_lseek_r>
90023a52:	1c43      	adds	r3, r0, #1
90023a54:	89a3      	ldrh	r3, [r4, #12]
90023a56:	bf15      	itete	ne
90023a58:	6560      	strne	r0, [r4, #84]	; 0x54
90023a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
90023a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
90023a62:	81a3      	strheq	r3, [r4, #12]
90023a64:	bf18      	it	ne
90023a66:	81a3      	strhne	r3, [r4, #12]
90023a68:	bd10      	pop	{r4, pc}

90023a6a <__sclose>:
90023a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90023a6e:	f000 b8df 	b.w	90023c30 <_close_r>

90023a72 <__swbuf_r>:
90023a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023a74:	460e      	mov	r6, r1
90023a76:	4614      	mov	r4, r2
90023a78:	4605      	mov	r5, r0
90023a7a:	b118      	cbz	r0, 90023a84 <__swbuf_r+0x12>
90023a7c:	6a03      	ldr	r3, [r0, #32]
90023a7e:	b90b      	cbnz	r3, 90023a84 <__swbuf_r+0x12>
90023a80:	f7ff ff6c 	bl	9002395c <__sinit>
90023a84:	69a3      	ldr	r3, [r4, #24]
90023a86:	60a3      	str	r3, [r4, #8]
90023a88:	89a3      	ldrh	r3, [r4, #12]
90023a8a:	071a      	lsls	r2, r3, #28
90023a8c:	d525      	bpl.n	90023ada <__swbuf_r+0x68>
90023a8e:	6923      	ldr	r3, [r4, #16]
90023a90:	b31b      	cbz	r3, 90023ada <__swbuf_r+0x68>
90023a92:	6823      	ldr	r3, [r4, #0]
90023a94:	6922      	ldr	r2, [r4, #16]
90023a96:	1a98      	subs	r0, r3, r2
90023a98:	6963      	ldr	r3, [r4, #20]
90023a9a:	b2f6      	uxtb	r6, r6
90023a9c:	4283      	cmp	r3, r0
90023a9e:	4637      	mov	r7, r6
90023aa0:	dc04      	bgt.n	90023aac <__swbuf_r+0x3a>
90023aa2:	4621      	mov	r1, r4
90023aa4:	4628      	mov	r0, r5
90023aa6:	f000 fd6d 	bl	90024584 <_fflush_r>
90023aaa:	b9e0      	cbnz	r0, 90023ae6 <__swbuf_r+0x74>
90023aac:	68a3      	ldr	r3, [r4, #8]
90023aae:	3b01      	subs	r3, #1
90023ab0:	60a3      	str	r3, [r4, #8]
90023ab2:	6823      	ldr	r3, [r4, #0]
90023ab4:	1c5a      	adds	r2, r3, #1
90023ab6:	6022      	str	r2, [r4, #0]
90023ab8:	701e      	strb	r6, [r3, #0]
90023aba:	6962      	ldr	r2, [r4, #20]
90023abc:	1c43      	adds	r3, r0, #1
90023abe:	429a      	cmp	r2, r3
90023ac0:	d004      	beq.n	90023acc <__swbuf_r+0x5a>
90023ac2:	89a3      	ldrh	r3, [r4, #12]
90023ac4:	07db      	lsls	r3, r3, #31
90023ac6:	d506      	bpl.n	90023ad6 <__swbuf_r+0x64>
90023ac8:	2e0a      	cmp	r6, #10
90023aca:	d104      	bne.n	90023ad6 <__swbuf_r+0x64>
90023acc:	4621      	mov	r1, r4
90023ace:	4628      	mov	r0, r5
90023ad0:	f000 fd58 	bl	90024584 <_fflush_r>
90023ad4:	b938      	cbnz	r0, 90023ae6 <__swbuf_r+0x74>
90023ad6:	4638      	mov	r0, r7
90023ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90023ada:	4621      	mov	r1, r4
90023adc:	4628      	mov	r0, r5
90023ade:	f000 f805 	bl	90023aec <__swsetup_r>
90023ae2:	2800      	cmp	r0, #0
90023ae4:	d0d5      	beq.n	90023a92 <__swbuf_r+0x20>
90023ae6:	f04f 37ff 	mov.w	r7, #4294967295
90023aea:	e7f4      	b.n	90023ad6 <__swbuf_r+0x64>

90023aec <__swsetup_r>:
90023aec:	b538      	push	{r3, r4, r5, lr}
90023aee:	4b2a      	ldr	r3, [pc, #168]	; (90023b98 <__swsetup_r+0xac>)
90023af0:	4605      	mov	r5, r0
90023af2:	6818      	ldr	r0, [r3, #0]
90023af4:	460c      	mov	r4, r1
90023af6:	b118      	cbz	r0, 90023b00 <__swsetup_r+0x14>
90023af8:	6a03      	ldr	r3, [r0, #32]
90023afa:	b90b      	cbnz	r3, 90023b00 <__swsetup_r+0x14>
90023afc:	f7ff ff2e 	bl	9002395c <__sinit>
90023b00:	89a3      	ldrh	r3, [r4, #12]
90023b02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90023b06:	0718      	lsls	r0, r3, #28
90023b08:	d422      	bmi.n	90023b50 <__swsetup_r+0x64>
90023b0a:	06d9      	lsls	r1, r3, #27
90023b0c:	d407      	bmi.n	90023b1e <__swsetup_r+0x32>
90023b0e:	2309      	movs	r3, #9
90023b10:	602b      	str	r3, [r5, #0]
90023b12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90023b16:	81a3      	strh	r3, [r4, #12]
90023b18:	f04f 30ff 	mov.w	r0, #4294967295
90023b1c:	e034      	b.n	90023b88 <__swsetup_r+0x9c>
90023b1e:	0758      	lsls	r0, r3, #29
90023b20:	d512      	bpl.n	90023b48 <__swsetup_r+0x5c>
90023b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
90023b24:	b141      	cbz	r1, 90023b38 <__swsetup_r+0x4c>
90023b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
90023b2a:	4299      	cmp	r1, r3
90023b2c:	d002      	beq.n	90023b34 <__swsetup_r+0x48>
90023b2e:	4628      	mov	r0, r5
90023b30:	f000 f982 	bl	90023e38 <_free_r>
90023b34:	2300      	movs	r3, #0
90023b36:	6363      	str	r3, [r4, #52]	; 0x34
90023b38:	89a3      	ldrh	r3, [r4, #12]
90023b3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90023b3e:	81a3      	strh	r3, [r4, #12]
90023b40:	2300      	movs	r3, #0
90023b42:	6063      	str	r3, [r4, #4]
90023b44:	6923      	ldr	r3, [r4, #16]
90023b46:	6023      	str	r3, [r4, #0]
90023b48:	89a3      	ldrh	r3, [r4, #12]
90023b4a:	f043 0308 	orr.w	r3, r3, #8
90023b4e:	81a3      	strh	r3, [r4, #12]
90023b50:	6923      	ldr	r3, [r4, #16]
90023b52:	b94b      	cbnz	r3, 90023b68 <__swsetup_r+0x7c>
90023b54:	89a3      	ldrh	r3, [r4, #12]
90023b56:	f403 7320 	and.w	r3, r3, #640	; 0x280
90023b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90023b5e:	d003      	beq.n	90023b68 <__swsetup_r+0x7c>
90023b60:	4621      	mov	r1, r4
90023b62:	4628      	mov	r0, r5
90023b64:	f000 fd5c 	bl	90024620 <__smakebuf_r>
90023b68:	89a0      	ldrh	r0, [r4, #12]
90023b6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90023b6e:	f010 0301 	ands.w	r3, r0, #1
90023b72:	d00a      	beq.n	90023b8a <__swsetup_r+0x9e>
90023b74:	2300      	movs	r3, #0
90023b76:	60a3      	str	r3, [r4, #8]
90023b78:	6963      	ldr	r3, [r4, #20]
90023b7a:	425b      	negs	r3, r3
90023b7c:	61a3      	str	r3, [r4, #24]
90023b7e:	6923      	ldr	r3, [r4, #16]
90023b80:	b943      	cbnz	r3, 90023b94 <__swsetup_r+0xa8>
90023b82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90023b86:	d1c4      	bne.n	90023b12 <__swsetup_r+0x26>
90023b88:	bd38      	pop	{r3, r4, r5, pc}
90023b8a:	0781      	lsls	r1, r0, #30
90023b8c:	bf58      	it	pl
90023b8e:	6963      	ldrpl	r3, [r4, #20]
90023b90:	60a3      	str	r3, [r4, #8]
90023b92:	e7f4      	b.n	90023b7e <__swsetup_r+0x92>
90023b94:	2000      	movs	r0, #0
90023b96:	e7f7      	b.n	90023b88 <__swsetup_r+0x9c>
90023b98:	2400013c 	.word	0x2400013c

90023b9c <memset>:
90023b9c:	4402      	add	r2, r0
90023b9e:	4603      	mov	r3, r0
90023ba0:	4293      	cmp	r3, r2
90023ba2:	d100      	bne.n	90023ba6 <memset+0xa>
90023ba4:	4770      	bx	lr
90023ba6:	f803 1b01 	strb.w	r1, [r3], #1
90023baa:	e7f9      	b.n	90023ba0 <memset+0x4>

90023bac <strncmp>:
90023bac:	b510      	push	{r4, lr}
90023bae:	b16a      	cbz	r2, 90023bcc <strncmp+0x20>
90023bb0:	3901      	subs	r1, #1
90023bb2:	1884      	adds	r4, r0, r2
90023bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
90023bb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
90023bbc:	429a      	cmp	r2, r3
90023bbe:	d103      	bne.n	90023bc8 <strncmp+0x1c>
90023bc0:	42a0      	cmp	r0, r4
90023bc2:	d001      	beq.n	90023bc8 <strncmp+0x1c>
90023bc4:	2a00      	cmp	r2, #0
90023bc6:	d1f5      	bne.n	90023bb4 <strncmp+0x8>
90023bc8:	1ad0      	subs	r0, r2, r3
90023bca:	bd10      	pop	{r4, pc}
90023bcc:	4610      	mov	r0, r2
90023bce:	e7fc      	b.n	90023bca <strncmp+0x1e>

90023bd0 <_raise_r>:
90023bd0:	291f      	cmp	r1, #31
90023bd2:	b538      	push	{r3, r4, r5, lr}
90023bd4:	4604      	mov	r4, r0
90023bd6:	460d      	mov	r5, r1
90023bd8:	d904      	bls.n	90023be4 <_raise_r+0x14>
90023bda:	2316      	movs	r3, #22
90023bdc:	6003      	str	r3, [r0, #0]
90023bde:	f04f 30ff 	mov.w	r0, #4294967295
90023be2:	bd38      	pop	{r3, r4, r5, pc}
90023be4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
90023be6:	b112      	cbz	r2, 90023bee <_raise_r+0x1e>
90023be8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90023bec:	b94b      	cbnz	r3, 90023c02 <_raise_r+0x32>
90023bee:	4620      	mov	r0, r4
90023bf0:	f000 f864 	bl	90023cbc <_getpid_r>
90023bf4:	462a      	mov	r2, r5
90023bf6:	4601      	mov	r1, r0
90023bf8:	4620      	mov	r0, r4
90023bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90023bfe:	f000 b84b 	b.w	90023c98 <_kill_r>
90023c02:	2b01      	cmp	r3, #1
90023c04:	d00a      	beq.n	90023c1c <_raise_r+0x4c>
90023c06:	1c59      	adds	r1, r3, #1
90023c08:	d103      	bne.n	90023c12 <_raise_r+0x42>
90023c0a:	2316      	movs	r3, #22
90023c0c:	6003      	str	r3, [r0, #0]
90023c0e:	2001      	movs	r0, #1
90023c10:	e7e7      	b.n	90023be2 <_raise_r+0x12>
90023c12:	2400      	movs	r4, #0
90023c14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90023c18:	4628      	mov	r0, r5
90023c1a:	4798      	blx	r3
90023c1c:	2000      	movs	r0, #0
90023c1e:	e7e0      	b.n	90023be2 <_raise_r+0x12>

90023c20 <raise>:
90023c20:	4b02      	ldr	r3, [pc, #8]	; (90023c2c <raise+0xc>)
90023c22:	4601      	mov	r1, r0
90023c24:	6818      	ldr	r0, [r3, #0]
90023c26:	f7ff bfd3 	b.w	90023bd0 <_raise_r>
90023c2a:	bf00      	nop
90023c2c:	2400013c 	.word	0x2400013c

90023c30 <_close_r>:
90023c30:	b538      	push	{r3, r4, r5, lr}
90023c32:	4d06      	ldr	r5, [pc, #24]	; (90023c4c <_close_r+0x1c>)
90023c34:	2300      	movs	r3, #0
90023c36:	4604      	mov	r4, r0
90023c38:	4608      	mov	r0, r1
90023c3a:	602b      	str	r3, [r5, #0]
90023c3c:	f7e1 f876 	bl	90004d2c <_close>
90023c40:	1c43      	adds	r3, r0, #1
90023c42:	d102      	bne.n	90023c4a <_close_r+0x1a>
90023c44:	682b      	ldr	r3, [r5, #0]
90023c46:	b103      	cbz	r3, 90023c4a <_close_r+0x1a>
90023c48:	6023      	str	r3, [r4, #0]
90023c4a:	bd38      	pop	{r3, r4, r5, pc}
90023c4c:	2402669c 	.word	0x2402669c

90023c50 <_lseek_r>:
90023c50:	b538      	push	{r3, r4, r5, lr}
90023c52:	4d07      	ldr	r5, [pc, #28]	; (90023c70 <_lseek_r+0x20>)
90023c54:	4604      	mov	r4, r0
90023c56:	4608      	mov	r0, r1
90023c58:	4611      	mov	r1, r2
90023c5a:	2200      	movs	r2, #0
90023c5c:	602a      	str	r2, [r5, #0]
90023c5e:	461a      	mov	r2, r3
90023c60:	f7e1 f870 	bl	90004d44 <_lseek>
90023c64:	1c43      	adds	r3, r0, #1
90023c66:	d102      	bne.n	90023c6e <_lseek_r+0x1e>
90023c68:	682b      	ldr	r3, [r5, #0]
90023c6a:	b103      	cbz	r3, 90023c6e <_lseek_r+0x1e>
90023c6c:	6023      	str	r3, [r4, #0]
90023c6e:	bd38      	pop	{r3, r4, r5, pc}
90023c70:	2402669c 	.word	0x2402669c

90023c74 <_read_r>:
90023c74:	b538      	push	{r3, r4, r5, lr}
90023c76:	4d07      	ldr	r5, [pc, #28]	; (90023c94 <_read_r+0x20>)
90023c78:	4604      	mov	r4, r0
90023c7a:	4608      	mov	r0, r1
90023c7c:	4611      	mov	r1, r2
90023c7e:	2200      	movs	r2, #0
90023c80:	602a      	str	r2, [r5, #0]
90023c82:	461a      	mov	r2, r3
90023c84:	f7e1 f836 	bl	90004cf4 <_read>
90023c88:	1c43      	adds	r3, r0, #1
90023c8a:	d102      	bne.n	90023c92 <_read_r+0x1e>
90023c8c:	682b      	ldr	r3, [r5, #0]
90023c8e:	b103      	cbz	r3, 90023c92 <_read_r+0x1e>
90023c90:	6023      	str	r3, [r4, #0]
90023c92:	bd38      	pop	{r3, r4, r5, pc}
90023c94:	2402669c 	.word	0x2402669c

90023c98 <_kill_r>:
90023c98:	b538      	push	{r3, r4, r5, lr}
90023c9a:	4d07      	ldr	r5, [pc, #28]	; (90023cb8 <_kill_r+0x20>)
90023c9c:	2300      	movs	r3, #0
90023c9e:	4604      	mov	r4, r0
90023ca0:	4608      	mov	r0, r1
90023ca2:	4611      	mov	r1, r2
90023ca4:	602b      	str	r3, [r5, #0]
90023ca6:	f7e1 f815 	bl	90004cd4 <_kill>
90023caa:	1c43      	adds	r3, r0, #1
90023cac:	d102      	bne.n	90023cb4 <_kill_r+0x1c>
90023cae:	682b      	ldr	r3, [r5, #0]
90023cb0:	b103      	cbz	r3, 90023cb4 <_kill_r+0x1c>
90023cb2:	6023      	str	r3, [r4, #0]
90023cb4:	bd38      	pop	{r3, r4, r5, pc}
90023cb6:	bf00      	nop
90023cb8:	2402669c 	.word	0x2402669c

90023cbc <_getpid_r>:
90023cbc:	f7e1 b808 	b.w	90004cd0 <_getpid>

90023cc0 <_sbrk_r>:
90023cc0:	b538      	push	{r3, r4, r5, lr}
90023cc2:	4d06      	ldr	r5, [pc, #24]	; (90023cdc <_sbrk_r+0x1c>)
90023cc4:	2300      	movs	r3, #0
90023cc6:	4604      	mov	r4, r0
90023cc8:	4608      	mov	r0, r1
90023cca:	602b      	str	r3, [r5, #0]
90023ccc:	f7e1 f83c 	bl	90004d48 <_sbrk>
90023cd0:	1c43      	adds	r3, r0, #1
90023cd2:	d102      	bne.n	90023cda <_sbrk_r+0x1a>
90023cd4:	682b      	ldr	r3, [r5, #0]
90023cd6:	b103      	cbz	r3, 90023cda <_sbrk_r+0x1a>
90023cd8:	6023      	str	r3, [r4, #0]
90023cda:	bd38      	pop	{r3, r4, r5, pc}
90023cdc:	2402669c 	.word	0x2402669c

90023ce0 <_write_r>:
90023ce0:	b538      	push	{r3, r4, r5, lr}
90023ce2:	4d07      	ldr	r5, [pc, #28]	; (90023d00 <_write_r+0x20>)
90023ce4:	4604      	mov	r4, r0
90023ce6:	4608      	mov	r0, r1
90023ce8:	4611      	mov	r1, r2
90023cea:	2200      	movs	r2, #0
90023cec:	602a      	str	r2, [r5, #0]
90023cee:	461a      	mov	r2, r3
90023cf0:	f7e1 f80e 	bl	90004d10 <_write>
90023cf4:	1c43      	adds	r3, r0, #1
90023cf6:	d102      	bne.n	90023cfe <_write_r+0x1e>
90023cf8:	682b      	ldr	r3, [r5, #0]
90023cfa:	b103      	cbz	r3, 90023cfe <_write_r+0x1e>
90023cfc:	6023      	str	r3, [r4, #0]
90023cfe:	bd38      	pop	{r3, r4, r5, pc}
90023d00:	2402669c 	.word	0x2402669c

90023d04 <__errno>:
90023d04:	4b01      	ldr	r3, [pc, #4]	; (90023d0c <__errno+0x8>)
90023d06:	6818      	ldr	r0, [r3, #0]
90023d08:	4770      	bx	lr
90023d0a:	bf00      	nop
90023d0c:	2400013c 	.word	0x2400013c

90023d10 <__libc_init_array>:
90023d10:	b570      	push	{r4, r5, r6, lr}
90023d12:	4d0d      	ldr	r5, [pc, #52]	; (90023d48 <__libc_init_array+0x38>)
90023d14:	4c0d      	ldr	r4, [pc, #52]	; (90023d4c <__libc_init_array+0x3c>)
90023d16:	1b64      	subs	r4, r4, r5
90023d18:	10a4      	asrs	r4, r4, #2
90023d1a:	2600      	movs	r6, #0
90023d1c:	42a6      	cmp	r6, r4
90023d1e:	d109      	bne.n	90023d34 <__libc_init_array+0x24>
90023d20:	4d0b      	ldr	r5, [pc, #44]	; (90023d50 <__libc_init_array+0x40>)
90023d22:	4c0c      	ldr	r4, [pc, #48]	; (90023d54 <__libc_init_array+0x44>)
90023d24:	f000 fcda 	bl	900246dc <_init>
90023d28:	1b64      	subs	r4, r4, r5
90023d2a:	10a4      	asrs	r4, r4, #2
90023d2c:	2600      	movs	r6, #0
90023d2e:	42a6      	cmp	r6, r4
90023d30:	d105      	bne.n	90023d3e <__libc_init_array+0x2e>
90023d32:	bd70      	pop	{r4, r5, r6, pc}
90023d34:	f855 3b04 	ldr.w	r3, [r5], #4
90023d38:	4798      	blx	r3
90023d3a:	3601      	adds	r6, #1
90023d3c:	e7ee      	b.n	90023d1c <__libc_init_array+0xc>
90023d3e:	f855 3b04 	ldr.w	r3, [r5], #4
90023d42:	4798      	blx	r3
90023d44:	3601      	adds	r6, #1
90023d46:	e7f2      	b.n	90023d2e <__libc_init_array+0x1e>
90023d48:	9002805c 	.word	0x9002805c
90023d4c:	9002805c 	.word	0x9002805c
90023d50:	9002805c 	.word	0x9002805c
90023d54:	90028078 	.word	0x90028078

90023d58 <__retarget_lock_init_recursive>:
90023d58:	4770      	bx	lr

90023d5a <__retarget_lock_acquire_recursive>:
90023d5a:	4770      	bx	lr

90023d5c <__retarget_lock_release_recursive>:
90023d5c:	4770      	bx	lr

90023d5e <memcpy>:
90023d5e:	440a      	add	r2, r1
90023d60:	4291      	cmp	r1, r2
90023d62:	f100 33ff 	add.w	r3, r0, #4294967295
90023d66:	d100      	bne.n	90023d6a <memcpy+0xc>
90023d68:	4770      	bx	lr
90023d6a:	b510      	push	{r4, lr}
90023d6c:	f811 4b01 	ldrb.w	r4, [r1], #1
90023d70:	f803 4f01 	strb.w	r4, [r3, #1]!
90023d74:	4291      	cmp	r1, r2
90023d76:	d1f9      	bne.n	90023d6c <memcpy+0xe>
90023d78:	bd10      	pop	{r4, pc}
	...

90023d7c <__register_exitproc>:
90023d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90023d80:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90023e34 <__register_exitproc+0xb8>
90023d84:	4606      	mov	r6, r0
90023d86:	f8d8 0000 	ldr.w	r0, [r8]
90023d8a:	461f      	mov	r7, r3
90023d8c:	460d      	mov	r5, r1
90023d8e:	4691      	mov	r9, r2
90023d90:	f7ff ffe3 	bl	90023d5a <__retarget_lock_acquire_recursive>
90023d94:	4b23      	ldr	r3, [pc, #140]	; (90023e24 <__register_exitproc+0xa8>)
90023d96:	681c      	ldr	r4, [r3, #0]
90023d98:	b934      	cbnz	r4, 90023da8 <__register_exitproc+0x2c>
90023d9a:	4c23      	ldr	r4, [pc, #140]	; (90023e28 <__register_exitproc+0xac>)
90023d9c:	601c      	str	r4, [r3, #0]
90023d9e:	4b23      	ldr	r3, [pc, #140]	; (90023e2c <__register_exitproc+0xb0>)
90023da0:	b113      	cbz	r3, 90023da8 <__register_exitproc+0x2c>
90023da2:	681b      	ldr	r3, [r3, #0]
90023da4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90023da8:	6863      	ldr	r3, [r4, #4]
90023daa:	2b1f      	cmp	r3, #31
90023dac:	dd07      	ble.n	90023dbe <__register_exitproc+0x42>
90023dae:	f8d8 0000 	ldr.w	r0, [r8]
90023db2:	f7ff ffd3 	bl	90023d5c <__retarget_lock_release_recursive>
90023db6:	f04f 30ff 	mov.w	r0, #4294967295
90023dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90023dbe:	b32e      	cbz	r6, 90023e0c <__register_exitproc+0x90>
90023dc0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
90023dc4:	b968      	cbnz	r0, 90023de2 <__register_exitproc+0x66>
90023dc6:	4b1a      	ldr	r3, [pc, #104]	; (90023e30 <__register_exitproc+0xb4>)
90023dc8:	2b00      	cmp	r3, #0
90023dca:	d0f0      	beq.n	90023dae <__register_exitproc+0x32>
90023dcc:	f44f 7084 	mov.w	r0, #264	; 0x108
90023dd0:	f7ff fc6e 	bl	900236b0 <malloc>
90023dd4:	2800      	cmp	r0, #0
90023dd6:	d0ea      	beq.n	90023dae <__register_exitproc+0x32>
90023dd8:	2300      	movs	r3, #0
90023dda:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90023dde:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90023de2:	6863      	ldr	r3, [r4, #4]
90023de4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90023de8:	2201      	movs	r2, #1
90023dea:	409a      	lsls	r2, r3
90023dec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90023df0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90023df4:	4313      	orrs	r3, r2
90023df6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
90023dfa:	2e02      	cmp	r6, #2
90023dfc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90023e00:	bf02      	ittt	eq
90023e02:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
90023e06:	4313      	orreq	r3, r2
90023e08:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90023e0c:	6863      	ldr	r3, [r4, #4]
90023e0e:	f8d8 0000 	ldr.w	r0, [r8]
90023e12:	1c5a      	adds	r2, r3, #1
90023e14:	3302      	adds	r3, #2
90023e16:	6062      	str	r2, [r4, #4]
90023e18:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90023e1c:	f7ff ff9e 	bl	90023d5c <__retarget_lock_release_recursive>
90023e20:	2000      	movs	r0, #0
90023e22:	e7ca      	b.n	90023dba <__register_exitproc+0x3e>
90023e24:	24026730 	.word	0x24026730
90023e28:	240266a4 	.word	0x240266a4
90023e2c:	90027b74 	.word	0x90027b74
90023e30:	900236b1 	.word	0x900236b1
90023e34:	24000140 	.word	0x24000140

90023e38 <_free_r>:
90023e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
90023e3a:	2900      	cmp	r1, #0
90023e3c:	d044      	beq.n	90023ec8 <_free_r+0x90>
90023e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
90023e42:	9001      	str	r0, [sp, #4]
90023e44:	2b00      	cmp	r3, #0
90023e46:	f1a1 0404 	sub.w	r4, r1, #4
90023e4a:	bfb8      	it	lt
90023e4c:	18e4      	addlt	r4, r4, r3
90023e4e:	f7ff fcdf 	bl	90023810 <__malloc_lock>
90023e52:	4a1e      	ldr	r2, [pc, #120]	; (90023ecc <_free_r+0x94>)
90023e54:	9801      	ldr	r0, [sp, #4]
90023e56:	6813      	ldr	r3, [r2, #0]
90023e58:	b933      	cbnz	r3, 90023e68 <_free_r+0x30>
90023e5a:	6063      	str	r3, [r4, #4]
90023e5c:	6014      	str	r4, [r2, #0]
90023e5e:	b003      	add	sp, #12
90023e60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90023e64:	f7ff bcda 	b.w	9002381c <__malloc_unlock>
90023e68:	42a3      	cmp	r3, r4
90023e6a:	d908      	bls.n	90023e7e <_free_r+0x46>
90023e6c:	6825      	ldr	r5, [r4, #0]
90023e6e:	1961      	adds	r1, r4, r5
90023e70:	428b      	cmp	r3, r1
90023e72:	bf01      	itttt	eq
90023e74:	6819      	ldreq	r1, [r3, #0]
90023e76:	685b      	ldreq	r3, [r3, #4]
90023e78:	1949      	addeq	r1, r1, r5
90023e7a:	6021      	streq	r1, [r4, #0]
90023e7c:	e7ed      	b.n	90023e5a <_free_r+0x22>
90023e7e:	461a      	mov	r2, r3
90023e80:	685b      	ldr	r3, [r3, #4]
90023e82:	b10b      	cbz	r3, 90023e88 <_free_r+0x50>
90023e84:	42a3      	cmp	r3, r4
90023e86:	d9fa      	bls.n	90023e7e <_free_r+0x46>
90023e88:	6811      	ldr	r1, [r2, #0]
90023e8a:	1855      	adds	r5, r2, r1
90023e8c:	42a5      	cmp	r5, r4
90023e8e:	d10b      	bne.n	90023ea8 <_free_r+0x70>
90023e90:	6824      	ldr	r4, [r4, #0]
90023e92:	4421      	add	r1, r4
90023e94:	1854      	adds	r4, r2, r1
90023e96:	42a3      	cmp	r3, r4
90023e98:	6011      	str	r1, [r2, #0]
90023e9a:	d1e0      	bne.n	90023e5e <_free_r+0x26>
90023e9c:	681c      	ldr	r4, [r3, #0]
90023e9e:	685b      	ldr	r3, [r3, #4]
90023ea0:	6053      	str	r3, [r2, #4]
90023ea2:	440c      	add	r4, r1
90023ea4:	6014      	str	r4, [r2, #0]
90023ea6:	e7da      	b.n	90023e5e <_free_r+0x26>
90023ea8:	d902      	bls.n	90023eb0 <_free_r+0x78>
90023eaa:	230c      	movs	r3, #12
90023eac:	6003      	str	r3, [r0, #0]
90023eae:	e7d6      	b.n	90023e5e <_free_r+0x26>
90023eb0:	6825      	ldr	r5, [r4, #0]
90023eb2:	1961      	adds	r1, r4, r5
90023eb4:	428b      	cmp	r3, r1
90023eb6:	bf04      	itt	eq
90023eb8:	6819      	ldreq	r1, [r3, #0]
90023eba:	685b      	ldreq	r3, [r3, #4]
90023ebc:	6063      	str	r3, [r4, #4]
90023ebe:	bf04      	itt	eq
90023ec0:	1949      	addeq	r1, r1, r5
90023ec2:	6021      	streq	r1, [r4, #0]
90023ec4:	6054      	str	r4, [r2, #4]
90023ec6:	e7ca      	b.n	90023e5e <_free_r+0x26>
90023ec8:	b003      	add	sp, #12
90023eca:	bd30      	pop	{r4, r5, pc}
90023ecc:	24026558 	.word	0x24026558

90023ed0 <__sfputc_r>:
90023ed0:	6893      	ldr	r3, [r2, #8]
90023ed2:	3b01      	subs	r3, #1
90023ed4:	2b00      	cmp	r3, #0
90023ed6:	b410      	push	{r4}
90023ed8:	6093      	str	r3, [r2, #8]
90023eda:	da08      	bge.n	90023eee <__sfputc_r+0x1e>
90023edc:	6994      	ldr	r4, [r2, #24]
90023ede:	42a3      	cmp	r3, r4
90023ee0:	db01      	blt.n	90023ee6 <__sfputc_r+0x16>
90023ee2:	290a      	cmp	r1, #10
90023ee4:	d103      	bne.n	90023eee <__sfputc_r+0x1e>
90023ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
90023eea:	f7ff bdc2 	b.w	90023a72 <__swbuf_r>
90023eee:	6813      	ldr	r3, [r2, #0]
90023ef0:	1c58      	adds	r0, r3, #1
90023ef2:	6010      	str	r0, [r2, #0]
90023ef4:	7019      	strb	r1, [r3, #0]
90023ef6:	4608      	mov	r0, r1
90023ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
90023efc:	4770      	bx	lr

90023efe <__sfputs_r>:
90023efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90023f00:	4606      	mov	r6, r0
90023f02:	460f      	mov	r7, r1
90023f04:	4614      	mov	r4, r2
90023f06:	18d5      	adds	r5, r2, r3
90023f08:	42ac      	cmp	r4, r5
90023f0a:	d101      	bne.n	90023f10 <__sfputs_r+0x12>
90023f0c:	2000      	movs	r0, #0
90023f0e:	e007      	b.n	90023f20 <__sfputs_r+0x22>
90023f10:	f814 1b01 	ldrb.w	r1, [r4], #1
90023f14:	463a      	mov	r2, r7
90023f16:	4630      	mov	r0, r6
90023f18:	f7ff ffda 	bl	90023ed0 <__sfputc_r>
90023f1c:	1c43      	adds	r3, r0, #1
90023f1e:	d1f3      	bne.n	90023f08 <__sfputs_r+0xa>
90023f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90023f24 <_vfiprintf_r>:
90023f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90023f28:	460d      	mov	r5, r1
90023f2a:	b09d      	sub	sp, #116	; 0x74
90023f2c:	4614      	mov	r4, r2
90023f2e:	4698      	mov	r8, r3
90023f30:	4606      	mov	r6, r0
90023f32:	b118      	cbz	r0, 90023f3c <_vfiprintf_r+0x18>
90023f34:	6a03      	ldr	r3, [r0, #32]
90023f36:	b90b      	cbnz	r3, 90023f3c <_vfiprintf_r+0x18>
90023f38:	f7ff fd10 	bl	9002395c <__sinit>
90023f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90023f3e:	07d9      	lsls	r1, r3, #31
90023f40:	d405      	bmi.n	90023f4e <_vfiprintf_r+0x2a>
90023f42:	89ab      	ldrh	r3, [r5, #12]
90023f44:	059a      	lsls	r2, r3, #22
90023f46:	d402      	bmi.n	90023f4e <_vfiprintf_r+0x2a>
90023f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
90023f4a:	f7ff ff06 	bl	90023d5a <__retarget_lock_acquire_recursive>
90023f4e:	89ab      	ldrh	r3, [r5, #12]
90023f50:	071b      	lsls	r3, r3, #28
90023f52:	d501      	bpl.n	90023f58 <_vfiprintf_r+0x34>
90023f54:	692b      	ldr	r3, [r5, #16]
90023f56:	b99b      	cbnz	r3, 90023f80 <_vfiprintf_r+0x5c>
90023f58:	4629      	mov	r1, r5
90023f5a:	4630      	mov	r0, r6
90023f5c:	f7ff fdc6 	bl	90023aec <__swsetup_r>
90023f60:	b170      	cbz	r0, 90023f80 <_vfiprintf_r+0x5c>
90023f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90023f64:	07dc      	lsls	r4, r3, #31
90023f66:	d504      	bpl.n	90023f72 <_vfiprintf_r+0x4e>
90023f68:	f04f 30ff 	mov.w	r0, #4294967295
90023f6c:	b01d      	add	sp, #116	; 0x74
90023f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90023f72:	89ab      	ldrh	r3, [r5, #12]
90023f74:	0598      	lsls	r0, r3, #22
90023f76:	d4f7      	bmi.n	90023f68 <_vfiprintf_r+0x44>
90023f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
90023f7a:	f7ff feef 	bl	90023d5c <__retarget_lock_release_recursive>
90023f7e:	e7f3      	b.n	90023f68 <_vfiprintf_r+0x44>
90023f80:	2300      	movs	r3, #0
90023f82:	9309      	str	r3, [sp, #36]	; 0x24
90023f84:	2320      	movs	r3, #32
90023f86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90023f8a:	f8cd 800c 	str.w	r8, [sp, #12]
90023f8e:	2330      	movs	r3, #48	; 0x30
90023f90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 90024144 <_vfiprintf_r+0x220>
90023f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90023f98:	f04f 0901 	mov.w	r9, #1
90023f9c:	4623      	mov	r3, r4
90023f9e:	469a      	mov	sl, r3
90023fa0:	f813 2b01 	ldrb.w	r2, [r3], #1
90023fa4:	b10a      	cbz	r2, 90023faa <_vfiprintf_r+0x86>
90023fa6:	2a25      	cmp	r2, #37	; 0x25
90023fa8:	d1f9      	bne.n	90023f9e <_vfiprintf_r+0x7a>
90023faa:	ebba 0b04 	subs.w	fp, sl, r4
90023fae:	d00b      	beq.n	90023fc8 <_vfiprintf_r+0xa4>
90023fb0:	465b      	mov	r3, fp
90023fb2:	4622      	mov	r2, r4
90023fb4:	4629      	mov	r1, r5
90023fb6:	4630      	mov	r0, r6
90023fb8:	f7ff ffa1 	bl	90023efe <__sfputs_r>
90023fbc:	3001      	adds	r0, #1
90023fbe:	f000 80a9 	beq.w	90024114 <_vfiprintf_r+0x1f0>
90023fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
90023fc4:	445a      	add	r2, fp
90023fc6:	9209      	str	r2, [sp, #36]	; 0x24
90023fc8:	f89a 3000 	ldrb.w	r3, [sl]
90023fcc:	2b00      	cmp	r3, #0
90023fce:	f000 80a1 	beq.w	90024114 <_vfiprintf_r+0x1f0>
90023fd2:	2300      	movs	r3, #0
90023fd4:	f04f 32ff 	mov.w	r2, #4294967295
90023fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
90023fdc:	f10a 0a01 	add.w	sl, sl, #1
90023fe0:	9304      	str	r3, [sp, #16]
90023fe2:	9307      	str	r3, [sp, #28]
90023fe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90023fe8:	931a      	str	r3, [sp, #104]	; 0x68
90023fea:	4654      	mov	r4, sl
90023fec:	2205      	movs	r2, #5
90023fee:	f814 1b01 	ldrb.w	r1, [r4], #1
90023ff2:	4854      	ldr	r0, [pc, #336]	; (90024144 <_vfiprintf_r+0x220>)
90023ff4:	f7dc f974 	bl	900002e0 <memchr>
90023ff8:	9a04      	ldr	r2, [sp, #16]
90023ffa:	b9d8      	cbnz	r0, 90024034 <_vfiprintf_r+0x110>
90023ffc:	06d1      	lsls	r1, r2, #27
90023ffe:	bf44      	itt	mi
90024000:	2320      	movmi	r3, #32
90024002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90024006:	0713      	lsls	r3, r2, #28
90024008:	bf44      	itt	mi
9002400a:	232b      	movmi	r3, #43	; 0x2b
9002400c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90024010:	f89a 3000 	ldrb.w	r3, [sl]
90024014:	2b2a      	cmp	r3, #42	; 0x2a
90024016:	d015      	beq.n	90024044 <_vfiprintf_r+0x120>
90024018:	9a07      	ldr	r2, [sp, #28]
9002401a:	4654      	mov	r4, sl
9002401c:	2000      	movs	r0, #0
9002401e:	f04f 0c0a 	mov.w	ip, #10
90024022:	4621      	mov	r1, r4
90024024:	f811 3b01 	ldrb.w	r3, [r1], #1
90024028:	3b30      	subs	r3, #48	; 0x30
9002402a:	2b09      	cmp	r3, #9
9002402c:	d94d      	bls.n	900240ca <_vfiprintf_r+0x1a6>
9002402e:	b1b0      	cbz	r0, 9002405e <_vfiprintf_r+0x13a>
90024030:	9207      	str	r2, [sp, #28]
90024032:	e014      	b.n	9002405e <_vfiprintf_r+0x13a>
90024034:	eba0 0308 	sub.w	r3, r0, r8
90024038:	fa09 f303 	lsl.w	r3, r9, r3
9002403c:	4313      	orrs	r3, r2
9002403e:	9304      	str	r3, [sp, #16]
90024040:	46a2      	mov	sl, r4
90024042:	e7d2      	b.n	90023fea <_vfiprintf_r+0xc6>
90024044:	9b03      	ldr	r3, [sp, #12]
90024046:	1d19      	adds	r1, r3, #4
90024048:	681b      	ldr	r3, [r3, #0]
9002404a:	9103      	str	r1, [sp, #12]
9002404c:	2b00      	cmp	r3, #0
9002404e:	bfbb      	ittet	lt
90024050:	425b      	neglt	r3, r3
90024052:	f042 0202 	orrlt.w	r2, r2, #2
90024056:	9307      	strge	r3, [sp, #28]
90024058:	9307      	strlt	r3, [sp, #28]
9002405a:	bfb8      	it	lt
9002405c:	9204      	strlt	r2, [sp, #16]
9002405e:	7823      	ldrb	r3, [r4, #0]
90024060:	2b2e      	cmp	r3, #46	; 0x2e
90024062:	d10c      	bne.n	9002407e <_vfiprintf_r+0x15a>
90024064:	7863      	ldrb	r3, [r4, #1]
90024066:	2b2a      	cmp	r3, #42	; 0x2a
90024068:	d134      	bne.n	900240d4 <_vfiprintf_r+0x1b0>
9002406a:	9b03      	ldr	r3, [sp, #12]
9002406c:	1d1a      	adds	r2, r3, #4
9002406e:	681b      	ldr	r3, [r3, #0]
90024070:	9203      	str	r2, [sp, #12]
90024072:	2b00      	cmp	r3, #0
90024074:	bfb8      	it	lt
90024076:	f04f 33ff 	movlt.w	r3, #4294967295
9002407a:	3402      	adds	r4, #2
9002407c:	9305      	str	r3, [sp, #20]
9002407e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 90024154 <_vfiprintf_r+0x230>
90024082:	7821      	ldrb	r1, [r4, #0]
90024084:	2203      	movs	r2, #3
90024086:	4650      	mov	r0, sl
90024088:	f7dc f92a 	bl	900002e0 <memchr>
9002408c:	b138      	cbz	r0, 9002409e <_vfiprintf_r+0x17a>
9002408e:	9b04      	ldr	r3, [sp, #16]
90024090:	eba0 000a 	sub.w	r0, r0, sl
90024094:	2240      	movs	r2, #64	; 0x40
90024096:	4082      	lsls	r2, r0
90024098:	4313      	orrs	r3, r2
9002409a:	3401      	adds	r4, #1
9002409c:	9304      	str	r3, [sp, #16]
9002409e:	f814 1b01 	ldrb.w	r1, [r4], #1
900240a2:	4829      	ldr	r0, [pc, #164]	; (90024148 <_vfiprintf_r+0x224>)
900240a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
900240a8:	2206      	movs	r2, #6
900240aa:	f7dc f919 	bl	900002e0 <memchr>
900240ae:	2800      	cmp	r0, #0
900240b0:	d03f      	beq.n	90024132 <_vfiprintf_r+0x20e>
900240b2:	4b26      	ldr	r3, [pc, #152]	; (9002414c <_vfiprintf_r+0x228>)
900240b4:	bb1b      	cbnz	r3, 900240fe <_vfiprintf_r+0x1da>
900240b6:	9b03      	ldr	r3, [sp, #12]
900240b8:	3307      	adds	r3, #7
900240ba:	f023 0307 	bic.w	r3, r3, #7
900240be:	3308      	adds	r3, #8
900240c0:	9303      	str	r3, [sp, #12]
900240c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900240c4:	443b      	add	r3, r7
900240c6:	9309      	str	r3, [sp, #36]	; 0x24
900240c8:	e768      	b.n	90023f9c <_vfiprintf_r+0x78>
900240ca:	fb0c 3202 	mla	r2, ip, r2, r3
900240ce:	460c      	mov	r4, r1
900240d0:	2001      	movs	r0, #1
900240d2:	e7a6      	b.n	90024022 <_vfiprintf_r+0xfe>
900240d4:	2300      	movs	r3, #0
900240d6:	3401      	adds	r4, #1
900240d8:	9305      	str	r3, [sp, #20]
900240da:	4619      	mov	r1, r3
900240dc:	f04f 0c0a 	mov.w	ip, #10
900240e0:	4620      	mov	r0, r4
900240e2:	f810 2b01 	ldrb.w	r2, [r0], #1
900240e6:	3a30      	subs	r2, #48	; 0x30
900240e8:	2a09      	cmp	r2, #9
900240ea:	d903      	bls.n	900240f4 <_vfiprintf_r+0x1d0>
900240ec:	2b00      	cmp	r3, #0
900240ee:	d0c6      	beq.n	9002407e <_vfiprintf_r+0x15a>
900240f0:	9105      	str	r1, [sp, #20]
900240f2:	e7c4      	b.n	9002407e <_vfiprintf_r+0x15a>
900240f4:	fb0c 2101 	mla	r1, ip, r1, r2
900240f8:	4604      	mov	r4, r0
900240fa:	2301      	movs	r3, #1
900240fc:	e7f0      	b.n	900240e0 <_vfiprintf_r+0x1bc>
900240fe:	ab03      	add	r3, sp, #12
90024100:	9300      	str	r3, [sp, #0]
90024102:	462a      	mov	r2, r5
90024104:	4b12      	ldr	r3, [pc, #72]	; (90024150 <_vfiprintf_r+0x22c>)
90024106:	a904      	add	r1, sp, #16
90024108:	4630      	mov	r0, r6
9002410a:	f3af 8000 	nop.w
9002410e:	4607      	mov	r7, r0
90024110:	1c78      	adds	r0, r7, #1
90024112:	d1d6      	bne.n	900240c2 <_vfiprintf_r+0x19e>
90024114:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90024116:	07d9      	lsls	r1, r3, #31
90024118:	d405      	bmi.n	90024126 <_vfiprintf_r+0x202>
9002411a:	89ab      	ldrh	r3, [r5, #12]
9002411c:	059a      	lsls	r2, r3, #22
9002411e:	d402      	bmi.n	90024126 <_vfiprintf_r+0x202>
90024120:	6da8      	ldr	r0, [r5, #88]	; 0x58
90024122:	f7ff fe1b 	bl	90023d5c <__retarget_lock_release_recursive>
90024126:	89ab      	ldrh	r3, [r5, #12]
90024128:	065b      	lsls	r3, r3, #25
9002412a:	f53f af1d 	bmi.w	90023f68 <_vfiprintf_r+0x44>
9002412e:	9809      	ldr	r0, [sp, #36]	; 0x24
90024130:	e71c      	b.n	90023f6c <_vfiprintf_r+0x48>
90024132:	ab03      	add	r3, sp, #12
90024134:	9300      	str	r3, [sp, #0]
90024136:	462a      	mov	r2, r5
90024138:	4b05      	ldr	r3, [pc, #20]	; (90024150 <_vfiprintf_r+0x22c>)
9002413a:	a904      	add	r1, sp, #16
9002413c:	4630      	mov	r0, r6
9002413e:	f000 f879 	bl	90024234 <_printf_i>
90024142:	e7e4      	b.n	9002410e <_vfiprintf_r+0x1ea>
90024144:	90027b78 	.word	0x90027b78
90024148:	90027b82 	.word	0x90027b82
9002414c:	00000000 	.word	0x00000000
90024150:	90023eff 	.word	0x90023eff
90024154:	90027b7e 	.word	0x90027b7e

90024158 <_printf_common>:
90024158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002415c:	4616      	mov	r6, r2
9002415e:	4699      	mov	r9, r3
90024160:	688a      	ldr	r2, [r1, #8]
90024162:	690b      	ldr	r3, [r1, #16]
90024164:	f8dd 8020 	ldr.w	r8, [sp, #32]
90024168:	4293      	cmp	r3, r2
9002416a:	bfb8      	it	lt
9002416c:	4613      	movlt	r3, r2
9002416e:	6033      	str	r3, [r6, #0]
90024170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
90024174:	4607      	mov	r7, r0
90024176:	460c      	mov	r4, r1
90024178:	b10a      	cbz	r2, 9002417e <_printf_common+0x26>
9002417a:	3301      	adds	r3, #1
9002417c:	6033      	str	r3, [r6, #0]
9002417e:	6823      	ldr	r3, [r4, #0]
90024180:	0699      	lsls	r1, r3, #26
90024182:	bf42      	ittt	mi
90024184:	6833      	ldrmi	r3, [r6, #0]
90024186:	3302      	addmi	r3, #2
90024188:	6033      	strmi	r3, [r6, #0]
9002418a:	6825      	ldr	r5, [r4, #0]
9002418c:	f015 0506 	ands.w	r5, r5, #6
90024190:	d106      	bne.n	900241a0 <_printf_common+0x48>
90024192:	f104 0a19 	add.w	sl, r4, #25
90024196:	68e3      	ldr	r3, [r4, #12]
90024198:	6832      	ldr	r2, [r6, #0]
9002419a:	1a9b      	subs	r3, r3, r2
9002419c:	42ab      	cmp	r3, r5
9002419e:	dc26      	bgt.n	900241ee <_printf_common+0x96>
900241a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
900241a4:	1e13      	subs	r3, r2, #0
900241a6:	6822      	ldr	r2, [r4, #0]
900241a8:	bf18      	it	ne
900241aa:	2301      	movne	r3, #1
900241ac:	0692      	lsls	r2, r2, #26
900241ae:	d42b      	bmi.n	90024208 <_printf_common+0xb0>
900241b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
900241b4:	4649      	mov	r1, r9
900241b6:	4638      	mov	r0, r7
900241b8:	47c0      	blx	r8
900241ba:	3001      	adds	r0, #1
900241bc:	d01e      	beq.n	900241fc <_printf_common+0xa4>
900241be:	6823      	ldr	r3, [r4, #0]
900241c0:	6922      	ldr	r2, [r4, #16]
900241c2:	f003 0306 	and.w	r3, r3, #6
900241c6:	2b04      	cmp	r3, #4
900241c8:	bf02      	ittt	eq
900241ca:	68e5      	ldreq	r5, [r4, #12]
900241cc:	6833      	ldreq	r3, [r6, #0]
900241ce:	1aed      	subeq	r5, r5, r3
900241d0:	68a3      	ldr	r3, [r4, #8]
900241d2:	bf0c      	ite	eq
900241d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
900241d8:	2500      	movne	r5, #0
900241da:	4293      	cmp	r3, r2
900241dc:	bfc4      	itt	gt
900241de:	1a9b      	subgt	r3, r3, r2
900241e0:	18ed      	addgt	r5, r5, r3
900241e2:	2600      	movs	r6, #0
900241e4:	341a      	adds	r4, #26
900241e6:	42b5      	cmp	r5, r6
900241e8:	d11a      	bne.n	90024220 <_printf_common+0xc8>
900241ea:	2000      	movs	r0, #0
900241ec:	e008      	b.n	90024200 <_printf_common+0xa8>
900241ee:	2301      	movs	r3, #1
900241f0:	4652      	mov	r2, sl
900241f2:	4649      	mov	r1, r9
900241f4:	4638      	mov	r0, r7
900241f6:	47c0      	blx	r8
900241f8:	3001      	adds	r0, #1
900241fa:	d103      	bne.n	90024204 <_printf_common+0xac>
900241fc:	f04f 30ff 	mov.w	r0, #4294967295
90024200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90024204:	3501      	adds	r5, #1
90024206:	e7c6      	b.n	90024196 <_printf_common+0x3e>
90024208:	18e1      	adds	r1, r4, r3
9002420a:	1c5a      	adds	r2, r3, #1
9002420c:	2030      	movs	r0, #48	; 0x30
9002420e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
90024212:	4422      	add	r2, r4
90024214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90024218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
9002421c:	3302      	adds	r3, #2
9002421e:	e7c7      	b.n	900241b0 <_printf_common+0x58>
90024220:	2301      	movs	r3, #1
90024222:	4622      	mov	r2, r4
90024224:	4649      	mov	r1, r9
90024226:	4638      	mov	r0, r7
90024228:	47c0      	blx	r8
9002422a:	3001      	adds	r0, #1
9002422c:	d0e6      	beq.n	900241fc <_printf_common+0xa4>
9002422e:	3601      	adds	r6, #1
90024230:	e7d9      	b.n	900241e6 <_printf_common+0x8e>
	...

90024234 <_printf_i>:
90024234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
90024238:	7e0f      	ldrb	r7, [r1, #24]
9002423a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002423c:	2f78      	cmp	r7, #120	; 0x78
9002423e:	4691      	mov	r9, r2
90024240:	4680      	mov	r8, r0
90024242:	460c      	mov	r4, r1
90024244:	469a      	mov	sl, r3
90024246:	f101 0243 	add.w	r2, r1, #67	; 0x43
9002424a:	d807      	bhi.n	9002425c <_printf_i+0x28>
9002424c:	2f62      	cmp	r7, #98	; 0x62
9002424e:	d80a      	bhi.n	90024266 <_printf_i+0x32>
90024250:	2f00      	cmp	r7, #0
90024252:	f000 80d4 	beq.w	900243fe <_printf_i+0x1ca>
90024256:	2f58      	cmp	r7, #88	; 0x58
90024258:	f000 80c0 	beq.w	900243dc <_printf_i+0x1a8>
9002425c:	f104 0542 	add.w	r5, r4, #66	; 0x42
90024260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
90024264:	e03a      	b.n	900242dc <_printf_i+0xa8>
90024266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
9002426a:	2b15      	cmp	r3, #21
9002426c:	d8f6      	bhi.n	9002425c <_printf_i+0x28>
9002426e:	a101      	add	r1, pc, #4	; (adr r1, 90024274 <_printf_i+0x40>)
90024270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
90024274:	900242cd 	.word	0x900242cd
90024278:	900242e1 	.word	0x900242e1
9002427c:	9002425d 	.word	0x9002425d
90024280:	9002425d 	.word	0x9002425d
90024284:	9002425d 	.word	0x9002425d
90024288:	9002425d 	.word	0x9002425d
9002428c:	900242e1 	.word	0x900242e1
90024290:	9002425d 	.word	0x9002425d
90024294:	9002425d 	.word	0x9002425d
90024298:	9002425d 	.word	0x9002425d
9002429c:	9002425d 	.word	0x9002425d
900242a0:	900243e5 	.word	0x900243e5
900242a4:	9002430d 	.word	0x9002430d
900242a8:	9002439f 	.word	0x9002439f
900242ac:	9002425d 	.word	0x9002425d
900242b0:	9002425d 	.word	0x9002425d
900242b4:	90024407 	.word	0x90024407
900242b8:	9002425d 	.word	0x9002425d
900242bc:	9002430d 	.word	0x9002430d
900242c0:	9002425d 	.word	0x9002425d
900242c4:	9002425d 	.word	0x9002425d
900242c8:	900243a7 	.word	0x900243a7
900242cc:	682b      	ldr	r3, [r5, #0]
900242ce:	1d1a      	adds	r2, r3, #4
900242d0:	681b      	ldr	r3, [r3, #0]
900242d2:	602a      	str	r2, [r5, #0]
900242d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
900242d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
900242dc:	2301      	movs	r3, #1
900242de:	e09f      	b.n	90024420 <_printf_i+0x1ec>
900242e0:	6820      	ldr	r0, [r4, #0]
900242e2:	682b      	ldr	r3, [r5, #0]
900242e4:	0607      	lsls	r7, r0, #24
900242e6:	f103 0104 	add.w	r1, r3, #4
900242ea:	6029      	str	r1, [r5, #0]
900242ec:	d501      	bpl.n	900242f2 <_printf_i+0xbe>
900242ee:	681e      	ldr	r6, [r3, #0]
900242f0:	e003      	b.n	900242fa <_printf_i+0xc6>
900242f2:	0646      	lsls	r6, r0, #25
900242f4:	d5fb      	bpl.n	900242ee <_printf_i+0xba>
900242f6:	f9b3 6000 	ldrsh.w	r6, [r3]
900242fa:	2e00      	cmp	r6, #0
900242fc:	da03      	bge.n	90024306 <_printf_i+0xd2>
900242fe:	232d      	movs	r3, #45	; 0x2d
90024300:	4276      	negs	r6, r6
90024302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90024306:	485a      	ldr	r0, [pc, #360]	; (90024470 <_printf_i+0x23c>)
90024308:	230a      	movs	r3, #10
9002430a:	e012      	b.n	90024332 <_printf_i+0xfe>
9002430c:	682b      	ldr	r3, [r5, #0]
9002430e:	6820      	ldr	r0, [r4, #0]
90024310:	1d19      	adds	r1, r3, #4
90024312:	6029      	str	r1, [r5, #0]
90024314:	0605      	lsls	r5, r0, #24
90024316:	d501      	bpl.n	9002431c <_printf_i+0xe8>
90024318:	681e      	ldr	r6, [r3, #0]
9002431a:	e002      	b.n	90024322 <_printf_i+0xee>
9002431c:	0641      	lsls	r1, r0, #25
9002431e:	d5fb      	bpl.n	90024318 <_printf_i+0xe4>
90024320:	881e      	ldrh	r6, [r3, #0]
90024322:	4853      	ldr	r0, [pc, #332]	; (90024470 <_printf_i+0x23c>)
90024324:	2f6f      	cmp	r7, #111	; 0x6f
90024326:	bf0c      	ite	eq
90024328:	2308      	moveq	r3, #8
9002432a:	230a      	movne	r3, #10
9002432c:	2100      	movs	r1, #0
9002432e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
90024332:	6865      	ldr	r5, [r4, #4]
90024334:	60a5      	str	r5, [r4, #8]
90024336:	2d00      	cmp	r5, #0
90024338:	bfa2      	ittt	ge
9002433a:	6821      	ldrge	r1, [r4, #0]
9002433c:	f021 0104 	bicge.w	r1, r1, #4
90024340:	6021      	strge	r1, [r4, #0]
90024342:	b90e      	cbnz	r6, 90024348 <_printf_i+0x114>
90024344:	2d00      	cmp	r5, #0
90024346:	d04b      	beq.n	900243e0 <_printf_i+0x1ac>
90024348:	4615      	mov	r5, r2
9002434a:	fbb6 f1f3 	udiv	r1, r6, r3
9002434e:	fb03 6711 	mls	r7, r3, r1, r6
90024352:	5dc7      	ldrb	r7, [r0, r7]
90024354:	f805 7d01 	strb.w	r7, [r5, #-1]!
90024358:	4637      	mov	r7, r6
9002435a:	42bb      	cmp	r3, r7
9002435c:	460e      	mov	r6, r1
9002435e:	d9f4      	bls.n	9002434a <_printf_i+0x116>
90024360:	2b08      	cmp	r3, #8
90024362:	d10b      	bne.n	9002437c <_printf_i+0x148>
90024364:	6823      	ldr	r3, [r4, #0]
90024366:	07de      	lsls	r6, r3, #31
90024368:	d508      	bpl.n	9002437c <_printf_i+0x148>
9002436a:	6923      	ldr	r3, [r4, #16]
9002436c:	6861      	ldr	r1, [r4, #4]
9002436e:	4299      	cmp	r1, r3
90024370:	bfde      	ittt	le
90024372:	2330      	movle	r3, #48	; 0x30
90024374:	f805 3c01 	strble.w	r3, [r5, #-1]
90024378:	f105 35ff 	addle.w	r5, r5, #4294967295
9002437c:	1b52      	subs	r2, r2, r5
9002437e:	6122      	str	r2, [r4, #16]
90024380:	f8cd a000 	str.w	sl, [sp]
90024384:	464b      	mov	r3, r9
90024386:	aa03      	add	r2, sp, #12
90024388:	4621      	mov	r1, r4
9002438a:	4640      	mov	r0, r8
9002438c:	f7ff fee4 	bl	90024158 <_printf_common>
90024390:	3001      	adds	r0, #1
90024392:	d14a      	bne.n	9002442a <_printf_i+0x1f6>
90024394:	f04f 30ff 	mov.w	r0, #4294967295
90024398:	b004      	add	sp, #16
9002439a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002439e:	6823      	ldr	r3, [r4, #0]
900243a0:	f043 0320 	orr.w	r3, r3, #32
900243a4:	6023      	str	r3, [r4, #0]
900243a6:	4833      	ldr	r0, [pc, #204]	; (90024474 <_printf_i+0x240>)
900243a8:	2778      	movs	r7, #120	; 0x78
900243aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
900243ae:	6823      	ldr	r3, [r4, #0]
900243b0:	6829      	ldr	r1, [r5, #0]
900243b2:	061f      	lsls	r7, r3, #24
900243b4:	f851 6b04 	ldr.w	r6, [r1], #4
900243b8:	d402      	bmi.n	900243c0 <_printf_i+0x18c>
900243ba:	065f      	lsls	r7, r3, #25
900243bc:	bf48      	it	mi
900243be:	b2b6      	uxthmi	r6, r6
900243c0:	07df      	lsls	r7, r3, #31
900243c2:	bf48      	it	mi
900243c4:	f043 0320 	orrmi.w	r3, r3, #32
900243c8:	6029      	str	r1, [r5, #0]
900243ca:	bf48      	it	mi
900243cc:	6023      	strmi	r3, [r4, #0]
900243ce:	b91e      	cbnz	r6, 900243d8 <_printf_i+0x1a4>
900243d0:	6823      	ldr	r3, [r4, #0]
900243d2:	f023 0320 	bic.w	r3, r3, #32
900243d6:	6023      	str	r3, [r4, #0]
900243d8:	2310      	movs	r3, #16
900243da:	e7a7      	b.n	9002432c <_printf_i+0xf8>
900243dc:	4824      	ldr	r0, [pc, #144]	; (90024470 <_printf_i+0x23c>)
900243de:	e7e4      	b.n	900243aa <_printf_i+0x176>
900243e0:	4615      	mov	r5, r2
900243e2:	e7bd      	b.n	90024360 <_printf_i+0x12c>
900243e4:	682b      	ldr	r3, [r5, #0]
900243e6:	6826      	ldr	r6, [r4, #0]
900243e8:	6961      	ldr	r1, [r4, #20]
900243ea:	1d18      	adds	r0, r3, #4
900243ec:	6028      	str	r0, [r5, #0]
900243ee:	0635      	lsls	r5, r6, #24
900243f0:	681b      	ldr	r3, [r3, #0]
900243f2:	d501      	bpl.n	900243f8 <_printf_i+0x1c4>
900243f4:	6019      	str	r1, [r3, #0]
900243f6:	e002      	b.n	900243fe <_printf_i+0x1ca>
900243f8:	0670      	lsls	r0, r6, #25
900243fa:	d5fb      	bpl.n	900243f4 <_printf_i+0x1c0>
900243fc:	8019      	strh	r1, [r3, #0]
900243fe:	2300      	movs	r3, #0
90024400:	6123      	str	r3, [r4, #16]
90024402:	4615      	mov	r5, r2
90024404:	e7bc      	b.n	90024380 <_printf_i+0x14c>
90024406:	682b      	ldr	r3, [r5, #0]
90024408:	1d1a      	adds	r2, r3, #4
9002440a:	602a      	str	r2, [r5, #0]
9002440c:	681d      	ldr	r5, [r3, #0]
9002440e:	6862      	ldr	r2, [r4, #4]
90024410:	2100      	movs	r1, #0
90024412:	4628      	mov	r0, r5
90024414:	f7db ff64 	bl	900002e0 <memchr>
90024418:	b108      	cbz	r0, 9002441e <_printf_i+0x1ea>
9002441a:	1b40      	subs	r0, r0, r5
9002441c:	6060      	str	r0, [r4, #4]
9002441e:	6863      	ldr	r3, [r4, #4]
90024420:	6123      	str	r3, [r4, #16]
90024422:	2300      	movs	r3, #0
90024424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90024428:	e7aa      	b.n	90024380 <_printf_i+0x14c>
9002442a:	6923      	ldr	r3, [r4, #16]
9002442c:	462a      	mov	r2, r5
9002442e:	4649      	mov	r1, r9
90024430:	4640      	mov	r0, r8
90024432:	47d0      	blx	sl
90024434:	3001      	adds	r0, #1
90024436:	d0ad      	beq.n	90024394 <_printf_i+0x160>
90024438:	6823      	ldr	r3, [r4, #0]
9002443a:	079b      	lsls	r3, r3, #30
9002443c:	d413      	bmi.n	90024466 <_printf_i+0x232>
9002443e:	68e0      	ldr	r0, [r4, #12]
90024440:	9b03      	ldr	r3, [sp, #12]
90024442:	4298      	cmp	r0, r3
90024444:	bfb8      	it	lt
90024446:	4618      	movlt	r0, r3
90024448:	e7a6      	b.n	90024398 <_printf_i+0x164>
9002444a:	2301      	movs	r3, #1
9002444c:	4632      	mov	r2, r6
9002444e:	4649      	mov	r1, r9
90024450:	4640      	mov	r0, r8
90024452:	47d0      	blx	sl
90024454:	3001      	adds	r0, #1
90024456:	d09d      	beq.n	90024394 <_printf_i+0x160>
90024458:	3501      	adds	r5, #1
9002445a:	68e3      	ldr	r3, [r4, #12]
9002445c:	9903      	ldr	r1, [sp, #12]
9002445e:	1a5b      	subs	r3, r3, r1
90024460:	42ab      	cmp	r3, r5
90024462:	dcf2      	bgt.n	9002444a <_printf_i+0x216>
90024464:	e7eb      	b.n	9002443e <_printf_i+0x20a>
90024466:	2500      	movs	r5, #0
90024468:	f104 0619 	add.w	r6, r4, #25
9002446c:	e7f5      	b.n	9002445a <_printf_i+0x226>
9002446e:	bf00      	nop
90024470:	90027b89 	.word	0x90027b89
90024474:	90027b9a 	.word	0x90027b9a

90024478 <__sflush_r>:
90024478:	898a      	ldrh	r2, [r1, #12]
9002447a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9002447e:	4605      	mov	r5, r0
90024480:	0710      	lsls	r0, r2, #28
90024482:	460c      	mov	r4, r1
90024484:	d458      	bmi.n	90024538 <__sflush_r+0xc0>
90024486:	684b      	ldr	r3, [r1, #4]
90024488:	2b00      	cmp	r3, #0
9002448a:	dc05      	bgt.n	90024498 <__sflush_r+0x20>
9002448c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
9002448e:	2b00      	cmp	r3, #0
90024490:	dc02      	bgt.n	90024498 <__sflush_r+0x20>
90024492:	2000      	movs	r0, #0
90024494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90024498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9002449a:	2e00      	cmp	r6, #0
9002449c:	d0f9      	beq.n	90024492 <__sflush_r+0x1a>
9002449e:	2300      	movs	r3, #0
900244a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
900244a4:	682f      	ldr	r7, [r5, #0]
900244a6:	6a21      	ldr	r1, [r4, #32]
900244a8:	602b      	str	r3, [r5, #0]
900244aa:	d032      	beq.n	90024512 <__sflush_r+0x9a>
900244ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
900244ae:	89a3      	ldrh	r3, [r4, #12]
900244b0:	075a      	lsls	r2, r3, #29
900244b2:	d505      	bpl.n	900244c0 <__sflush_r+0x48>
900244b4:	6863      	ldr	r3, [r4, #4]
900244b6:	1ac0      	subs	r0, r0, r3
900244b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
900244ba:	b10b      	cbz	r3, 900244c0 <__sflush_r+0x48>
900244bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
900244be:	1ac0      	subs	r0, r0, r3
900244c0:	2300      	movs	r3, #0
900244c2:	4602      	mov	r2, r0
900244c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
900244c6:	6a21      	ldr	r1, [r4, #32]
900244c8:	4628      	mov	r0, r5
900244ca:	47b0      	blx	r6
900244cc:	1c43      	adds	r3, r0, #1
900244ce:	89a3      	ldrh	r3, [r4, #12]
900244d0:	d106      	bne.n	900244e0 <__sflush_r+0x68>
900244d2:	6829      	ldr	r1, [r5, #0]
900244d4:	291d      	cmp	r1, #29
900244d6:	d82b      	bhi.n	90024530 <__sflush_r+0xb8>
900244d8:	4a29      	ldr	r2, [pc, #164]	; (90024580 <__sflush_r+0x108>)
900244da:	410a      	asrs	r2, r1
900244dc:	07d6      	lsls	r6, r2, #31
900244de:	d427      	bmi.n	90024530 <__sflush_r+0xb8>
900244e0:	2200      	movs	r2, #0
900244e2:	6062      	str	r2, [r4, #4]
900244e4:	04d9      	lsls	r1, r3, #19
900244e6:	6922      	ldr	r2, [r4, #16]
900244e8:	6022      	str	r2, [r4, #0]
900244ea:	d504      	bpl.n	900244f6 <__sflush_r+0x7e>
900244ec:	1c42      	adds	r2, r0, #1
900244ee:	d101      	bne.n	900244f4 <__sflush_r+0x7c>
900244f0:	682b      	ldr	r3, [r5, #0]
900244f2:	b903      	cbnz	r3, 900244f6 <__sflush_r+0x7e>
900244f4:	6560      	str	r0, [r4, #84]	; 0x54
900244f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
900244f8:	602f      	str	r7, [r5, #0]
900244fa:	2900      	cmp	r1, #0
900244fc:	d0c9      	beq.n	90024492 <__sflush_r+0x1a>
900244fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
90024502:	4299      	cmp	r1, r3
90024504:	d002      	beq.n	9002450c <__sflush_r+0x94>
90024506:	4628      	mov	r0, r5
90024508:	f7ff fc96 	bl	90023e38 <_free_r>
9002450c:	2000      	movs	r0, #0
9002450e:	6360      	str	r0, [r4, #52]	; 0x34
90024510:	e7c0      	b.n	90024494 <__sflush_r+0x1c>
90024512:	2301      	movs	r3, #1
90024514:	4628      	mov	r0, r5
90024516:	47b0      	blx	r6
90024518:	1c41      	adds	r1, r0, #1
9002451a:	d1c8      	bne.n	900244ae <__sflush_r+0x36>
9002451c:	682b      	ldr	r3, [r5, #0]
9002451e:	2b00      	cmp	r3, #0
90024520:	d0c5      	beq.n	900244ae <__sflush_r+0x36>
90024522:	2b1d      	cmp	r3, #29
90024524:	d001      	beq.n	9002452a <__sflush_r+0xb2>
90024526:	2b16      	cmp	r3, #22
90024528:	d101      	bne.n	9002452e <__sflush_r+0xb6>
9002452a:	602f      	str	r7, [r5, #0]
9002452c:	e7b1      	b.n	90024492 <__sflush_r+0x1a>
9002452e:	89a3      	ldrh	r3, [r4, #12]
90024530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90024534:	81a3      	strh	r3, [r4, #12]
90024536:	e7ad      	b.n	90024494 <__sflush_r+0x1c>
90024538:	690f      	ldr	r7, [r1, #16]
9002453a:	2f00      	cmp	r7, #0
9002453c:	d0a9      	beq.n	90024492 <__sflush_r+0x1a>
9002453e:	0793      	lsls	r3, r2, #30
90024540:	680e      	ldr	r6, [r1, #0]
90024542:	bf08      	it	eq
90024544:	694b      	ldreq	r3, [r1, #20]
90024546:	600f      	str	r7, [r1, #0]
90024548:	bf18      	it	ne
9002454a:	2300      	movne	r3, #0
9002454c:	eba6 0807 	sub.w	r8, r6, r7
90024550:	608b      	str	r3, [r1, #8]
90024552:	f1b8 0f00 	cmp.w	r8, #0
90024556:	dd9c      	ble.n	90024492 <__sflush_r+0x1a>
90024558:	6a21      	ldr	r1, [r4, #32]
9002455a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
9002455c:	4643      	mov	r3, r8
9002455e:	463a      	mov	r2, r7
90024560:	4628      	mov	r0, r5
90024562:	47b0      	blx	r6
90024564:	2800      	cmp	r0, #0
90024566:	dc06      	bgt.n	90024576 <__sflush_r+0xfe>
90024568:	89a3      	ldrh	r3, [r4, #12]
9002456a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
9002456e:	81a3      	strh	r3, [r4, #12]
90024570:	f04f 30ff 	mov.w	r0, #4294967295
90024574:	e78e      	b.n	90024494 <__sflush_r+0x1c>
90024576:	4407      	add	r7, r0
90024578:	eba8 0800 	sub.w	r8, r8, r0
9002457c:	e7e9      	b.n	90024552 <__sflush_r+0xda>
9002457e:	bf00      	nop
90024580:	dfbffffe 	.word	0xdfbffffe

90024584 <_fflush_r>:
90024584:	b538      	push	{r3, r4, r5, lr}
90024586:	690b      	ldr	r3, [r1, #16]
90024588:	4605      	mov	r5, r0
9002458a:	460c      	mov	r4, r1
9002458c:	b913      	cbnz	r3, 90024594 <_fflush_r+0x10>
9002458e:	2500      	movs	r5, #0
90024590:	4628      	mov	r0, r5
90024592:	bd38      	pop	{r3, r4, r5, pc}
90024594:	b118      	cbz	r0, 9002459e <_fflush_r+0x1a>
90024596:	6a03      	ldr	r3, [r0, #32]
90024598:	b90b      	cbnz	r3, 9002459e <_fflush_r+0x1a>
9002459a:	f7ff f9df 	bl	9002395c <__sinit>
9002459e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
900245a2:	2b00      	cmp	r3, #0
900245a4:	d0f3      	beq.n	9002458e <_fflush_r+0xa>
900245a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
900245a8:	07d0      	lsls	r0, r2, #31
900245aa:	d404      	bmi.n	900245b6 <_fflush_r+0x32>
900245ac:	0599      	lsls	r1, r3, #22
900245ae:	d402      	bmi.n	900245b6 <_fflush_r+0x32>
900245b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
900245b2:	f7ff fbd2 	bl	90023d5a <__retarget_lock_acquire_recursive>
900245b6:	4628      	mov	r0, r5
900245b8:	4621      	mov	r1, r4
900245ba:	f7ff ff5d 	bl	90024478 <__sflush_r>
900245be:	6e63      	ldr	r3, [r4, #100]	; 0x64
900245c0:	07da      	lsls	r2, r3, #31
900245c2:	4605      	mov	r5, r0
900245c4:	d4e4      	bmi.n	90024590 <_fflush_r+0xc>
900245c6:	89a3      	ldrh	r3, [r4, #12]
900245c8:	059b      	lsls	r3, r3, #22
900245ca:	d4e1      	bmi.n	90024590 <_fflush_r+0xc>
900245cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
900245ce:	f7ff fbc5 	bl	90023d5c <__retarget_lock_release_recursive>
900245d2:	e7dd      	b.n	90024590 <_fflush_r+0xc>

900245d4 <__swhatbuf_r>:
900245d4:	b570      	push	{r4, r5, r6, lr}
900245d6:	460c      	mov	r4, r1
900245d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900245dc:	2900      	cmp	r1, #0
900245de:	b096      	sub	sp, #88	; 0x58
900245e0:	4615      	mov	r5, r2
900245e2:	461e      	mov	r6, r3
900245e4:	da0d      	bge.n	90024602 <__swhatbuf_r+0x2e>
900245e6:	89a3      	ldrh	r3, [r4, #12]
900245e8:	f013 0f80 	tst.w	r3, #128	; 0x80
900245ec:	f04f 0100 	mov.w	r1, #0
900245f0:	bf0c      	ite	eq
900245f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
900245f6:	2340      	movne	r3, #64	; 0x40
900245f8:	2000      	movs	r0, #0
900245fa:	6031      	str	r1, [r6, #0]
900245fc:	602b      	str	r3, [r5, #0]
900245fe:	b016      	add	sp, #88	; 0x58
90024600:	bd70      	pop	{r4, r5, r6, pc}
90024602:	466a      	mov	r2, sp
90024604:	f000 f848 	bl	90024698 <_fstat_r>
90024608:	2800      	cmp	r0, #0
9002460a:	dbec      	blt.n	900245e6 <__swhatbuf_r+0x12>
9002460c:	9901      	ldr	r1, [sp, #4]
9002460e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
90024612:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
90024616:	4259      	negs	r1, r3
90024618:	4159      	adcs	r1, r3
9002461a:	f44f 6380 	mov.w	r3, #1024	; 0x400
9002461e:	e7eb      	b.n	900245f8 <__swhatbuf_r+0x24>

90024620 <__smakebuf_r>:
90024620:	898b      	ldrh	r3, [r1, #12]
90024622:	b573      	push	{r0, r1, r4, r5, r6, lr}
90024624:	079d      	lsls	r5, r3, #30
90024626:	4606      	mov	r6, r0
90024628:	460c      	mov	r4, r1
9002462a:	d507      	bpl.n	9002463c <__smakebuf_r+0x1c>
9002462c:	f104 0347 	add.w	r3, r4, #71	; 0x47
90024630:	6023      	str	r3, [r4, #0]
90024632:	6123      	str	r3, [r4, #16]
90024634:	2301      	movs	r3, #1
90024636:	6163      	str	r3, [r4, #20]
90024638:	b002      	add	sp, #8
9002463a:	bd70      	pop	{r4, r5, r6, pc}
9002463c:	ab01      	add	r3, sp, #4
9002463e:	466a      	mov	r2, sp
90024640:	f7ff ffc8 	bl	900245d4 <__swhatbuf_r>
90024644:	9900      	ldr	r1, [sp, #0]
90024646:	4605      	mov	r5, r0
90024648:	4630      	mov	r0, r6
9002464a:	f7ff f861 	bl	90023710 <_malloc_r>
9002464e:	b948      	cbnz	r0, 90024664 <__smakebuf_r+0x44>
90024650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90024654:	059a      	lsls	r2, r3, #22
90024656:	d4ef      	bmi.n	90024638 <__smakebuf_r+0x18>
90024658:	f023 0303 	bic.w	r3, r3, #3
9002465c:	f043 0302 	orr.w	r3, r3, #2
90024660:	81a3      	strh	r3, [r4, #12]
90024662:	e7e3      	b.n	9002462c <__smakebuf_r+0xc>
90024664:	89a3      	ldrh	r3, [r4, #12]
90024666:	6020      	str	r0, [r4, #0]
90024668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9002466c:	81a3      	strh	r3, [r4, #12]
9002466e:	9b00      	ldr	r3, [sp, #0]
90024670:	6163      	str	r3, [r4, #20]
90024672:	9b01      	ldr	r3, [sp, #4]
90024674:	6120      	str	r0, [r4, #16]
90024676:	b15b      	cbz	r3, 90024690 <__smakebuf_r+0x70>
90024678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002467c:	4630      	mov	r0, r6
9002467e:	f000 f81d 	bl	900246bc <_isatty_r>
90024682:	b128      	cbz	r0, 90024690 <__smakebuf_r+0x70>
90024684:	89a3      	ldrh	r3, [r4, #12]
90024686:	f023 0303 	bic.w	r3, r3, #3
9002468a:	f043 0301 	orr.w	r3, r3, #1
9002468e:	81a3      	strh	r3, [r4, #12]
90024690:	89a3      	ldrh	r3, [r4, #12]
90024692:	431d      	orrs	r5, r3
90024694:	81a5      	strh	r5, [r4, #12]
90024696:	e7cf      	b.n	90024638 <__smakebuf_r+0x18>

90024698 <_fstat_r>:
90024698:	b538      	push	{r3, r4, r5, lr}
9002469a:	4d07      	ldr	r5, [pc, #28]	; (900246b8 <_fstat_r+0x20>)
9002469c:	2300      	movs	r3, #0
9002469e:	4604      	mov	r4, r0
900246a0:	4608      	mov	r0, r1
900246a2:	4611      	mov	r1, r2
900246a4:	602b      	str	r3, [r5, #0]
900246a6:	f7e0 fb45 	bl	90004d34 <_fstat>
900246aa:	1c43      	adds	r3, r0, #1
900246ac:	d102      	bne.n	900246b4 <_fstat_r+0x1c>
900246ae:	682b      	ldr	r3, [r5, #0]
900246b0:	b103      	cbz	r3, 900246b4 <_fstat_r+0x1c>
900246b2:	6023      	str	r3, [r4, #0]
900246b4:	bd38      	pop	{r3, r4, r5, pc}
900246b6:	bf00      	nop
900246b8:	2402669c 	.word	0x2402669c

900246bc <_isatty_r>:
900246bc:	b538      	push	{r3, r4, r5, lr}
900246be:	4d06      	ldr	r5, [pc, #24]	; (900246d8 <_isatty_r+0x1c>)
900246c0:	2300      	movs	r3, #0
900246c2:	4604      	mov	r4, r0
900246c4:	4608      	mov	r0, r1
900246c6:	602b      	str	r3, [r5, #0]
900246c8:	f7e0 fb3a 	bl	90004d40 <_isatty>
900246cc:	1c43      	adds	r3, r0, #1
900246ce:	d102      	bne.n	900246d6 <_isatty_r+0x1a>
900246d0:	682b      	ldr	r3, [r5, #0]
900246d2:	b103      	cbz	r3, 900246d6 <_isatty_r+0x1a>
900246d4:	6023      	str	r3, [r4, #0]
900246d6:	bd38      	pop	{r3, r4, r5, pc}
900246d8:	2402669c 	.word	0x2402669c

900246dc <_init>:
900246dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900246de:	bf00      	nop
900246e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
900246e2:	bc08      	pop	{r3}
900246e4:	469e      	mov	lr, r3
900246e6:	4770      	bx	lr

900246e8 <_fini>:
900246e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900246ea:	bf00      	nop
900246ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
900246ee:	bc08      	pop	{r3}
900246f0:	469e      	mov	lr, r3
900246f2:	4770      	bx	lr
